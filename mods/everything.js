//fireColor: ["#34eb67", "#5ceb34"],

// buttonGlow: "#87fff9"

/*worldgentypes.nickel = {
	layers: [
		[0, "nickel"],
	]
};*/







elements.gas_bomb = {
    color: "#524c41",
    behavior: [
        "XX|M1 AND SW%33,EX:10%1|XX",
        "M1 AND SW%33|XX|M1 AND SW%33",
        "M2|M1 AND SW%33 AND EX:10%1|M2",
    ],
    category: "weapons",
    state: "solid",
    ignore: ["gas_bomb","cloner","wall"],
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
    
};






elements.molten_iron.emit = true;


elements.molten_gold.emit = true;


elements.molten_nickel.emit = true;


elements.molten_lead.emit = true;


elements.molten_tungsten.emit = true;


elements.molten_copper.emit = true;


elements.molten_tin.emit = true;


elements.molten_zinc.emit = true;

































































elements.iron_golem_head = {
    hardness: 0.5,
    color: ["#cbcdcd","#bdbdbd"],
    category: "states",
    hidden: true,
    density: 1380,
    state: "solid",
    conduct: .05,
    temp: 39,
    tempHigh: 1538,
    stateHigh: "molten_iron",
    tempLow: -180,
    stateLow: "frozen_meat",
    breakInto: ["blood","meat","bone","metal_scrap"],
    forceSaveColor: true,
    reactions: {
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "meat": { elem2:null, chance:0.1 },
        "cooked_meat": { elem2:null, chance:0.1 },
        "cured_meat": { elem2:null, chance:0.1 },
        "sugar": { elem2:null, chance:0.1 },
        "broth": { elem2:null, chance:0.2 },
        "yolk": { elem2:null, chance:0.1 },
        "hard_yolk": { elem2:null, chance:0.1 },
        "dough": { elem2:null, chance:0.1 },
        "batter": { elem2:null, chance:0.2 },
        "butter": { elem2:null, chance:0.1 },
        "melted_butter": { elem2:null, chance:0.2 },
        "chocolate": { elem2:null, chance:0.2 },
        "melted_chocolate": { elem2:null, chance:0.3 },
        "grape": { elem2:null, chance:0.1 },
        "tomato": { elem2:null, chance:0.1 },
        "herb": { elem2:null, chance:0.1 },
        "lettuce": { elem2:null, chance:0.1 },
        "corn": { elem2:null, chance:0.1 },
        "popcorn": { elem2:null, chance:0.15 },
        "potato": { elem2:null, chance:0.1 },
        "baked_potato": { elem2:null, chance:0.15 },
        "bread": { elem2:null, chance:0.1 },
        "toast": { elem2:null, chance:0.1 },
        "gingerbread": { elem2:null, chance:0.1 },
        "baked_batter": { elem2:null, chance:0.2 },
        "wheat": { elem2:null, chance:0.1 },
        "candy": { elem2:null, chance:0.1 },
        "yogurt": { elem2:null, chance:0.2 },
        "frozen_yogurt": { elem2:null, chance:0.1 },
        "ice_cream": { elem2:null, chance:0.2 },
        "beans": { elem2:[null,null,null,null,null,null,null,null,"stench"], chance:0.2 },
        "tea": { elem2:null, chance:0.2 },
        "coffee": { elem2:null, chance:0.2 },
        "milk": { elem2:null, chance:0.2 },
        "cream": { elem2:null, chance:0.2 },
        "soda": { elem2:null, chance:0.2 },
        "chocolate_milk": { elem2:null, chance:0.2 },
        "fruit_milk": { elem2:null, chance:0.2 },
        "pilk": { elem2:null, chance:0.2 },
        "eggnog": { elem2:null, chance:0.2 },
        "juice": { elem2:null, chance:0.2 },
        "cheese": { elem2:null, chance:0.1 },
        "melted_cheese": { elem2:null, chance:0.2 },
        "alcohol": { elem2:null, chance:0.2 },
        "antidote": { elem2:null, chance:0.2 },
        "honey": { elem2:null, chance:0.2 },
        "caramel": { elem2:null, chance:0.2 },
        "molasses": { elem2:null, chance:0.05 },
        "ketchup": { elem2:null, chance:0.1 },
        "pumpkin_seed": { elem2:null, chance:0.1 },
        "nut": { elem2:null, chance:0.1 },
        "nut_meat": { elem2:null, chance:0.1 },
        "nut_butter": { elem2:null, chance:0.1 },
        "nut_milk": { elem2:null, chance:0.2 },
        "jelly": { elem2:null, chance:0.2 },
        "mayo": { elem2:null, chance:0.2 },
        "mashed_potato": { elem2:null, chance:0.2 },
        "sauce": { elem2:null, chance:0.2 },
        "pickle": { elem2:null, chance:0.1 },
        "water": { elem2:"bubble", attr2:{"clone":"water"}, chance:0.001 },
        "salt_water": { elem2:"bubble", attr2:{"clone":"salt_water"}, chance:0.001 },
        "pool_water": { elem2:"bubble", attr2:{"clone":"pool_water"}, chance:0.001 },
    },
    properties: {
        dead: false
    },
    tick: function(pixel) {
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
                return
            }
        }
  
        // Find the  body
        if (!isEmpty(pixel.x, pixel.y+1, true) && pixelMap[pixel.x][pixel.y+1].element == "iron_golem_body") {
            var body = pixelMap[pixel.x][pixel.y+1];
            if (body.dead) { // If body is dead, kill head
                pixel.dead = body.dead;
            }
        }
        else { var body = null }
  
        if (tryMove(pixel, pixel.x, pixel.y+1)) {
            // create blood if severed 10% chance
            if (isEmpty(pixel.x, pixel.y+1) && !pixel.dead && Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y+1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        // homeostasis
        if (pixel.temp > 40) { pixel.temp -= 1; }
        else if (pixel.temp < 40) { pixel.temp += 1; }
    }
  };
  
  elements.iron_golem_body = {
    hardness: 0.5,
    color: ["#cbcdcd","#bdbdbd"],
    category: "states",
    hidden: true,
    density: 1370,
    state: "solid",
    conduct: .25,
    temp: 39,
    tempHigh: 1538,
    stateHigh: "molten_iron",
    tempLow: -210,
    stateLow: "frozen_meat",
    breakInto: ["blood","meat","bone","metal_scrap","radiation","fallout",],
    forceSaveColor: true,
    reactions: {
        "egg": { elem2:"yolk", chance:0.5, oneway:true },
        "grape": { elem2:"juice", chance:0.5, color2:"#291824", oneway:true },
        "ant": { elem2:"dead_bug", chance:0.05, oneway:true },
        "fly": { elem2:"dead_bug", oneway:true },
        "firefly": { elem2:"dead_bug", oneway:true },
        "bee": { elem2:"dead_bug", oneway:true },
        "flea": { elem2:"dead_bug", oneway:true },
        "termite": { elem2:"dead_bug", oneway:true },
        "worm": { elem2:"slime", chance:0.05, oneway:true },
        "stink_bug": { elem2:"stench", oneway:true },
        "grass_seed": { elem2:null, chance:0.05 },
        "gold_coin": { elem2:null, chance:0.05 },
        "diamond": { elem2:null, chance:0.05 },
        
    },
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (tryMove(pixel, pixel.x, pixel.y+1)) { // Fall
            if (!isEmpty(pixel.x, pixel.y-2, true)) { // Drag head down
                var headpixel = pixelMap[pixel.x][pixel.y-2];
                if (headpixel.element == "iron_golem_head") {
                    if (isEmpty(pixel.x, pixel.y-1)) {
                        movePixel(pixelMap[pixel.x][pixel.y-2], pixel.x, pixel.y-1);
                    }
                    else {
                        swapPixels(pixelMap[pixel.x][pixel.y-2], pixelMap[pixel.x][pixel.y-1]);
                    }
                }
            }
        }
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
            }
            return
        }
  
        // Find the head
        if (!isEmpty(pixel.x, pixel.y-1, true) && pixelMap[pixel.x][pixel.y-1].element == "iron_golem_head") {
            var head = pixelMap[pixel.x][pixel.y-1];
            if (head.dead) { // If head is dead, kill body
                pixel.dead = head.dead;
            }
        }
        else { var head = null }
        if (pixel.burning) {
            pixel.panic += 0.1;
            if (head && pixelTicks-pixel.burnStart > 240) {
                pixel.color = head.color;
            }
        }
        else if (pixel.panic > 0) {
            pixel.panic -= 0.1;
        }
  
        if (isEmpty(pixel.x, pixel.y-1)) {
            // create blood if decapitated 10% chance
            if (Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y-1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        else if (head == null) { return }
        else if (Math.random() < 0.1*(isEmpty(pixel.x, pixel.y+1) ? 1 : pixel.panic+1)) { // Move 10% chance
            var movesToTry = [
                [1*pixel.dir,0],
                [1*pixel.dir,-1],
            ];
            // While movesToTry is not empty, tryMove(pixel, x, y) with a random move, then remove it. if tryMove returns true, break.
            while (movesToTry.length > 0) {
                var move = movesToTry.splice(Math.floor(Math.random() * movesToTry.length), 1)[0];
                if (isEmpty(pixel.x+move[0], pixel.y+move[1]-1)) {
                    var origx = pixel.x+move[0];
                    var origy = pixel.y+move[1];
                    if (tryMove(pixel, pixel.x+move[0], pixel.y+move[1]) && pixel.x===origx && pixel.y===origy) {
                        movePixel(head, head.x+move[0], head.y+move[1]);
                        break;
                    }
                }
            }
            // 15% chance to change direction
            if (Math.random() < 0.15) {
                pixel.dir *= -1;
            }
            // homeostasis
            if (pixel.temp > 39) { pixel.temp -= 1; }
            else if (pixel.temp < 39) { pixel.temp += 1; }
        }
  
    }
  };
  
  elements.iron_golem = {
    color: ["#cbcdcd","#bdbdbd"],
    category: "life",
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (isEmpty(pixel.x, pixel.y+1)) {
            createPixel("iron_golem_body", pixel.x, pixel.y+1);
            pixel.element = "iron_golem_head";
        }
        else if (isEmpty(pixel.x, pixel.y-1)) {
            createPixel("iron_golem_head", pixel.x, pixel.y-1);
            pixelMap[pixel.x][pixel.y-1].color = pixel.color;
            pixel.element = "iron_golem_body";
            pixel.color = pixelColorPick(pixel)
        }
        else {
            deletePixel(pixel.x, pixel.y);
        }
    },
    related: ["iron_golem_body","iron_golem_head"],
    cooldown: defaultCooldown,
    forceSaveColor: true, 
  };
  
  
  
  








  elements.copper_golem_head = {
    hardness: 0.5,
    color: ["#a95232","#be4322","#c76035"],
    category: "states",
    hidden: true,
    density: 1380,
    state: "solid",
    conduct: .05,
    temp: 39,
    tempHigh: 1085,
    stateHigh: "molten_copper",
    tempLow: -180,
    stateLow: "frozen_meat",
    breakInto: ["blood","meat","bone","metal_scrap"],
    forceSaveColor: true,
    reactions: {
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "meat": { elem2:null, chance:0.1 },
        "cooked_meat": { elem2:null, chance:0.1 },
        "cured_meat": { elem2:null, chance:0.1 },
        "sugar": { elem2:null, chance:0.1 },
        "broth": { elem2:null, chance:0.2 },
        "yolk": { elem2:null, chance:0.1 },
        "hard_yolk": { elem2:null, chance:0.1 },
        "dough": { elem2:null, chance:0.1 },
        "batter": { elem2:null, chance:0.2 },
        "butter": { elem2:null, chance:0.1 },
        "melted_butter": { elem2:null, chance:0.2 },
        "chocolate": { elem2:null, chance:0.2 },
        "melted_chocolate": { elem2:null, chance:0.3 },
        "grape": { elem2:null, chance:0.1 },
        "tomato": { elem2:null, chance:0.1 },
        "herb": { elem2:null, chance:0.1 },
        "lettuce": { elem2:null, chance:0.1 },
        "corn": { elem2:null, chance:0.1 },
        "popcorn": { elem2:null, chance:0.15 },
        "potato": { elem2:null, chance:0.1 },
        "baked_potato": { elem2:null, chance:0.15 },
        "bread": { elem2:null, chance:0.1 },
        "toast": { elem2:null, chance:0.1 },
        "gingerbread": { elem2:null, chance:0.1 },
        "baked_batter": { elem2:null, chance:0.2 },
        "wheat": { elem2:null, chance:0.1 },
        "candy": { elem2:null, chance:0.1 },
        "yogurt": { elem2:null, chance:0.2 },
        "frozen_yogurt": { elem2:null, chance:0.1 },
        "ice_cream": { elem2:null, chance:0.2 },
        "beans": { elem2:[null,null,null,null,null,null,null,null,"stench"], chance:0.2 },
        "tea": { elem2:null, chance:0.2 },
        "coffee": { elem2:null, chance:0.2 },
        "milk": { elem2:null, chance:0.2 },
        "cream": { elem2:null, chance:0.2 },
        "soda": { elem2:null, chance:0.2 },
        "chocolate_milk": { elem2:null, chance:0.2 },
        "fruit_milk": { elem2:null, chance:0.2 },
        "pilk": { elem2:null, chance:0.2 },
        "eggnog": { elem2:null, chance:0.2 },
        "juice": { elem2:null, chance:0.2 },
        "cheese": { elem2:null, chance:0.1 },
        "melted_cheese": { elem2:null, chance:0.2 },
        "alcohol": { elem2:null, chance:0.2 },
        "antidote": { elem2:null, chance:0.2 },
        "honey": { elem2:null, chance:0.2 },
        "caramel": { elem2:null, chance:0.2 },
        "molasses": { elem2:null, chance:0.05 },
        "ketchup": { elem2:null, chance:0.1 },
        "pumpkin_seed": { elem2:null, chance:0.1 },
        "nut": { elem2:null, chance:0.1 },
        "nut_meat": { elem2:null, chance:0.1 },
        "nut_butter": { elem2:null, chance:0.1 },
        "nut_milk": { elem2:null, chance:0.2 },
        "jelly": { elem2:null, chance:0.2 },
        "mayo": { elem2:null, chance:0.2 },
        "mashed_potato": { elem2:null, chance:0.2 },
        "sauce": { elem2:null, chance:0.2 },
        "pickle": { elem2:null, chance:0.1 },
        "water": { elem2:"bubble", attr2:{"clone":"water"}, chance:0.001 },
        "salt_water": { elem2:"bubble", attr2:{"clone":"salt_water"}, chance:0.001 },
        "pool_water": { elem2:"bubble", attr2:{"clone":"pool_water"}, chance:0.001 },
    },
    properties: {
        dead: false
    },
    tick: function(pixel) {
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
                return
            }
        }
  
        // Find the  body
        if (!isEmpty(pixel.x, pixel.y+1, true) && pixelMap[pixel.x][pixel.y+1].element == "copper_golem_body") {
            var body = pixelMap[pixel.x][pixel.y+1];
            if (body.dead) { // If body is dead, kill head
                pixel.dead = body.dead;
            }
        }
        else { var body = null }
  
        if (tryMove(pixel, pixel.x, pixel.y+1)) {
            // create blood if severed 10% chance
            if (isEmpty(pixel.x, pixel.y+1) && !pixel.dead && Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y+1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        // homeostasis
        if (pixel.temp > 40) { pixel.temp -= 1; }
        else if (pixel.temp < 40) { pixel.temp += 1; }
    }
  };
  
  elements.copper_golem_body = {
    hardness: 0.5,
    color: ["#a95232","#be4322","#c76035"],
    category: "states",
    hidden: true,
    density: 1370,
    state: "solid",
    conduct: .25,
    temp: 39,
    tempHigh: 1085,
    stateHigh: "molten_copper",
    tempLow: -210,
    stateLow: "frozen_meat",
    breakInto: ["blood","meat","bone","metal_scrap","radiation","fallout",],
    forceSaveColor: true,
    reactions: {
        "egg": { elem2:"yolk", chance:0.5, oneway:true },
        "grape": { elem2:"juice", chance:0.5, color2:"#291824", oneway:true },
        "ant": { elem2:"dead_bug", chance:0.05, oneway:true },
        "fly": { elem2:"dead_bug", oneway:true },
        "firefly": { elem2:"dead_bug", oneway:true },
        "bee": { elem2:"dead_bug", oneway:true },
        "flea": { elem2:"dead_bug", oneway:true },
        "termite": { elem2:"dead_bug", oneway:true },
        "worm": { elem2:"slime", chance:0.05, oneway:true },
        "stink_bug": { elem2:"stench", oneway:true },
        "grass_seed": { elem2:null, chance:0.05 },
        "gold_coin": { elem2:null, chance:0.05 },
        "diamond": { elem2:null, chance:0.05 },
        
    },
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (tryMove(pixel, pixel.x, pixel.y+1)) { // Fall
            if (!isEmpty(pixel.x, pixel.y-2, true)) { // Drag head down
                var headpixel = pixelMap[pixel.x][pixel.y-2];
                if (headpixel.element == "copper_golem_head") {
                    if (isEmpty(pixel.x, pixel.y-1)) {
                        movePixel(pixelMap[pixel.x][pixel.y-2], pixel.x, pixel.y-1);
                    }
                    else {
                        swapPixels(pixelMap[pixel.x][pixel.y-2], pixelMap[pixel.x][pixel.y-1]);
                    }
                }
            }
        }
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
            }
            return
        }
  
        // Find the head
        if (!isEmpty(pixel.x, pixel.y-1, true) && pixelMap[pixel.x][pixel.y-1].element == "copper_golem_head") {
            var head = pixelMap[pixel.x][pixel.y-1];
            if (head.dead) { // If head is dead, kill body
                pixel.dead = head.dead;
            }
        }
        else { var head = null }
        if (pixel.burning) {
            pixel.panic += 0.1;
            if (head && pixelTicks-pixel.burnStart > 240) {
                pixel.color = head.color;
            }
        }
        else if (pixel.panic > 0) {
            pixel.panic -= 0.1;
        }
  
        if (isEmpty(pixel.x, pixel.y-1)) {
            // create blood if decapitated 10% chance
            if (Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y-1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        else if (head == null) { return }
        else if (Math.random() < 0.1*(isEmpty(pixel.x, pixel.y+1) ? 1 : pixel.panic+1)) { // Move 10% chance
            var movesToTry = [
                [1*pixel.dir,0],
                [1*pixel.dir,-1],
            ];
            // While movesToTry is not empty, tryMove(pixel, x, y) with a random move, then remove it. if tryMove returns true, break.
            while (movesToTry.length > 0) {
                var move = movesToTry.splice(Math.floor(Math.random() * movesToTry.length), 1)[0];
                if (isEmpty(pixel.x+move[0], pixel.y+move[1]-1)) {
                    var origx = pixel.x+move[0];
                    var origy = pixel.y+move[1];
                    if (tryMove(pixel, pixel.x+move[0], pixel.y+move[1]) && pixel.x===origx && pixel.y===origy) {
                        movePixel(head, head.x+move[0], head.y+move[1]);
                        break;
                    }
                }
            }
            // 15% chance to change direction
            if (Math.random() < 0.15) {
                pixel.dir *= -1;
            }
            // homeostasis
            if (pixel.temp > 39) { pixel.temp -= 1; }
            else if (pixel.temp < 39) { pixel.temp += 1; }
        }
  
    }
  };
  
  elements.copper_golem = {
    color: ["#a95232","#be4322","#c76035"],
    category: "life",
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (isEmpty(pixel.x, pixel.y+1)) {
            createPixel("copper_golem_body", pixel.x, pixel.y+1);
            pixel.element = "copper_golem_head";
        }
        else if (isEmpty(pixel.x, pixel.y-1)) {
            createPixel("copper_golem_head", pixel.x, pixel.y-1);
            pixelMap[pixel.x][pixel.y-1].color = pixel.color;
            pixel.element = "copper_golem_body";
            pixel.color = pixelColorPick(pixel)
        }
        else {
            deletePixel(pixel.x, pixel.y);
        }
    },
    related: ["copper_golem_body","copper_golem_head"],
    cooldown: defaultCooldown,
    forceSaveColor: true, 
  };
  











  elements.gold_golem_head = {
    hardness: 0.5,
    color: ["#fff0b5","#986a1a","#f0bb62"],
    category: "states",
    hidden: true,
    density: 1380,
    state: "solid",
    conduct: .05,
    temp: 39,
    tempHigh: 1064,
    stateHigh: "molten_gold",
    tempLow: -180,
    stateLow: "frozen_meat",
    breakInto: ["blood","meat","bone","gold_coin"],
    forceSaveColor: true,
    reactions: {
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "meat": { elem2:null, chance:0.1 },
        "cooked_meat": { elem2:null, chance:0.1 },
        "cured_meat": { elem2:null, chance:0.1 },
        "sugar": { elem2:null, chance:0.1 },
        "broth": { elem2:null, chance:0.2 },
        "yolk": { elem2:null, chance:0.1 },
        "hard_yolk": { elem2:null, chance:0.1 },
        "dough": { elem2:null, chance:0.1 },
        "batter": { elem2:null, chance:0.2 },
        "butter": { elem2:null, chance:0.1 },
        "melted_butter": { elem2:null, chance:0.2 },
        "chocolate": { elem2:null, chance:0.2 },
        "melted_chocolate": { elem2:null, chance:0.3 },
        "grape": { elem2:null, chance:0.1 },
        "tomato": { elem2:null, chance:0.1 },
        "herb": { elem2:null, chance:0.1 },
        "lettuce": { elem2:null, chance:0.1 },
        "corn": { elem2:null, chance:0.1 },
        "popcorn": { elem2:null, chance:0.15 },
        "potato": { elem2:null, chance:0.1 },
        "baked_potato": { elem2:null, chance:0.15 },
        "bread": { elem2:null, chance:0.1 },
        "toast": { elem2:null, chance:0.1 },
        "gingerbread": { elem2:null, chance:0.1 },
        "baked_batter": { elem2:null, chance:0.2 },
        "wheat": { elem2:null, chance:0.1 },
        "candy": { elem2:null, chance:0.1 },
        "yogurt": { elem2:null, chance:0.2 },
        "frozen_yogurt": { elem2:null, chance:0.1 },
        "ice_cream": { elem2:null, chance:0.2 },
        "beans": { elem2:[null,null,null,null,null,null,null,null,"stench"], chance:0.2 },
        "tea": { elem2:null, chance:0.2 },
        "coffee": { elem2:null, chance:0.2 },
        "milk": { elem2:null, chance:0.2 },
        "cream": { elem2:null, chance:0.2 },
        "soda": { elem2:null, chance:0.2 },
        "chocolate_milk": { elem2:null, chance:0.2 },
        "fruit_milk": { elem2:null, chance:0.2 },
        "pilk": { elem2:null, chance:0.2 },
        "eggnog": { elem2:null, chance:0.2 },
        "juice": { elem2:null, chance:0.2 },
        "cheese": { elem2:null, chance:0.1 },
        "melted_cheese": { elem2:null, chance:0.2 },
        "alcohol": { elem2:null, chance:0.2 },
        "antidote": { elem2:null, chance:0.2 },
        "honey": { elem2:null, chance:0.2 },
        "caramel": { elem2:null, chance:0.2 },
        "molasses": { elem2:null, chance:0.05 },
        "ketchup": { elem2:null, chance:0.1 },
        "pumpkin_seed": { elem2:null, chance:0.1 },
        "nut": { elem2:null, chance:0.1 },
        "nut_meat": { elem2:null, chance:0.1 },
        "nut_butter": { elem2:null, chance:0.1 },
        "nut_milk": { elem2:null, chance:0.2 },
        "jelly": { elem2:null, chance:0.2 },
        "mayo": { elem2:null, chance:0.2 },
        "mashed_potato": { elem2:null, chance:0.2 },
        "sauce": { elem2:null, chance:0.2 },
        "pickle": { elem2:null, chance:0.1 },
        "water": { elem2:"bubble", attr2:{"clone":"water"}, chance:0.001 },
        "salt_water": { elem2:"bubble", attr2:{"clone":"salt_water"}, chance:0.001 },
        "pool_water": { elem2:"bubble", attr2:{"clone":"pool_water"}, chance:0.001 },
    },
    properties: {
        dead: false
    },
    tick: function(pixel) {
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
                return
            }
        }
  
        // Find the  body
        if (!isEmpty(pixel.x, pixel.y+1, true) && pixelMap[pixel.x][pixel.y+1].element == "gold_golem_body") {
            var body = pixelMap[pixel.x][pixel.y+1];
            if (body.dead) { // If body is dead, kill head
                pixel.dead = body.dead;
            }
        }
        else { var body = null }
  
        if (tryMove(pixel, pixel.x, pixel.y+1)) {
            // create blood if severed 10% chance
            if (isEmpty(pixel.x, pixel.y+1) && !pixel.dead && Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y+1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        // homeostasis
        if (pixel.temp > 40) { pixel.temp -= 1; }
        else if (pixel.temp < 40) { pixel.temp += 1; }
    }
  };
  
  elements.gold_golem_body = {
    hardness: 0.5,
    color: ["#fff0b5","#986a1a","#f0bb62"],
    category: "states",
    hidden: true,
    density: 1370,
    state: "solid",
    conduct: .25,
    temp: 39,
    tempHigh: 1064,
    stateHigh: "molten_gold",
    tempLow: -210,
    stateLow: "frozen_meat",
    breakInto: ["blood","meat","bone","gold_coin","radiation","fallout",],
    forceSaveColor: true,
    reactions: {
        "egg": { elem2:"yolk", chance:0.5, oneway:true },
        "grape": { elem2:"juice", chance:0.5, color2:"#291824", oneway:true },
        "ant": { elem2:"dead_bug", chance:0.05, oneway:true },
        "fly": { elem2:"dead_bug", oneway:true },
        "firefly": { elem2:"dead_bug", oneway:true },
        "bee": { elem2:"dead_bug", oneway:true },
        "flea": { elem2:"dead_bug", oneway:true },
        "termite": { elem2:"dead_bug", oneway:true },
        "worm": { elem2:"slime", chance:0.05, oneway:true },
        "stink_bug": { elem2:"stench", oneway:true },
        "grass_seed": { elem2:null, chance:0.05 },
        "gold_coin": { elem2:null, chance:0.05 },
        "diamond": { elem2:null, chance:0.05 },
        
    },
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (tryMove(pixel, pixel.x, pixel.y+1)) { // Fall
            if (!isEmpty(pixel.x, pixel.y-2, true)) { // Drag head down
                var headpixel = pixelMap[pixel.x][pixel.y-2];
                if (headpixel.element == "gold_golem_head") {
                    if (isEmpty(pixel.x, pixel.y-1)) {
                        movePixel(pixelMap[pixel.x][pixel.y-2], pixel.x, pixel.y-1);
                    }
                    else {
                        swapPixels(pixelMap[pixel.x][pixel.y-2], pixelMap[pixel.x][pixel.y-1]);
                    }
                }
            }
        }
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
            }
            return
        }
  
        // Find the head
        if (!isEmpty(pixel.x, pixel.y-1, true) && pixelMap[pixel.x][pixel.y-1].element == "gold_golem_head") {
            var head = pixelMap[pixel.x][pixel.y-1];
            if (head.dead) { // If head is dead, kill body
                pixel.dead = head.dead;
            }
        }
        else { var head = null }
        if (pixel.burning) {
            pixel.panic += 0.1;
            if (head && pixelTicks-pixel.burnStart > 240) {
                pixel.color = head.color;
            }
        }
        else if (pixel.panic > 0) {
            pixel.panic -= 0.1;
        }
  
        if (isEmpty(pixel.x, pixel.y-1)) {
            // create blood if decapitated 10% chance
            if (Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y-1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        else if (head == null) { return }
        else if (Math.random() < 0.1*(isEmpty(pixel.x, pixel.y+1) ? 1 : pixel.panic+1)) { // Move 10% chance
            var movesToTry = [
                [1*pixel.dir,0],
                [1*pixel.dir,-1],
            ];
            // While movesToTry is not empty, tryMove(pixel, x, y) with a random move, then remove it. if tryMove returns true, break.
            while (movesToTry.length > 0) {
                var move = movesToTry.splice(Math.floor(Math.random() * movesToTry.length), 1)[0];
                if (isEmpty(pixel.x+move[0], pixel.y+move[1]-1)) {
                    var origx = pixel.x+move[0];
                    var origy = pixel.y+move[1];
                    if (tryMove(pixel, pixel.x+move[0], pixel.y+move[1]) && pixel.x===origx && pixel.y===origy) {
                        movePixel(head, head.x+move[0], head.y+move[1]);
                        break;
                    }
                }
            }
            // 15% chance to change direction
            if (Math.random() < 0.15) {
                pixel.dir *= -1;
            }
            // homeostasis
            if (pixel.temp > 39) { pixel.temp -= 1; }
            else if (pixel.temp < 39) { pixel.temp += 1; }
        }
  
    }
  };
  
  elements.gold_golem = {
    color:["#fff0b5","#986a1a","#f0bb62"],
    category: "life",
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (isEmpty(pixel.x, pixel.y+1)) {
            createPixel("gold_golem_body", pixel.x, pixel.y+1);
            pixel.element = "gold_golem_head";
        }
        else if (isEmpty(pixel.x, pixel.y-1)) {
            createPixel("gold_golem_head", pixel.x, pixel.y-1);
            pixelMap[pixel.x][pixel.y-1].color = pixel.color;
            pixel.element = "gold_golem_body";
            pixel.color = pixelColorPick(pixel)
        }
        else {
            deletePixel(pixel.x, pixel.y);
        }
    },
    related: ["gold_golem_body","gold_golem_head"],
    cooldown: defaultCooldown,
    forceSaveColor: true, 
  };
  
  
  
  










































  
  
  
  

































elements.soul_sand = {
    color:  ["#91704d", "#704e2b", "#523517"],
    behavior: behaviors.POWDER,
    reactions: {
        "water":{elem1:"wet_soul_sand",elem2:null},
        "salt_water":{elem1:"wet_soul_sand",elem2:"foam"},
        "sugar_water":{elem1:"wet_soul_sand",elem2:null},
        "seltzer":{elem1:"wet_soul_sand",elem2:null},
        "dirty_water":{elem1:"wet_soul_sand",elem2:null},
        "pool_water":{elem1:"wet_soul_sand",elem2:null},
        "slush":{elem1:"wet_soul_sand",elem2:null},
        "soda":{elem1:"wet_soul_sand",elem2:null},
        "juice":{elem1:"wet_soul_sand",elem2:null},
        "milk":{elem1:"wet_soul_sand",elem2:null},
        "chocolate_milk":{elem1:"wet_soul_sand",elem2:null},
        "fruit_milk":{elem1:"wet_soul_sand",elem2:null},
        "pilk":{elem1:"wet_soul_sand",elem2:null},
        "eggnog":{elem1:"wet_soul_sand",elem2:null},
        "nut_milk":{elem1:"wet_soul_sand",elem2:null},
        "cream":{elem1:"wet_soul_sand",elem2:null},
        "vinegar":{elem1:"wet_soul_sand",elem2:null},
        "blood":{elem1:"wet_soul_sand",elem2:null},
        "vaccine":{elem1:"wet_soul_sand",elem2:null},
        "antibody":{elem1:"wet_soul_sand",elem2:null},
        "infection":{elem1:"wet_soul_sand",elem2:null},
        "poison":{elem1:"wet_soul_sand",elem2:null},
        "antidote":{elem1:"wet_soul_sand",elem2:null},
    },
    tempHigh: 1700,
    stateHigh: "molten_soul_glass",
    category: "land",
    state: "solid",
    density: 1602
};
elements.wet_soul_sand = {
    color: ["#5c452e", "#856d56"],
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "soul_sand": { elem1:"soul_sand", elem2:"wet_soul_sand", chance:0.0005, oneway:true },
        "dirt": { elem1:"soul_sand", elem2:"mud", chance:0.0005, oneway:true },
        "gravel": { elem1:"cement", elem2:null, chance:0.2 },
    },
    tempHigh: 100,
    stateHigh: "packed_soul_sand",
    onStateHigh: function(pixel) {
        releaseElement(pixel,"steam");
    },
    tempLow: -50,
    stateLow: "packed_soul_sand",
    category: "land",
    state: "solid",
    density: 1905
};
elements.packed_soul_sand = {
    color: ["#78624d","#705942"],
    behavior: behaviors.SUPPORT,
    tempHigh:1700,
    stateHigh: "molten_soul_soul_glass",
    category: "land",
    state: "solid",
    density: 1682,
    breakInto: "soul_sand"
};


































elements.soul_glass = {
    color: "#7a90c2",
    colorPattern: textures.soul_glass,
    colorKey: {
        "g": "#5e807d",
        "s": "#638f8b",
        "S": "#679e99"},
    renderer: renderPresets.BORDER,
   
behavior: [
    "XX|CR:soul%0.075|XX",
    "CR:soul%0.075|XX|CR:soul%0.075",
    "XX|CR:soul%0.075|XX",
],
    reactions: {
        "radiation": { elem1:"rad_soul_glass", chance:0.33 },
        "rad_steam": { elem1:"rad_soul_glass", elem2:null, chance:0.33 },
        "fallout": { elem1:"rad_soul_glass", elem2:"radiation", chance:0.1 },
        "uranium": { elem1:"rad_soul_glass", chance:0.01 }
    },
    tempHigh: 1500,
    category: "solids",
    state: "solid",
    density: 2500,
    breakInto: "soul_glass_shard",
    noMix: true,
    grain: 0
};
elements.molten_soul_glass = {
    reactions: {
        "radiation": { elem1:"molten_rad_soul_glass", chance:0.66 },
        "rad_steam": { elem1:"molten_rad_soul_glass", elem2:null, chance:0.33 },
        "molten_uranium": { elem1:"molten_rad_soul_glass", elem2:null },
        "fallout": { elem1:"molten_rad_soul_glass", elem2:"radiation" }
    },
    grain: 0
};
elements.molten_rad_soul_glass = {
    behavior: behaviors.RADMOLTEN,
};
elements.rad_soul_glass = {
    color: "#7ac2b7",
    colorPattern: textures.soul_glass,
    colorKey: {
        "g": "#648c64",
        "s": "#679D74",
        "S": "#6aad83"},
    renderer: renderPresets.BORDER,
    behavior: [
        "XX|CR:radiation,soul%0.075|XX",
        "CR:radiation,soul%0.075|XX|CR:radiation,soul%0.075",
        "XX|CR:radiation,soul%0.075|XX",
    ],
    tempHigh: 1500,
    category: "solids",
    state: "solid",
    density: 2500,
    breakInto: "soul_rad_shard",
    hidden: true,
    noMix: true,
    grain: 0.3
};













elements.soul_glass_shard = {
    color: ["#5e807d","#679e99","#596b6e"],
    behavior: behaviors.POWDER,
    reactions: {
        "radiation": { elem1:"soul_rad_shard", chance:0.33 },
        "rad_steam": { elem1:"soul_rad_shard", elem2:null, chance:0.33 },
        "fallout": { elem1:"soul_rad_shard", elem2:"radiation", chance:0.1 }
    },
    tempHigh: 1500,
    stateHigh: "molten_soul_glass",
    category: "powders",
    state: "solid",
    density: 2500
};
elements.soul_rad_shard = {
    color: ["#648c64","#6aad83","#596e59"],
    behavior: behaviors.RADPOWDER,
    tempHigh: 1500,
    stateHigh: "molten_rad_soul_glass",
    category: "powders",
    state: "solid",
    density: 2500,
    hidden: true
};
































































































































//----------------------------------------------------------------------------------------------------------------------











































































































elements.dirt.reactions.metal_scrap = {elem2:"normalPaydirt", elem1:"normalpaydirt"}
elements.dirt.reactions.gold_coin = {elem2:"betterPaydirt", elem1:"betterpaydirt"}
elements.dirt.reactions.uranium = {elem2:"goodPaydirt", elem1:"goodpaydirt"}
elements.dirt.reactions.diamond = {elem2:"bestPaydirt", elem1:"bestpaydirt"}
elements.sand.reactions.wet_sand = {elem2:"opal", elem1:"opal", chance: 0.005, tempMin:40}
elements.metal_scrap.reactions.oxygen = {elem2:["ruby","padparascha","fancy_sapphire","sapphire","sapphire","sapphire","fancy_sapphire","sapphire","sapphire","sapphire"], elem1:"rock", chance: 0.001, tempMin:700}
elements.basalt.reactions.sand = {elem2:"emerald", elem1:"rock", chance: 0.05, tempMin:700}
elements.metal_scrap.reactions.rock = {elem2:"ruby", elem1:"rock", chance: 0.001, tempMin:600}
elements.rock.reactions.basalt = {elem1:"Topaz", chance: 0.01, tempMin: 900}
elements.sodium.reactions.metal_scrap = {elem1:"nephrite", chance: 0.001, tempMin: 60}
elements.hydrogen.reactions.metal_scrap = {elem1:"jadite", chance: 0.001, tempMin: 60}
elements.sand.reactions.sand = {elem1:"quartz", chance: 0.001, tempMin: 400}
elements.salt_water.reactions.gravel = {elem1:"garnet", chance: 0.005, tempMin: 40}
elements.dirty_water.reactions.basalt = {elem1:"zircon", chance: 0.01, tempMin: 40}
elements.opal={
    color:["#CCeeCC","#eeCCCC","#CCCCee","#eeeeee"],
    behavior: [
        "XX|XX|XX",
        "SP|CC:6e4e24%0.1,eeCCCC%1,CCeeCC%1,CCCCee%1,eeeeee%1|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","steam"],
    tempHigh:"100",
    reactions:{
        "water":{elem1:"opal",elem2:"water"}
    },
    breakInto:"sand",
    
}
elements.sapphire={
    color:["#2b5c6e","#335b94","#4880D1","#3041D1","#4a36D1"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["metal_scrap","oxygen"],
    tempHigh:"2040",
    breakInto:["aluminium","oxygen"],
    
}
elements.ruby={
    color:["#d13032","#d14471","#ff5b90","#ff3c3f","#Eb9b9c"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["metal_scrap","chromium","oxygen"],
    tempHigh:"2040",
    breakInto:["aluminium","oxygen"],
    
}
elements.emerald={
    color:["#47d046","#59d999","#7Dd494","#43c846","#45b765"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["metal_scrap","beryllium","oxygen"],
    tempHigh:"2519",
    breakInto:["aluminium","oxygen"],
    
}
elements.topaz={
    color:["#fff3ba","#fDffcE","#fDE0ff","#DaEcff","#D7fff4"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["metal_scrap","hydrogen","oxygen"],
    tempHigh:"1200",
    breakInto:["gravel","oxygen"],
    
}
elements.quartz={
    color:["#fffDfb","#fffEE1","#D4D3bb","#ffEfDD","#ffE2bf"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","oxygen"],
    tempHigh:"1725",
    breakInto:["quartz","electric"],
    
    reactions:{
        "rust":{elem1:["citrine","citrine","citrine","citrine","amethyst"]},
        "sand":{elem1:"agate", chance: 0.001},
    },
}
elements.amethyst={
    color:["#cfa2ff","#f2a2ff","#f6D8ff","#b479ED","#ca51f5"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","rust","oxygen","radiation","citrine"],
    tempHigh:"1600",
    breakInto:["sand","oxygen"],
    
}
elements.citrine={
    color:["#f5E1c3","#f5D7a3","#f5D07a","#f5ca59","#D19a23"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","rust","oxygen"],
    tempHigh:"1750",
    breakInto:["sand","oxygen"],
    
}
elements.garnet={
    color:["#ff8a01","#D64b07","#D6613D","#D66769"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","gravel","metal_scrap","rust","magnesium"],
    tempHigh:"1300",
    breakInto:["rust","magnesium"],
    
}
elements.zircon={
    color:["#b86142","#b8712c","#E08f25","#b3381b"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["gravel","oxygen","rust"],
    tempHigh:"1300",
    breakInto:["rust","gravel"],
    
}
elements.agate={
    color:["#b25D3f","#E8c6bb","#336baD","#8aaD94"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["gravel","quartz","amethyst"],
    tempHigh:"1500",
    breakInto:["sand","oxygen"],
    
}
elements.laminar={
    color:["#a7f9ff","#CCfbff","#8fffE2","#aCCfcE"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
         "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["slag","quartz","gravel"],
    tempHigh:"700",
    breakInto:["sand","oxygen","quartz"],
    
}
elements.bloodstone={
    color:["#56785b","#3a7848","#8baD71","#8a2828"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
         "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","quartz","gravel"],
    tempHigh:"1230",
    breakInto:["sand","quartz","rock"],
    
}
elements.rutile={
    color:["#8a743b","#c99c2f","#E8ab2a","#E88D35"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "XX|M1|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["titanium","oxygen","gravel"],
    tempHigh:"1843",
    breakInto:["titanium","oxygen"],
    
}
elements.tigersEye={
    color:["#4D3E1a","#c99c2f","#52381a","#E88D35"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["rutile","quartz","gravel"],
    tempHigh:"1700",
    breakInto:["titanium","oxygen"],
    
}
elements.onyx={
    color:["#222222","#ffffff","#000000"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["gravel","quartz","agate"],
    tempHigh:"200",
    breakInto:["sand","oxygen"],
    
}
elements.blackopal={
    color:["#22CC22","#2222CC","#CC2222","#777722","#772277","#227777","#111111","#000000","#000000","#000000","#000000","#000000"],
    behavior: [
        "XX|XX|XX",
        "SP|CC:6e4e24%0.04,22CC22%1,22eeee%1,2222CC%1,111111%1,000000%1|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","steam"],
    tempHigh:"100",
    reactions:{
        "water":{elem1:"blackopal",elem2:"water"}
    },
    breakInto:["sand","oxygen","water"],
    
}
elements.fancysapphire={
    color:["#DD97ff","#ffcf8b","#D2ffb0","#3041D1","#b2fffa"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["metal_scrap","oxygen"],
    tempHigh:"2040",
    breakInto:["aluminium","oxygen"],
    
}
elements.carnelian={
    color:["#aD3c3c","#D63131","#Eb3535"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["metal_scrap","oxygen"],
    tempHigh:"3000",
    breakInto:["gravel","oxygen"],
    
}
elements.nephrite={
    color:["#EbEbEb","#E4EbD4","#D0EbCC"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["calcium","sand","rust","oxygen","magnesium","hydrogen"],
    tempHigh:"1060",
    breakInto:["magnesium","oxygen","rust","calcium"],
    
    reactions:{
        "calcium":{elem1:"jadite",chance: 0.001, tempmin: 80}
    },
}
elements.jadite={
    color:["#2a9E31","#499E5a","#649E74"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sodium","oxygen","sand"],
    tempHigh:"1040",
    breakInto:["sodium","oxygen"],
    
}
elements.titanium={
    color:["#bCCED1","#D1D1D1","#E8E8E8"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX"
    ],
    category:"solids",
    state:"solid",
    stateHigh:"moltentitanium",
    tempHigh:"1668",
        reactions:{
        "oxygen":{elem1:"rutile",elem2:"oxygen"},
        "water":{elem1:"rutile",elem2:"water"}
    },
    conduct: 0.47,
    glow: false,
}
elements.moltentitanium={
    color:["#E87D00","#E8Df00","#E83c00"],
    behavior: [
        "XX|cr:fire%5|XX",
        "M2|XX|M2",
        "M1|M1|M1"
    ],
    category:"states",
    state:"liquid",
    stateLow:"titanium",
    tempLow:"1667",
    conduct: 0.47,
}
elements.rawtanzanite={
    color:["#6E4D1B","#6E5B1A","#6E5324","#6E5E2D","#6E4D1B","#6E5B1A","#6E5324","#6E5E2D","#6E4D1B","#6E5B1A","#6E5324","#6E5E2D","#6E4D1B","#6E5B1A","#6E5324","#6E5E2D","#6E4D1B","#6E5B1A","#6E5324","#6E5E2D","#6E4D1B","#6E5B1A","#6E5324","#6E5E2D","#7D7EAB","#D18D8E","#9CBDD1"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["tanzanite","mudstone"],
    tempHigh:"700",
    breakInto:["aluminium","calcium"],
    
}
elements.tanzanite={
    color:["#c474ff","#8176ff","#646Dff","#4258D6","#3344D6","#2937aD"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["aluminium","calcium"],
    tempHigh:"2000",
    breakInto:["aluminium","calcium"],
    
}
elements.peridot={
    color:["#3D9c32","#599c34","#6fc241","#7CC24c","#71aD53"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["magnesium","rust"],
    tempHigh:"1400",
    breakInto:["magnesium","rust"],
    
}
elements.commontourmaline={
    color:["#273828","#293834","#1a2421","#1f241b"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "XX|M1|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sodium","rust","magnesium","aluminium","raretourmaline"],
    tempHigh:"1100",
    breakInto:["magnesium","rust"],
    
}
elements.raretourmaline={
    color:["#4b963f","#658E96","#bf91D6","#a6D67f"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "XX|M1|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sodium","rust","magnesium","aluminium"],
    tempHigh:"1100",
    breakInto:["magnesium","rust"],
    
}
elements.rawberyl={
    color:["#D1D1D1","#E6E6E6","#E5E3D5","#CECFCE"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","gravel","rock"],
    tempHigh:"1000",
    breakInto:"beryl_explosion",
}
elements.beryl={
    color:["#afD677","#D6a579","#D67777","#D678b3"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["rust","beryllium","sand","aluminium"],
    tempHigh:"1300",
    breakInto:["gravel","rust"],
    
}
elements.bixbite={
    color:["#851315","#A12124","#A13637","#A14C4E"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["rust","beryllium","sand","aluminium"],
    tempHigh:"1300",
    breakInto:["gravel","rust"],
}
elements.benitoite={
    color:["#8AD4E0","#88ACE0","#7372E0","#505FE0"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2 AND SA"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["titanium","beryllium","sand","oxygen"],
    tempHigh:"1060",
    breakInto:["gravel","titanium"],
}
elements.kunzite={
    color:["#f7f7f7","#f7f7f7","#ffffff","#ffDDfb","#ffcbf5"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["gravel","quartz","sand","aluminium"],
    tempHigh:"1700",
    breakInto:["gravel","quartz"],
    
}
elements.kyanite={
    color:["#2b3085","#477Dc4","#4f2aE3","#6cb5a1","#ffffff"],
    behavior: [
        "SP|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","aluminium"],
    tempHigh:"1100",
    breakInto:["metal_scrap","sand"],
    
}
elements.apatite={
    color:["#91CCf0","#8bf0DD","#5fDbb6","#5fDbDb"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "SP|M1|SP"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["calcium","carbon_dioxide"],
    tempHigh:"1670",
    breakInto:["calcium","limestone"],
    
}
elements.azurite={
    color:["#3a5Db3","#264fDE","#4265ba"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["copper","carbon_dioxide"],
    tempHigh:"840",
    breakInto:["oxidised_copper","limestone"],
    
}
elements.aquamarine={
    color:["#cEfffE","#c1ffff","#Dcfcff"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "SP|M1|SP"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["aluminium","sand","oxygen"],
    tempHigh:"1650",
    breakInto:["sand","limestone"],
    
}
elements.turquoise={
    color:["#4bE6bE","#4cDEE5","#55D7E5","#8f4D00"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "SP|M1|SP"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["rust","copper","oxygen"],
    tempHigh:"1700",
    breakInto:["copper","rock"],
    
}
elements.rosequartz={
    color:["#fDD4ff","#ffD7E9","#ffcEff"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","oxygen"],
    tempHigh:"1700",
    breakInto:["sand","rock"],
    
}
elements.smokyquartz={
    color:["#b07f53","#b08b70","#D6b9a0","#472a12"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","oxygen"],
    tempHigh:"1700",
    breakInto:["sand","rock"],
    
}
elements.milkyquartz={
    color:["#ffffff","#E0E0E0","#ffffff","#ffffff"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","oxygen"],
    tempHigh:"1700",
    breakInto:["sand","rock"],
    
}
elements.jasper={
    color:["#b54345","#5b9155"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["rust","gravel"],
    tempHigh:"1700",
    breakInto:["gravel","rock"],
    
}
elements.leopardjasper={
    color:["#bDa484","#bDba79","#2b2b1c","#8f6061"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["rust","gravel"],
    tempHigh:"1700",
    breakInto:["gravel","rock"],
    
}
elements.picturejasper={
    color:["#D6cE9b","#D6D08f"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["rust","gravel"],
    tempHigh:"1700",
    breakInto:["gravel","rock"],
    
}
elements.oceanjasper={
    color:["#D6D3a7","#99a5D6","#9aD6c5","#99c3D6"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["rust","gravel"],
    tempHigh:"1700",
    breakInto:["gravel","rock"],
    
}
elements.rainforestjasper={
    color:["#97aD7f","#81aD81","#cfcb9b"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["rust","gravel"],
    tempHigh:"1700",
    breakInto:["gravel","rock"],
    
}
elements.lapislazuli={
    color:["#0721ff","#292bE0","#2f5EE0"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["calcium","iron","sulfer"],
    tempHigh:"1100",
    breakInto:["gravel","rust"],
    
}
elements.pearl={
    color:["#ffE0fb","#E7ffE4","#DfEbff","#DDDDDD","#EEEEEE"],
    behavior: [
        "XX|XX|XX",
        "M2|XX|M2",
        "SP|M1|SP"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["calcium","limestone"],
    tempHigh:"1100",
    breakInto:["gravel","calcium"],
    
    viscosity:"400",
}
elements.chalcedony={
    color:["#CC9b77","#c7CC79","#76CCa2","#85c5CC","#8382CC"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "SP|M1|SA"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["quartz","rock"],
    tempHigh:"1100",
    breakInto:["gravel","sand"],
    
}
elements.rawmoissanite={
    color:["#2b0069","#002169","#003D2c","#000000","#000000"],
    behavior: [
        "SP|XX|SP",
        "XX|XX|XX",
        "SA AND M2|M1|SP AND m2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["moissanite","dust","ash"],
    tempHigh:"2600",
    breakInto:["gravel","sand"],
    
}
elements.moissanite={
    color:["#DfDfff","#faDbff","#DDfaff","#E0ffE0","#fff0Df"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["quartz","charcoal"],
    tempHigh:"2730",
    breakInto:["gravel","sand"],
    
}
elements.amazonite={
    color:["#629c7D","#77bf81","#71bf6a"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|SP",
        "XX|M1|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["quartz","copper"],
    tempHigh:"1500",
    breakInto:["copper","sand"],
    
}
elements.malachite={
    color:["#0f7324","#0f7359","#0f7359","#1D735f"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|XX",
        "M2|M1 AND SP|M2 AND SA"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["carbon_dioxide","oxidised_copper","copper"],
    tempHigh:"1000",
    breakInto:["copper","limestone"],
    
}
elements.cubiczircona={
    color:["#FFF3EB","#E8FFE7","#F3E8FF","#ffffff"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["zircon","oxygen"],
    tempHigh:"1000",
    breakInto:["gravel","zircon"],
    
}
elements.cinnibar={
    color:["#F20606","#D40505","#B30404","#8F0303"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "SP|M1|SP"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sulfur_gas","mercury_gas"],
    tempHigh:"580",
    breakInto:["gravel","mercury"],
    
}
elements.alexandrite={
    color:["#125416","#2A9146"],
    behavior: [
        "XX|XX|XX",
        "XX|CC:#125416%0.3 AND CC:#2A9146%0.3|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["beryllium","oxygen","aluminium"],
    tempHigh:"1900",
    breakInto:["metal_scrap","beryllium"],
    
   
}
elements.rhodonite={
    color:["#ED4747","#ED8282","#EDA3A3","#EDC4C4","#EDD3D3"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["magnesium","oxygen","sand"],
    tempHigh:"1250",
    breakInto:["magnesium","gravel"],
    
}
elements.cerussite={
    color:["#FFFBDF","#FFF8D1","#D1CEB8","#8F8D7E"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|SA",
        "M2 AND SP|M1|M2 AND SP"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["lead","oxygen","carbon_dioxide"],
    tempHigh:"380",
    breakInto:["carbon_dioxide","gravel"],
    
}
elements.charoite={
    color:["#9460CC","#9A6CCC","#A07ACC","#A78ACC","#C7AFE6","#D5C8E5"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|XX",
        "SA|M1|SP"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["potassium","oxygen","calcium","sand"],
    tempHigh:"1400",
    breakInto:["potassium","sand","gravel"],
}
elements.chromediopside={
    color:["#11750E","#377538","#499C4B"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|XX",
        "SA|M1|SP"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["chromium","magnesium","oxygen","calcium","sand"],
    tempHigh:"1400",
    breakInto:["chromium","magnesium","gravel"],
}
elements.diopside={
    color:["#D0E6D0","#D9E5D9","#E2E5E2"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|XX",
        "SA|M1|SP"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["magnesium","oxygen","calcium","sand"],
    tempHigh:"1400",
    breakInto:["magnesium","gravel"],
}
elements.lepidolite={
    color:["#BE6CEB","#9A6BEB","#976EB0","#F0E0FF"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "SA AND M2|M1|SA AND M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["potassium","sand","carbon_dioxide","hydrogen"],
    tempHigh:"1200",
    breakInto:["carbon_dioxide","aluminium","hydrogen"],
    
}
elements.painite={
    color:["#FF0004","#FF006A","#AD2A2A","#8C420C","#AD1414","#8C1010"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["calcium","zircon","carbon_dioxide","aluminium"],
    tempHigh:"2090",
    breakInto:["carbon_dioxide","aluminium","calcium"],
    
}
elements.moonstone={
    color:["#DDDDDD","#D6D6D6","#C8D1D6","#C1D2D6","#BED7F0"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["potassium","sand","sodium","oxygen"],
    tempHigh:"1090",
    breakInto:["potassium","aluminium","sodium","oxygen"],
    
}
elements.iolite={
    color:["#7DAFE5","#859CF7","#C4A0F7","#E4D0F7","#EDE6F7"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["magnesium","sand","rust","oxygen"],
    tempHigh:"1090",
    breakInto:["metal_scrap","aluminium","rust","oxygen"],
}
elements.andalusite={
    color:["#C28567","#C2A266","#C2C066","#97C264","#9FC283"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M1|M2|M1"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["aluminium","sand","oxygen"],
    tempHigh:"1090",
    breakInto:["metal_scrap","aluminium","sand","oxygen"],
}
elements.astrophyllite={
    color:["#C29715","#C2A34F","#E6E6E6","#CCCCCC","#5E5E5E","#383838"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|SP",
        "M1 AND SA|M2|M1 AND SA"
    ],
    category:"powders",
    state:"solid",
    breakInto:["potassium","iron","magnesium","sand","titanium","oxygen"],
}
elements.thunder_egg={
    color:["#423B34","#42372B","#C7B9AD","#524545","#303030"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","gravel","rock"],
    tempHigh:"1000",
    breakInto:"thunder_egg_explosion",
}
elements.thunder_egg_explosion={
    color:["#423B34","#303030"],
    behavior: [
        "XX|XX|XX",
        "XX|EX:4>agate,agate,agate,agate,agate,chalcedony,leopardjasper,picturejasper,jasper,rainforestjasper,oceanjasper|XX",
        "XX|XX|XX"
    ],
    category:"energy",
}
elements.beryl_explosion={
    color:["#CECFCE","#E5E6E5"],
    behavior: [
        "XX|XX|XX",
        "XX|EX:4>beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,beryl,bixbite|XX",
        "XX|XX|XX"
    ],
    category:"energy",
}
elements.geode_explosion={
    color:["#423B34","#303030"],
    behavior: [
        "XX|XX|XX",
        "XX|EX:4>rock,rock,rock,sand,gravel,quartz,quartz,quartz,milkyquartz,rosequartz,smokyquartz|XX",
        "XX|XX|XX"
    ],
    category:"energy",
}
elements.geode={
    color:["#B8B094","#B8A892","#C9C29A","#948F85"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["sand","gravel","rock"],
    tempHigh:"1000",
    breakInto:"geode_explosion",
}
elements.chromite={
    color:["#8B6DA3","#883BB3","#8149B2","#A645DB","#CA3EF5"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|SP",
        "SP|M1|SP"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["chromium","iron","rust"],
    tempHigh:"1900",
    breakInto:["gravel","chromium","rust"],
}
elements.fluorite={
    color:["#93CFB5","#7DCFB2","#91CFAB","#8FBFE5","#AE83E5"],
    behavior: [
        "SP|XX|XX",
        "XX|XX|XX",
        "SP AND M2|M1|SA AND M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["gravel","sand","calcium"],
    tempHigh:"1350",
    breakInto:["calcium","sand","smoke"],
}
elements.sodalite={
    color:["#ADB2CF","#8B91CF","#2860CF","#1C22CF","#2114B3"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["chlorine","metal_scrap","sodium"],
    tempHigh:"1080",
    breakInto:["sodium","sand","chlorine"],
}
elements.jeremejevite={
    color:["#636BE5","#775FE5"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2 AND SA|M1|M2 AND SA"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["smoke","metal_scrap","oxygen"],
    tempHigh:"1050",
    breakInto:["aluminium","gravel","oxygen"],
}
elements.spinel={
    color:["#2F9655","#2F9655","#6518B8","#1C51B8"],
    behavior: [
        "XX|XX|XX",
        "XX|CC:#2F9655%1 AND CC:#6518B8%0.5 AND CC:#1C51B8%0.5|XX",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["smoke","metal_scrap","oxygen"],
    tempHigh:"1050",
    breakInto:["aluminium","gravel","oxygen"],
}
elements.asbestos={
    color:"#FAF9D9",
    behavior: [
        "SP|XX|SP",
        "XX|XX|XX",
        "SA AND M2|M1|SP AND m2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["fire","plague","dust","ash"],
    tempHigh:"800",
    breakInto:["gravel","sand"],
    reactions:{
        "body":{elem2:"cancer", chance:0.02},
        "head":{elem2:"cancer", chance:0.02}
    }
    
}
elements.tsavorite={
    color:["#00bf06","#009105","#006904"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["aluminium","calcium","chromium"],
    tempHigh:"2000",
    breakInto:["aluminium","calcium"],
}
elements.vanadinite={
    color:["#634e00","#b85600","#c93c00"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2 AND SP|M1 AND SP|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["vanadium","sulfer","smoke"],
    tempHigh:"1600",
    breakInto:["vanadium","sulfer"],
}
elements.padparascha={
    color:["#ffa3a9","#ffa3ce","#ffbaa3"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["metal_scrap","oxygen"],
    tempHigh:"2040",
    breakInto:["aluminium","oxygen"],
     
}
elements.celestite={
    color:["#B1E5FF","#CAEFFF","#B6D7E5","#EFFAFF"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|SA",
        "SA AND M2|M1|M2"
    ],
    category:"powders",
    state:"solid",
    stateHigh:["metal_scrap","oxygen","sulfer"],
    tempHigh:"2040",
    breakInto:["sulfer","metal_scrap","oxygen"],
     
}
elements.betterpaydirt={
    color:["#6E4c25","#c26E15","#9c6422"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX"
    ],
    category:"land",
    state:"solid",
    reactions:{
        "water":{elem1:["geode","thunder_egg","sodalite","fluorite","moonstone","cerussite","amazonite","jasper","oceanjasper","rainforestjasper","leopardjasper","picturejasper","obsidian","fluorite","rutile","pyrite","apatite","tigersEye","tigersEye","agate","agate","agate","zircon","dirt","mud","mud","mud","mud","dirt","dirt","dirt","dirt","dirt","dirt","mud","mudstone","tuff"],elem2:"dirty_water"}
    },
}
elements.goodpaydirt={
    color:["#6E4c25","#9c9288","#c2bfbc"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX"
    ],
    category:"land",
    state:"solid",
    reactions:{
        "water":{elem1:["iolite","chromite","andalusite","chromediopside","charoite","diopside","geode","thunder_egg","lepidolite","rhodonite","cubiczircona","malachite","pearl","lapislazuli","aquamarine","carnelian","azurite","kyanite","commontourmaline","onyx","carnelian","onyx","jadite","nephrite","nephrite","amethyst","amethyst","amethyst","garnet","dirt","dirt","dirt","dirt","dirt","dirt","mud","mud","mud","mud","mud","mud","mud","mud","dirt","mudstone","tuff"],elem2:"dirty_water"}
    },
}
elements.bestpaydirt={
    color:["#6E4c25","#735f19","#ffca3D"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX"
    ],
    category:"land",
    state:"solid",
    reactions:{
        "water":{elem1:["jeremejevite","astrophyllite","painite","alexandrite","benitoite","rawmoissanite","opal","blackopal","emerald","fancysapphire","rawtanzanite","raretourmaline","rawberyl","kunzite","ruby","SApphire","mud","dirt","dirt","dirt","dirt","dirt","dirt","dirt","mudstone","tuff"],elem2:"dirty_water"}
    },
}
elements.sieve={
    color:"#fDffCC",
    behavior: [
        "SA|SW:dirty_water,water|SA",
        "XX|XX|XX",
        "XX|M1|XX"
    ],
    category:"special",
    state:"solid",
}
//metals
elements.beryllium={
    color:"#5C665C",
    category:"solids",
    behavior:[
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    stateHigh:"molten_beryllium",
    tempHigh:"1300",
    conduct: 0.47,
}
elements.molten_beryllium={
    color:["#F25000","#ff6845","#ff8752"],
    behavior:[
        "XX|cr:fire%10|XX",
        "M2|XX|M2",
        "M1|M1|M1"
    ],
    stateLow:"beryllium",
    tempLow:"1299",
    viscosity:"20",
    category:"states",
    conduct: 0.47,
}
elements.chromium={
    color:"#D0E6D0",
    category:"solids",
    behavior:[
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    stateHigh:"molten_chromium",
    tempHigh:"1900",
    conduct: 0.47,
}
elements.molten_chromium={
    color:["#F25000","#ff6845","#ff8752"],
    behavior:[
        "XX|cr:fire%10|XX",
        "M2|XX|M2",
        "M1|M1|M1"
    ],
    stateLow:"chromium",
    tempLow:"1899",
    viscosity:"20",
    category:"states",
    conduct: 0.47,
}
elements.vanadium={
    color:"#6e6e6e",
    category:"solids",
    behavior:[
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2"
    ],
    stateHigh:"molten_vanadium",
    tempHigh:"1920",
    conduct: 0.47,
}
elements.molten_vanadium={
    color:["#F25000","#ff6845","#ff8752"],
    behavior:[
        "XX|cr:fire%10|XX",
        "M2|XX|M2",
        "M1|M1|M1"
    ],
    stateLow:"vanadium",
    tempLow:"1905",
    viscosity:"20",
    category:"states",
    conduct: 0.47,
}





















































































































//------------------------------------------------------------------------------------------------------------------



































































































elements.r_conveyor = {
	name: "Right Conveyor",
    color: "#2a2a36",
	colorOn: "#3b3b4a",
	state: "solid",
    category: "machines",
	conduct: 1,
	tick: function(pixel) {
		doHeat(pixel)
		doBurning(pixel)
		doElectricity(pixel)
		
		let pixelAbove = pixelMap[pixel.x][pixel.y-1]
		
		if (!isEmpty(pixel.x, pixel.y-1, true) && pixel.charge > 0.5 && elements[pixelAbove.element].movable == true ) {
			tryMove(pixelAbove,pixel.x+1,pixel.y-1)
		}
	}
};
elements.l_conveyor = {
	name: "Left Conveyor",
    color: "#2a2a36",
	colorOn: "#3b3b4a",
	state: "solid",
    category: "machines",
	conduct: 1,
	tick: function(pixel) {
		doHeat(pixel)
		doBurning(pixel)
		doElectricity(pixel)
		
		let pixelAbove = pixelMap[pixel.x][pixel.y-1]
		
		if (!isEmpty(pixel.x, pixel.y-1, true) && pixel.charge > 0.5 && elements[pixelAbove.element].movable == true ) {
			tryMove(pixelAbove,pixel.x-1,pixel.y-1)
		}
	}
};
elements.r_autoconveyor = {
	name: "Right Autoconveyor",
    color: "#3b3b4a",
	state: "solid",
    category: "machines",
	tick: function(pixel) {
		doHeat(pixel)
		doBurning(pixel)
		doElectricity(pixel)
		
		let pixelAbove = pixelMap[pixel.x][pixel.y-1]
		
		if (!isEmpty(pixel.x, pixel.y-1, true) && elements[pixelAbove.element].movable == true ) {
			tryMove(pixelAbove,pixel.x+1,pixel.y-1)
		}
	}
};
elements.l_autoconveyor = {
	name: "Left Autoconveyor",
    color: "#3b3b4a",
	state: "solid",
    category: "machines",
	tick: function(pixel) {
		doHeat(pixel)
		doBurning(pixel)
		doElectricity(pixel)
		
		let pixelAbove = pixelMap[pixel.x][pixel.y-1]
		
		if (!isEmpty(pixel.x, pixel.y-1, true) && elements[pixelAbove.element].movable == true ) {
			tryMove(pixelAbove,pixel.x-1,pixel.y-1)
		}
	}
};

runAfterLoad(function() {
	for (element in elements) {
		let behavior = elements[element].behavior
		let movable = false
		for (line in behavior) { // check if element has a M1 or M2 in their behavior
			line = behavior[line]
			if (line.includes("M1") || line.includes("M2")) {
				movable = true
			}
			else {
			}
		}
		
		if (movable != false) { // if element has M1 or M2, set movable to true, makes them movable by conveyors
			elements[element].movable = true
		}
		
	}
});
















































//--------------------------------------------------------------------------------------------------------------



















































elements.gasoline = {
  color: ["#FFFF66", "#FFFF66", "#FFFF66", "#FFFF66", "#FFFF66"],
  burn: 15,
  burnTime: 300,
  viscosity: 0.6,
  density: 750,
  category: "liquids",
  behavior: behaviors.LIQUID,
  state: "liquid",
  desc: "Used in Gas Generators!"
}

elements.diesel = {
  color: "#EBFBB5",
  burn: 10,
  burnTime: 600,
  viscosity: 3,
  density: 860,
  category: "liquids",
  behavior: behaviors.LIQUID,
  state: "liquid",
  desc: "Used in Diesel Generators!"
}

elements.gasoline_generator = {
color: "#6d5f5d",
behavior: behaviors.WALL,
state: "solid",
density: 1000,
category: "machines",
properties: {
  shocksToDo: 0
},
hoverStat: function(pixel){return (pixel.shocksToDo).toString() || 0},
tick: function(pixel){
  if (pixel.shocksToDo <= 40){
  for (var i = 0; i < adjacentCoords.length; i++){
    var coord = adjacentCoords[i]
    var x = pixel.x + coord[0]
    var y = pixel.y + coord[1]
    if (!isEmpty(x, y, true)){
      var otherPixel = pixelMap[x][y]
      if (otherPixel.element == "gasoline"){
        deletePixel(x, y)
        if(!pixel.shocksToDo){pixel.shocksToDo = 0}
        pixel.shocksToDo += 10
      }
      else if (otherPixel.element == "gasoline_generator"){
        var otherPixel = pixelMap[x][y]
        var otherShock = otherPixel.shocksToDo || 0
        var currentShock = pixel.shocksToDo || 0
        if (otherShock > currentShock){
          otherPixel.shocksToDo --
          pixel.shocksToDo ++
        } else if (currentShock > otherShock) {
          otherPixel.shocksToDo ++
          pixel.shocksToDo --
        }
      }
    }
  }}
  if (!pixel.charge && !pixel.chargeCD && pixel.shocksToDo){
    for (var i = 0; i < adjacentCoords.length; i++){
      var coord = adjacentCoords[i]
      var x = pixel.x + coord[0]
      var y = pixel.y + coord[1]
      if (!isEmpty(x, y, true)){
        if (elements[pixelMap[x][y].element].conduct > 0){
          pixel.charge = 1
          pixel.shocksToDo --
          break;
        }
      }
    }
  }
}
}

elements.diesel_generator = {
color: "#FF9C27",
behavior: behaviors.WALL,
state: "solid",
density: 1000,
category: "machines",
properties: {
  shocksToDo: 0
},
hoverStat: function(pixel){return (pixel.shocksToDo).toString() || 0},
tick: function(pixel){
  if (pixel.shocksToDo <= 80){
  for (var i = 0; i < adjacentCoords.length; i++){
    var coord = adjacentCoords[i]
    var x = pixel.x + coord[0]
    var y = pixel.y + coord[1]
    if (!isEmpty(x, y, true)){
      var otherPixel = pixelMap[x][y]
      if (otherPixel.element == "diesel"){
        deletePixel(x, y)
        if(!pixel.shocksToDo){pixel.shocksToDo = 0}
        pixel.shocksToDo += 20
      }
      else if (otherPixel.element == "diesel_generator"){
        var otherPixel = pixelMap[x][y]
        var otherShock = otherPixel.shocksToDo || 0
        var currentShock = pixel.shocksToDo || 0
        if (otherShock > currentShock){
          otherPixel.shocksToDo --
          pixel.shocksToDo ++
        } else if (currentShock > otherShock) {
          otherPixel.shocksToDo ++
          pixel.shocksToDo --
        }
      }
    }
  }}
  if (!pixel.charge && !pixel.chargeCD && pixel.shocksToDo){
    for (var i = 0; i < adjacentCoords.length; i++){
      var coord = adjacentCoords[i]
      var x = pixel.x + coord[0]
      var y = pixel.y + coord[1]
      if (!isEmpty(x, y, true)){
        if (elements[pixelMap[x][y].element].conduct > 0){
          pixel.charge = 1
          pixel.shocksToDo --
          break;
        }
      }
    }
  }
}
}











































//----------------------------------------------------------------------------------------------------
















































elements.hornet = {
    tempHigh: 200,
    stateHigh: "dead_bug",
    color: "#ede48e",
	behavior: behaviors.FLY,
	category: "life",
	state: "solid",
    behaviorOn: [
    "XX|CR:flash|XX",
    "CR:flash|CH:ash|CR:flash",
    "XX|CR:flash|XX",
         ],
    reactions: {
        "head": { elem2: null, },
        "body": { elem2: null, },
        "fly": { elem2: null, },
        "spider": { elem1: null, }
    }
}

elements.lice = {
    tempHigh: 212,
    stateHigh: "dead_bug",
    color: "#7a7852",
	behavior: behaviors.LIQUID,
	category: "life",
	state: "solid",
    behaviorOn: [
    "XX|CR:flash|XX",
    "CR:flash|CH:ash|CR:flash",
    "XX|CR:flash|XX",
         ],
    reactions: {
        "head": { elem2: null, },
        "body": { elem2: null, }
    }
}














elements.salivary_gland = {
  
  
    breakInto: "blood",
     
      color: "#ffffff",
    
      behavior: [
        "XX|CR:foam%0.009|XX",
        "CR:foam%0.009|XX|CR:foam%0.009",
        "XX|CR:foame%0.009|XX",
    ],

      category: "biology",
      
      state: "solid",
      
      density: 720,
      
      stateHigh: "cooked_meat",
    
      tempHigh: 100,
     
      
  };
  































































//----------------------------------------------------------------------------------------------------------------




























































elements.turkey = { 

    color: ["#e6e6e6","#303030","#875f01"],
    behavior: [
        "M2%1 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%1|M2%2 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%50|M2%1 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%1",
        "M2%10|XX|M2%10",
        "XX|M1%33|XX",
    ],
    category:"life",
	state: "solid",
    reactions: {
        "meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "chicken_nugget": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "grass": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "worm": { elem2: "crushed_worm", chance:0.3},
        "cooked_meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "fish": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "rat": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "snail": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "frog": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "grape": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "wheat_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "flower_seed": { elem2:null, chance:0.32, func:behaviors.FEEDPIXEL },
        "corn_seed": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "corn": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "potato_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "grass_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "nut": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "dead_bug": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "bee": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "ant": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "flea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "termite": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.3 },
        "mercury": { elem1:"rotten_meat", chance:0.1 },
        "bleach": { elem1:"rotten_meat", chance:0.1 },
        "infection": { elem1:"rotten_meat", chance:0.025 },
        "uranium": { elem1:"rotten_meat", chance:0.1 },
        "cyanide": { elem1:"rotten_meat", chance:0.1 },
        "chlorine": { elem1:"meat", chance:0.1 },
        "dirty_water": { elem1:"rotten_meat", chance:0.0001 },
    },
    egg: "turkey_egg",
    foodNeed: 10,
    temp: 40,
    tempHigh: 75,
    stateHigh: "cooked_turkey",
    tempLow: -18,
    stateLow: "frozen_meat",
    breakInto: "raw_turkey",
    burn:85,
    burnTime:450,
    state: "solid",
    density: 1117,
    conduct: 0.3,
    cutInto: "raw_turkey",
};

elements.turkey_egg = {
    color: "#e0d3ab",
    behavior: behaviors.STURDYPOWDER2,
    tick: function(pixel) {
        if (Math.random() < 0.1 && pixel.temp > 20 && pixel.temp < 35) {
            changePixel(pixel,"turkeyling")
        }
    doDefaults(pixel);
    },
    category: "food",
    state: "solid",
    temp: 20,
    tempLow: -18,
    stateLow: "frozen_turkey_egg",
    breakInto: ["yolk"],
    tempHigh: 400,
    stateHigh: ["calcium", "ash"],
    burn:50,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    reactions: {
        "water": { elem2:null, elem1:"hard_boiled_egg", chance:10, tempMin:80 }
    }
};
elements.frozen_turkey_egg = {
    color: "#e0d3cf",
    behavior: behaviors.POWDER,
    category: "food",
    state: "solid",
    temp: -20,
    tempHigh: 10,
    stateHigh: "turkey_egg",
    breakInto: ["calcium", "hard_yolk"],
    burn:50,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    hidden: true,
};
elements.turkeyling = {
    color: ["#f0eba8", "#f0eba8"],
    behavior: [
        "M2%1|M2%2|M2%1",
        "M2%10|FX%5 AND CH:turkey%0.1|M2%10",
        "XX|M1%33|XX",
    ],
    category: "life",
    state: "solid",
    egg: "turkey_egg",
    foodNeed: 20,
    temp: 40,
    tempHigh: 75,
    stateHigh: "cooked_meat",
    tempLow: -18,
    stateLow: "frozen_meat",
    breakInto: "blood",
    burn:85,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    reactions: {
        "crushed_worm": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL},
        "meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "chicken_nugget": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "grass": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "worm": { elem2: "crushed_worm", chance:0.3},
        "cooked_meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "fish": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "rat": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "snail": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "frog": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "grape": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "wheat_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "flower_seed": { elem2:null, chance:0.32, func:behaviors.FEEDPIXEL },
        "corn_seed": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "corn": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "potato_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "grass_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "nut": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "dead_bug": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "bee": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "ant": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "flea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "termite": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.3 },
        "mercury": { elem1:"rotten_meat", chance:0.1 },
        "bleach": { elem1:"rotten_meat", chance:0.1 },
        "infection": { elem1:"rotten_meat", chance:0.025 },
        "uranium": { elem1:"rotten_meat", chance:0.1 },
        "cyanide": { elem1:"rotten_meat", chance:0.1 },
        "chlorine": { elem1:"meat", chance:0.1 },
        "dirty_water": { elem1:"rotten_meat", chance:0.0001 },
    }
};

elements.barbecued_turkey = {
    color:["#a67d2d","#9c721f"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}
elements.steamed_turkey = {
    color:["#e8cb7b", "#d6bf7e"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:50,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}

elements.smoked_turkey = {
    color:["#6b470e", "#8f5b09"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}
elements.cooked_turkey = {
    color: ["#a38046", "#b39652"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp: 40,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
};

elements.raw_turkey = {
    color: ["#d6a587", "#c99873"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    burnInto: "cooked_turkey",
    temp:25,
    tempHigh: 600,
    stateHigh: ["cooked_turkey"],
    reactions: {
        "smoke": {elem1: "smoked_turkey"},
        "steam": {elem1: "steamed_turkey"},
        "water": {elem1: "boiled_turkey", tempMin: 70},
        "nut_oil": {elem1: "fried_turkey", tempMin: 70},
        "charcoal": {elem1: "barbecued_turkey", tempMin: 70},
        "fire": {elem1: "barbecued_turkey"}
    }
};

elements.boiled_turkey = {
    color: ["#e0d4a4", "#e0d4a4"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    isFood: true,
    temp: 65,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
}

elements.fried_turkey = {
    color: ["#c49543", "#b88835", "#b07b20", "#996e23"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    isFood: true,
    temp: 90,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
}























































//---------------------------------------------------------------------------------------------------------























































elements.quail = {
    color: ["#e6aa1e","#7d611f","#d6d6d6","#454442"],
    behavior: [
        "M2%1 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%1|M2%2 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%50|M2%1 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%1",
        "M2%10|XX|M2%10",
        "XX|M1%33|XX",
    ],
    category:"life",
	state: "solid",
    reactions: {
        "meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "chicken_nugget": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "grass": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "worm": { elem2: "crushed_worm", chance:0.3},
        "cooked_meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "fish": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "rat": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "snail": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "frog": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "grape": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "wheat_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "flower_seed": { elem2:null, chance:0.32, func:behaviors.FEEDPIXEL },
        "corn_seed": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "corn": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "potato_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "grass_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "nut": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "dead_bug": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "bee": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "ant": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "flea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "termite": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.3 },
        "mercury": { elem1:"rotten_meat", chance:0.1 },
        "bleach": { elem1:"rotten_meat", chance:0.1 },
        "infection": { elem1:"rotten_meat", chance:0.025 },
        "uranium": { elem1:"rotten_meat", chance:0.1 },
        "cyanide": { elem1:"rotten_meat", chance:0.1 },
        "chlorine": { elem1:"meat", chance:0.1 },
        "dirty_water": { elem1:"rotten_meat", chance:0.0001 },
    },
    egg: "quail_egg",
    foodNeed: 10,
    temp: 40,
    tempHigh: 75,
    stateHigh: "cooked_quail",
    tempLow: -18,
    stateLow: "frozen_meat",
    breakInto: "raw_quail",
    burn:85,
    burnTime:450,
    state: "solid",
    density: 1117,
    conduct: 0.3,
    cutInto: "raw_quail",
};

elements.quail_egg = {
    color: "#e0d3ab",
    behavior: behaviors.STURDYPOWDER2,
    tick: function(pixel) {
        if (Math.random() < 0.1 && pixel.temp > 20 && pixel.temp < 35) {
            changePixel(pixel,"quailling")
        }
    doDefaults(pixel);
    },
    category: "food",
    state: "solid",
    temp: 20,
    tempLow: -18,
    stateLow: "frozen_quail_egg",
    breakInto: ["yolk"],
    tempHigh: 400,
    stateHigh: ["calcium", "ash"],
    burn:50,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    reactions: {
        "water": { elem2:null, elem1:"hard_boiled_egg", chance:10, tempMin:80 }
    }
};
elements.frozen_quail_egg = {
    color: "#e0d3cf",
    behavior: behaviors.POWDER,
    category: "food",
    state: "solid",
    temp: -20,
    tempHigh: 10,
    stateHigh: "quail_egg",
    breakInto: ["calcium", "hard_yolk"],
    burn:50,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    hidden: true,
};
elements.quailling = {
    color: ["#f0eba8", "#f0eba8"],
    behavior: [
        "M2%1|M2%2|M2%1",
        "M2%10|FX%5 AND CH:quail%0.1|M2%10",
        "XX|M1%33|XX",
    ],
    category: "life",
    state: "solid",
    egg: "quail_egg",
    foodNeed: 20,
    temp: 40,
    tempHigh: 75,
    stateHigh: "cooked_meat",
    tempLow: -18,
    stateLow: "frozen_meat",
    breakInto: "blood",
    burn:85,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    reactions: {
        "crushed_worm": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL},
        "meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "chicken_nugget": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "grass": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "worm": { elem2: "crushed_worm", chance:0.3},
        "cooked_meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "fish": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "rat": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "snail": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "frog": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "grape": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "wheat_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "flower_seed": { elem2:null, chance:0.32, func:behaviors.FEEDPIXEL },
        "corn_seed": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "corn": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "potato_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "grass_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "nut": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "dead_bug": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "bee": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "ant": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "flea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "termite": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.3 },
        "mercury": { elem1:"rotten_meat", chance:0.1 },
        "bleach": { elem1:"rotten_meat", chance:0.1 },
        "infection": { elem1:"rotten_meat", chance:0.025 },
        "uranium": { elem1:"rotten_meat", chance:0.1 },
        "cyanide": { elem1:"rotten_meat", chance:0.1 },
        "chlorine": { elem1:"meat", chance:0.1 },
        "dirty_water": { elem1:"rotten_meat", chance:0.0001 },
    }
};

elements.barbecued_quail = {
    color:["#a67d2d","#9c721f"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}
elements.steamed_quail = {
    color:["#e8cb7b", "#d6bf7e"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:50,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}

elements.smoked_quail = {
    color:["#6b470e", "#8f5b09"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}
elements.cooked_quail = {
    color: ["#a38046", "#b39652"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp: 40,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
};

elements.raw_quail = {
    color: ["#d6a587", "#c99873"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    burnInto: "cooked_quail",
    temp:25,
    tempHigh: 600,
    stateHigh: ["cooked_quail"],
    reactions: {
        "smoke": {elem1: "smoked_quail"},
        "steam": {elem1: "steamed_quail"},
        "water": {elem1: "boiled_quail", tempMin: 70},
        "nut_oil": {elem1: "fried_quail", tempMin: 70},
        "charcoal": {elem1: "barbecued_quail", tempMin: 70},
        "fire": {elem1: "barbecued_quail"}
    }
};

elements.boiled_quail = {
    color: ["#e0d4a4", "#e0d4a4"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    isFood: true,
    temp: 65,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
}

elements.fried_quail = {
    color: ["#c49543", "#b88835", "#b07b20", "#996e23"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    isFood: true,
    temp: 90,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
}

























































//--------------------------------------------------------------------------------------------------------






















































elements.anchovy = {
    color: ["#999999", "#737272",],
    behavior: [
        "XX|M2%5|SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%14",
        "XX|FX%0.5|BO",
        "M2|M1|M2 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%5",
    ],
    category: "life",
    state: "solid",
    cutInto: "raw_anchovy",
    conduct: 0.2,
    eggColor: ["#211316","#2C1A1D"],
    breakInto: "blood",
    burn:20,
    burnTime:200,
    temp: 20,
    tempHigh: 120,
    stateHigh: "cooked_anchovy",
    tempLow: -20,
    stateLow: "frozen_fish",
    reactions: {
        "algae": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "plant": { elem2:null, chance:0.125, func:behaviors.FEEDPIXEL },
        "fly": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "firefly": { elem2:null, chance:0.6, func:behaviors.FEEDPIXEL },
        "worm": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "tadpole": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "dead_bug": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "broth": { elem2:"water", chance:0.2, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "herb": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "lettuce": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "dead_plant": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "yeast": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "yogurt": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "tea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "rotten_meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "cooked_meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "yolk": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "cell": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
    },
}
elements.raw_anchovy = {
    color: ["#915757", "#823939",],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:25,
    burnInto: "cooked_anchovy",
    tempHigh: 80,
    stateHigh: "cooked_anchovy",
    isFood: true,
    reactions: {
        "smoke": {elem1: "smoked_anchovy"},
        "steam": {elem1: "steamed_anchovy"},
        "water": {elem1: "boiled_anchovy", tempMin: 70},
        "nut_oil": {elem1: "fried_anchovy", tempMin: 70}
    }
}

elements.cooked_anchovy = {
    color: ["#B76C71", "#C2787C", "#A86265"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    hidden: true,
    temp:50,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.smoked_anchovy = {
    color: ["#9D5C24", "#A4632A"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    hidden: true,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.steamed_anchovy = {
    color: ["#CFA578", "#D4AC82"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:60,
    tempHigh: 600,
    hidden: true,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.boiled_anchovy = {
    color: ["#C79F65", "#D9B075"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    hidden: true,
    temp:70,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.fried_anchovy = {
    color: ["#BF8251", "#9F6031"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    hidden: true,
    temp:70,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}




















































//-------------------------------------------------------------------------------------------------------------------












































elements.simulated_incinerate = {
    color: ["#e600ff","#d984d8","#ff00e1"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tool: function(pixel) {
        if (elements[pixel.element].isScreen === true) {
            pixel.dtemp += 10000 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to heat simulated elements."
}

























//gaz metaller



elements.tungsten_gas = {
  
      
      color: "#8c8989",
     
      temp: 5556,

      behavior: behaviors.GAS,
      
      category: "states",
    
      state: "gas",
      
      density: 19300,
    
      tempLow: 5555,
     
      stateLow: "molten_tungsten",
    
      
  };

  elements.molten_tungsten.stateHigh = "tungsten_gas";

  elements.molten_tungsten.tempHigh = 5555;










  elements.iron_gas = {
  
      
    color: "#a6a6a6",
   
    behavior: behaviors.GAS,
    
    category: "states",
  
    state: "gas",

    temp: 2861,
    
    density: 7860,
  
    tempLow: 2862,
   
    stateLow: "molten_iron",
  
    
};

elements.molten_iron.stateHigh = "iron_gas";

elements.molten_iron.tempHigh = 2862;












elements.copper_gas = {
  
    color: "#615b4e",
   
    temp: 2563,

    behavior: behaviors.GAS,
    
    category: "states",
  
    state: "gas",
    
    density: 8960,
  
    tempLow: 2562,
   
    stateLow: "molten_copper",
  
    fireColor: ["#a7d17d", "#6cad2a"],

};

elements.molten_copper.stateHigh = "copper_gas";

elements.molten_copper.tempHigh = 2562;














elements.gold_gas = {
  
    color: "#7c8078",
   
    temp: 2837,

    behavior: behaviors.GAS,
    
    category: "states",
  
    state: "gas",
    
    density: 19300,
  
    tempLow: 2836,
   
    stateLow: "molten_gold",
  
    
};

elements.molten_gold.stateHigh = "gold_gas";

elements.molten_gold.tempHigh = 2836;


















elements.silver_gas = {
  
    color: "#c4c7c1",
   
    temp: 2163,

    behavior: behaviors.GAS,
    
    category: "states",
  
    state: "gas",
    
    density: 10897,
  
    tempLow: 2162,
   
    stateLow: "molten_silver",
  
    
};


elements.molten_silver.stateHigh = "silver_gas";

elements.molten_silver.tempHigh = 2162;





















elements.tin_gas = {
  
    color: "#979996",
   
    temp: 2603,

    behavior: behaviors.GAS,
    
    category: "states",
  
    state: "gas",
    
    density: 7260,
  
    tempLow: 2602,
   
    stateLow: "molten_tin",
  
    
};

elements.molten_tin.stateHigh = "tin_gas";

elements.molten_tin.tempHigh = 2602;





















































//-------------------------------------------------------------------------------------------------------------







































//iticiler
elements.up_pusher = {
	color: "#9fafdf",
	properties: {
		range: 10,
		pushStrength: 1,
	},
	tick: function(pixel) { 
		pixel.range ??= 10;
		pixel.pushStrength ??= 1;

		for(h = 0; h < pixel.pushStrength; h++) {
			for(i=(pixel.range - 1); i>=0; i--) {
				if (!isEmpty(pixel.x,pixel.y-1-i,true)) {
					tryMove(pixelMap[pixel.x][pixel.y-1-i],pixel.x,pixel.y-2-i);
				};
			};
		};
		
		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.down_pusher = {
	color: "#9fafdf",
	properties: {
		range: 10,
		pushStrength: 1,
	},
	tick: function(pixel) { 
		pixel.range ??= 10;
		pixel.pushStrength ??= 1;

			for(h = 0; h < pixel.pushStrength; h++) {
				for(i=(pixel.range - 1); i>=0; i--) {
					if (!isEmpty(pixel.x,pixel.y+1+i,true)) {
						tryMove(pixelMap[pixel.x][pixel.y+1+i],pixel.x,pixel.y+2+i);
					};
				};
			};

		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum0", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.left_pusher = {
	color: "#9fafdf",
	properties: {
		range: 10,
		pushStrength: 1,
	},
	tick: function(pixel) { 
		pixel.range ??= 10;
		pixel.pushStrength ??= 1;

		for(h = 0; h < pixel.pushStrength; h++) {
			for(i=(pixel.range - 1); i>=0; i--) {
				if (!isEmpty(pixel.x-1-i,pixel.y,true)) {
					tryMove(pixelMap[pixel.x-1-i][pixel.y],pixel.x-2-i,pixel.y);
				};
			};
		};

		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.right_pusher = {
	color: "#9fafdf",
	properties: {
		range: 10,
		pushStrength: 1,
	},
	tick: function(pixel) { 
		pixel.range ??= 10;
		pixel.pushStrength ??= 1;

		for(h = 0; h < pixel.pushStrength; h++) {
			for(i=(pixel.range - 1); i>=0; i--) {
				if (!isEmpty(pixel.x+1+i,pixel.y,true)) {
					tryMove(pixelMap[pixel.x+1+i][pixel.y],pixel.x+2+i,pixel.y);
				};
			};
		};

		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.up_e_pusher = {
	color: "#9f9f6f",
	properties: {
		range: 10,
		pushTime: 0,
		pushLength: 5,
		pushStrength: 1,
	},
	tick: function(pixel) { 
		pixel.range ??= 10;
		pixel.pushTime ??= 0;
		pixel.pushLength ??= 5;
		pixel.pushStrength ??= 1;
		if(isNaN(pixel.pushTime) || pixel.pushTime < 0) { pixel.pushTime = 0 };

		if(pixel.charge) {
			pixel.pushTime = pixel.pushLength;
		};

		if(pixel.pushTime > 0) {
			for(h = 0; h < pixel.pushStrength; h++) {
				for(i=(pixel.range - 1); i>=0; i--) {
					if (!isEmpty(pixel.x,pixel.y-1-i,true)) {
						tryMove(pixelMap[pixel.x][pixel.y-1-i],pixel.x,pixel.y-2-i);
					};
				};
			};
			pixel.pushTime--;
		};
		
		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.down_e_pusher = {
	color: "#9f9f6f",
	properties: {
		range: 10,
		pushTime: 0,
		pushLength: 5,
		pushStrength: 1,
	},
	tick: function(pixel) { 
		pixel.range ??= 10;
		pixel.pushTime ??= 0;
		pixel.pushLength ??= 5;
		pixel.pushStrength ??= 1;
		if(isNaN(pixel.pushTime) || pixel.pushTime < 0) { pixel.pushTime = 0 };

		if(pixel.charge) {
			pixel.pushTime = pixel.pushLength;
		};

		if(pixel.pushTime > 0) {
			for(h = 0; h < pixel.pushStrength; h++) {
				for(i=(pixel.range - 1); i>=0; i--) {
					if (!isEmpty(pixel.x,pixel.y+1+i,true)) {
						tryMove(pixelMap[pixel.x][pixel.y+1+i],pixel.x,pixel.y+2+i);
					};
				};
			};
			pixel.pushTime--;
		};

		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum0", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.left_e_pusher = {
	color: "#9f9f6f",
	properties: {
		range: 10,
		pushTime: 0,
		pushLength: 5,
		pushStrength: 1,
	},
	tick: function(pixel) { 
		pixel.range ??= 10;
		pixel.pushTime ??= 0;
		pixel.pushLength ??= 5;
		pixel.pushStrength ??= 1;
		if(isNaN(pixel.pushTime) || pixel.pushTime < 0) { pixel.pushTime = 0 };

		if(pixel.charge) {
			pixel.pushTime = pixel.pushLength;
		};

		if(pixel.pushTime > 0) {
			for(h = 0; h < pixel.pushStrength; h++) {
				for(i=(pixel.range - 1); i>=0; i--) {
					if (!isEmpty(pixel.x-1-i,pixel.y,true)) {
						tryMove(pixelMap[pixel.x-1-i][pixel.y],pixel.x-2-i,pixel.y);
					};
				};
			};
			pixel.pushTime--;
		};

		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.right_e_pusher = {
	color: "#9f9f6f",
	properties: {
		range: 10,
		pushTime: 0,
		pushLength: 5,
		pushStrength: 1,
	},
	tick: function(pixel) { 
		pixel.range ??= 10;
		pixel.pushTime ??= 0;
		pixel.pushLength ??= 5;
		pixel.pushStrength ??= 1;
		if(isNaN(pixel.pushTime) || pixel.pushTime < 0) { pixel.pushTime = 0 };

		if(pixel.charge) {
			pixel.pushTime = pixel.pushLength;
		};

		if(pixel.pushTime > 0) {
			for(h = 0; h < pixel.pushStrength; h++) {
				for(i=(pixel.range - 1); i>=0; i--) {
					if (!isEmpty(pixel.x+1+i,pixel.y,true)) {
						tryMove(pixelMap[pixel.x+1+i][pixel.y],pixel.x+2+i,pixel.y);
					};
				};
			};
			pixel.pushTime--;
		};

		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}








//cekiciler

behaviors.SELFDELETE = [
    "XX|XX|XX",
    "XX|DL|XX",
    "XX|XX|XX",
  ];
  
  pullerColour = '#e0adb6'
  
  
  
  
  elements.parrot = {
	color: ["#234d20","#36802d","#77ab59","#c9df8a","#f0f7da","#f90f0b","#f7ab4d","#fdfc0d","#0564b2","#60a3e6"],
	behavior: behaviors.FLY,
	category: "life",
	state: "solid",
	burn: 40,
	burnTime: 100,
	density: 400,
	breakInto: ["feather","blood"],
	tempHigh: 120,
	stateHigh: "cooked_meat",
	tempLow: -18,
	stateLow: "frozen_meat",
	reactions: {
        "fly": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "firefly": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "bee": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "worm": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "ant": { elem2:null, chance:0.025, func:behaviors.FEEDPIXEL },
        "dead_bug": { elem2:null, chance:0.04, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.04, func:behaviors.FEEDPIXEL },
        "termite": { elem2:null, chance:0.025, func:behaviors.FEEDPIXEL },
        "flea": { elem2:null, chance:0.025, func:behaviors.FEEDPIXEL },
        "mushroom_cap": { elem2:null, chance:0.025, func:behaviors.FEEDPIXEL },
        "mushroom_gill": { elem2:null, chance:0.025, func:behaviors.FEEDPIXEL },
        "seeds": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "flower_seed": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "wheat_seed": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "corn_seed": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "corn": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "potato_seed": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "grass_seed": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "pumpkin": { elem2:null, chance:0.025, func:behaviors.FEEDPIXEL },
        "pumpkin_seed": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "plague": { elem1:"plague", chance:0.05 },
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 }
    },
    foodNeed: 20,
    temp: 41,
    tempHigh: 120,
    stateHigh: "cooked_meat",
    stateHighColor: "#E4CFB9",
    tempLow: -18,
    stateLow: "frozen_meat",
    category:"life",
    burn:50,
    burnTime:100,
    breakInto: ["feather","blood"],
    state: "solid",
    density: 400,
    conduct: 0.5
};
  
  
  
  
  
  
  elements.right_puller = {
      color: pullerColour,
      properties: {
          range: 10,
          pushStrength: 1,
      },
      tick: function(pixel) { 
          pixel.range ??= 10;
          pixel.pushStrength ??= 1;
      for(h = pixel.pushStrength; h >= pixel.pushStrength; h--) {
              for (i = 1; i <= pixel.range; i++) {
          if (!isEmpty(pixel.x - i, pixel.y, true)) {
            if (pixelMap[pixel.x-i][pixel.y]['immovable']) {break}
            else {
              tryMove(pixelMap[pixel.x - i][pixel.y], pixel.x - i + 1, pixel.y); 
            }
          }
        }
          };
  
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  elements.down_puller = {
      color: pullerColour,
      properties: {
          range: 10,
          pushStrength: 1,
      },
      tick: function(pixel) { 
          pixel.range ??= 10;
          pixel.pushStrength ??= 1;
      for(h = pixel.pushStrength; h >= pixel.pushStrength; h--) {
              for (i = 1; i <= pixel.range; i++) { 
          
          if (!isEmpty(pixel.x, pixel.y - i, true)) {
            if (pixelMap[pixel.x][pixel.y - i]['immovable']) {break}
            else {
              tryMove(pixelMap[pixel.x][pixel.y - i], pixel.x, pixel.y - i + 1); 
            }
          }
        }
          };
  
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  elements.up_puller = {
      color: pullerColour,
      properties: {
          range: 10,
          pushStrength: 1,
      },
      tick: function(pixel) { 
          pixel.range ??= 10;
          pixel.pushStrength ??= 1;
      for(h = pixel.pushStrength; h >= pixel.pushStrength; h--) {
              for (i = 1; i <= pixel.range; i++) { 
          if (!isEmpty(pixel.x, pixel.y + i, true)) {          
            
            if (pixelMap[pixel.x][pixel.y + i]['immovable']){
              break
            }
            else {
              tryMove(pixelMap[pixel.x][pixel.y + i], pixel.x, pixel.y + i - 1);
            }
          }
        }
          };
  
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  if (enabledMods.includes("mods/pushers.js")) {
    console.info('compatibility with pushers.js and imovable objects coming in a later update of the pullers.js')
  }
  
  e_pullerColour='#c3a5d6'
  
  elements.left_e_puller = {
      color: e_pullerColour,
      properties: {
          range: 10,
          pushStrength: 1,
      },
      tick: function(pixel) {
      if (pixel.charge) {
        elements.left_puller.tick(pixel)
      }
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  
  
  elements.right_e_puller = {
      color: e_pullerColour,
      properties: {
          range: 10,
          pushStrength: 1,
      },
      tick: function(pixel) { 
          if (pixel.charge) {
        elements.right_puller.tick(pixel)
      }
  
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  elements.down_e_puller = {
      color: e_pullerColour,
      properties: {
          range: 10,
          pushStrength: 1,
      },
      tick: function(pixel) { 
          if (pixel.charge) {
        elements.down_puller.tick(pixel)
      }
  
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  elements.up_e_puller = {
      color: e_pullerColour,
      properties: {
          range: 10,
          pushStrength: 1,
      },
      tick: function(pixel) { 
      if (pixel.charge) {
        elements.up_puller.tick(pixel)
      }
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  function removeItemOnce(arr, value) {
    var index = arr.indexOf(value);
    if (index > -1) {
      arr.splice(index, 1);
      console.log('hit')
    }
    return arr;
  }
  
  elements.gravity_cell = {
    color: pullerColour,
    properties: {
      range: 3,
    },
    tick: function(pixel) {
      pixel.color = ("#" + ((192 + Math.abs((pixelTicks * 4) % 64)).toString(16) + "e0ad").padStart(6, '0'));
      for (j=0; j <=pixel.range; j++) {
        
        // generate the cooridinates that nabough the grav cell
        cords=circleCoords(pixel.x, pixel.y, j)
        for (i in cords) {
          pos = cords[i]
          if (!isEmpty(pos.x,pos.y)&&!(pos.x==pixel.x&&pos.y==pixel.y)){
            x = (pixel.x-pos.x)
            y = (pixel.y-pos.y)
            
            if (x<0) {
              x=-1
            } else if (x>0){
              x=1
            }
    
            if (y<0) {
              y=-1
            } else if (y>0){
              y=1
            }
            
            try {
              tryMove(pixelMap[pos.x][pos.y], pos.x+x, pos.y+y)
            } catch (error) {}// if there is an error, its probably out of bounds, not my problem :)
          }
        }
      }
      doDefaults(pixel);
    },
    category: "machines",
    density: 10000,
    hardness: 1,
    conduct: 0,
    state: "solid",  
  }
  
  
  elements.black_hole = {
    color: elements.void.color,
    maxSize: 1,
    properties: {
      range: 10,
      immovable: true,
    },
    tick: function(pixel) {
      
      for (j=0; j <=pixel.range; j++) {
        
        // generate the cooridinates that neighbour the black hole
        cords=circleCoords(pixel.x, pixel.y, j)
        for (i in cords) {
          pos = cords[i]
          if (!isEmpty(pos.x,pos.y)&&!(pos.x==pixel.x&&pos.y==pixel.y)){
            x = (pixel.x-pos.x)
            y = (pixel.y-pos.y)
            
            if (x<0) {
              x=-1
            } else if (x>0){
              x=1
            }
    
            if (y<0) {
              y=-1
            } else if (y>0){
              y=1
            }
            
            try {
              tryMove(pixelMap[pos.x][pos.y], pos.x+x, pos.y+y)
            } catch (error) {}// if there is an error, its probably out of bounds, not my problem :)
          }
        }
      }
  
      for (let i = -1; i < 2; i++) {
        for (let j = -1; j < 2; j++) {
          if (!isEmpty(pixel.x+j,pixel.y+i) && !outOfBounds(pixel.x+j,pixel.y+i)&&!((i==0)&&(j==0))) {
            deletePixel(pixel.x+j,pixel.y+i)
          }
        }
      }
  
      doDefaults(pixel);
    },
    category: "machines",
    density: 10000,
    hardness: 1,
    temp: -273.15,
    insulate:true,
    conduct: 0,
    excludeRandom: true,
    noMix: true,
    state: "solid",  
    movable: false
  }
  









































































































  //--------------------------------------------------------------------------------------------------------




















































































































  














































































  //-----------------------------------------------------------------------------------------------------------------


  elements.dragon_fruit_wood = {
    color: "#a88c4a",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
};
elements.dragon_fruit_branch = {
    color: "#a88c4a",
    behavior: [
        "CR:dragon_fruit_leaves,dragon_fruit_branch%2|CR:dragon_fruit_leaves,dragon_fruit_branch%2|CR:dragon_fruit_leaves,dragon_fruit_branch%2",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tempHigh: 100,
    stateHigh: "dragon_fruit_wood",
    tempLow: -30,
    stateLow: "dragon_fruit_wood",
    category: "life",
    burn: 40,
    burnTime: 50,
    burnInto: ["sap","ember","charcoal"],
    hidden: true,
    state: "solid",
    density: 1500,
    hardness: 0.15,
    breakInto: ["sap","sawdust"],
};
elements.dragon_fruit_leaves = {
    color: ["#61c43d","#5ddb3d","#51d44c"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|CR:dragon_fruit%0.1|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
};
elements.dragon_fruit = {
    color: ["#cc2d2d","#a82828","#b32020"],
    behavior: behaviors.POWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dragon_fruit_juice",
    cutInto: ["dragon_fruit_slice","dragon_fruit_slice","dragon_fruit_slice","dragon_fruit_slice","dragon_fruit_peels"],
    state: "solid",
    density: 1050,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#cf9f40",
};
elements.dragon_fruit_slice = {
    color: "#cc2525",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dragon_fruit_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    reactions: {
        "sugar": { elem1:"marmalade", elem2:null, chance:0.35 }
    },
};
elements.dragon_fruit_seed = {
    color: "#ba8511",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "dragon_fruit_wood" : "dragon_fruit_branch",pixel.x,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"dragon_fruit_wood");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};
elements.dragon_fruit_juice = {
    color: "#db1d1d",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#ffde55")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    tempLow: 0
};
elements.dragon_fruit_peels = {
    color: "#d93030",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dragon_fruit_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    reactions: {
        "sugar": { elem1:"marmalade", elem2:null, chance:0.35 }
    },
};
























































elements.star_fruit_wood = {
    color: "#967a36",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
};
elements.star_fruit_branch = {
    color: "#967a36",
    behavior: [
        "CR:star_fruit_leaves,star_fruit_branch%2|CR:star_fruit_leaves,star_fruit_branch%2|CR:star_fruit_leaves,star_fruit_branch%2",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tempHigh: 100,
    stateHigh: "star_fruit_wood",
    tempLow: -30,
    stateLow: "star_fruit_wood",
    category: "life",
    burn: 40,
    burnTime: 50,
    burnInto: ["sap","ember","charcoal"],
    hidden: true,
    state: "solid",
    density: 1500,
    hardness: 0.15,
    breakInto: ["sap","sawdust"],
};
elements.star_fruit_leaves = {
    color: ["#61c43d","#5ddb3d","#51d44c"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|CR:star_fruit%0.1|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
};
elements.star_fruit = {
    color: ["#c1e069","#b4d950","#d9d250"],
    behavior: behaviors.POWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "star_fruit_juice",
    cutInto: ["star_fruit_slice","star_fruit_slice","star_fruit_slice","star_fruit_slice","star_fruit_peels"],
    state: "solid",
    
    density: 1050,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#cf9f40",
};
elements.star_fruit.emit = true;
elements.star_fruit_slice = {
    color: "#fcf568",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "star_fruit_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    reactions: {
        "sugar": { elem1:"marmalade", elem2:null, chance:0.35 }
    },
};
elements.star_fruit_seed = {
    color: "#dea21f",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "star_fruit_wood" : "star_fruit_branch",pixel.x,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"star_fruit_wood");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};
elements.star_fruit_juice = {
    color: "#fffa9e",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#ffde55")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    tempLow: 0
};
elements.star_fruit_peels = {
    color: "#d6c356",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "star_fruit_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    reactions: {
        "sugar": { elem1:"marmalade", elem2:null, chance:0.35 }
    },
};




















































































































































elements.kiwi_wood = {
    color: "#b0770c",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
};
elements.kiwi_branch = {
    color: "#a88c4a",
    behavior: [
        "CR:kiwi_leaves,kiwi_branch%2|CR:kiwi_leaves,kiwi_branch%2|CR:kiwi_leaves,kiwi_branch%2",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tempHigh: 100,
    stateHigh: "kiwi_wood",
    tempLow: -30,
    stateLow: "kiwi_wood",
    category: "life",
    burn: 40,
    burnTime: 50,
    burnInto: ["sap","ember","charcoal"],
    hidden: true,
    state: "solid",
    density: 1500,
    hardness: 0.15,
    breakInto: ["sap","sawdust"],
};
elements.kiwi_leaves = {
    color: ["#61c43d","#5ddb3d","#51d44c"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|CR:kiwi%0.1|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
};
elements.kiwi = {
    color: ["#1b9449","#1fb558"],
    behavior: behaviors.POWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "kiwi_juice",
    cutInto: ["kiwi_slice","kiwi_slice","kiwi_slice","kiwi_slice","kiwi_peels"],
    state: "solid",
    density: 1050,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#cf9f40",
};
elements.kiwi_slice = {
    color: "#28c730",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "kiwi_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    reactions: {
        "sugar": { elem1:"marmalade", elem2:null, chance:0.35 }
    },
};
elements.kiwi_seed = {
    color: "#d18f15",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "kiwi_wood" : "kiwi_branch",pixel.x,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"kiwi_wood");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};
elements.kiwi_juice = {
    color: "#1bc46d",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#ffde55")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    tempLow: 0
};
elements.kiwi_peels = {
    color: "#1bc42a",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "kiwi_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    reactions: {
        "sugar": { elem1:"marmalade", elem2:null, chance:0.35 }
    },
};
//---------------------------------------------------"kiwi_juice");
//---------------------------------------------------"dragon_fruit_juice");
//---------------------------------------------------------------------------------------------------































































































//s_iticiler
elements.up_long_range_pusher = {
	color: "#9fafdf",
	properties: {
		range: 40,
		pushStrength: 4,
	},
	tick: function(pixel) { 
		pixel.range ??= 40;
		pixel.pushStrength ??= 1;

		for(h = 0; h < pixel.pushStrength; h++) {
			for(i=(pixel.range - 1); i>=0; i--) {
				if (!isEmpty(pixel.x,pixel.y-1-i,true)) {
					tryMove(pixelMap[pixel.x][pixel.y-1-i],pixel.x,pixel.y-2-i);
				};
			};
		};
		
		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.down_long_range_pusher = {
	color: "#9fafdf",
	properties: {
		range: 40,
		pushStrength: 4,
	},
	tick: function(pixel) { 
		pixel.range ??= 40;
		pixel.pushStrength ??= 1;

			for(h = 0; h < pixel.pushStrength; h++) {
				for(i=(pixel.range - 1); i>=0; i--) {
					if (!isEmpty(pixel.x,pixel.y+1+i,true)) {
						tryMove(pixelMap[pixel.x][pixel.y+1+i],pixel.x,pixel.y+2+i);
					};
				};
			};

		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum0", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.left_long_range_pusher = {
	color: "#9fafdf",
	properties: {
		range: 40,
		pushStrength: 4,
	},
	tick: function(pixel) { 
		pixel.range ??= 40;
		pixel.pushStrength ??= 1;

		for(h = 0; h < pixel.pushStrength; h++) {
			for(i=(pixel.range - 1); i>=0; i--) {
				if (!isEmpty(pixel.x-1-i,pixel.y,true)) {
					tryMove(pixelMap[pixel.x-1-i][pixel.y],pixel.x-2-i,pixel.y);
				};
			};
		};

		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.right_long_range_pusher = {
	color: "#9fafdf",
	properties: {
		range: 40,
		pushStrength: 4,
	},
	tick: function(pixel) { 
		pixel.range ??= 40;
		pixel.pushStrength ??= 1;

		for(h = 0; h < pixel.pushStrength; h++) {
			for(i=(pixel.range - 1); i>=0; i--) {
				if (!isEmpty(pixel.x+1+i,pixel.y,true)) {
					tryMove(pixelMap[pixel.x+1+i][pixel.y],pixel.x+2+i,pixel.y);
				};
			};
		};

		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.up_e_long_range_pusher = {
	color: "#9f9f6f",
	properties: {
		range: 40,
		pushTime: 0,
		pushLength: 5,
		pushStrength: 4,
	},
	tick: function(pixel) { 
		pixel.range ??= 40;
		pixel.pushTime ??= 0;
		pixel.pushLength ??= 5;
		pixel.pushStrength ??= 1;
		if(isNaN(pixel.pushTime) || pixel.pushTime < 0) { pixel.pushTime = 0 };

		if(pixel.charge) {
			pixel.pushTime = pixel.pushLength;
		};

		if(pixel.pushTime > 0) {
			for(h = 0; h < pixel.pushStrength; h++) {
				for(i=(pixel.range - 1); i>=0; i--) {
					if (!isEmpty(pixel.x,pixel.y-1-i,true)) {
						tryMove(pixelMap[pixel.x][pixel.y-1-i],pixel.x,pixel.y-2-i);
					};
				};
			};
			pixel.pushTime--;
		};
		
		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.down_e_long_range_pusher = {
	color: "#9f9f6f",
	properties: {
		range: 40,
		pushTime: 0,
		pushLength: 5,
		pushStrength: 4,
	},
	tick: function(pixel) { 
		pixel.range ??= 40;
		pixel.pushTime ??= 0;
		pixel.pushLength ??= 5;
		pixel.pushStrength ??= 1;
		if(isNaN(pixel.pushTime) || pixel.pushTime < 0) { pixel.pushTime = 0 };

		if(pixel.charge) {
			pixel.pushTime = pixel.pushLength;
		};

		if(pixel.pushTime > 0) {
			for(h = 0; h < pixel.pushStrength; h++) {
				for(i=(pixel.range - 1); i>=0; i--) {
					if (!isEmpty(pixel.x,pixel.y+1+i,true)) {
						tryMove(pixelMap[pixel.x][pixel.y+1+i],pixel.x,pixel.y+2+i);
					};
				};
			};
			pixel.pushTime--;
		};

		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum0", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.left_e_long_range_pusher = {
	color: "#9f9f6f",
	properties: {
		range: 40,
		pushTime: 0,
		pushLength: 5,
		pushStrength: 4,
	},
	tick: function(pixel) { 
		pixel.range ??= 40;
		pixel.pushTime ??= 0;
		pixel.pushLength ??= 5;
		pixel.pushStrength ??= 1;
		if(isNaN(pixel.pushTime) || pixel.pushTime < 0) { pixel.pushTime = 0 };

		if(pixel.charge) {
			pixel.pushTime = pixel.pushLength;
		};

		if(pixel.pushTime > 0) {
			for(h = 0; h < pixel.pushStrength; h++) {
				for(i=(pixel.range - 1); i>=0; i--) {
					if (!isEmpty(pixel.x-1-i,pixel.y,true)) {
						tryMove(pixelMap[pixel.x-1-i][pixel.y],pixel.x-2-i,pixel.y);
					};
				};
			};
			pixel.pushTime--;
		};

		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}

elements.right_e_long_range_pusher = {
	color: "#9f9f6f",
	properties: {
		range: 40,
		pushTime: 0,
		pushLength: 5,
		pushStrength: 4,
	},
	tick: function(pixel) { 
		pixel.range ??= 40;
		pixel.pushTime ??= 0;
		pixel.pushLength ??= 5;
		pixel.pushStrength ??= 1;
		if(isNaN(pixel.pushTime) || pixel.pushTime < 0) { pixel.pushTime = 0 };

		if(pixel.charge) {
			pixel.pushTime = pixel.pushLength;
		};

		if(pixel.pushTime > 0) {
			for(h = 0; h < pixel.pushStrength; h++) {
				for(i=(pixel.range - 1); i>=0; i--) {
					if (!isEmpty(pixel.x+1+i,pixel.y,true)) {
						tryMove(pixelMap[pixel.x+1+i][pixel.y],pixel.x+2+i,pixel.y);
					};
				};
			};
			pixel.pushTime--;
		};

		doDefaults(pixel);
	},
	category: "machines",
	breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
	tempHigh: 2400,
	stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
	density: 10000,
	hardness: 0.85,
	conduct: 1,
	state: "solid",
}













//s_cekiciler

behaviors.SELFDELETE = [
    "XX|XX|XX",
    "XX|DL|XX",
    "XX|XX|XX",
  ];
  
  long_range_pullerColour = '#e0adb6'
  
  
  
  
  
  
  
  elements.left_long_range_puller = {
      color: long_range_pullerColour,
      properties: {
          range: 40,
          pushStrength: 4,
      },
      tick: function(pixel) { 
          pixel.range ??= 40;
          pixel.pushStrength ??= 1;
      for(h = pixel.pushStrength; h >= pixel.pushStrength; h--) {
              for (i = 1; i <= pixel.range; i++) {
  
          if (!isEmpty(pixel.x + i, pixel.y, true)) { 
            if (pixelMap[pixel.x+i][pixel.y]['immovable']) {break}
            else {
              tryMove(pixelMap[pixel.x + i][pixel.y], pixel.x + i - 1, pixel.y); 
            }
          }
        }
          };
  
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  
  
  elements.right_long_range_puller = {
      color: long_range_pullerColour,
      properties: {
          range: 40,
          pushStrength: 4,
      },
      tick: function(pixel) { 
          pixel.range ??= 40;
          pixel.pushStrength ??= 1;
      for(h = pixel.pushStrength; h >= pixel.pushStrength; h--) {
              for (i = 1; i <= pixel.range; i++) {
          if (!isEmpty(pixel.x - i, pixel.y, true)) {
            if (pixelMap[pixel.x-i][pixel.y]['immovable']) {break}
            else {
              tryMove(pixelMap[pixel.x - i][pixel.y], pixel.x - i + 1, pixel.y); 
            }
          }
        }
          };
  
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  elements.down_long_range_puller = {
      color: long_range_pullerColour,
      properties: {
          range: 40,
          pushStrength: 4,
      },
      tick: function(pixel) { 
          pixel.range ??= 40;
          pixel.pushStrength ??= 1;
      for(h = pixel.pushStrength; h >= pixel.pushStrength; h--) {
              for (i = 1; i <= pixel.range; i++) { 
          
          if (!isEmpty(pixel.x, pixel.y - i, true)) {
            if (pixelMap[pixel.x][pixel.y - i]['immovable']) {break}
            else {
              tryMove(pixelMap[pixel.x][pixel.y - i], pixel.x, pixel.y - i + 1); 
            }
          }
        }
          };
  
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  elements.up_long_range_puller = {
      color: long_range_pullerColour,
      properties: {
          range: 40,
          pushStrength: 4,
      },
      tick: function(pixel) { 
          pixel.range ??= 40;
          pixel.pushStrength ??= 1;
      for(h = pixel.pushStrength; h >= pixel.pushStrength; h--) {
              for (i = 1; i <= pixel.range; i++) { 
          if (!isEmpty(pixel.x, pixel.y + i, true)) {          
            
            if (pixelMap[pixel.x][pixel.y + i]['immovable']){
              break
            }
            else {
              tryMove(pixelMap[pixel.x][pixel.y + i], pixel.x, pixel.y + i - 1);
            }
          }
        }
          };
  
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  if (enabledMods.includes("mods/long_range_pushers.js")) {
    console.info('compatibility with long_range_pushers.js and imovable objects coming in a later update of the long_range_pullers.js')
  }
  
  e_long_range_pullerColour='#c3a5d6'
  
  elements.left_e_long_range_puller = {
      color: e_long_range_pullerColour,
      properties: {
          range: 40,
          pushStrength: 4,
      },
      tick: function(pixel) {
      if (pixel.charge) {
        elements.left_long_range_puller.tick(pixel)
      }
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  
  
  elements.right_e_long_range_puller = {
      color: e_long_range_pullerColour,
      properties: {
          range: 40,
          pushStrength: 4,
      },
      tick: function(pixel) { 
          if (pixel.charge) {
        elements.right_long_range_puller.tick(pixel)
      }
  
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  elements.down_e_long_range_puller = {
      color: e_long_range_pullerColour,
      properties: {
          range: 40,
          pushStrength: 4,
      },
      tick: function(pixel) { 
          if (pixel.charge) {
        elements.down_long_range_puller.tick(pixel)
      }
  
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  elements.up_e_long_range_puller = {
      color: e_long_range_pullerColour,
      properties: {
          range: 40,
          pushStrength: 4,
      },
      tick: function(pixel) { 
      if (pixel.charge) {
        elements.up_long_range_puller.tick(pixel)
      }
          doDefaults(pixel);
      },
      category: "machines",
      breakInto: ["metal_scrap", "steel", "iron", "glass", "uranium", "tin"],
      tempHigh: 2400,
      stateHigh: ["molten_aluminum", "molten_steel", "molten_iron", "molten_glass", "molten_uranium", "molten_tin"],
      density: 10000,
      hardness: 0.85,
      conduct: 1,
      state: "solid",
  }
  
  function removeItemOnce(arr, value) {
    var index = arr.indexOf(value);
    if (index > -1) {
      arr.splice(index, 1);
      console.log('hit')
    }
    return arr;
  }
  









































































  //----------------------------------------------------------------------------------------------------------------------------------
















































































  elements.better_ball = {
    name: "ball",
    tick: function(pixel) {
        if (pixel.dir === "down") {
            if (tryMove(pixel, pixel.x, pixel.y+1)) {
                    if ((!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1)) && pixel.speed > 0.5) {
                        pixel.speed += 1
                        console.log("go up and down code")
                        if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.speed > 0.5) { 
                            var beneath = pixelMap[pixel.x][pixel.y+1];
                            if (elements[beneath.element].id === elements.better_ball.id) { 
                                if (beneath.dir === "up") { 
                                    pixel.dir = "up"
                                    beneath.dir = "down"
                                    beneath.speed = pixel.speed
                                    pixel.speed = beneath.speed
                                }
                                else { 
                                    pixel.dir = "up"
                                }
                            }
                            else { 
                                pixel.dir = "up"
                            }
                        }
                        else if (outOfBounds(pixel.x,pixel.y+1) && pixel.speed > 0.5) { 
                            pixel.dir = "up"
                        }
                    }
                    else {
                        pixel.speed += 1
                        console.log("increase speed code")
                    }
            }
            else if (!tryMove(pixel, pixel.x, pixel.y+1) && (!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1))) {
                if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.roll === false && (isEmpty(pixel.x-1, pixel.y+1) || isEmpty(pixel.x+1, pixel.y+1))) {
                    console.log("incline code")
                    if (isEmpty(pixel.x+1, pixel.y+1)) {
                        pixel.rolldir = 1
                    }
                    else if (isEmpty(pixel.x-1, pixel.y+1)) {
                        pixel.rolldir = -1
                    }
                    tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y+1);
                    pixel.rollspeed += 1
                }
                else if ((!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1)) && pixel.rollspeed > 0) {
                    pixel.rollspeed -= 1
                    pixel.speed = 0
                    if (pixel.roll === false) {
                        pixel.roll = true
                    }
                    if (!isEmpty(pixel.x+(pixel.rolldir), pixel.y, true) && pixel.rollspeed < 10) {
                        console.log("bounce off wall code")
                        pixel.rolldir = (pixel.rolldir-(2*pixel.rolldir))
                    }
                    else if (pixel.rollspeed > 9 && isEmpty(pixel, pixel.x+(pixel.rolldir), pixel.y-1) && !isEmpty(pixel.x+(pixel.rolldir), pixel.y, true)) {
                        console.log("uphill code")
                        tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y-1);
                        pixel.rollspeed -= 1
                        pixel.speed = 0
                    }
                    else if (!isEmpty(pixel.x+(pixel.rolldir), pixel.y+1, true)) {
                        console.log("roll code")
                        tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y)
                    }
                    else if (isEmpty(pixel.x+(pixel.rolldir), pixel.y)) {
                        console.log("stop roll code")
                        pixel.roll = false
                    }
                }
                else if (pixel.rollspeed < 1 && pixel.roll === true) {
                    pixel.roll = false
                }
            }
        } 
        else if (pixel.speed > 0 && pixel.dir === "up") {
            if (tryMove(pixel, pixel.x, pixel.y-1)) {
                pixel.speed -= 1.15
                if (outOfBounds(pixel.x,pixel.y-1) || !isEmpty(pixel.x, pixel.y-1, true)) { 
                    if (!isEmpty(pixel.x, pixel.y-1, true) && pixel.speed > 0) { 
                        var above = pixelMap[pixel.x][pixel.y-1];
                        if (elements[above.element].id === elements.better_ball.id) {
                            if (above.dir === "down") { 
                                pixel.dir = "down"
                                above.dir = "up"
                                above.speed = pixel.speed
                                pixel.speed = above.speed
                            }
                            else { 
                                pixel.dir = "down"
                            }
                        }
                    }
                    else if (outOfBounds(pixel.x,pixel.y-1) && pixel.speed > 0) { 
                        pixel.dir = "down"
                    }
                }
                if (pixel.speed < 1) { 
                    pixel.dir = "down"
                }
            }
        } 
        doDefaults(pixel);
    },
    properties: {
        speed: 0,
        dir: "down",
        roll: false,
        rollspeed: 0,
    },
    color: "#e35693",
    tempHigh: 250,
    stateHigh: "molten_plastic",
    category: "special"
}

elements.basketball = {
    tick: function(pixel) {
        if (pixel.dir === "down") {
            if (tryMove(pixel, pixel.x, pixel.y+1)) {
                    if ((!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1)) && pixel.speed > 0.5) {
                        pixel.speed += 1
                        console.log("go up and down code")
                        if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.speed > 0.5) { 
                            var beneath = pixelMap[pixel.x][pixel.y+1];
                            if (elements[beneath.element].id === elements.better_ball.id) { 
                                if (beneath.dir === "up") { 
                                    pixel.dir = "up"
                                    beneath.dir = "down"
                                    beneath.speed = pixel.speed
                                    pixel.speed = beneath.speed
                                }
                                else { 
                                    pixel.dir = "up"
                                }
                            }
                            else { 
                                pixel.dir = "up"
                            }
                        }
                        else if (outOfBounds(pixel.x,pixel.y+1) && pixel.speed > 0.5) { 
                            pixel.dir = "up"
                        }
                    }
                    else {
                        pixel.speed += 1
                        console.log("increase speed code")
                    }
            }
            else if (!tryMove(pixel, pixel.x, pixel.y+1) && (!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1))) {
                if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.roll === false && (isEmpty(pixel.x-1, pixel.y+1) || isEmpty(pixel.x+1, pixel.y+1))) {
                    console.log("incline code")
                    if (isEmpty(pixel.x+1, pixel.y+1)) {
                        pixel.rolldir = 1
                    }
                    else if (isEmpty(pixel.x-1, pixel.y+1)) {
                        pixel.rolldir = -1
                    }
                    tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y+1);
                    pixel.rollspeed += 1
                }
                else if ((!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1)) && pixel.rollspeed > 0) {
                    pixel.rollspeed -= 1
                    pixel.speed = 0
                    if (pixel.roll === false) {
                        pixel.roll = true
                    }
                    if (!isEmpty(pixel.x+(pixel.rolldir), pixel.y, true) && pixel.rollspeed < 10) {
                        console.log("bounce off wall code")
                        pixel.rolldir = (pixel.rolldir-(2*pixel.rolldir))
                    }
                    else if (pixel.rollspeed > 9 && isEmpty(pixel, pixel.x+(pixel.rolldir), pixel.y-1) && !isEmpty(pixel.x+(pixel.rolldir), pixel.y, true)) {
                        console.log("uphill code")
                        tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y-1);
                        pixel.rollspeed -= 1
                        pixel.speed = 0
                    }
                    else if (!isEmpty(pixel.x+(pixel.rolldir), pixel.y+1, true)) {
                        console.log("roll code")
                        tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y)
                    }
                    else if (isEmpty(pixel.x+(pixel.rolldir), pixel.y)) {
                        console.log("stop roll code")
                        pixel.roll = false
                    }
                }
                else if (pixel.rollspeed < 1 && pixel.roll === true) {
                    pixel.roll = false
                }
            }
        } 
        else if (pixel.speed > 0 && pixel.dir === "up") {
            if (tryMove(pixel, pixel.x, pixel.y-1)) {
                pixel.speed -= 1.4
                if (outOfBounds(pixel.x,pixel.y-1) || !isEmpty(pixel.x, pixel.y-1, true)) { 
                    if (!isEmpty(pixel.x, pixel.y-1, true) && pixel.speed > 0) { 
                        var above = pixelMap[pixel.x][pixel.y-1];
                        if (elements[above.element].id === elements.better_ball.id) {
                            if (above.dir === "down") { 
                                pixel.dir = "down"
                                above.dir = "up"
                                above.speed = pixel.speed
                                pixel.speed = above.speed
                            }
                            else { 
                                pixel.dir = "down"
                            }
                        }
                    }
                    else if (outOfBounds(pixel.x,pixel.y-1) && pixel.speed > 0) { 
                        pixel.dir = "down"
                    }
                }
                if (pixel.speed < 1) { 
                    pixel.dir = "down"
                }
            }
        } 
        doDefaults(pixel);
    },
    properties: {
        speed: 0,
        dir: "down",
        roll: false,
        rollspeed: 0,
    },
    color: ["#B54213","#B54213","#161616","#B54213","#B54213","#161616","#B54213","#B54213"],
    tempHigh: 350,
    stateHigh: ["cooked_meat","smoke","smoke","smoke","smoke","ash","molten_plastic","molten_plastic","molten_plastic","molten_plastic","molten_plastic","molten_plastic"],
    category: "special"
}

elements.tennis_ball = {
    tick: function(pixel) {
        if (pixel.dir === "down") {
            if (tryMove(pixel, pixel.x, pixel.y+1)) {
                    if ((!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1)) && pixel.speed > 0.5) {
                        pixel.speed += 1
                        console.log("go up and down code")
                        if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.speed > 0.5) { 
                            var beneath = pixelMap[pixel.x][pixel.y+1];
                            if (elements[beneath.element].id === elements.better_ball.id) { 
                                if (beneath.dir === "up") { 
                                    pixel.dir = "up"
                                    beneath.dir = "down"
                                    beneath.speed = pixel.speed
                                    pixel.speed = beneath.speed
                                }
                                else { 
                                    pixel.dir = "up"
                                }
                            }
                            else { 
                                pixel.dir = "up"
                            }
                        }
                        else if (outOfBounds(pixel.x,pixel.y+1) && pixel.speed > 0.5) { 
                            pixel.dir = "up"
                        }
                    }
                    else {
                        pixel.speed += 1
                        console.log("increase speed code")
                    }
            }
            else if (!tryMove(pixel, pixel.x, pixel.y+1) && (!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1))) {
                if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.roll === false && (isEmpty(pixel.x-1, pixel.y+1) || isEmpty(pixel.x+1, pixel.y+1))) {
                    console.log("incline code")
                    if (isEmpty(pixel.x+1, pixel.y+1)) {
                        pixel.rolldir = 1
                    }
                    else if (isEmpty(pixel.x-1, pixel.y+1)) {
                        pixel.rolldir = -1
                    }
                    tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y+1);
                    pixel.rollspeed += 1
                }
                else if ((!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1)) && pixel.rollspeed > 0) {
                    pixel.rollspeed -= 1
                    pixel.speed = 0
                    if (pixel.roll === false) {
                        pixel.roll = true
                    }
                    if (!isEmpty(pixel.x+(pixel.rolldir), pixel.y, true) && pixel.rollspeed < 10) {
                        console.log("bounce off wall code")
                        pixel.rolldir = (pixel.rolldir-(2*pixel.rolldir))
                    }
                    else if (pixel.rollspeed > 9 && isEmpty(pixel, pixel.x+(pixel.rolldir), pixel.y-1) && !isEmpty(pixel.x+(pixel.rolldir), pixel.y, true)) {
                        console.log("uphill code")
                        tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y-1);
                        pixel.rollspeed -= 1
                        pixel.speed = 0
                    }
                    else if (!isEmpty(pixel.x+(pixel.rolldir), pixel.y+1, true)) {
                        console.log("roll code")
                        tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y)
                    }
                    else if (isEmpty(pixel.x+(pixel.rolldir), pixel.y)) {
                        console.log("stop roll code")
                        pixel.roll = false
                    }
                }
                else if (pixel.rollspeed < 1 && pixel.roll === true) {
                    pixel.roll = false
                }
            }
        } 
        else if (pixel.speed > 0 && pixel.dir === "up") {
            if (tryMove(pixel, pixel.x, pixel.y-1)) {
                pixel.speed -= 1.5
                if (outOfBounds(pixel.x,pixel.y-1) || !isEmpty(pixel.x, pixel.y-1, true)) { 
                    if (!isEmpty(pixel.x, pixel.y-1, true) && pixel.speed > 0) { 
                        var above = pixelMap[pixel.x][pixel.y-1];
                        if (elements[above.element].id === elements.better_ball.id) {
                            if (above.dir === "down") { 
                                pixel.dir = "down"
                                above.dir = "up"
                                above.speed = pixel.speed
                                pixel.speed = above.speed
                            }
                            else { 
                                pixel.dir = "down"
                            }
                        }
                    }
                    else if (outOfBounds(pixel.x,pixel.y-1) && pixel.speed > 0) { 
                        pixel.dir = "down"
                    }
                }
                if (pixel.speed < 1) { 
                    pixel.dir = "down"
                }
            }
        } 
        doDefaults(pixel);
    },
    properties: {
        speed: 0,
        dir: "down",
        roll: false,
        rollspeed: 0,
    },
    color: ["#ccff00","#ccff00","#dff6c8","#ccff00","#ccff00","#dff6c8","#ccff00","#ccff00"],
    tempHigh: 412,
    stateHigh: "fire",
    burn: 5,
    burnTime: 350,
    burnInto: ["smoke","smoke","smoke","smoke","ash"],
    state: "solid",
    category: "special"
}

elements.golf_ball = {
    tick: function(pixel) {
        if (pixel.dir === "down") {
            if (tryMove(pixel, pixel.x, pixel.y+1)) {
                    if ((!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1)) && pixel.speed > 0.5) {
                        pixel.speed += 1
                        console.log("go up and down code")
                        if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.speed > 0.5) { 
                            var beneath = pixelMap[pixel.x][pixel.y+1];
                            if (elements[beneath.element].id === elements.better_ball.id) { 
                                if (beneath.dir === "up") { 
                                    pixel.dir = "up"
                                    beneath.dir = "down"
                                    beneath.speed = pixel.speed
                                    pixel.speed = beneath.speed
                                }
                                else { 
                                    pixel.dir = "up"
                                }
                            }
                            else { 
                                pixel.dir = "up"
                            }
                        }
                        else if (outOfBounds(pixel.x,pixel.y+1) && pixel.speed > 0.5) { 
                            pixel.dir = "up"
                        }
                    }
                    else {
                        pixel.speed += 1
                        console.log("increase speed code")
                    }
            }
            else if (!tryMove(pixel, pixel.x, pixel.y+1) && (!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1))) {
                if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.roll === false && (isEmpty(pixel.x-1, pixel.y+1) || isEmpty(pixel.x+1, pixel.y+1))) {
                    console.log("incline code")
                    if (isEmpty(pixel.x+1, pixel.y+1)) {
                        pixel.rolldir = 1
                    }
                    else if (isEmpty(pixel.x-1, pixel.y+1)) {
                        pixel.rolldir = -1
                    }
                    tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y+1);
                    pixel.rollspeed += 1
                }
                else if ((!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1)) && pixel.rollspeed > 0) {
                    pixel.rollspeed -= 0.9
                    pixel.speed = 0
                    if (pixel.roll === false) {
                        pixel.roll = true
                    }
                    if (!isEmpty(pixel.x+(pixel.rolldir), pixel.y, true) && pixel.rollspeed < 10) {
                        console.log("bounce off wall code")
                        pixel.rolldir = (pixel.rolldir-(2*pixel.rolldir))
                    }
                    else if (pixel.rollspeed > 9 && isEmpty(pixel, pixel.x+(pixel.rolldir), pixel.y-1) && !isEmpty(pixel.x+(pixel.rolldir), pixel.y, true)) {
                        console.log("uphill code")
                        tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y-1);
                        pixel.rollspeed -= 0.9
                        pixel.speed = 0
                    }
                    else if (!isEmpty(pixel.x+(pixel.rolldir), pixel.y+1, true)) {
                        console.log("roll code")
                        tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y)
                    }
                    else if (isEmpty(pixel.x+(pixel.rolldir), pixel.y)) {
                        console.log("stop roll code")
                        pixel.roll = false
                    }
                }
                else if (pixel.rollspeed < 1 && pixel.roll === true) {
                    pixel.roll = false
                }
            }
        } 
        else if (pixel.speed > 0 && pixel.dir === "up") {
            if (tryMove(pixel, pixel.x, pixel.y-1)) {
                pixel.speed -= 1.3
                if (outOfBounds(pixel.x,pixel.y-1) || !isEmpty(pixel.x, pixel.y-1, true)) { 
                    if (!isEmpty(pixel.x, pixel.y-1, true) && pixel.speed > 0) { 
                        var above = pixelMap[pixel.x][pixel.y-1];
                        if (elements[above.element].id === elements.better_ball.id) {
                            if (above.dir === "down") { 
                                pixel.dir = "down"
                                above.dir = "up"
                                above.speed = pixel.speed
                                pixel.speed = above.speed
                            }
                            else { 
                                pixel.dir = "down"
                            }
                        }
                    }
                    else if (outOfBounds(pixel.x,pixel.y-1) && pixel.speed > 0) { 
                        pixel.dir = "down"
                    }
                }
                if (pixel.speed < 1) { 
                    pixel.dir = "down"
                }
            }
        } 
        doDefaults(pixel);
    },
    properties: {
        speed: 0,
        dir: "down",
        roll: false,
        rollspeed: 0,
    },
    color: "#edf1e6",
    tempHigh: 350,
    stateHigh: "molten_plastic",
    state: "solid",
    category: "special"
}

elements.golf_ball = {
    tick: function(pixel) {
        if (pixel.dir === "down") {
            if (tryMove(pixel, pixel.x, pixel.y+1)) {
                    if ((!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1)) && pixel.speed > 0.5) {
                        pixel.speed += 1
                        console.log("go up and down code")
                        if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.speed > 0.5) { 
                            var beneath = pixelMap[pixel.x][pixel.y+1];
                            if (elements[beneath.element].id === elements.better_ball.id) { 
                                if (beneath.dir === "up") { 
                                    pixel.dir = "up"
                                    beneath.dir = "down"
                                    beneath.speed = pixel.speed
                                    pixel.speed = beneath.speed
                                }
                                else { 
                                    pixel.dir = "up"
                                }
                            }
                            else { 
                                pixel.dir = "up"
                            }
                        }
                        else if (outOfBounds(pixel.x,pixel.y+1) && pixel.speed > 0.5) { 
                            pixel.dir = "up"
                        }
                    }
                    else {
                        pixel.speed += 1
                        console.log("increase speed code")
                    }
            }
            else if (!tryMove(pixel, pixel.x, pixel.y+1) && (!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1))) {
                if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.roll === false && (isEmpty(pixel.x-1, pixel.y+1) || isEmpty(pixel.x+1, pixel.y+1))) {
                    console.log("incline code")
                    if (isEmpty(pixel.x+1, pixel.y+1)) {
                        pixel.rolldir = 1
                    }
                    else if (isEmpty(pixel.x-1, pixel.y+1)) {
                        pixel.rolldir = -1
                    }
                    tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y+1);
                    pixel.rollspeed += 1
                }
                else if ((!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1)) && pixel.rollspeed > 0) {
                    pixel.rollspeed -= 0.9
                    pixel.speed = 0
                    if (pixel.roll === false) {
                        pixel.roll = true
                    }
                    if (!isEmpty(pixel.x+(pixel.rolldir), pixel.y, true) && pixel.rollspeed < 10) {
                        console.log("bounce off wall code")
                        pixel.rolldir = (pixel.rolldir-(2*pixel.rolldir))
                    }
                    else if (pixel.rollspeed > 9 && isEmpty(pixel, pixel.x+(pixel.rolldir), pixel.y-1) && !isEmpty(pixel.x+(pixel.rolldir), pixel.y, true)) {
                        console.log("uphill code")
                        tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y-1);
                        pixel.rollspeed -= 0.9
                        pixel.speed = 0
                    }
                    else if (!isEmpty(pixel.x+(pixel.rolldir), pixel.y+1, true)) {
                        console.log("roll code")
                        tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y)
                    }
                    else if (isEmpty(pixel.x+(pixel.rolldir), pixel.y)) {
                        console.log("stop roll code")
                        pixel.roll = false
                    }
                }
                else if (pixel.rollspeed < 1 && pixel.roll === true) {
                    pixel.roll = false
                }
            }
        } 
        else if (pixel.speed > 0 && pixel.dir === "up") {
            if (tryMove(pixel, pixel.x, pixel.y-1)) {
                pixel.speed -= 1.3
                if (outOfBounds(pixel.x,pixel.y-1) || !isEmpty(pixel.x, pixel.y-1, true)) { 
                    if (!isEmpty(pixel.x, pixel.y-1, true) && pixel.speed > 0) { 
                        var above = pixelMap[pixel.x][pixel.y-1];
                        if (elements[above.element].id === elements.better_ball.id) {
                            if (above.dir === "down") { 
                                pixel.dir = "down"
                                above.dir = "up"
                                above.speed = pixel.speed
                                pixel.speed = above.speed
                            }
                            else { 
                                pixel.dir = "down"
                            }
                        }
                    }
                    else if (outOfBounds(pixel.x,pixel.y-1) && pixel.speed > 0) { 
                        pixel.dir = "down"
                    }
                }
                if (pixel.speed < 1) { 
                    pixel.dir = "down"
                }
            }
        } 
        doDefaults(pixel);
    },
    properties: {
        speed: 0,
        dir: "down",
        roll: false,
        rollspeed: 0,
    },
    color: "#edf1e6",
    tempHigh: 350,
    stateHigh: "molten_plastic",
    state: "solid",
    category: "special"
}

elements.marble = {
    tick: function(pixel) {
        if (pixel.dir === "down") {
            if (tryMove(pixel, pixel.x, pixel.y+1)) {
                    if ((!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1)) && pixel.speed > 0.5) {
                        pixel.speed += 1
                        console.log("go up and down code")
                        if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.speed > 0.5) { 
                            var beneath = pixelMap[pixel.x][pixel.y+1];
                            if (elements[beneath.element].id === elements.better_ball.id) { 
                                if (beneath.dir === "up") { 
                                    pixel.dir = "up"
                                    beneath.dir = "down"
                                    beneath.speed = pixel.speed
                                    pixel.speed = beneath.speed
                                }
                                else { 
                                    pixel.dir = "up"
                                }
                            }
                            else { 
                                pixel.dir = "up"
                            }
                        }
                        else if (outOfBounds(pixel.x,pixel.y+1) && pixel.speed > 0.5) { 
                            pixel.dir = "up"
                        }
                    }
                    else {
                        pixel.speed += 1
                        console.log("increase speed code")
                    }
            }
            else if (!tryMove(pixel, pixel.x, pixel.y+1) && (!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1))) {
                if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.roll === false && (isEmpty(pixel.x-1, pixel.y+1) || isEmpty(pixel.x+1, pixel.y+1))) {
                    console.log("incline code")
                    if (isEmpty(pixel.x+1, pixel.y+1)) {
                        pixel.rolldir = 1
                    }
                    else if (isEmpty(pixel.x-1, pixel.y+1)) {
                        pixel.rolldir = -1
                    }
                    tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y+1);
                    pixel.rollspeed += 1
                }
                else if ((!isEmpty(pixel.x, pixel.y+1, true) || outOfBounds(pixel.x,pixel.y+1)) && pixel.rollspeed > 0) {
                    pixel.rollspeed -= 0.5
                    pixel.speed = 0
                    if (pixel.roll === false) {
                        pixel.roll = true
                    }
                    if (!isEmpty(pixel.x+(pixel.rolldir), pixel.y, true) && pixel.rollspeed < 10) {
                        console.log("bounce off wall code")
                        pixel.rolldir = (pixel.rolldir-(2*pixel.rolldir))
                    }
                    else if (pixel.rollspeed > 9 && isEmpty(pixel, pixel.x+(pixel.rolldir), pixel.y-1) && !isEmpty(pixel.x+(pixel.rolldir), pixel.y, true)) {
                        console.log("uphill code")
                        tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y-1);
                        pixel.rollspeed -= 0.5
                        pixel.speed = 0
                    }
                    else if (!isEmpty(pixel.x+(pixel.rolldir), pixel.y+1, true)) {
                        console.log("roll code")
                        tryMove(pixel, pixel.x+(pixel.rolldir), pixel.y)
                    }
                    else if (isEmpty(pixel.x+(pixel.rolldir), pixel.y)) {
                        console.log("stop roll code")
                        pixel.roll = false
                    }
                }
                else if (pixel.rollspeed < 1 && pixel.roll === true) {
                    pixel.roll = false
                }
            }
        } 
        else if (pixel.speed > 0 && pixel.dir === "up") {
            if (tryMove(pixel, pixel.x, pixel.y-1)) {
                pixel.speed -= 5
                if (outOfBounds(pixel.x,pixel.y-1) || !isEmpty(pixel.x, pixel.y-1, true)) { 
                    if (!isEmpty(pixel.x, pixel.y-1, true) && pixel.speed > 0) { 
                        var above = pixelMap[pixel.x][pixel.y-1];
                        if (elements[above.element].id === elements.better_ball.id) {
                            if (above.dir === "down") { 
                                pixel.dir = "down"
                                above.dir = "up"
                                above.speed = pixel.speed
                                pixel.speed = above.speed
                            }
                            else { 
                                pixel.dir = "down"
                            }
                        }
                    }
                    else if (outOfBounds(pixel.x,pixel.y-1) && pixel.speed > 0) { 
                        pixel.dir = "down"
                    }
                }
                if (pixel.speed < 1) { 
                    pixel.dir = "down"
                }
            }
        } 
        doDefaults(pixel);
    },
    properties: {
        speed: 0,
        dir: "down",
        roll: false,
        rollspeed: 0,
    },
    color: ["#5e807d","#5e807d","#679e99","#5e807d","#5e807d","#ADD8E6","#90EE90","#ebbe4d"],
    tempHigh: 1505,
    stateHigh: "molten_glass",
    state: "solid",
    category: "special"
}






























































//-----------------------------------------------------------------------------------------------------------


















elements.button = {
 
      color: "#8d8e8f",

      behavior: behaviors.WALL,
   
      category: "machines",

      state: "wall",

      stateHigh: "explosion",

      tempHigh: 5790,
  };
  


  elements.button_presser = {
    color: "#8d8e8f",
    tool: function(pixel) {
        if (pixel.element == "button") {
            
            pixel.charge = 1
        }
    },
    category: "tools",
};























































//------------------------------------------------------------------------------------------------------------






























































































elements.armored_head = {
    hardness: 1,
    color: ["#404040","#1a1a1a","#737373"],
    category: "life",
    hidden: true,
    density: 1380,
    state: "solid",
    conduct: .05,
    temp: 39,
    tempHigh: 999000,
    stateHigh: ["ash","iron",],
    tempLow: -180,
    stateLow: "frozen_meat",
    breakInto: ["blood","meat","bone","metal_scrap"],
    forceSaveColor: true,
    reactions: {
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "meat": { elem2:null, chance:0.1 },
        "cooked_meat": { elem2:null, chance:0.1 },
        "cured_meat": { elem2:null, chance:0.1 },
        "sugar": { elem2:null, chance:0.1 },
        "broth": { elem2:null, chance:0.2 },
        "yolk": { elem2:null, chance:0.1 },
        "hard_yolk": { elem2:null, chance:0.1 },
        "dough": { elem2:null, chance:0.1 },
        "batter": { elem2:null, chance:0.2 },
        "butter": { elem2:null, chance:0.1 },
        "melted_butter": { elem2:null, chance:0.2 },
        "chocolate": { elem2:null, chance:0.2 },
        "melted_chocolate": { elem2:null, chance:0.3 },
        "grape": { elem2:null, chance:0.1 },
        "tomato": { elem2:null, chance:0.1 },
        "herb": { elem2:null, chance:0.1 },
        "lettuce": { elem2:null, chance:0.1 },
        "corn": { elem2:null, chance:0.1 },
        "popcorn": { elem2:null, chance:0.15 },
        "potato": { elem2:null, chance:0.1 },
        "baked_potato": { elem2:null, chance:0.15 },
        "bread": { elem2:null, chance:0.1 },
        "toast": { elem2:null, chance:0.1 },
        "gingerbread": { elem2:null, chance:0.1 },
        "baked_batter": { elem2:null, chance:0.2 },
        "wheat": { elem2:null, chance:0.1 },
        "candy": { elem2:null, chance:0.1 },
        "yogurt": { elem2:null, chance:0.2 },
        "frozen_yogurt": { elem2:null, chance:0.1 },
        "ice_cream": { elem2:null, chance:0.2 },
        "beans": { elem2:[null,null,null,null,null,null,null,null,"stench"], chance:0.2 },
        "tea": { elem2:null, chance:0.2 },
        "coffee": { elem2:null, chance:0.2 },
        "milk": { elem2:null, chance:0.2 },
        "cream": { elem2:null, chance:0.2 },
        "soda": { elem2:null, chance:0.2 },
        "chocolate_milk": { elem2:null, chance:0.2 },
        "fruit_milk": { elem2:null, chance:0.2 },
        "pilk": { elem2:null, chance:0.2 },
        "eggnog": { elem2:null, chance:0.2 },
        "juice": { elem2:null, chance:0.2 },
        "cheese": { elem2:null, chance:0.1 },
        "melted_cheese": { elem2:null, chance:0.2 },
        "alcohol": { elem2:null, chance:0.2 },
        "antidote": { elem2:null, chance:0.2 },
        "honey": { elem2:null, chance:0.2 },
        "caramel": { elem2:null, chance:0.2 },
        "molasses": { elem2:null, chance:0.05 },
        "ketchup": { elem2:null, chance:0.1 },
        "pumpkin_seed": { elem2:null, chance:0.1 },
        "nut": { elem2:null, chance:0.1 },
        "nut_meat": { elem2:null, chance:0.1 },
        "nut_butter": { elem2:null, chance:0.1 },
        "nut_milk": { elem2:null, chance:0.2 },
        "jelly": { elem2:null, chance:0.2 },
        "mayo": { elem2:null, chance:0.2 },
        "mashed_potato": { elem2:null, chance:0.2 },
        "sauce": { elem2:null, chance:0.2 },
        "pickle": { elem2:null, chance:0.1 },
        "water": { elem2:"bubble", attr2:{"clone":"water"}, chance:0.001 },
        "salt_water": { elem2:"bubble", attr2:{"clone":"salt_water"}, chance:0.001 },
        "pool_water": { elem2:"bubble", attr2:{"clone":"pool_water"}, chance:0.001 },
    },
    properties: {
        dead: false
    },
    tick: function(pixel) {
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
                return
            }
        }
  
        // Find the  body
        if (!isEmpty(pixel.x, pixel.y+1, true) && pixelMap[pixel.x][pixel.y+1].element == "armored_body") {
            var body = pixelMap[pixel.x][pixel.y+1];
            if (body.dead) { // If body is dead, kill head
                pixel.dead = body.dead;
            }
        }
        else { var body = null }
  
        if (tryMove(pixel, pixel.x, pixel.y+1)) {
            // create blood if severed 10% chance
            if (isEmpty(pixel.x, pixel.y+1) && !pixel.dead && Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y+1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        // homeostasis
        if (pixel.temp > 40) { pixel.temp -= 1; }
        else if (pixel.temp < 40) { pixel.temp += 1; }
    }
  };
  
  elements.armored_body = {
    hardness: 1,
    color: ["#525252","#a7a8a7","#737373"],
    category: "life",
    hidden: true,
    density: 1370,
    state: "solid",
    conduct: .25,
    temp: 39,
    tempHigh: 999000,
    stateHigh: ["metal_scrap","ash"],
    tempLow: -210,
    stateLow: "frozen_meat",
    breakInto: ["blood","meat","bone","metal_scrap","radiation","fallout",],
    forceSaveColor: true,
    reactions: {
        "egg": { elem2:"yolk", chance:0.5, oneway:true },
        "grape": { elem2:"juice", chance:0.5, color2:"#291824", oneway:true },
        "ant": { elem2:"dead_bug", chance:0.05, oneway:true },
        "fly": { elem2:"dead_bug", oneway:true },
        "firefly": { elem2:"dead_bug", oneway:true },
        "bee": { elem2:"dead_bug", oneway:true },
        "flea": { elem2:"dead_bug", oneway:true },
        "termite": { elem2:"dead_bug", oneway:true },
        "worm": { elem2:"slime", chance:0.05, oneway:true },
        "stink_bug": { elem2:"stench", oneway:true },
        "grass_seed": { elem2:null, chance:0.05 },
        "gold_coin": { elem2:null, chance:0.05 },
        "diamond": { elem2:null, chance:0.05 },
        
    },
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (tryMove(pixel, pixel.x, pixel.y+1)) { // Fall
            if (!isEmpty(pixel.x, pixel.y-2, true)) { // Drag head down
                var headpixel = pixelMap[pixel.x][pixel.y-2];
                if (headpixel.element == "armored_head") {
                    if (isEmpty(pixel.x, pixel.y-1)) {
                        movePixel(pixelMap[pixel.x][pixel.y-2], pixel.x, pixel.y-1);
                    }
                    else {
                        swapPixels(pixelMap[pixel.x][pixel.y-2], pixelMap[pixel.x][pixel.y-1]);
                    }
                }
            }
        }
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
            }
            return
        }
  
        // Find the head
        if (!isEmpty(pixel.x, pixel.y-1, true) && pixelMap[pixel.x][pixel.y-1].element == "armored_head") {
            var head = pixelMap[pixel.x][pixel.y-1];
            if (head.dead) { // If head is dead, kill body
                pixel.dead = head.dead;
            }
        }
        else { var head = null }
        if (pixel.burning) {
            pixel.panic += 0.1;
            if (head && pixelTicks-pixel.burnStart > 240) {
                pixel.color = head.color;
            }
        }
        else if (pixel.panic > 0) {
            pixel.panic -= 0.1;
        }
  
        if (isEmpty(pixel.x, pixel.y-1)) {
            // create blood if decapitated 10% chance
            if (Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y-1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        else if (head == null) { return }
        else if (Math.random() < 0.1*(isEmpty(pixel.x, pixel.y+1) ? 1 : pixel.panic+1)) { // Move 10% chance
            var movesToTry = [
                [1*pixel.dir,0],
                [1*pixel.dir,-1],
            ];
            // While movesToTry is not empty, tryMove(pixel, x, y) with a random move, then remove it. if tryMove returns true, break.
            while (movesToTry.length > 0) {
                var move = movesToTry.splice(Math.floor(Math.random() * movesToTry.length), 1)[0];
                if (isEmpty(pixel.x+move[0], pixel.y+move[1]-1)) {
                    var origx = pixel.x+move[0];
                    var origy = pixel.y+move[1];
                    if (tryMove(pixel, pixel.x+move[0], pixel.y+move[1]) && pixel.x===origx && pixel.y===origy) {
                        movePixel(head, head.x+move[0], head.y+move[1]);
                        break;
                    }
                }
            }
            // 15% chance to change direction
            if (Math.random() < 0.15) {
                pixel.dir *= -1;
            }
            // homeostasis
            if (pixel.temp > 39) { pixel.temp -= 1; }
            else if (pixel.temp < 39) { pixel.temp += 1; }
        }
  
    }
  };
  
  elements.armored_human = {
    color: ["#404040","#1a1a1a","#737373"],
    category: "life",
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (isEmpty(pixel.x, pixel.y+1)) {
            createPixel("armored_body", pixel.x, pixel.y+1);
            pixel.element = "armored_head";
        }
        else if (isEmpty(pixel.x, pixel.y-1)) {
            createPixel("armored_head", pixel.x, pixel.y-1);
            pixelMap[pixel.x][pixel.y-1].color = pixel.color;
            pixel.element = "armored_body";
            pixel.color = pixelColorPick(pixel)
        }
        else {
            deletePixel(pixel.x, pixel.y);
        }
    },
    related: ["armored_body","armored_head"],
    cooldown: defaultCooldown,
    forceSaveColor: true, 
  };
  

























































  //------------------------------------------------------------------------------------------------------------------------------------------------




































































  behaviors.BODY_DELETE = function(pixel) {
    if (pixel.willbuildhouse == true) {
        HouseBuilder = false;
    }
},

window.addEventListener("load", () => { 
    document.getElementById("elementButton-easy_way_out")?.remove()
})

elements.easy_way_out = {
    hidden: true,
    color: "#00000f",
    excludeRandom: true,
    onPlace: function(pixel) {
        deletePixel(pixel.x, pixel.y);
    },
    category: "special",
    state: "solid",
    movable: false,
},

HouseBuilder = false

elements.cultured_human = {
    name: "human",
    // color: ["#f5eac6","#d4c594","#a89160","#7a5733","#523018","#361e0e"],
    color: ["#f3e7db","#f7ead0","#eadaba","#d7bd96","#a07e56","#825c43","#604134","#3a312a"],
    category: "human",
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    onPlace: function(pixel) {
        if (isEmpty(pixel.x, pixel.y+1)) {
            createPixel("c_body", pixel.x, pixel.y+1);
            createPixel("c_head", pixel.x, pixel.y);
            var bodypixel = pixelMap[pixel.x][pixel.y+1];
        }
        else if (isEmpty(pixel.x, pixel.y-1)) {
            createPixel("c_head", pixel.x, pixel.y-1);
            pixelMap[pixel.x][pixel.y-1].color = pixel.color;
            createPixel("c_body", pixel.x, pixel.y);
        }
        else {
            deletePixel(pixel.x, pixel.y);
        }
    },
    related: ["c_body","c_head"],
    maxSize: 1,
    cooldown: 10,
    forceSaveColor: true,
},

elements.c_body = {
    name: "body",
    color: ["#069469","#047e99","#7f5fb0"],
    forceSaveColor: true,
    category: "human",
    hidden: true,
    density: 1500,
    state: "solid",
    conduct: .05,
    temp: 37,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -30,
    stateLow: "frozen_meat",
    burn: 10,
    burnTime: 250,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat","bone"],
    reactions: {
        "basket": { func:function(pixel,basket){ if (pixel.basket == false) {changePixel(basket,"easy_way_out"), (pixel.basket = true);} }, chance:0.5 },
        "pickaxe": { func:function(pixel,pickaxe){ if (pixel.pickaxe == false) {changePixel(pickaxe,"easy_way_out"), (pixel.pickaxe = true),(pixel.willbuildmine = true);} }, chance:0.5 },
        "cancer": { elem1:"cancer", chance:0.0005 },
        "poison": { attr1:{"dead":true}, chance:0.4 },
        "radiation": { elem1:["ash","meat","rotten_meat","cooked_meat"], chance:0.4 },
        "neutron": { elem1:["ash","meat","rotten_meat","cooked_meat"], chance:0.01 },
        "fallout": { elem1:["ash","meat","rotten_meat","cooked_meat"], chance:0.01 },
        "plague": { elem1:"plague", chance:0.05 },
        "egg": { func:function(pixel,egg){
            if (pixel.basket == true) {(pixel.eggcount += 1), changePixel(egg,"easy_way_out");}
            else {changePixel(egg,"yolk");}
        }, chance:0.5},
        "flour": { func:function(pixel,flour){
            if (pixel.basket == true) {(pixel.flourcount += 1), changePixel(flour,"easy_way_out");}
        }, chance:0.5},
        "dough": { func:function(pixel,dough){
            if (pixel.basket == true) {(pixel.doughcount += 1), changePixel(dough,"easy_way_out");}
        }, chance:0.5},
        "meat": { func:function(pixel,meat){
            if (pixel.basket == true) {(pixel.meatcount += 1), changePixel(meat,"easy_way_out");}
        }, chance:0.4},
        "cured_meat": { func:function(pixel,meat){
            if (pixel.basket == true) {(pixel.meatcount += 2), changePixel(meat,"easy_way_out");}
        }, chance:0.5},
        "bread": { func:function(pixel,bread){
            if (pixel.basket == true) {(pixel.breadcount += 1), changePixel(bread,"easy_way_out");}
            else if (pixel.basket == false && pixel.breadcount < 1) {(pixel.breadcount = 1), changePixel(bread,"easy_way_out");}
        }, chance:0.5},
        "toast": { func:function(pixel,bread){
            if (pixel.basket == true) {(pixel.breadcount += 2), changePixel(bread,"easy_way_out");}
            else if (pixel.basket == false && pixel.breadcount < 1) {(pixel.breadcount = 1), changePixel(bread,"easy_way_out");}
        }, chance:0.4},
        "baked_batter": { func:function(pixel,bread){
            if (pixel.basket == true) {(pixel.breadcount += 5), changePixel(bread,"easy_way_out");}
            else if (pixel.basket == false && pixel.breadcount < 1) {(pixel.breadcount = 1), changePixel(bread,"easy_way_out");}
        }, chance:0.4},
        "crumb": { func:function(pixel,bread){
            if (pixel.basket == true) {(pixel.breadcount += 0.1), changePixel(bread,"easy_way_out");}
        }, chance:0.1},
        "cooked_meat": { func:function(pixel,cooked_meat){
            if (pixel.basket == true) {(pixel.cookedmeatcount += 1), changePixel(cooked_meat,"easy_way_out");}
            else if (pixel.basket == true && pixel.cookedmeatcount < 1) {(pixel.cookedmeatcount = 1), changePixel(cooked_meat,"easy_way_out");}
        }, chance:0.5},
        "bead": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.1},
        "glitter": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.1},
        "copper_sulfate": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.05},
        "confetti": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.05},
        "color_sand": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.05},
        "incense": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.05},
        "pinecone": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.03},
        "feather": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.01},
        "glass_shard": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.01},
        "porcelain_shard": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.01},
        "flower_seed": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.01},
        "grass_seed": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.05},
        "petal": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.01},
        "metal_scrap": { func:function(pixel,trinket){
            if (pixel.basket == true) {(pixel.trinketscount += 1), changePixel(trinket,"easy_way_out");}
        }, chance:0.01},
        "housefloor1": { func:function(pixel,station){
            if (pixel.woodcount > 4) {(pixel.woodcount -= 5), changePixel(station,"workbench");}
        }, chance:0.01},
        "housefloor2": { func:function(pixel,station){
            if (pixel.rockcount > 7) {(pixel.rockcount -= 8), changePixel(station,"furnace");}
        }, chance:0.01},
        "workbench": { func:function(pixel,station){
            if (pixel.rockcount > 2 && pixel.woodcount > 1 && pixel.hasstraw == true && pixel.pickaxe == false) {(pixel.pickaxe = true),(pixel.willbuildmine = true),(pixel.rockcount -= 2),(pixel.woodcount -= 1),(pixel.hasstraw = false);}
        }, chance:0.01},
        "furnace": { func:function(pixel,oven){
            if (pixel.meatcount > 0) {(pixel.cookedmeatcount += 1),(pixel.meatcount -= 1);}
            else if (pixel.doughcount > 0) {(pixel.breadcount += 1),(pixel.doughcount -= 1);}
        }, chance:0.01},
        "oven": { func:function(pixel,oven){
            if (pixel.meatcount > 0) {(pixel.cookedmeatcount += 1),(pixel.meatcount -= 1);}
            else if (pixel.doughcount > 0) {(pixel.breadcount += 1),(pixel.doughcount -= 1);}
        }, chance:0.02},
        "allpurposestation": { func:function(pixel,station){
            if (pixel.rockcount > 2 && pixel.woodcount > 1 && pixel.hasstraw == true) {(pixel.pickaxe = true),(pixel.rockcount -= 2),(pixel.woodcount -= 1),(pixel.hasstraw = false);}
            else if (pixel.meatcount > 0) {(pixel.cookedmeatcount += 1),(pixel.meatcount -= 1);}
            else if (pixel.doughcount > 0) {(pixel.breadcount += 1),(pixel.doughcount -= 1);}
            else if (pixel.eggcount > 1 && pixel.flourcount > 1) {(pixel.eggcount -= 1),(pixel.flourcount -= 1),(pixel.breadcount += 10);}
        }, chance:0.1},
        "loose_straw": { func:function(pixel,straw){
            if (pixel.hasstraw == false) {(pixel.hasstraw = true), changePixel(straw,"easy_way_out");}
        }, chance:0.01},
        "water": { func:function(pixel,water){
            if (pixel.flourcount > 1) {(pixel.flourcount -= 1), (pixel.doughcount += 1), changePixel(water,["easy_way_out","easy_way_out","water"]);}
        }, chance:0.5},
        "straw": { elem2:"loose_straw", oneway:true, chance:0.5 },
        "grass": { func:function(pixel,grass){
            if (pixel.hasstraw == false && grass.h == 2) {(pixel.hasstraw = true), changePixel(grass,"easy_way_out");}
        }, chance:0.01},
        "rock": { func:function(pixel,rock){
            if (pixel.basket == true && pixel.rockcount < 3) {(pixel.rockcount += 1), changePixel(rock,"easy_way_out");}
            else if (pixel.pickaxe == true && pixel.basket == true && pixel.willbuildmine == true) {changePixel(rock,"mine_hole"), (pixel.willbuildmine = false);}
        }, chance:0.01},
        "mine_hole": { func:function(pixel,mine){
            if (pixel.pickaxe == true && pixel.basket == true) {(pixel.rockcount += 1);}
        }, chance:0.01},
        "grape": { func:function(pixel,grape){
            if (pixel.basket == true) {(pixel.foodcount += 0.25), changePixel(grape,"easy_way_out");}
            else {changePixel(grape,"juice"), grape.color = pixelColorPick(grape,"#291824");}
        }, oneway:true, chance:0.05},
        "cheese": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.50), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "nut": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.25), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "nut_meat": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.25), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "baked_potato": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.75), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "hard_yolk": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.50), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "chocolate": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.50), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "mashed_potato": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.75), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "pickle": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.75), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "ice_cream": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.50), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "lettuce": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.25), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "tomato": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.50), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "potato": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.50), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "popcorn": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.25), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "corn": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.50), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "candy": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.50), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "caramel": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.50), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "herb": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.25), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "pumpkin_seed": { func:function(pixel,food){
            if (pixel.basket == true) {(pixel.foodcount += 0.25), changePixel(food,"easy_way_out");}
        }, oneway:true, chance:0.05},
        "ant": { elem2:"dead_bug", chance:0.05, oneway:true },
        "fly": { elem2:"dead_bug", oneway:true },
        "firefly": { elem2:"dead_bug", oneway:true },
        "bee": { elem2:"dead_bug", oneway:true },
        "flea": { elem2:"dead_bug", oneway:true },
        "termite": { elem2:"dead_bug", oneway:true },
        "worm": { elem2:"slime", chance:0.05, oneway:true },
        "stink_bug": { elem2:"stench", oneway:true },
        "tax_bill": { elem2:null, func:(pixel,tax) => { (pixel.moneycount *= 0.75) }, chance:0.01 },
        "money": { elem2:null, func:(pixel,money) => { (pixel.moneycount += 1) }, chance:0.03 },
        "gold_coin": { elem2:null, func:(pixel,money) => { (pixel.moneycount += 1000) }, chance:0.04 },
        "diamond": { elem2:null, func:(pixel,money) => { (pixel.moneycount += 50000) }, chance:0.05 },
        "sun": { elem1:"cooked_meat" },
    },
    properties: {
        dead: false,
        dir: 1,
        panic: 0,
        hungry: false,
        greedy: false,
        basket: false,
        pickaxe: false,
        hasstraw: false,
        willbuildhouse: false,
        willbuildmine: false,
        moneycount: 0,
        eggcount: 0,
        flourcount: 0,
        doughcount: 0,
        meatcount: 0,
        cookedmeatcount: 0,
        breadcount: 0,
        foodcount: 0,
        trinketscount: 0,
        woodcount: 0,
        rockcount: 0,
    },
    onDelete: behaviors.BODY_DELETE,
    tick: function(pixel) {
        if (tryMove(pixel, pixel.x, pixel.y+1)) { // Fall
            if (!isEmpty(pixel.x, pixel.y-2, true)) { // Drag head down
                var headpixel = pixelMap[pixel.x][pixel.y-2];
                if (headpixel.element == "c_head") {
                    if (isEmpty(pixel.x, pixel.y-1)) {
                        movePixel(pixelMap[pixel.x][pixel.y-2], pixel.x, pixel.y-1);
                    }
                    else {
                        swapPixels(pixelMap[pixel.x][pixel.y-2], pixelMap[pixel.x][pixel.y-1]);
                    }
                }
            }
        }
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) { // by nekonico
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
                if (pixel.willbuildhouse == true) {
                    HouseBuilder = false;
                }
            }
            return
        }

        // Find the head
        if (!isEmpty(pixel.x, pixel.y-1, true) && pixelMap[pixel.x][pixel.y-1].element == "c_head") {
            var head = pixelMap[pixel.x][pixel.y-1];
            if (head.dead) { // If head is dead, kill body
                pixel.dead = head.dead;
            }
        }
        else { var head = null }
        if (pixel.burning) {
            pixel.panic += 0.1;
            if (head && pixelTicks-pixel.burnStart > 240) {
                pixel.color = head.color;
            }
        }
        else if (pixel.panic > 0) {
            pixel.panic -= 0.1;
        }

        if (isEmpty(pixel.x, pixel.y-1)) {
            // create blood if decapitated 10% chance
            if (Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y-1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        else if (head == null) { return }
        else if (Math.random() < 0.1*(isEmpty(pixel.x, pixel.y+1) ? 1 : pixel.panic+1)) { // Move 10% chance
            var movesToTry = [
                [1*pixel.dir,0],
                [1*pixel.dir,-1],
            ];
            // While movesToTry is not empty, tryMove(pixel, x, y) with a random move, then remove it. if tryMove returns true, break.
            while (movesToTry.length > 0) {
                var move = movesToTry.splice(Math.floor(Math.random() * movesToTry.length), 1)[0];
                if (isEmpty(pixel.x+move[0], pixel.y+move[1]-1)) {
                    var origx = pixel.x+move[0];
                    var origy = pixel.y+move[1];
                    if (tryMove(pixel, pixel.x+move[0], pixel.y+move[1]) && pixel.x===origx && pixel.y===origy) {
                        movePixel(head, head.x+move[0], head.y+move[1]);
                        break;
                    }
                }
            }
            // 15% chance to change direction
            if (Math.random() < 0.15) {
                pixel.dir *= -1;
            }
            // homeostasis
            if (pixel.temp > 37) { pixel.temp -= 1; }
            else if (pixel.temp < 37) { pixel.temp += 1; }
        }

        if (!isEmpty(pixel.x, pixel.y+1, true) && pixel.woodcount > 15 && pixel.willbuildhouse == true) {
            deletePixel(pixel.x-3, pixel.y+1); // clear any floor obstructions
            deletePixel(pixel.x-2, pixel.y+1); 
            deletePixel(pixel.x-1, pixel.y+1);
            deletePixel(pixel.x, pixel.y+1);
            deletePixel(pixel.x+1, pixel.y+1);
            deletePixel(pixel.x+2, pixel.y+1); 
            deletePixel(pixel.x+3, pixel.y+1); 
            createPixel("wood", pixel.x-3, pixel.y-3); // door 1
            createPixel("wood", pixel.x-3, pixel.y-2);
            createPixel("wood", pixel.x-3, pixel.y+1);
            createPixel("wood", pixel.x-2, pixel.y-3); // roof
            createPixel("wood", pixel.x-1, pixel.y-3);
            createPixel("wood", pixel.x, pixel.y-3);
            createPixel("wood", pixel.x+1, pixel.y-3); 
            createPixel("wood", pixel.x+2, pixel.y-3);
            createPixel("wood", pixel.x+3, pixel.y-3); // door 2
            createPixel("wood", pixel.x+3, pixel.y-2);
            createPixel("wood", pixel.x+3, pixel.y+1); 
            createPixel("wood", pixel.x-2, pixel.y+1); // floor
            createPixel("housefloor1", pixel.x-1, pixel.y+1);
            createPixel("wood", pixel.x, pixel.y+1);
            createPixel("housefloor2", pixel.x+1, pixel.y+1);
            createPixel("wood", pixel.x+2, pixel.y+1); 
            pixel.willbuildhouse = false;
            pixel.woodcount -= 16
        }

        if (pixel.moneycount > 17999) {
            pixel.color = pixelColorPick(pixel,"#ffd700");
        }

        if (pixel.breadcount < 1 && pixel.cookedmeatcount < 1 && pixel.foodcount < 0.25 && Math.random() < 0.005) { //hunger mechanic
            pixel.hungry = true
        }

        if (pixel.foodcount > 0 && pixel.hungry == true) {
            pixel.hungry = false, pixel.foodcount -= 0.25
        }
        else if (pixel.breadcount > 0.9 && pixel.hungry == true) {
            pixel.hungry = false, pixel.breadcount -= 1
        }
        else if (pixel.cookedmeatcount > 0 && pixel.hungry == true) {
            pixel.hungry = false, pixel.cookedmeatcount -= 1
        }

        if (pixel.foodcount > 0 && Math.random() < 0.0005) {
            pixel.hungry = false, pixel.foodcount -= 0.25
        }

        if (pixel.breadcount > 0.9 && Math.random() < 0.0005) {
            pixel.hungry = false, pixel.breadcount -= 1
        }

        if (pixel.cookedmeatcount > 0 && Math.random() < 0.0005) {
            pixel.hungry = false, pixel.cookedmeatcount -= 1
        }

        if (pixel.trinketscount < 1 && Math.random() < 0.001) { //trinket desire mechanic
            pixel.greedy = true
        }
        else if (pixel.trinketscount > 1 && Math.random() < 0.01) {
            pixel.greedy = false
        }

        if (pixel.breadcount > 1.9 && pixel.cookedmeatcount > 0 && Math.random() < 0.005 && pixel.foodcount < 5) { //make a sandwich
            pixel.foodcount += 1, pixel.breadcount -= 2, pixel.cookedmeatcount -= 1
        }

        if (pixel.hasstraw == true && Math.random() < 0.005 && pixel.basket == false) { //make a basket
            pixel.basket = true, pixel.hasstraw = false
        }

        if (!isEmpty(pixel.x+1, pixel.y-1, true) && pixel.basket == true && pixelMap[pixel.x+1][pixel.y-1].element == "tree_branch") { // harvest branch
            var wood = pixelMap[pixel.x+1][pixel.y-1];
            if (wood.element == "tree_branch") {changePixel(wood,"branchless_tree"), pixel.woodcount += 1}
        }
        else if (!isEmpty(pixel.x-1, pixel.y-1, true) && pixel.basket == true && pixelMap[pixel.x-1][pixel.y-1].element == "tree_branch") { 
            var wood = pixelMap[pixel.x-1][pixel.y-1];
            if (wood.element == "tree_branch") {changePixel(wood,"branchless_tree"), pixel.woodcount += 1}
        }

        if (!isEmpty(pixel.x+1, pixel.y-1, true) && pixel.basket == true && pixelMap[pixel.x+1][pixel.y-1].element == "plant" && Math.random() < 0.05) { // harvest fruit
            var plant = pixelMap[pixel.x+1][pixel.y-1];
            if (plant.element == "plant") {pixel.foodcount += 0.25}
        }
        else if (!isEmpty(pixel.x-1, pixel.y-1, true) && pixel.basket == true && pixelMap[pixel.x-1][pixel.y-1].element == "plant" && Math.random() < 0.05) { 
            var plant = pixelMap[pixel.x-1][pixel.y-1];
            if (plant.element == "plant") {pixel.foodcount += 0.25}
        }

        if (pixel.woodcount > 15 && Math.random() < 0.001 && HouseBuilder == false) { 
            pixel.willbuildhouse = true, HouseBuilder = true
        }

        if (!isEmpty(pixel.x-1, pixel.y, true) && pixelMap[pixel.x-1][pixel.y].element == "c_body") {
            var seller = pixelMap[pixel.x-1][pixel.y];
            if (seller.dead) { // If seller is dead, stop trade
                var seller = null;
            }
            else { (seller.panic = -10), (pixel.panic = -10); 
                if (seller.trinketscount > 0 && pixel.greedy == true) {
                seller.trinketscount -= 1, seller.moneycount += 1, pixel.moneycount -= 1, pixel.trinketscount += 1;
                }
                if (seller.hasstraw == true && pixel.hasstraw == false && Math.random() < 0.1) {
                    seller.hasstraw = false, seller.moneycount += 1, pixel.moneycount -= 1, pixel.hasstraw = true;
                }
                if (seller.foodcount > 0.75 && Math.random() < 0.1) {
                    seller.foodcount -= 1, seller.moneycount += 5, pixel.moneycount -= 5, pixel.foodcount += 1;
                }
                if (seller.cookedmeatcount > 0 && pixel.cookedmeatcount < 5) {
                    seller.cookedmeatcount -= 1, seller.moneycount += 3, pixel.moneycount -= 3, pixel.cookedmeatcount += 1;
                }
                if (seller.meatcount > 0 && pixel.meatcount == 0 && Math.random() > 0.1) {
                    seller.meatcount -= 1, seller.moneycount += 2, pixel.moneycount -= 2, pixel.meatcount += 1;
                }
                if (seller.breadcount > 0.9 && pixel.breadcount < 5) {
                    seller.breadcount -= 1, seller.moneycount += 2, pixel.moneycount -= 2, pixel.breadcount += 1;
                };
                (seller.panic = 0), (pixel.panic = 0)
            }
        }
        else { var seller = null }
    }
},

elements.c_head = {
    name: "head",
    color: ["#f3e7db","#f7ead0","#eadaba","#d7bd96","#a07e56","#825c43","#604134","#3a312a"],
    forceSaveColor: true,
    category: "human",
    hidden: true,
    density: 1080,
    state: "solid",
    conduct: .05,
    temp: 37,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -30,
    stateLow: "frozen_meat",
    burn: 10,
    burnTime: 250,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat","bone"],
    forceSaveColor: true,
    reactions: {
        "cancer": { elem1:"cancer", attr1:{"dead":true}, chance:0.005 },
        "poison": { attr1:{"dead":true}, chance:0.4 },
        "radiation": { elem1:["ash","meat","rotten_meat","cooked_meat"], color1:["#75816B","#4D6B53"], chance:0.4 },
        "neutron": { elem1:["ash","meat","rotten_meat","cooked_meat"], chance:0.03 },
        "fallout": { elem1:["ash","meat","rotten_meat","cooked_meat"], color1:["#75816B","#4D6B53"], chance:0.03 },
        "plague": { elem1:["rotten_meat","rotten_meat","rotten_meat","c_head","plague",], color1:["#75816B","#4D6B53"],  attr1:{"dead":true}, chance:0.05 },
        "oxygen": { func:function(pixel,air){pixel.drowning -= 1}, elem2:"carbon_dioxide", chance:0.5 },
        "carbon_dioxide": { func:function(pixel,air){pixel.drowning += 1}, elem2:"carbon_dioxide", chance:0.1 },
        "meat": { elem2:null, chance:0.1 },
        "cooked_meat": { elem2:null, chance:0.1 },
        "cured_meat": { elem2:null, chance:0.1 },
        "sugar": { elem2:null, chance:0.1 },
        "broth": { elem2:null, chance:0.2 },
        "yolk": { elem2:null, chance:0.1 },
        "hard_yolk": { elem2:null, chance:0.1 },
        "dough": { elem2:null, chance:0.1 },
        "batter": { elem2:null, chance:0.2 },
        "butter": { elem2:null, chance:0.1 },
        "melted_butter": { elem2:null, chance:0.2 },
        "chocolate": { elem2:null, chance:0.2 },
        "melted_chocolate": { elem2:null, chance:0.3 },
        "grape": { elem2:null, chance:0.1 },
        "tomato": { elem2:null, chance:0.1 },
        "herb": { elem2:null, chance:0.1 },
        "lettuce": { elem2:null, chance:0.1 },
        "corn": { elem2:null, chance:0.1 },
        "popcorn": { elem2:null, chance:0.15 },
        "potato": { elem2:null, chance:0.1 },
        "baked_potato": { elem2:null, chance:0.15 },
        "bread": { elem2:null, chance:0.1 },
        "toast": { elem2:null, chance:0.1 },
        "gingerbread": { elem2:null, chance:0.1 },
        "baked_batter": { elem2:null, chance:0.2 },
        "wheat": { elem2:null, chance:0.1 },
        "candy": { elem2:null, chance:0.1 },
        "yogurt": { elem2:null, chance:0.2 },
        "frozen_yogurt": { elem2:null, chance:0.1 },
        "ice_cream": { elem2:null, chance:0.2 },
        "beans": { elem2:[null,null,null,null,null,null,null,null,"stench"], chance:0.2 },
        "tea": { elem2:null, chance:0.2 },
        "coffee": { elem2:null, chance:0.2 },
        "milk": { elem2:null, chance:0.2 },
        "cream": { elem2:null, chance:0.2 },
        "soda": { elem2:null, chance:0.2 },
        "chocolate_milk": { elem2:null, chance:0.2 },
        "fruit_milk": { elem2:null, chance:0.2 },
        "pilk": { elem2:null, chance:0.2 },
        "eggnog": { elem2:null, chance:0.2 },
        "juice": { elem2:null, chance:0.2 },
        "cheese": { elem2:null, chance:0.1 },
        "melted_cheese": { elem2:null, chance:0.2 },
        "alcohol": { elem2:null, chance:0.2 },
        "antidote": { elem2:null, chance:0.2 },
        "honey": { elem2:null, chance:0.2 },
        "caramel": { elem2:null, chance:0.2 },
        "molasses": { elem2:null, chance:0.05 },
        "ketchup": { elem2:null, chance:0.1 },
        "pumpkin_seed": { elem2:null, chance:0.1 },
        "nut": { elem2:null, chance:0.1 },
        "nut_meat": { elem2:null, chance:0.1 },
        "nut_butter": { elem2:null, chance:0.1 },
        "nut_milk": { elem2:null, chance:0.2 },
        "jelly": { elem2:null, chance:0.2 },
        "mayo": { elem2:null, chance:0.2 },
        "mashed_potato": { elem2:null, chance:0.2 },
        "sauce": { elem2:null, chance:0.2 },
        "pickle": { elem2:null, chance:0.1 },
        "sun": { elem1:"cooked_meat" },
        "light": { stain1:"#825043" },
        "bee": { stain1:"#cc564b", chance:0.2 },
        "water": { func:function(pixel,water){pixel.drowning += 1}, elem2:"bubble", attr2:{"clone":"water"}, chance:0.002 },
        "salt_water": { func:function(pixel,water){pixel.drowning += 2}, elem2:"bubble", attr2:{"clone":"salt_water"}, chance:0.002 },
        "sugar_water": { func:function(pixel,water){pixel.drowning += 2}, elem2:"bubble", attr2:{"clone":"sugar_water"}, chance:0.002 },
        "seltzer": { func:function(pixel,water){pixel.drowning += 4}, elem2:"bubble", attr2:{"clone":["seltzer","seltzer","carbon_dioxide"]}, chance:0.002 },
        "pool_water": { func:function(pixel,water){pixel.drowning += 1}, elem2:"bubble", attr2:{"clone":"pool_water"}, chance:0.002 },
        "dirty_water": { func:function(pixel,water){pixel.drowning += 4}, elem2:"bubble", color2:["#0e824e","#07755a","#0c6934"], attr2:{"clone":"dirty_water"}, chance:0.003 },
        "blood": { func:function(pixel,water){pixel.drowning += 5}, elem2:"bubble", color2:["#ff0000","#ee0000","#ff4040"], attr2:{"clone":"blood"}, chance:0.003 },
    },
    properties: {
        dead: false,
        drowning: 0
    },
    tick: function(pixel) {
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
                return
            }
        }

        // Find the body
        if (!isEmpty(pixel.x, pixel.y+1, true) && pixelMap[pixel.x][pixel.y+1].element == "c_body") {
            var body = pixelMap[pixel.x][pixel.y+1];
            if (body.dead) { // If body is dead, kill head
                pixel.dead = body.dead;
            }
        }
        else { var body = null }

        if (tryMove(pixel, pixel.x, pixel.y+1)) {
            // create blood if severed 10% chance
            if (isEmpty(pixel.x, pixel.y+1) && !pixel.dead && Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y+1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        // homeostasis
        if (pixel.temp > 37) { pixel.temp -= 1; }
        else if (pixel.temp < 37) { pixel.temp += 1; }

        // drowning
        if (pixel.drowning > 99.9) { pixel.dead = true }
    }
},

elements.money = {
    color: ["#85bb65","#5e8347","#65bb7d","#b2bb65","#dbffc4"],
    behavior: behaviors.POWDER,
    reactions: {
        "water": { elem1:"cellulose", elem2:null, chance:0.01 },
        "dirty_water": { elem1:"cellulose", elem2:null, chance:0.01 },
        "salt_water": { elem1:"cellulose", elem2:null, chance:0.01 },
        "sugar_water": { elem1:"cellulose", elem2:null, chance:0.01 },
        "seltzer": { elem1:"cellulose", elem2:null },
        "soda": { elem1:"cellulose", elem2:null, chance:0.01 },
        "blood": { elem1:"cellulose", elem2:null, chance:0.01 },
        "foam": { elem1:"cellulose", elem2:null, chance:0.01 },
        "bubble": { elem1:"cellulose", elem2:null, chance:0.01 },
        "oil": { elem1:"cellulose", elem2:null, chance:0.01 },
        "alcohol": { elem1:"cellulose", elem2:null, chance:0.01 },
        "vinegar": { elem1:"cellulose", elem2:null, chance:0.01 },
        "light": { stain1:"#ebdfa7" },
        "oxygen": { stain1:"#ebdfa7" }
    },
    tempHigh: 248,
    stateHigh: ["fire","fire","fire","fire","fire","ash"],
    burn: 70,
    burnTime: 300,
    burnInto: ["fire","fire","fire","fire","fire","ash"],
    category: "human",
    state: "solid",
    density: 1000,
    breakInto: "confetti",
    breakIntoColor: ["#85bb65","#65bb7d","#b2bb65","#85bb65"]
},

elements.tax_bill = {
    color: ["#f0f0f0","#f0f0f0","#f0f0f0","#f0f0f0","#f0f0f0","#ff0000","#171717",],
    behavior: behaviors.POWDER,
    reactions: {
        "water": { elem1:"cellulose", elem2:null, chance:0.01 },
        "dirty_water": { elem1:"cellulose", elem2:null, chance:0.01 },
        "salt_water": { elem1:"cellulose", elem2:null, chance:0.01 },
        "sugar_water": { elem1:"cellulose", elem2:null, chance:0.01 },
        "seltzer": { elem1:"cellulose", elem2:null, chance:0.01 },
        "soda": { elem1:"cellulose", elem2:null, chance:0.01 },
        "blood": { elem1:"cellulose", elem2:null, chance:0.01 },
        "foam": { elem1:"cellulose", elem2:null, chance:0.01 },
        "bubble": { elem1:"cellulose", elem2:null, chance:0.1 },
        "oil": { elem1:"cellulose", elem2:null, chance:0.01 },
        "alcohol": { elem1:"cellulose", elem2:null, chance:0.01 },
        "vinegar": { elem1:"cellulose", elem2:null, chance:0.01 },
        "light": { stain1:"#ebdfa7" },
        "oxygen": { stain1:"#ebdfa7" },
        "money": { elem1:null, elem2:null, chance:0.5},
        "gold_coin": { elem1:null, elem2:null, chance:0.4 }
    },
    tempHigh: 248,
    stateHigh: ["fire","fire","fire","fire","fire","ash"],
    burn: 70,
    burnTime: 300,
    burnInto: ["fire","fire","fire","fire","fire","ash"],
    category: "human",
    state: "solid",
    density: 1100,
    breakInto: "confetti",
    breakIntoColor: ["#ffffff","#e6e6e6","#dbdbdb","#ffffff","#e6e6e6","#dbdbdb","#ff0000","#171717",]
},

elements.loose_straw = {
    hidden: true,
	color: ["#F9E3A1","#93734E","#C7AA83"],
	behavior: behaviors.POWDER,
	tempHigh: 380,
	stateHigh: "fire",
	burn: 80,
	burnTime: 200,
	category: "powders",
	state: "solid",
	density: 45
},

elements.basket = {
    hidden:true,
    color: ["#88665d","#bcaa99"],
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 400,
    stateHigh: "fire",
    burn: 55,
    burnTime: 210,
    burnInto: ["smoke","smoke","smoke","smoke","ash"],
    breakInto: "loose_straw",
    category: "human",
    state: "solid",
    density: 70
},

elements.pickaxe = {
    hidden:true,
    color: ["#71797e","#D8B589"],
    behavior: behaviors.STURDYPOWDER,
    colorKey: {
        "A":"#607d8b",
        "H":"#91754d",
        "B":"#a0522d"
    },
    colorPattern: [
        "BBBBBB",
        "BAABHB",
        "BBBABB",
        "BBHBAB",
        "BHBBAB",
        "HBBBBB"
    ],
    reactions: {
        "mine_hole": { func:function(pixel,mine){
            if (isEmpty(pixel.x, pixel.y-1)) {(createPixel("rock", pixel.x, pixel.y-1));}
            else if (isEmpty(pixel.x-1, pixel.y)) {(createPixel("rock", pixel.x-1, pixel.y));}
            else if (isEmpty(pixel.x+1, pixel.y)) {(createPixel("rock", pixel.x+1, pixel.y));}
        }, chance:0.05},
    },
    tempHigh: 400,
    stateHigh: ["rock","rock","ash","charcoal",],
    burn: 55,
    burnTime: 210,
    burnInto: ["rock","rock","rock","rock","ash","charcoal","charcoal","smoke"],
    breakInto: ["rock","rock","wood","sawdust",],
    category: "human",
    state: "solid",
    density: 70
},

elements.workbench = {
    hidden:true,
    color: ["#a0522d"],
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "loose_straw": { elem2:"basket", chance:0.25 },
        "rock": { elem2:"pickaxe", chance:0.1 },
        "oven": { elem1:"allpurposestation", elem2:null, chance:0.5 },
    },// by
    temp:40, //neko
    tempHigh: 1000, //nico
    stateHigh: "magma",
    category: "human",
    state: "solid",
    density: 2550,
    hardness: 0.2,
    breakInto: ["sand","gravel","charcoal","ash"]
},

elements.furnace = {
    hidden:true,
    color: ["#808080","#4f4f4f","#949494"],
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "bird": { elem2:["cooked_meat","cooked_meat","feather"], chance:0.025 },
        "meat": { elem2:"cooked_meat", chance:0.1 },
        "yolk": { elem2:"hard_yolk", chance:0.1 },
        "egg": { elem2:"hard_yolk", chance:0.1 },
        "batter": { elem2:"baked_batter", chance:0.1 },
        "dough": { elem2:"bread", chance:0.1 },
        "bread": { elem2:"toast", chance:0.05 },
        "wood": { elem2:"charcoal", chance:0.005 },
        "metal_scrap": { elem1:"oven", elem2:null, chance:0.05 },
    },
    temp:40,
    tempHigh: 1000,
    stateHigh: "magma",
    category: "human",
    state: "solid",
    density: 2550,
    hardness: 0.2,
    breakInto: ["sand","gravel","charcoal","ash"]
},

elements.oven = {
    hidden:true,
    color: ["#4f4f4f","#71797e"],
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "workbench": { elem1:"allpurposestation", elem2:null, chance:0.5 },
        "bird": { elem2:["cooked_meat","cooked_meat","feather"], chance:0.025 },
        "meat": { elem2:"cooked_meat", chance:0.1 },
        "yolk": { elem2:"hard_yolk", chance:0.1 },
        "egg": { elem2:"hard_yolk", chance:0.1 },
        "batter": { elem2:"baked_batter", chance:0.1 },
        "dough": { elem2:"bread", chance:0.1 },
        "bread": { elem2:"toast", chance:0.05 },
    },
    temp:50,
    tempHigh: 1550,
    stateHigh: "molten_metal_scrap",
    category: "human",
    state: "solid",
    density: 2550,
    hardness: 0.5,
    breakInto: ["metal_scrap","metal_scrap","charcoal","ash"]
},

elements.allpurposestation = {
    hidden:true,
    name: "workshop_station",
    color: ["#a0522d","#4f4f4f","#71797e"],
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "rock": { elem2:"pickaxe", chance:0.5 },
        "loose_straw": { elem2:"basket", chance:0.5 },
        "meat": { elem2:"cooked_meat", chance:0.1 },
        "yolk": { elem2:"hard_yolk", chance:0.1 },
        "egg": { elem2:"hard_yolk", chance:0.1 },
        "batter": { elem2:"baked_batter", chance:0.1 },
        "dough": { elem2:"bread", chance:0.1 },
        "bread": { elem2:"toast", chance:0.05 },
    },
    temp:40,
    tempHigh: 1000,
    stateHigh: "magma",
    category: "human",
    state: "solid",
    density: 2550,
    hardness: 0.2,
    breakInto: ["sand","gravel","charcoal","ash"]
},

elements.branchless_tree = {
    name: "wood",
    color: "#a59965",
    behavior: behaviors.WALL,
    renderer: renderPresets.WOODCHAR,
    tick: function(pixel) {
        if (Math.random() < 0.02 && pixel.age > 35) {
            changePixel(pixel,"tree_branch")
        }
        else if (pixel.age > 1000 && Math.random() < 0.05) {
            changePixel(pixel,"wood");
            pixel.color = pixelColorPick(pixel, pixel.wc);
        }
        pixel.age++;
    },
    properties: {
        "age":0
    },
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
};

elements.mine_hole = {
    hidden:true,
    color: "#363636",
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 950,
    stateHigh: "magma",
    category: "land",
    state: "solid",
    density: 2550,
    hardness: 0.5,
    breakInto: ["sand","gravel"]
},

elements.housefloor1 = {
    name: "wood",
    color: "#a0522d",
    behavior: behaviors.WALL,
    renderer: renderPresets.WOODCHAR,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
};

elements.housefloor2 = {
    name: "wood",
    color: "#a0522d",
    behavior: behaviors.WALL,
    renderer: renderPresets.WOODCHAR,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
};

elements.straw.breakInto = "loose_straw"

elements.human.name = "dummy"

elements.head.name = "brainless_head"

elements.body.name = "dumb_body"

elements.grass.properties.h = 1

elements.rotten_meat.density = 1200

/* yo, thanks for scrolling to the end. If you have any ideas to add to this mod, or wanna contact me in general, you can DM my discord account "nekonico" or just ping me in the r74n discord 
peace 
 ^ ^
(*w*) /     
*/ 





































































//------------------------------------------------------------------------------------------------------























































elements.soul = {
    color: "#87fff9",
    tick: function(pixel) {
        if (pixel.y <= 1) { deletePixel(pixel.x,pixel.y); return; }
        if (Math.random() < 0.05) {
            if (!tryMove(pixel,pixel.x,pixel.y-1)) {
                if (!isEmpty(pixel.x,pixel.y-1,true)) {
                    var hitPixel = pixelMap[pixel.x][pixel.y-1];
                    if (elements[hitPixel.element].movable) {
                        swapPixels(pixel,hitPixel);
                    }
                }
            }
        }
        var dir = pixel.flipX ? -1 : 1;
        if (!pixel.stage) {
            if (Math.random() < 0.25) {
                if (!tryMove(pixel,pixel.x+dir,pixel.y-( Math.random() < 0.33 ? 1 : 0 ))) {
                    pixel.flipX = !pixel.flipX;
                }
                if (Math.random() < 0.1) {
                    pixel.stage = 1;
                    pixel.flipX = Math.random() < 0.5;
                }
            }
        }
        else if (pixel.stage === 1) {
            if (!tryMove(pixel,pixel.x+dir,pixel.y+1)) { pixel.flipX = !pixel.flipX; }
            if (Math.random() < 0.25) {
                pixel.stage = 2;
                pixel.flipX = Math.random() < 0.5;
            }
        }
        else if (pixel.stage === 2) {
            if (Math.random() < 0.25) {
                var dirX = Math.floor(Math.random() * (2 - -1) + -1);
                var dirY = Math.floor(Math.random() * (2 - -1) + -1);
                tryMove(pixel,pixel.x+dirX,pixel.y+dirY);
            }
            if (Math.random() < 0.01) {
                pixel.stage = 0;
                pixel.flipX = Math.random() < 0.5;
            }
        }
        if (!pixel.glow) {
            if (Math.random() < 0.25) { pixel.glow = true; }
        }
        else if (Math.random() < 0.01) {
            pixel.glow = false;
            delete pixel.glow;
        }
        if (Math.random() < 0.0002 && isEmpty(pixel.x,pixel.y+1)) {
            createPixel("ectoplasm",pixel.x,pixel.y+1);
        }
        if (Math.random() < 0.001) {
            for (var i = 0; i < adjacentCoords.length; i++) {
                var coords = adjacentCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    createPixel("flash",x,y);
                    pixelMap[x][y].temp = -10;
                }
            }
        }
        doDefaults(pixel);
    },
    reactions: {
        "sand":{elem1:null,elem2:"soul_sand"},
        "light_bulb": { charged:true, elem2:"explosion" },
        "led_r": { charged:true, elem2:"explosion" },
        "led_g": { charged:true, elem2:"explosion" },
        "led_b": { charged:true, elem2:"explosion" },
        "wire": { charge2:1, chance:0.05 },
        "body": { attr2:{"panic":20} },
        "proton": { elem1:null },
    },
    temp: -10,
    hardness: 100,
    flippableX: true,
    glow: true,
    state: "gas",
    density: 1000,
    ignoreAir: true,
    category: "life",
    insulate: true,
    hidden: true,
    emit: 3
}

elements.ectoplasm = {
    color: ["#ADF9E7","#c1fbed"],
    behavior: behaviors.LIQUID,
    tick: function(pixel) {
        if (pixel.temp >= -10 && Math.random() < 0.01 && pixelTicks-pixel.start > 100) {
            deletePixel(pixel.x,pixel.y)
        }
    },
    reactions: {
        "body": { attr2:{"panic":20} },
        "rock_wall": { elem1:null, elem2:"tombstone" }
    },
    temp: -10,
    category: "liquids",
    state: "liquid",
    density: 0.0001,
    ignoreAir: true,
    insulate: true,
    viscosity: 1666,
    hardness: 100,
    hidden: true,
    emit: 2
}

elements.head.breakInto = "soul";
elements.head.burnInto = "soul";
elements.head.stateHigh = "soul";
elements.head.stateLow = "soul";
elements.head.onDelete = function(pixel) {
    for (var i = 0; i < adjacentCoords.length; i++) {
        var coord = adjacentCoords[i];
        var x = pixel.x+coord[0];
        var y = pixel.y+coord[1];
        if (!isEmpty(x,y,true) && pixelMap[x][y].panic !== undefined) {
            pixelMap[x][y].panic += 20;
        }
    }
    releaseElement(pixel,"soul");
}
elements.head.onChange = function(pixel,element) {
    for (var i = 0; i < adjacentCoords.length; i++) {
        var coord = adjacentCoords[i];
        var x = pixel.x+coord[0];
        var y = pixel.y+coord[1];
        if (!isEmpty(x,y,true) && pixelMap[x][y].panic !== undefined) {
            pixelMap[x][y].panic += 20;
        }
    }
    if (element !== "soul") {
        releaseElement(pixel,"soul");
    }
}

elements.bless.reactions.soul = { elem2:"human" }
elements.bless.reactions.ectoplasm = { elem2:null }
elements.bless.reactions.tombstone = { elem2:"rock_wall" }

elements.tombstone = {
    color: ["#5f5f5f","#434343","#282828"],
    behavior: [
        "XX|CR:soul%0.01|XX",
        "CR:soul%0.01|XX|CR:soul%0.01",
        "XX|XX|XX",
    ],
    category:"special",
    tempHigh: 950,
    stateHigh: "magma",
    state: "solid",
    density: 2550,
    hardness: 0.5,
    breakInto: ["rock","rock","rock","rock","soul","ectoplasm"],
    onStateHigh: function(pixel) {
        releaseElement(pixel,"soul");
    },
    buttonGlow: "#87fff9"
}



















































































//---------------------------------------------------------------------------------------------------------------














































































































elements.beans.reactions = {
    head: {elem1:"methane", chance: .5},
    body: {elem1:"methane", chance: .5}
};






elements.lookup.maxSize = 1000;




elements.blood_slush = {
  
  
    
      color: ["#eb3b58","#cf2541","#c4213d"],
      
      behavior: behaviors.LIQUID,
      
      category: "states",
      
      viscosity: 100000,
     
      state: "liquid",
     

      temp: -5,


      density: 720,
    
      stateHigh: "blood",
     
      tempHigh: 0,
     
      tempLow: -20,
      
      stateLow: "blood_ice",
      
      reactions: {
        "oxidized_copper": { elem1: "oxidized_copper", elem2: "infection" },
        "rust": { elem1: "rust", elem2: "infection" },
        "sugar": { elem1: "sweet_blood", elem2: "sweet_blood" },
        "alcohol": { elem1: "dna", elem2: "alcohol" },
      }
      //Ne_İle_Nasıl_Tepkimeye_Girceyi
  
       
      
  
      
  };
  elements.blood_ice.breakInto = "blood_slush";
  




  enabledMods.includes("mods/libpacman-v1.js") || (enabledMods.push("mods/libpacman-v1.js"), localStorage.setItem("enabledMods", JSON.stringify(enabledMods)), location.reload());

let realTps = 0;
let lastTps = 0;
window.addEventListener("load", ()=>{
  requireMods(["mods/libhooktick.js"], () => {
    beforeEveryTick(()=>{
      lastTps++;
    });
    setInterval(()=>{
      realTps = lastTps;
      lastTps = 0;
    }, 1000);
  });
});
function updateStatsNew() {
	var statsDiv = document.getElementById("stats");
	var stats = "<span id='stat-pos' class='stat'>x"+mousePos.x+",y"+mousePos.y+"</span>";
	stats += "<span id='stat-pixels' class='stat"+ (currentPixels.length >= maxPixelCount ? " redText" : "") +"'>Pxls:" + currentPixels.length+"</span>";
	stats += "<span id='stat-tps' class='stat'>" + tps+"tps</span>";
	stats += "<span id='stat-realtps' class='stat'>" + realTps + "tps</span>";
	stats += "<span id='stat-ticks' class='stat'>" + pixelTicks+"</span>";
	if ((typeof pixelMap).length === 9) { return; }
	if (pixelMap[mousePos.x] !== undefined) {
		var currentPixel = pixelMap[mousePos.x][mousePos.y];
		if (currentPixel !== undefined) {
			stats += "<span id='stat-element' class='stat'>Elem:"+(elements[currentPixel.element].name || currentPixel.element).toUpperCase()+"</span>";
			stats += "<span id='stat-temperature' class='stat'>Temp:"+formatTemp(currentPixel.temp)+"</span>";
			if (currentPixel.charge) {
				stats += "<span id='stat-charge' class='stat'>C"+parseFloat(currentPixel.charge)+"</span>";
			}
			if (currentPixel.burning) {
				stats += "<span id='stat-burning' class='stat'>Burning</span>";
			}
			if (elements[currentPixel.element].hoverStat) {
				stats += "<span id='stat-hover' class='stat'>"+elements[currentPixel.element].hoverStat(currentPixel).toString().replaceAll("<","&lt;")+"</span>";
			}
			else if (currentPixel.clone) {
				stats += "<span id='stat-clone' class='stat'>"+currentPixel.clone.toString().toUpperCase().replaceAll("<","&lt;")+"</span>";
			}
			else if (currentPixel.con && currentPixel.con.element) {
				stats += "<span id='stat-clone' class='stat'>"+currentPixel.con.element.toString().toUpperCase().replaceAll("<","&lt;")+"</span>";
			}
		}
	}
	if (shiftDown) {
		stats += "<span id='stat-shift' class='stat'>"+shiftDownTypes[shiftDown]+"</span>";
	}
	// If the view is not null, show the view in all caps
	if (view !== null) {
		stats += "<span id='stat-view' class='stat'>"+(viewInfo[view] ? viewInfo[view].name : view)+"</span>";
	}
	statsDiv.innerHTML = stats;
}
updateStats = updateStatsNew;
  








































function drawText(font, text, position, element, scale = 1) {
	const {
		x: startX,
		y: startY
	} = position;
	var currentX = startX;
	var currentY = startY;

	// Iterate through each character in the text
	for (var char of text) {
		if (char === '\n') {
			// Handle new lines
			currentY += (5 * scale) + scale; // Assuming each character height is 5 and we add 1 for line spacing
			currentX = startX;
			continue;
		}

		if (char === ' ') {
			// Handle spaces
			currentX += 4 * scale;
			continue;
		}

		// Get the character's pixel representation from the font
		const charArray = font[char];
		if (!charArray) {
			charArray = font["invalid"]
		}

		// Place the character in the pixelMap
		for (var row = 0; row < charArray.length; row++) {
			for (var col = 0; col < charArray[row].length; col++) {
				const pixel = charArray[row][col];
				if (pixel === '#') {
					for (var i = 0; i < scale; i++) {
						for (var j = 0; j < scale; j++) {
							var x = currentX + (col * scale) + j;
							var y = currentY + (row * scale) + i;
							if (x < width && y < height && !pixelMap[x][y]) {
								createPixel(element, x, y);
							}
						}
					}
				}
			}
		}

		// Move to the next character
		currentX += (charArray[0].length * scale) + scale;
	}
}

var textToPlace = "Text";
var textElement = "copper";

elements.text = {
    maxSize: 1,
    color: ["#ff0000","#ffb700","#88ff00","#00ff3c","#00ffea","#0088ff","#1500ff","#e100ff","#ff0084","#ff0011"],
	behavior: behaviors.WALL,
	category: "tools",
	state: "solid",
	cooldown: 2,
	onSelect: function() {
		textToPlace = prompt("Input Text\n(Previous element = Text's element)", textToPlace);
		textElement = previousValidTextElement;
	},
	tick: function(pixel) {
		if (pixel.start == pixelTicks) {
			deletePixel(pixel.x, pixel.y);
			drawText(font, textToPlace, {
				x: pixel.x,
				y: pixel.y
			}, textElement, 1);
		}
	}
};

// Keep track of previous valid text element, only if it can be used for text
var previousValidTextElement = "copper";
var oldSelectElement = selectElement;
selectElement = function(element) {
	// Don't include sand because the game auto-selects it at the start and would be annoying
	if (currentElement != "text" && currentElement != "unknown" && currentElement != "sand") {
		previousValidTextElement = currentElement;
	}
	oldSelectElement(element);
}


var font = {
	"invalid": [
		"###",
		"###",
		"###",
		"###",
		"###",
	],
	"A": [
		" # ",
		"# #",
		"###",
		"# #",
		"# #",
	],
	"B": [
		"## ",
		"# #",
		"## ",
		"# #",
		"###",
	],
	"C": [
		"##",
		"# ",
		"# ",
		"# ",
		"##",
	],
	"D": [
		"## ",
		"# #",
		"# #",
		"# #",
		"## ",
	],
	"E": [
		"###",
		"#  ",
		"## ",
		"#  ",
		"###",
	],
	"F": [
		"###",
		"#  ",
		"## ",
		"#  ",
		"#  ",
	],
	"G": [
		"###",
		"#  ",
		"# #",
		"# #",
		"###",
	],
	"H": [
		"# #",
		"# #",
		"###",
		"# #",
		"# #",
	],
	"I": [
		"###",
		" # ",
		" # ",
		" # ",
		"###",
	],
	"J": [
		"###",
		"  #",
		"  #",
		"# #",
		"## ",
	],
	"K": [
		"# #",
		"# #",
		"## ",
		"# #",
		"# #",
	],
	"L": [
		"#  ",
		"#  ",
		"#  ",
		"#  ",
		"###",
	],
	"M": [
		"#   #",
		"## ##",
		"# # #",
		"#   #",
		"#   #",
	],
	"N": [
		"#  #",
		"## #",
		"# ##",
		"#  #",
		"#  #",
	],
	"O": [
		"###",
		"# #",
		"# #",
		"# #",
		"###",
	],
	"P": [
		"###",
		"# #",
		"###",
		"#  ",
		"#  ",
	],
	"Q": [
		"###",
		"# #",
		"# #",
		"## ",
		"  #",
	],
	"R": [
		"###",
		"# #",
		"###",
		"## ",
		"# #",
	],
	"S": [
		"###",
		"#  ",
		"###",
		"  #",
		"###",
	],
	"T": [
		"###",
		" # ",
		" # ",
		" # ",
		" # ",
	],
	"U": [
		"# #",
		"# #",
		"# #",
		"# #",
		"###",
	],
	"V": [
		"# #",
		"# #",
		"# #",
		" # ",
		" # ",
	],
	"W": [
		"#   #",
		"#   #",
		"# # #",
		"## ##",
		"#   #",
	],
	"X": [
		"# #",
		"# #",
		" # ",
		"# #",
		"# #",
	],
	"Y": [
		"# #",
		"# #",
		" # ",
		" # ",
		" # ",
	],
	"Z": [
		"###",
		"  #",
		" # ",
		"#  ",
		"###",
	],
	"a": [
		"   ",
		"   ",
		" ##",
		"# #",
		" ##",
	],
	"b": [
		"#  ",
		"#  ",
		"###",
		"# #",
		"###",
	],
	"c": [
		"  ",
		" #",
		"# ",
		"# ",
		" #",
	],
	"d": [
		"  #",
		"  #",
		"###",
		"# #",
		"###",
	],
	"e": [
		" # ",
		"# #",
		"###",
		"#  ",
		" ##",
	],
	"f": [
		"  #",
		" # ",
		"###",
		" # ",
		" # ",
	],
	"g": [
		" ##",
		"# #",
		"###",
		"  #",
		"###",
	],
	"h": [
		"#  ",
		"#  ",
		"###",
		"# #",
		"# #",
	],
	"i": [
		" ",
		"#",
		" ",
		"#",
		"#",
	],
	"j": [
		"  #",
		"  #",
		"  #",
		"# #",
		"###",
	],
	"k": [
		"# #",
		"# #",
		"## ",
		"# #",
		"# #",
	],
	"l": [
		" ",
		"#",
		"#",
		"#",
		"#",
	],
	"m": [
		"     ",
		"## ##",
		"# # #",
		"#   #",
		"#   #",
	],
	"n": [
		"   ",
		"   ",
		"## ",
		"# #",
		"# #",
	],
	"o": [
		"   ",
		"   ",
		" ##",
		"# #",
		"## ",
	],
	"p": [
		"   ",
		"## ",
		"# #",
		"###",
		"#  ",
	],
	"q": [
		"   ",
		" ##",
		"# #",
		"###",
		"  #",
	],
	"r": [
		"  ",
		"##",
		"# ",
		"# ",
		"# ",
	],
	"s": [
		" ##",
		"#  ",
		"## ",
		"  #",
		"## ",
	],
	"t": [
		"   ",
		" # ",
		"###",
		" # ",
		" # ",
	],
	"u": [
		"   ",
		"   ",
		"# #",
		"# #",
		" ##",
	],
	"v": [
		"   ",
		"   ",
		"# #",
		"# #",
		" # ",
	],
	"w": [
		"     ",
		"     ",
		"#   #",
		"# # #",
		" # # ",
	],
	"x": [
		"   ",
		"   ",
		"# #",
		" # ",
		"# #",
	],
	"y": [
		"   ",
		"# #",
		" ##",
		"  #",
		" # ",
	],
	"z": [
		"   ",
		"###",
		" #",
		"#  ",
		"###",
	],
	"0": [
		"###",
		"# #",
		"# #",
		"# #",
		"###",
	],
	"1": [
		" # ",
		"## ",
		" # ",
		" # ",
		"###",
	],
	"2": [
		"###",
		"  #",
		"###",
		"#  ",
		"###",
	],
	"3": [
		"###",
		"  #",
		" ##",
		"  #",
		"###",
	],
	"4": [
		"# #",
		"# #",
		"###",
		"  #",
		"  #",
	],
	"5": [
		"###",
		"#  ",
		"###",
		"  #",
		"###",
	],
	"6": [
		"###",
		"#  ",
		"###",
		"# #",
		"###",
	],
	"7": [
		"###",
		"  #",
		"  #",
		"  #",
		"###",
	],
	"8": [
		"###",
		"# #",
		"###",
		"# #",
		"###",
	],
	"9": [
		"###",
		"# #",
		"###",
		"  #",
		"###",
	],
	"@": [
		" ### ",
		"#  ##",
		"# # #",
		"#  ##",
		" #   ",
	],
	"!": [
		"#",
		"#",
		"#",
		" ",
		"#",
	],
	"#": [
		" # # ",
		"#####",
		" # # ",
		"#####",
		" # # ",
	],
	"%": [
		"   # ",
		"#  # ",
		"  #  ",
		" #  #",
		" #   ",
	],
	"[": [
		"##",
		"# ",
		"# ",
		"# ",
		"##",
	],
	"]": [
		"##",
		" #",
		" #",
		" #",
		"##",
	],
	"{": [
		"  #",
		" # ",
		"## ",
		" # ",
		"  #",
	],
	"}": [
		"#  ",
		" # ",
		" ##",
		" # ",
		"#  ",
	],
	"<": [
		"  #",
		" # ",
		"#  ",
		" # ",
		"  #",
	],
	">": [
		"#  ",
		" # ",
		"  #",
		" # ",
		"#  ",
	],
	"(": [
		" #",
		"# ",
		"# ",
		"# ",
		" #",
	],
	")": [
		"# ",
		" #",
		" #",
		" #",
		"# ",
	],
	"-": [
		"   ",
		"   ",
		"###",
		"   ",
		"   ",
	],
	"_": [
		"   ",
		"   ",
		"   ",
		"   ",
		"###",
	],
	"^": [
		" # ",
		"# #",
		"   ",
		"   ",
		"   ",
	],
	"*": [
		" # ",
		"###",
		" # ",
		"   ",
		"   ",
	],
	"+": [
		"   ",
		" # ",
		"###",
		" # ",
		"   ",
	],
	"/": [
		"  #",
		" # ",
		" # ",
		" # ",
		"#  ",
	],
	"?": [
		" ##",
		"# #",
		"  #",
		"   ",
		" # ",
	],
	".": [
		" ",
		" ",
		" ",
		" ",
		"#",
	],
	",": [
		" ",
		" ",
		" ",
		"#",
		"#",
	],
};





























































































































document.onkeydown = function(ki)/*keyboard_input*/ {
    //a
    if (ki.keyCode == 65) {
        KA = true;
        //vX ++;
    }
    //d
    if (ki.keyCode == 68) {
        KD = true;
        //vX ++;
    }
    //w
    if (ki.keyCode == 87) {
        KW = true;
        //vY ++;
    }
    //s
    if (ki.keyCode == 83) {
        KS = true;
        //vY ++;
    }
}
document.onkeyup = function(i2)/*keyboard_input*/ {
    //a
    if (i2.keyCode == 65) {
        KA = false;
        //vX --;
    }
    //d
    if (i2.keyCode == 68) {
        KD = false;
       //vX --;
    }
    //w
    if (i2.keyCode == 87) {
        KW = false;
        //vY = 0;
    }
    //s
    if (i2.keyCode == 83) {
        KS = false;
        //vY = 0;
    }
}
var KA = false;
var KD = false;
var KW = false;
var KS = false;
var vX = 1;
var vY = 1;
elements.controllable_pixel = {
    tick: function(pixel) {
    /*if (vX === 3) {
            vX --;
        }
    if (vY === 3) {
            vY --;
        }*/
    if (KA === true) {
            tryMove (pixel,pixel.x-vX,pixel.y)
        }
    if (KD === true) {
            tryMove (pixel,pixel.x+vX,pixel.y)
        }
    if (KW === true) {
            tryMove (pixel,pixel.x,pixel.y-vY)
        }
    if (KS === true) {
            tryMove (pixel,pixel.x,pixel.y+vY)
        }
    },
    category: "special",
    states:"solid",
    color:"#FFFFFF",
}








































elements.rainbow_powder = {
    color: ["#ff0000","#ff8800","#ffff00","#00ff00","#00ffff","#0000ff","#ff00ff"],
    tick: function(pixel) {
        var t = pixelTicks+pixel.x+pixel.y;
        var r = Math.floor(127*(1-Math.cos(t*Math.PI/90)));
        var g = Math.floor(127*(1-Math.cos(t*Math.PI/90+2*Math.PI/3)));
        var b = Math.floor(127*(1-Math.cos(t*Math.PI/90+4*Math.PI/3)));
        pixel.color = "rgb("+r+","+g+","+b+")";
    },
    behavior: behaviors.POWDER,
    category: "special",
    state: "solid",
    breakInto: "static",
}
elements.rainbow_powder.emit = true;











































































































// behaviors
behaviors.POISONED_LIQUID = [
    "XX|DL:"+eLists.ANIMAL+"|XX",
    "DL:"+eLists.ANIMAL+" AND M2|XX|DL:"+eLists.ANIMAL+" AND M2",
    "M1|DL:"+eLists.ANIMAL+" AND M1|M1",
];
behaviors.POISONED_WALL = [
    "XX|DL:"+eLists.ANIMAL+"|XX",
    "DL:"+eLists.ANIMAL+"|XX|DL:"+eLists.ANIMAL+"",
    "XX|DL:"+eLists.ANIMAL+"|XX",
];
behaviors.POISONED_POWDER = [
    "XX|DL:"+eLists.ANIMAL+"|XX",
    "DL:"+eLists.ANIMAL+"|XX|DL:"+eLists.ANIMAL+"",
    "M2|DL:"+eLists.ANIMAL+" AND M1|M2",
];
behaviors.POISONED_GAS = [
    "M2|DL:"+eLists.ANIMAL+" AND M1|M2",
    "DL:"+eLists.ANIMAL+" AND M1|XX|DL:"+eLists.ANIMAL+" AND M1",
    "M2|DL:"+eLists.ANIMAL+" AND M1|M2",
];

// changing mayo
elements.mayo.tempLow = -3;
elements.mayo.stateLow = "frozen_mayo";
elements.mayo.tempHigh = 100;
elements.mayo.stateHigh = "mayo_gas";
elements.mayo.density = 1092;
elements.mayo.reactions ??= {};
elements.mayo.reactions.mayonnaise = { "elem1": null, "elem2": "fry_sauce" };
elements.mayo.reactions.plague = { "elem1": "poisoned_mayo", "elem2": null};
elements.mayo.reactions.infection = { "elem1": "poisoned_mayo", "elem2": null};
elements.mayo.reactions.fallout = { "elem1": "poisoned_mayo", "chance":25};
elements.mayo.reactions.gloomwind = { "elem1": "poisoned_mayo", "elem2": null};

// making mayo dirty
elements.dirt.reactions ??= {};
elements.dirt.reactions.mayo = { "elem1": null, "elem2": "dirty_mayo", "oneway":true};
elements.ash.reactions ??= {};
elements.ash.reactions.mayo = { "elem1": null, "elem2": "dirty_mayo", "oneway":true};
elements.dust.reactions ??= {};
elements.dust.reactions.mayo = { "elem1": null, "elem2": "dirty_mayo", "oneway":true};

// pyrocumulus reactions
elements.smoke.reactions.mayo_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.smoke.reactions.poisoned_mayo_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.smoke.reactions.mayo_snow_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.smoke.reactions.poisoned_mayo_snow_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.smoke.reactions.mayo_rain_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.smoke.reactions.poisoned_mayo_rain_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.ash.reactions.mayo_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.ash.reactions.poisoned_mayo_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.ash.reactions.mayo_snow_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.ash.reactions.poisoned_mayo_snow_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.ash.reactions.mayo_rain_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.ash.reactions.poisoned_mayo_rain_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },

// fixing radiation reactions
elements.radiation.reactions.mayo = { "elem1": null, "elem2": "poisoned_mayo", "chance":25}

// elements
elements.frozen_mayo = {
    color: "#ede6e6",
    behavior: behaviors.WALL,
    temp: -5,
    category:"solids",
    tempHigh: 5,
    stateHigh: "mayo",
    state: "solid",
    density: 917,
    reactions: {
        "plague": { "elem1": "frozen_poisoned_mayo", "elem2": null},
        "infection": { "elem1": "frozen_poisoned_mayo", "elem2": null},
        "radiation": { "elem1": "frozen_poisoned_mayo", "chance":25},
        "fallout": { "elem1": "frozen_poisoned_mayo", "chance":25},
        "gloomwind": { "elem1": "frozen_poisoned_mayo", "elem2": null},
    },
};
elements.poisoned_mayo = {
    color: "#dce8d3",
    behavior: behaviors.POISONED_LIQUID,
    tempLow: -3,
    stateLow: "frozen_poisoned_mayo",
    tempHigh: 100,
    stateHigh: "poisoned_mayo_gas",
    viscosity: 50000,
    category:"liquids",
    state: "liquid",
    density: 1140,
    stain: 0.05,
};
elements.frozen_poisoned_mayo = {
    color: "#e7f7dc",
    behavior: behaviors.POISONED_WALL,
    temp: -5,
    category:"solids",
    tempHigh: 5,
    stateHigh: "poisoned_mayo",
    state: "solid",
    density: 917,
};
elements.mayo_spout = {
    color: "#e3e2de",
    behavior: [
        "XX|CR:poisoned_mayo%0.001 AND CR:mayo|XX",
        "CR:poisoned_mayo%0.001 AND CR:mayo|XX|CR:poisoned_mayo%0.001 AND CR:mayo",
        "XX|CR:poisoned_mayo%0.001 AND CR:mayo|XX",
    ],
    category:"special",
};
elements.mayo_cloud = {
    color: "#d6d5d2",
    behavior: [
        "XX|XX|XX",
        "XX|CO:1%5|M1%2.5 AND BO",
        "XX|XX|XX",
    ],
    category:"gases",
    temp: 110,
    tempLow: 100,
    stateLow: "mayo_rain_cloud",
    state: "gas",
    density: 0.5,
    reactions: {
        "plague": { "elem1": "poisoned_mayo_cloud", "elem2": null},
        "infection": { "elem1": "poisoned_mayo_cloud"},
        "radiation": { "elem1": "poisoned_mayo_cloud", "chance":25},
        "fallout": { "elem1": "poisoned_mayo_cloud", "chance":25},
        "gloomwind": { "elem1": "poisoned_mayo_cloud", "elem2": null},
        "mayo_rain_cloud": { "elem1":"mayo_rain_cloud", "temp1":-20 },
    },
    conduct: 0.03,
    ignoreAir: true,
};
elements.mayo_rain_cloud = {
    color: "#c2c1be",
    behavior: [
        "XX|XX|XX",
        "XX|CH:mayo%0.05|M1%2.5 AND BO",
        "XX|XX|XX|",
    ],
    category: "gases",
    temp: 70,
    tempHigh: 100,
    stateHigh: "mayo_cloud",
    tempLow: 0,
    stateLow: "mayo_snow_cloud",
    state: "gas",
    density: "0.5",
    ignoreAir: true,
    conduct: 0.03,
};
elements.poisoned_mayo_cloud = {
    color: "#9ba891",
    behavior: [
        "XX|XX|XX",
        "XX|CO:1%5|M1%2.5 AND BO",
        "XX|XX|XX",
    ],
    reactions: {
        "poisoned_mayo_rain_cloud": { "elem1":"poisoned_mayo_rain_cloud", "temp1": -20 },
    },
    category: "gases",
    temp: 110,
    tempLow: 100,
    stateLow: "poisoned_mayo_rain_cloud",
    state: "gas",
    density: 0.5,
    conduct: 0.03,
    ignoreAir: true,
};
elements.poisoned_mayo_rain_cloud = {
    color: "#9ba891",
    behavior: [
        "XX|XX|XX",
        "XX|CH:poisoned_mayo%0.05|M1%2.5 AND BO",
        "XX|XX|XX",
    ],
    category: "gases",
    temp: 70,
    tempHigh: 100,
    stateHigh: "poisoned_mayo_cloud",
    tempLow: 0,
    stateLow: "poisoned_mayo_snow_cloud",
    state: "gas",
    density: 0.5,
    ignoreAir: true,
    conduct: 0.03,
};
elements.mayo_snow = {
    color: "#d5dece",
    behavior: behaviors.POWDER,
    temp: -5,
    tempHigh: 18,
    stateHigh: "mayo",
    category: "land",
    state: "solid",
    density: 100,
    reactions: {
        "plague": { "elem1": "poisoned_mayo_snow", "elem2": null},
        "infection": { "elem1": "poisoned_mayo_snow", "elem2": null},
        "radiation": { "elem1": "poisoned_mayo_snow", chance:25},
        "fallout": { "elem1": "poisoned_mayo_snow", chance:25},
        "gloomwind": { "elem1": "poisoned_mayo_snow", "elem2": null},
    },
};
elements.mayo_snow_cloud = {
    color: "#e3f2d8",
    behavior: [
        "XX|XX|XX",
        "XX|CH:mayo_snow%0.05|M1%2.5 AND BO",
        "XX|XX|XX",
    ],
    category:"gases",
    temp: -10,
    tempHigh: 30,
    stateHigh: "mayo_cloud",
    state: "gas",
    density: 0.55,
    reactions: {
        "plague": { "elem1": "poisoned_mayo_snow_cloud", "elem2": null},
        "infection": { "elem1": "poisoned_mayo_snow_cloud"},
        "radiation": { "elem1": "poisoned_mayo_snow_cloud", chance:25},
        "fallout": { "elem1": "poisoned_mayo_snow_cloud", chance:25},
        "gloomwind": { "elem1": "poisoned_mayo_snow_cloud", "elem2": null},
    },
    ignoreAir: true,
};
elements.poisoned_mayo_snow = {
    color: "#cfe6be",
    behavior: behaviors.POISONED_POWDER,
    temp: -5,
    tempHigh: 18,
    stateHigh: "poisoned_mayo",
    category: "land",
    state: "solid",
    density: 100,
};
elements.poisoned_mayo_snow_cloud = {
    color: "#b8d6a3",
    behavior: [
        "XX|XX|XX",
        "XX|CH:poisoned_mayo_snow%0.05|M1%2.5 AND BO",
        "XX|XX|XX",
    ],
    category:"gases",
    temp: -10,
    tempHigh: 30,
    stateHigh: "poisoned_mayo_cloud",
    state: "gas",
    density: 0.55,
    ignoreAir: true,
};
elements.mayo_gas = {
    color: "#d1d4cf",
    behavior: behaviors.GAS,
    temp: 150,
    density: 0.6,
    state: "gas",
    tempLow: 95,
    stateLow: "mayo",
    category: "gases",
    reactions: {
        "plague": { "elem1": "poisoned_mayo_gas", "elem2": null},
        "mayo_gas": { "elem1": null, "elem2": "mayo_cloud", "chance":0.3, "y":[0,15], "setting":"clouds" },
        "mayo_cloud": { "elem1": "mayo_cloud", "chance":0.4, "y":[0, 12], "setting":"clouds" },
        "mayo_rain_cloud": { "elem1": "mayo_rain_cloud", "chance":0.4, "y":[0, 12], "setting":"clouds" },
        "infection": { "elem1": "poisoned_mayo_gas"},
        "radiation": { "elem1": "poisoned_mayo_gas", chance:25},
        "fallout": { "elem1": "poisoned_mayo_gas", chance:25},
        "gloomwind": { "elem1": "poisoned_mayo_gas", "elem2": null},
    },
};
elements.poisoned_mayo_gas = {
    color: "#c1cfb8",
    behavior: behaviors.POISONED_GAS,
    temp: 150,
    density: 0.6,
    state: "gas",
    tempLow: 95,
    stateLow: "poisoned_mayo",
    category: "gases",
    reactions: {
        "poisoned_mayo_gas": { "elem1": null, "elem2": "poisoned_mayo_cloud", "chance":0.3, "y":[0,15], "setting":"clouds" },
        "poisoned_mayo_cloud": { "elem1": "poisoned_mayo_cloud", "chance":0.4, "y":[0, 12], "setting":"clouds" },
        "mayo_rain_cloud": { "elem1": "poisoned_mayo_rain_cloud", "chance":0.4, "y":[0, 12], "setting":"clouds" },
    },
};
elements.mayo_powder = {
    color: "#e0e3de",
    behavior: behaviors.POWDER,
    density: 1879,
    reactions: {
        "plague": { "elem1": "poisoned_mayo_powder", "elem2": null},
        "infection": { "elem1": "poisoned_mayo_powder", "elem2": null},
        "radiation": { "elem1": "poisoned_mayo_powder", chance:25},
        "fallout": { "elem1": "poisoned_mayo_powder", chance:25},
        "gloomwind": { "elem1": "poisoned_mayo_powder", "elem2": null},
    },
    state: "solid",
    category: "powders",
    isFood: true,
};
elements.poisoned_mayo_powder = {
    color: "#dfe8d8",
    behavior: behaviors.POISONED_POWDER,
    density: 1879,
    state: "solid",
    category: "powders",
};
elements.emayo_spout = {
    name: "E-mayo Spout",
    color: "#dce3d8",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:poisoned_mayo%0.001 AND CR:mayo|XX",
        "CR:poisoned_mayo%0.001 AND CR:mayo|XX|CR:poisoned_mayo%0.001 AND CR:mayo",
        "XX|CR:poisoned_mayo%0.001 AND CR:mayo|XX",
    ],
    category: "machines",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
};
elements.mayo_metal = {
    color: "#c9cfc4",
    behavior: behaviors.WALL,
    category: "solids",
    conduct: 0.47,
    tempHigh: 1500,
    density: 7197,
};
elements.antimayo = {
    color: "#212120",
    behavior: behaviors.AGLIQUID,
    viscosity: 50000,
    category:"special",
    state: "liquid",
    density: 1092,
    stain: 0.05,
};
elements.dirty_mayo = {
    color: "#73965a",
    behavior: behaviors.LIQUID,
    viscosity: 50000,
    category: "liquids",
    state: "liquid",
    tempHigh: 100,
    stateHigh: ["mayo_gas", "carbon_dioxide"],
    tempLow: 0,
    stateLow: "frozen_mayo",
    density: 1140,
    hidden: true,
    stain: 0.05,
};
elements.mayo_gold = {
    color: ["#eaeddd", "#ddded7", "#c6c7c3"],
    behavior: behaviors.WALL,
    category: "solids",
    conduct: 0.64,
    tempHigh: 1025,
    density: 10598,
}
 // alloys
 elements.molten_mayo_metal = {
    reactions: {
        "molten_gold": { "elem1": null, "elem2": "molten_mayo_gold" },
    }
 }

 


















































































































elements.dog_food = {
	color: ["#402101", "#1f1001", "#2e1701", "#2b1601", "#261604"],
	behavior: behaviors.STURDYPOWDER,
	category: "food",
	state: "solid",
    tempHigh: 500,
    stateHigh: "ash",
    isFood: true,
};

elements.ice_cube = {
	color: ["#ccf4ff", "#c6e3f5", "#b6d1f2",],
	behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX"
    ],
	category: "food",
	state: "solid",
    temp: -5,
    tempHigh: 0,
    stateHigh: "water",
    isFood: true,
};

elements.dog_with_rabies = {
	color: ["#c7a950", "#f7f6eb", "#152617", "#665d20", "#454420" ],
	behavior: [
        "XX|XX|XX",
        "M2%25|LB:foam%25|M2%25",
        "M2|M1|M2"
    ],
    reactions: {
        "meat": {elem2:null, chance:0.5, func:behaviors.FEEDPIXEL },
        "egg": {elem2:null, chance:0.5, func:behaviors.FEEDPIXEL },
        "yolk": {elem2:null, chance:0.5, func:behaviors.FEEDPIXEL },
        "cheese": {elem2:null, chance:0.5, func:behaviors.FEEDPIXEL },
        "ice_cube": {elem2:null, chance:0.8, func:behaviors.FEEDPIXEL },
        "cooked_meat": {elem2:null, chance:0.5, func:behaviors.FEEDPIXEL },
        "chocolate": {elem2:null, chance: 0.2, func:behaviors.FEEDPIXEL, elem1: "rotten_meat"},
        "grape": {elem2:null, chance: 0.2, func:behaviors.FEEDPIXEL, elem1: "rotten_meat"},
        "rat": {elem2:null, chance: 0.3, func:behaviors.FEEDPIXEL },
        "dog_food": {elem2:null, chance: 0.8, func:behaviors.FEEDPIXEL },
        "nut_butter": {elem2:null, chance: 0.5, func:behaviors.FEEDPIXEL },
    },
	category:"life",
	state:"solid",
    tempHigh: 100,
    stateHigh: "cooked_meat",
    breakInto: "rotten_meat",
    tempLow: -20,
    stateLow: "frozen_meat",
    hidden: true,
};

elements.dog = {
	color: ["c78950", "#ffffff", "#262524", "#664120", "#453120" ],
	behavior: [
        "XX|XX|XX",
        "M2%7|XX|M2%7",
        "M2|M1|M2"
    ],
    reactions: {
        "meat": {elem2:null, chance:0.5, func:behaviors.FEEDPIXEL },
        "egg": {elem2:null, chance:0.5, func:behaviors.FEEDPIXEL },
        "yolk": {elem2:null, chance:0.5, func:behaviors.FEEDPIXEL },
        "cheese": {elem2:null, chance:0.5, func:behaviors.FEEDPIXEL },
        "ice_cube": {elem2:null, chance:0.8, func:behaviors.FEEDPIXEL },
        "cooked_meat": {elem2:null, chance:0.5, func:behaviors.FEEDPIXEL },
        "chocolate": {elem2:null, chance: 0.2, func:behaviors.FEEDPIXEL, elem1: "rotten_meat"},
        "grape": {elem2:null, chance: 0.2, func:behaviors.FEEDPIXEL, elem1: "rotten_meat"},
        "rat": {elem2:null, chance: 0.3, func:behaviors.FEEDPIXEL },
        "dog_food": {elem2:null, chance: 0.8, func:behaviors.FEEDPIXEL },
        "nut_butter": {elem2:null, chance: 0.5, func:behaviors.FEEDPIXEL },
        "infection": {elem1:"dog_with_rabies", chance:0.4 },
        "dog_with_rabies": {elem1:"dog_with_rabies", chance:0.3},
    },
	category:"life",
	state:"solid",
    tempHigh: 100,
    stateHigh: "cooked_meat",
    breakInto: "rotten_meat",
    tempLow: -20,
    stateLow: "frozen_meat",
};





































































elements.plum_wood = {
    color: "#9c7d35",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
  };
  elements.plum_branch = {
    color: "#ba963f",
    behavior: [
        "CR:plum_leaves,plum_branch%2|CR:plum_leaves,plum_branch%2|CR:plum_leaves,plum_branch%2",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tempHigh: 100,
    stateHigh: "plum_wood",
    tempLow: -30,
    stateLow: "plum_wood",
    category: "life",
    burn: 40,
    burnTime: 50,
    burnInto: ["sap","ember","charcoal"],
    hidden: true,
    state: "solid",
    density: 1500,
    hardness: 0.15,
    breakInto: ["sap","sawdust"],
  };
  elements.plum_leaves = {
    color: ["#61c43d","#5ddb3d","#51d44c"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|CR:plum%0.1|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
  };
  elements.plum = {
    color: ["#5d198a","#6a14a3","#740bba"],
    behavior: behaviors.POWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "plum_juice",
    cutInto: ["plum_slice","plum_slice","plum_slice","plum_slice","plum_peels"],
    state: "solid",
    density: 1050,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#cf9f40",
  };
  elements.plum_slice = {
    color: "#e6b650",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "plum_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    reactions: {
        "sugar": { elem1:"marmalade", elem2:null, chance:0.35 }
    },
  };
  elements.plum_seed = {
    color: "#ba8511",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "plum_wood" : "plum_branch",pixel.x,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"plum_wood");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
  };
  elements.plum_juice = {
    color: "#ffc852",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#ffde55")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    tempLow: 0
  };
  elements.plum_peels = {
    color: "#cca143",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "plum_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    reactions: {
        "sugar": { elem1:"marmalade", elem2:null, chance:0.35 }
    },
  };
  
  
  



















































































































































  elements.pistachio_wood = {
  color: "#9c7d35",
  behavior: behaviors.WALL,
  tempHigh: 400,
  stateHigh: ["ember","charcoal","fire","fire","fire"],
  category: "solids",
  burn: 5,
  burnTime: 300,
  burnInto: ["ember","charcoal","fire"],
  state: "solid",
  hardness: 0.15,
  breakInto: "sawdust",
  breakIntoColor: ["#dba66e","#cc8a64"],
  hidden: true
};
elements.pistachio_branch = {
  color: "#ba963f",
  behavior: [
      "CR:pistachio_leaves,pistachio_branch%2|CR:pistachio_leaves,pistachio_branch%2|CR:pistachio_leaves,pistachio_branch%2",
      "XX|XX|XX",
      "XX|XX|XX",
  ],
  tempHigh: 100,
  stateHigh: "pistachio_wood",
  tempLow: -30,
  stateLow: "pistachio_wood",
  category: "life",
  burn: 40,
  burnTime: 50,
  burnInto: ["sap","ember","charcoal"],
  hidden: true,
  state: "solid",
  density: 1500,
  hardness: 0.15,
  breakInto: ["sap","sawdust"],
};
elements.pistachio_leaves = {
  color: ["#61c43d","#5ddb3d","#51d44c"],
  behavior: [
      "XX|XX|XX",
      "XX|XX|XX",
      "XX|CR:pistachio%0.1|XX",
  ],
  reactions: {
      "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
      "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
      "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
      "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
  },
  category:"life",
  tempHigh: 100,
  stateHigh: "dead_plant",
  tempLow: -1.66,
  stateLow: "frozen_plant",
  burn:65,
  burnTime:60,
  burnInto: "dead_plant",
  breakInto: "dead_plant",
  state: "solid",
  density: 1050,
  hidden: true
};
elements.pistachio = {
  color: ["#81d61a","#76cc0c"],
  behavior: behaviors.POWDER,
  reactions: {
      "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
      "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
      "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
      "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
  },
  category:"food",
  tempHigh: 100,
  stateHigh: "dead_plant",
  burn:65,
  burnTime:60,
  burnInto: "dead_plant",
  breakInto: "pistachio_sauce",
  state: "solid",
  density: 1050,
  freezeDryInto: "freeze_dried_fruits",
  freezeDryIntoColor: "#cf9f40",
};
elements.pistachio_seed = {
  color: "#ba8511",
  tick: function(pixel) {
      if (isEmpty(pixel.x,pixel.y+1)) {
          movePixel(pixel,pixel.x,pixel.y+1);
      }
      else {
          if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
              if (!outOfBounds(pixel.x,pixel.y+1)) {
                  var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                  if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                      changePixel(dirtPixel,"root");
                  }
              }
              if (isEmpty(pixel.x,pixel.y-1)) {
                  movePixel(pixel,pixel.x,pixel.y-1);
                  createPixel(Math.random() > 0.5 ? "pistachio_wood" : "pistachio_branch",pixel.x,pixel.y+1);
              }
          }
          else if (pixel.age > 1000) {
              changePixel(pixel,"pistachio_wood");
          }
          pixel.age++;
      }
      doDefaults(pixel);
  },
  properties: {
      "age":0
  },
  tempHigh: 100,
  stateHigh: "dead_plant",
  tempLow: -2,
  stateLow: "frozen_plant",
  burn: 65,
  burnTime: 15,
  category: "life",
  state: "solid",
  density: 1500,
  cooldown: defaultCooldown,
  seed: true,
  behavior: [
      "XX|XX|XX",
      "XX|FX%10|XX",
      "XX|M1|XX",
  ],
};






















elements.pistachio_sauce = {

  color: ["#6ca624","#65ad0c"],


  behavior: behaviors.LIQUID,
  
  category: "food",


  state: "liquid",

  density: 1679,


   viscosity: 20000,

  stateHigh: ["carbon_dioxide","sugar"],


  tempHigh: 140,


  tempLow: 0,
  //Donma_Noktası
  stateLow: "pistachio_sauce_ice",


  burn:65,

  
  burnTime:60,


  burnInto: "dead_plant",




  reactions: {
    "water": { elem1: "sugar_water", elem2: "sugar_water" },
  }










}






































elements.pistachio_sauce_ice = {

  color: ["#d0ff63"],

  behavior: [
    "XX|XX|XX",
    "XX|XX|XX",
    "XX|XX|XX"
  ],


  
  category: "states",


  state: "solid",

  density: 1679,



  stateHigh: "pistachio_sauce",


  tempHigh: 0,


  

  burn:65,

  
  burnTime:60,

  
  burnInto: "dead_plant",




  reactions: {
    "water": { elem1: "sugar_water", elem2: "sugar_water" },
  }










}

























































elements.stomach_worm = {
    color: ["#eb4f3b", "#c23927"],
    behavior: [
        "XX|M2%5|SW:water,explosive_acid,stomach_acid,carni_acid,herbi_acid,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%14",
        "XX|FX%0.5|BO",
        "M2|M1|M2 AND SW:water,explosive_acid,carni_acid,stomach_acid,herbi_acid,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%5",
    ],
    category: "biology",
    state: "solid",
    cutInto: "raw_tuna",
    conduct: 0.2,
    eggColor: ["#211316","#2C1A1D","#503734"],
    breakInto: "blood",
    burn:20,
    burnTime:200,
    temp: 20,
    tempHigh: 120,
    stateHigh: "cooked_meat",
    tempLow: -20,
    stateLow: "frozen_meat",
    reactions: {
        
        "explosive_stomach": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "herbi_stomach": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "carni_stomach": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "stomach_lining": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "algae": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "plant": { elem2:null, chance:0.125, func:behaviors.FEEDPIXEL },
        "fly": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "firefly": { elem2:null, chance:0.6, func:behaviors.FEEDPIXEL },
        "worm": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "tadpole": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "dead_bug": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "broth": { elem2:"water", chance:0.2, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "herb": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "lettuce": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "dead_plant": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "yeast": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "yogurt": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "tea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "rotten_meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "cooked_meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "yolk": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "cell": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
    },
}

















































elements.salt_water_spout = {
    color: "#4993cc",
    behavior: [
        "XX|CR:salt_water%0.001 AND CR:salt_water|XX",
        "CR:salt_water%0.001 AND CR:salt_water|XX|CR:salt_water%0.001 AND CR:salt_water",
        "XX|CR:salt_water%0.001 AND CR:salt_water|XX",
    ],
    category:"spouts"
  };
  elements.esalt_water_spout = {
    name: "E-salt_water Spout",
    color: "#4993cc",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:salt_water%0.001 AND CR:salt_water|XX",
        "CR:salt_water%0.001 AND CR:salt_water|XX|CR:salt_water%0.001 AND CR:salt_water",
        "XX|CR:salt_water%0.001 AND CR:salt_water|XX",
    ],
    category: "spouts",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
  };



elements.sugar_water_spout = {
    color: "#73b0de",
    behavior: [
        "XX|CR:sugar_water%0.001 AND CR:sugar_water|XX",
        "CR:sugar_water%0.001 AND CR:sugar_water|XX|CR:sugar_water%0.001 AND CR:sugar_water",
        "XX|CR:sugar_water%0.001 AND CR:sugar_water|XX",
    ],
    category:"spouts"
  };
  elements.esugar_water_spout = {
    name: "E-sugar_water Spout",
    color: "#73b0de",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:sugar_water%0.001 AND CR:sugar_water|XX",
        "CR:sugar_water%0.001 AND CR:sugar_water|XX|CR:sugar_water%0.001 AND CR:sugar_water",
        "XX|CR:sugar_water%0.001 AND CR:sugar_water|XX",
    ],
    category: "spouts",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
  };




  elements.seltzer_spout = {
    color: "#8ec0e6",
    behavior: [
        "XX|CR:seltzer%0.001 AND CR:seltzer|XX",
        "CR:seltzer%0.001 AND CR:seltzer|XX|CR:seltzer%0.001 AND CR:seltzer",
        "XX|CR:seltzer%0.001 AND CR:seltzer|XX",
    ],
    category:"spouts"
  };
  elements.eseltzer_spout = {
    name: "E-seltzer Spout",
    color: "#8ec0e6",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:seltzer%0.001 AND CR:seltzer|XX",
        "CR:seltzer%0.001 AND CR:seltzer|XX|CR:seltzer%0.001 AND CR:seltzer",
        "XX|CR:seltzer%0.001 AND CR:seltzer|XX",
    ],
    category: "spouts",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
  };





  elements.dirty_water_spout = {
    color: "#336e21",
    behavior: [
        "XX|CR:dirty_water%0.001 AND CR:dirty_water|XX",
        "CR:dirty_water%0.001 AND CR:dirty_water|XX|CR:dirty_water%0.001 AND CR:dirty_water",
        "XX|CR:dirty_water%0.001 AND CR:dirty_water|XX",
    ],
    category:"spouts"
  };
  elements.edirty_water_spout = {
    name: "E-dirty_water Spout",
    color: "#336e21",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:dirty_water%0.001 AND CR:dirty_water|XX",
        "CR:dirty_water%0.001 AND CR:dirty_water|XX|CR:dirty_water%0.001 AND CR:dirty_water",
        "XX|CR:dirty_water%0.001 AND CR:dirty_water|XX",
    ],
    category: "spouts",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
  };



  elements.pool_water_spout = {
    color: "#b9ede6",
    behavior: [
        "XX|CR:pool_water%0.001 AND CR:pool_water|XX",
        "CR:pool_water%0.001 AND CR:pool_water|XX|CR:pool_water%0.001 AND CR:pool_water",
        "XX|CR:pool_water%0.001 AND CR:pool_water|XX",
    ],
    category:"spouts"
  };
  elements.epool_water_spout = {
    name: "E-pool_water Spout",
    color: "#b9ede6",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:pool_water%0.001 AND CR:pool_water|XX",
        "CR:pool_water%0.001 AND CR:pool_water|XX|CR:pool_water%0.001 AND CR:pool_water",
        "XX|CR:pool_water%0.001 AND CR:pool_water|XX",
    ],
    category: "spouts",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
  };






  elements.magma_spout = {
    color: "#d45024",
    behavior: [
        "XX|CR:magma%0.001 AND CR:magma|XX",
        "CR:magma%0.001 AND CR:magma|XX|CR:magma%0.001 AND CR:magma",
        "XX|CR:magma%0.001 AND CR:magma|XX",
    ],
    category:"spouts"
  };
  elements.emagma_spout = {
    name: "E-magma Spout",
    color: "#d45024",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:magma%0.001 AND CR:magma|XX",
        "CR:magma%0.001 AND CR:magma|XX|CR:magma%0.001 AND CR:magma",
        "XX|CR:magma%0.001 AND CR:magma|XX",
    ],
    category: "spouts",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
  };



  


elements.slime_spout = {
    color: "#6cc25f",
    behavior: [
        "XX|CR:slime%0.001 AND CR:slime|XX",
        "CR:slime%0.001 AND CR:slime|XX|CR:slime%0.001 AND CR:slime",
        "XX|CR:slime%0.001 AND CR:slime|XX",
    ],
    category:"spouts"
  };
  elements.eslime_spout = {
    name: "E-slime Spout",
    color: "#6cc25f",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:slime%0.001 AND CR:slime|XX",
        "CR:slime%0.001 AND CR:slime|XX|CR:slime%0.001 AND CR:slime",
        "XX|CR:slime%0.001 AND CR:slime|XX",
    ],
    category: "spouts",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
  };



  elements.cement_spout = {
    color: "#9d9e9d",
    behavior: [
        "XX|CR:cement%0.001 AND CR:cement|XX",
        "CR:cement%0.001 AND CR:cement|XX|CR:cement%0.001 AND CR:cement",
        "XX|CR:cement%0.001 AND CR:cement|XX",
    ],
    category:"spouts"
  };
  elements.ecement_spout = {
    name: "E-cement Spout",
    color: "#9d9e9d",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:cement%0.001 AND CR:cement|XX",
        "CR:cement%0.001 AND CR:cement|XX|CR:cement%0.001 AND CR:cement",
        "XX|CR:cement%0.001 AND CR:cement|XX",
    ],
    category: "spouts",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
  };



  

  elements.oil_spout = {
    color: "#47110a",
    behavior: [
        "XX|CR:oil%0.001 AND CR:oil|XX",
        "CR:oil%0.001 AND CR:oil|XX|CR:oil%0.001 AND CR:oil",
        "XX|CR:oil%0.001 AND CR:oil|XX",
    ],
    category:"spouts"
  };
  elements.eoil_spout = {
    name: "E-oil Spout",
    color: "#47110a",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:oil%0.001 AND CR:oil|XX",
        "CR:oil%0.001 AND CR:oil|XX|CR:oil%0.001 AND CR:oil",
        "XX|CR:oil%0.001 AND CR:oil|XX",
    ],
    category: "spouts",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
  };







  elements.lamp_oil_spout = {
    color: "#ede5a4",
    behavior: [
        "XX|CR:lamp_oil%0.001 AND CR:lamp_oil|XX",
        "CR:lamp_oil%0.001 AND CR:lamp_oil|XX|CR:lamp_oil%0.001 AND CR:lamp_oil",
        "XX|CR:lamp_oil%0.001 AND CR:lamp_oil|XX",
    ],
    category:"spouts"
  };
  elements.elamp_oil_spout = {
    name: "E-lamp_oil Spout",
    color: "#ede5a4",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:lamp_oil%0.001 AND CR:lamp_oil|XX",
        "CR:lamp_oil%0.001 AND CR:lamp_oil|XX|CR:lamp_oil%0.001 AND CR:lamp_oil",
        "XX|CR:lamp_oil%0.001 AND CR:lamp_oil|XX",
    ],
    category: "spouts",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
  };






  elements.foam_spout = {
    color: "#dcecf2",
    behavior: [
        "XX|CR:foam%0.001 AND CR:foam|XX",
        "CR:foam%0.001 AND CR:foam|XX|CR:foam%0.001 AND CR:foam",
        "XX|CR:foam%0.001 AND CR:foam|XX",
    ],
    category:"spouts"
  };
  elements.efoam_spout = {
    name: "E-foam Spout",
    color: "#dcecf2",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:foam%0.001 AND CR:foam|XX",
        "CR:foam%0.001 AND CR:foam|XX|CR:foam%0.001 AND CR:foam",
        "XX|CR:foam%0.001 AND CR:foam|XX",
    ],
    category: "spouts",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
  };
  






  elements.acid_spout = {
    hardness: 1,
    color: "#2c9437",
    behavior: [
        "XX|CR:acid%0.001 AND CR:acid|XX",
        "CR:acid%0.001 AND CR:acid|XX|CR:acid%0.001 AND CR:acid",
        "XX|CR:acid%0.001 AND CR:acid|XX",
    ],
    category:"spouts"
  };
  elements.eacid_spout = {
    hardness: 1,
    name: "E-acid Spout",
    color: "#2c9437",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:acid%0.001 AND CR:acid|XX",
        "CR:acid%0.001 AND CR:acid|XX|CR:acid%0.001 AND CR:acid",
        "XX|CR:acid%0.001 AND CR:acid|XX",
    ],
    category: "spouts",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
  };
  
  
  
  


















































//2























































































function toObject(color) {
    color = color.match(/\d+/g);
    return { r: color[0], g: color[1], b: color[2] };
  }
  
  function RGBToHex2(rgb) {
    var r = Math.min(255, parseInt(rgb.r));
    var g = Math.min(255, parseInt(rgb.g));
    var b = Math.min(255, parseInt(rgb.b));
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
  }
  
  function acidReact(elem1, elem2, product1, product2, temp = 0) {
    if (elements[elem1] && elements[elem1].ignore) {
      if (product1 !== null) {
        if (product1 instanceof Array) {
          elements[elem1].ignore.push(...product1);
        } else {
          elements[elem1].ignore.push(product1);
        }
      }
      if (product2 !== null) {
        if (product2 instanceof Array) {
          elements[elem1].ignore.push(...product2);
        } else {
          elements[elem1].ignore.push(product2);
        }
      }
      elements[elem1].ignore.push(elem2);
    }
    if (elements[elem2] && elements[elem2].ignore) {
      if (product1 !== null) {
        if (product1 instanceof Array) {
          elements[elem2].ignore.push(...product1);
        } else {
          elements[elem2].ignore.push(product1);
        }
      }
      if (product2 !== null) {
        if (product2 instanceof Array) {
          elements[elem2].ignore.push(...product2);
        } else {
          elements[elem2].ignore.push(product2);
        }
      }
      elements[elem2].ignore.push(elem1);
    }
    if (product1 !== null)
      if (elements[product1] && elements[product1].ignore) {
        if (product2 !== null) elements[product1].ignore.push(product2);
        elements[product1].ignore.push(elem1);
        elements[product1].ignore.push(elem2);
      }
    if (product2 !== null)
      if (elements[product2] && elements[product2].ignore) {
        if (product1 !== null) elements[product2].ignore.push(product1);
        elements[product2].ignore.push(elem1);
        elements[product2].ignore.push(elem2);
      }
    if (!elements[elem1].reactions[elem2]) {
      elements[elem1].reactions[elem2] = { elem1: product1, elem2: product2, temp1: temp, temp2: temp };
    }
  }
  
  elements.fluorine = {
    color: "#FFFFBF",
    behavior: behaviors.GAS,
    ignore: ["foof", "solid_foof", "oxygen", "ozone", "liquid_oxygen", "oxygen_ice", "chlorine", "liquid_chlorine", "liquid_hydrogen_fluoride", "liquid_fluorine", "fluorine", "fluorine_ice", "hydrogen_fluoride", "hydrofluoric_acid", "hydrofluoric_ice", "hydrofluoric_acid_gas", "fire", "smoke", "acid_gas", "neutral_acid", "acid", "acid_cloud", "water", "salt_water", "sugar_water", "dirty_water", "steam", "gold", "hydrogen", "polytetrafluoroethylene", "molten_polytetrafluoroethylene", "tungsten", "tungsten_hexafluoride"],
    tick: function (pixel) {
      let change = false;
      for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
          if (!(i === 0 && j === 0) && !isEmpty(pixel.x + i, pixel.y + j, true) && !elements[pixel.element].ignore.includes(pixelMap[pixel.x + i][pixel.y + j].element)) {
            if (!elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness || Math.random() > elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness) {
              changePixel(pixelMap[pixel.x + i][pixel.y + j], "fire");
              change = true;
            }
          }
        }
      }
      if (change) {
        changePixel(pixel, "fire");
      }
    },
    reactions: {
      steam: { elem1: "hydrofluoric_acid_gas", elem2: "hydrogen" },
      liquid_oxygen: { elem1: "foof", elem2: null },
      hydrogen: { elem1: "hydrogen_fluoride", elem2: "fire" },
      tungsten: { elem1: "tungsten_hexafluoride", elem2: "fire" },
    },
    tempLow: -188.1,
    stateLow: "liquid_fluorine",
    state: "gas",
    category: "gases",
    density: 1.7,
    stain: 0.005,
  };
  
  elements.liquid_fluorine = {
    color: "#ffff3b",
    behavior: behaviors.LIQUID,
    ignore: ["foof", "solid_foof", "oxygen", "ozone", "liquid_oxygen", "oxygen_ice", "chlorine", "liquid_chlorine", "liquid_hydrogen_fluoride", "liquid_fluorine", "fluorine", "fluorine_ice", "hydrogen_fluoride", "hydrofluoric_acid", "hydrofluoric_ice", "hydrofluoric_acid_gas", "fire", "smoke", "acid_gas", "neutral_acid", "acid", "acid_cloud", "water", "salt_water", "sugar_water", "dirty_water", "steam", "seltzer", "pool_water", "primordial_soup", "gold", "hydrogen", "polytetrafluoroethylene", "molten_polytetrafluoroethylene", "tungsten", "tungsten_hexafluoride"],
    tick: function (pixel) {
      let change = false;
      for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
          if (!(i === 0 && j === 0) && !isEmpty(pixel.x + i, pixel.y + j, true) && !elements[pixel.element].ignore.includes(pixelMap[pixel.x + i][pixel.y + j].element)) {
            if (Math.random() < 0.01 && (!elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness || Math.random() > elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness)) {
              changePixel(pixelMap[pixel.x + i][pixel.y + j], "fire");
              change = true;
            }
          }
        }
      }
      if (change && Math.random() < 0.02) {
        changePixel(pixel, "fire");
      }
    },
    reactions: {
      steam: { elem1: "hydrofluoric_acid_gas", elem2: "hydrogen" },
      hydrogen: { elem1: "hydrogen_fluoride", elem2: "fire" },
      tungsten: { elem1: "tungsten_hexafluoride", elem2: "fire" },
    },
    temp: -198.1,
    tempHigh: -188.1,
    stateHigh: "fluorine",
    tempLow: -219.7,
    state: "liquid",
    category: "liquids",
    density: 1505,
    stain: 0.005,
  };
  
  elements.hydrofluoric_acid = {
    color: ["#c8cf91", "#efff5e", "#a0cc39"],
    ignore: ["fire", "liquid_hydrogen_fluoride", "liquid_fluorine", "fluorine", "fluorine_ice", "hydrogen_fluoride", "hydrofluoric_acid", "hydrofluoric_ice", "hydrofluoric_acid_gas", "acid_gas", "neutral_acid", "acid", "acid_cloud", "water", "salt_water", "sugar_water", "dirty_water", "steam", "seltzer", "pool_water", "primordial_soup", "gold", "polytetrafluoroethylene", "molten_polytetrafluoroethylene", "chloroform", "chloroform_gas", "chloroform_ice", "tetrafluoroethylene", "tungsten", "tungsten_hexafluoride"],
    tick: function (pixel) {
      let change = false;
      for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
          if (!(i === 0 && j === 0) && !isEmpty(pixel.x + i, pixel.y + j, true) && !elements[pixel.element].ignore.includes(pixelMap[pixel.x + i][pixel.y + j].element)) {
            if (!elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness || Math.random() > elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness) {
              changePixel(pixelMap[pixel.x + i][pixel.y + j], "fire");
              change = true;
            }
          }
        }
      }
      if (change) {
        if (Math.random() < 0.2) {
          changePixel(pixel, "hydrogen_fluoride");
        } else {
          deletePixel(pixel.x, pixel.y);
          return;
        }
      } else {
        behaviors.LIQUID(pixel);
      }
    },
    reactions: {},
    state: "liquid",
    category: "liquids",
    density: 1020,
    stain: 0.005,
    tempHigh: 100,
    stateHigh: "hydrofluoric_acid_gas",
    tempLow: -58.88,
  };
  
  elements.hydrofluoric_acid_gas = {
    color: ["#acb37d", "#bfcc4b", "#668224"],
    ignore: ["liquid_hydrogen_fluoride", "liquid_fluorine", "fluorine", "fluorine_ice", "hydrogen_fluoride", "hydrofluoric_acid", "hydrofluoric_ice", "hydrofluoric_acid_gas", "acid_gas", "neutral_acid", "acid", "acid_cloud", "water", "salt_water", "sugar_water", "dirty_water", "steam", "gold", "polytetrafluoroethylene", "molten_polytetrafluoroethylene", "chloroform", "chloroform_gas", "chloroform_ice", "tetrafluoroethylene", "tungsten", "tungsten_hexafluoride"],
    tick: function (pixel) {
      let change = false;
      for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
          if (!(i === 0 && j === 0) && !isEmpty(pixel.x + i, pixel.y + j, true) && !elements[pixel.element].ignore.includes(pixelMap[pixel.x + i][pixel.y + j].element)) {
            if (!elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness || Math.random() > elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness) {
              changePixel(pixelMap[pixel.x + i][pixel.y + j], "fire");
              change = true;
            }
          }
        }
      }
      if (change) {
        if (Math.random() < 0.2) {
          changePixel(pixel, "hydrogen_fluoride");
        } else {
          deletePixel(pixel.x, pixel.y);
        }
      } else {
        behaviors.GAS(pixel);
      }
    },
    reactions: {},
    state: "gas",
    density: 1.63,
    stain: 0.005,
    tempHigh: 400,
    stateHigh: "fire",
    tempLow: -10,
    stateLow: "hydrofluoric_acid",
    category: "gases",
  };
  
  runAfterLoad(function () {
    reactList("fluorine", eLists.WATER, { elem1: "hydrofluoric_acid", elem2: "oxygen" });
    reactList("liquid_fluorine", eLists.WATER, { elem1: "hydrofluoric_acid", elem2: "oxygen" });
    reactList("hydrofluoric_acid", eLists.WATER, { elem2: "dirty_water" });
    reactList("hydrofluoric_acid_gas", eLists.WATER, { elem2: "dirty_water" });
    delete elements.hydrofluoric_acid.reactions["dirty_water"];
    delete elements.hydrofluoric_acid_gas.reactions["dirty_water"];
  });
  
  elements.hydrogen_fluoride = {
    color: "#f2f28d",
    behavior: behaviors.GAS,
    ignore: ["liquid_hydrogen_fluoride", "liquid_fluorine", "fluorine", "fluorine_ice", "hydrogen_fluoride", "hydrofluoric_ice", "hydrofluoric_acid", "hydrofluoric_acid_gas", "fire", "smoke", "acid_gas", "neutral_acid", "acid", "acid_cloud", "water", "salt_water", "sugar_water", "dirty_water", "steam", "gold", "hydrogen", "polytetrafluoroethylene", "molten_polytetrafluoroethylene", "chloroform", "chloroform_gas", "chloroform_ice", "tetrafluoroethylene"],
    tick: function (pixel) {
      let change = false;
      for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
          if (!(i === 0 && j === 0) && !isEmpty(pixel.x + i, pixel.y + j, true) && !elements[pixel.element].ignore.includes(pixelMap[pixel.x + i][pixel.y + j].element)) {
            if (!elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness || Math.random() > elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness) {
              changePixel(pixelMap[pixel.x + i][pixel.y + j], "fire");
              change = true;
            }
          }
        }
      }
      if (change && Math.random() < 0.2) {
        changePixel(pixel, "fire");
      }
    },
    reactions: {
      steam: { elem1: "hydrofluoric_acid_gas", elem2: null },
    },
    state: "gas",
    category: "gases",
    density: 1.7,
    stain: 0.005,
    tempLow: -19.5,
    stateLow: "liquid_hydrogen_fluoride",
  };
  
  elements.liquid_hydrogen_fluoride = {
    color: "#e2e28d",
    behavior: behaviors.LIQUID,
    ignore: ["liquid_hydrogen_fluoride", "liquid_fluorine", "fluorine", "fluorine_ice", "hydrogen_fluoride", "hydrofluoric_acid", "hydrofluoric_ice", "hydrofluoric_acid_gas", "fire", "smoke", "acid_gas", "neutral_acid", "acid", "acid_cloud", "water", "salt_water", "sugar_water", "dirty_water", "steam", "gold", "hydrogen", "polytetrafluoroethylene", "molten_polytetrafluoroethylene", "chloroform", "chloroform_gas", "chloroform_ice", "tetrafluoroethylene"],
    tick: function (pixel) {
      let change = false;
      for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
          if (!(i === 0 && j === 0) && !isEmpty(pixel.x + i, pixel.y + j, true) && !elements[pixel.element].ignore.includes(pixelMap[pixel.x + i][pixel.y + j].element)) {
            if (!elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness || Math.random() > elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness) {
              changePixel(pixelMap[pixel.x + i][pixel.y + j], "fire");
              change = true;
            }
          }
        }
      }
      if (change && Math.random() < 0.2) {
        changePixel(pixel, "fire");
      }
    },
    reactions: {
      steam: { elem1: "hydrofluoric_acid_gas", elem2: null },
    },
    state: "liquid",
    category: "liquids",
    hidden: true,
    density: 1.7,
    stain: 0.005,
    temp: -20.5,
    tempHigh: -19.5,
    stateHigh: "hydrogen_fluoride",
    tempLow: -83.6,
  };
  
  runAfterLoad(function () {
    reactList("hydrogen_fluoride", eLists.WATER, { elem1: "hydrofluoric_acid", elem2: null });
    reactList("liquid_hydrogen_fluoride", eLists.WATER, { elem1: "hydrofluoric_acid", elem2: null });
  });
  
  elements.foof = {
    color: "#fa1e1e",
    behavior: behaviors.LIQUID,
    ignore: ["foof", "solid_foof", "fluorine", "liquid_fluorine", "fluorine_ice", "liquid_oxygen", "oxygen_ice", "oxygen", "ozone", "fire", "polytetrafluoroethylene", "molten_polytetrafluoroethylene"],
    tick: function (pixel) {
      let change = false;
      for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
          if (!(i === 0 && j === 0) && !isEmpty(pixel.x + i, pixel.y + j, true) && !elements[pixel.element].ignore.includes(pixelMap[pixel.x + i][pixel.y + j].element)) {
            if (!elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness || Math.random() > elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness) {
              changePixel(pixelMap[pixel.x + i][pixel.y + j], "fire");
              change = true;
            }
          }
        }
      }
      if (change && Math.random() < 0.01) {
        changePixel(pixel, "explosion");
      } else if (Math.random() < 0.0001) {
        if (Math.random() < 0.5) {
          changePixel(pixel, "oxygen", false);
        } else {
          changePixel(pixel, "fluorine", false);
        }
        pixelTempCheck(pixel);
        pixelTempCheck(pixel);
      }
    },
    state: "liquid",
    category: "liquids",
    density: 1450,
    stain: 0.01,
    temp: -120,
    tempHigh: -57,
    stateHigh: ["oxygen", "fluorine", "explosion"],
    tempLow: -154,
    stateLow: "solid_foof",
    reactions: {},
  };
  
  elements.solid_foof = {
    color: "#fa4a1e",
    behavior: behaviors.WALL,
    ignore: ["foof", "solid_foof", "fluorine", "liquid_fluorine", "fluorine_ice", "liquid_oxygen", "oxygen_ice", "ozone", "oxygen", "fire", "polytetrafluoroethylene", "molten_polytetrafluoroethylene"],
    tick: function (pixel) {
      let change = false;
      for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
          if (!(i === 0 && j === 0) && !isEmpty(pixel.x + i, pixel.y + j, true) && !elements[pixel.element].ignore.includes(pixelMap[pixel.x + i][pixel.y + j].element)) {
            if (!elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness || Math.random() > elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness) {
              changePixel(pixelMap[pixel.x + i][pixel.y + j], "fire");
              change = true;
            }
          }
        }
      }
      if (change && Math.random() < 0.01) {
        changePixel(pixel, "explosion");
      } else if (Math.random() < 0.00005) {
        if (Math.random() < 0.5) {
          changePixel(pixel, "oxygen", false);
        } else {
          changePixel(pixel, "fluorine", false);
        }
        pixelTempCheck(pixel);
        pixelTempCheck(pixel);
      }
    },
    state: "solid",
    category: "solids",
    density: 1450,
    stain: 0.01,
    temp: -160,
    tempHigh: -154,
    stateHigh: "foof",
    reactions: {},
  };
  
  elements.tungsten_hexafluoride = {
    color: "#f5f57a",
    behavior: behaviors.GAS,
    tempLow: 17.1,
    state: "gas",
    category: "gases",
    density: 12.4,
    stain: 0.005,
    reactions: {
      steam: { elem1: "hydrofluoric_acid_gas", elem2: "tungsten" },
    },
  };
  
  elements.liquid_tungsten_hexafluoride = { density: 4560, tempLow: 2.3 };
  
  runAfterLoad(function () {
    reactList("tungsten_hexafluoride", eLists.WATER, { elem1: "hydrofluoric_acid", elem2: "tungsten" });
  });
  
  if (!elements.acid.ignore) {
    elements.acid.ignore = [];
  }
  if (!elements.acid_gas.ignore) {
    elements.acid_gas.ignore = [];
  }
  let defaultAcidIgnore = structuredClone(elements.acid.ignore);
  let defaultAcidGasIgnore = structuredClone(elements.acid_gas.ignore);
  
  let defaultAcidReactions = {
    ash: { elem1: "neutral_acid", elem2: null },
    limestone: { elem1: "neutral_acid", elem2: null },
    quicklime: { elem1: "neutral_acid", elem2: null },
    slaked_lime: { elem1: "neutral_acid", elem2: null },
    borax: { elem1: "neutral_acid", elem2: null },
    ammonia: { elem1: "neutral_acid", elem2: null },
    bleach: { elem1: "neutral_acid", elem2: null },
    caustic_potash: { elem1: "neutral_acid", elem2: null },
    radium_hydroxide: { elem1: "neutral_acid", elem2: null },
    actinium_hydroxide: { elem1: "neutral_acid", elem2: null },
    water: { elem1: null, elem2: "dirty_water" },
    salt_water: { elem1: null, elem2: "water" },
    sugar_water: { elem1: null, elem2: "water" },
    charcoal: { elem1: null, elem2: "carbon_dioxide" },
    grape: { elem2: "juice", color1: "#291824" },
    soap: { elem1: "hydrogen" },
    sodium: { elem1: "explosion" },
    potassium: { elem1: "explosion" },
    meat: { elem2: "rotten_meat", elem1: null, chance: 0.5 },
  };
  
  let defaultAcidGasReactions = {
    acid_gas: { elem1: null, elem2: "acid_cloud", chance: 0.3, y: [0, 12], setting: "clouds" },
    rain_cloud: { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" },
    cloud: { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" },
    snow_cloud: { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" },
    hail_cloud: { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" },
    pyrocumulus: { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" },
    fire_cloud: { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" },
    ash: { elem1: "hydrogen", elem2: null, chance: 0.05 },
    limestone: { elem1: "hydrogen", elem2: null, chance: 0.05 },
    quicklime: { elem1: "hydrogen", elem2: null, chance: 0.05 },
    slaked_lime: { elem1: "hydrogen", elem2: null, chance: 0.05 },
    borax: { elem1: "hydrogen", elem2: null, chance: 0.05 },
    ammonia: { elem1: "hydrogen", elem2: null, chance: 0.05 },
    bleach: { elem1: "hydrogen", elem2: null, chance: 0.05 },
    grape: { elem2: "juice", color1: "#291824" },
    soap: { elem1: "hydrogen" },
    sodium: { elem1: "explosion" },
    meat: { elem2: "rotten_meat", elem1: null, chance: 0.4 },
  };
  
  eListAdd("CAUSTIC", ["acid", "acid_gas", "fluorine", "liquid_fluorine", "hydrofluoric_acid", "hydrofluoric_acid_gas", "hydrogen_fluoride", "liquid_hydrogen_fluoride"]);
  eListAdd("CAUSTICIGNORE", []);
  
  eListAdd("ACID", ["acid", "hydrofluoric_acid"]);
  eListAdd("ACIDGAS", ["acid_gas", "hydrofluoric_acid_gas"]);
  
  if (enabledMods.includes("mods/generative_mods.js")) {
    runAfterLoad(function () {
      generateCloud("hydrofluoric_acid");
      elements["hydrofluoric_acid_gas"].reactions["hydrofluoric_acid_gas"] = { elem1: null, elem2: "hydrofluoric_acid_cloud", chance: 0.3, y: [0, 12], setting: "clouds" };
      elements["hydrofluoric_acid_gas"].reactions["rain_cloud"] = { elem1: null, elem2: "hydrofluoric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
      elements["hydrofluoric_acid_gas"].reactions["cloud"] = { elem1: null, elem2: "hydrofluoric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
      elements["hydrofluoric_acid_gas"].reactions["snow_cloud"] = { elem1: null, elem2: "hydrofluoric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
      elements["hydrofluoric_acid_gas"].reactions["hail_cloud"] = { elem1: null, elem2: "hydrofluoric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
      elements["hydrofluoric_acid_gas"].reactions["pyrocumulus"] = { elem1: null, elem2: "hydrofluoric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
      elements["hydrofluoric_acid_gas"].reactions["fire_cloud"] = { elem1: null, elem2: "hydrofluoric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
  
      elements["cloud"].reactions["anesthesia"] = { elem1: "nitric_acid_cloud", elem2: null, chance: 0.05 };
      elements["rain_cloud"].reactions["anesthesia"] = { elem1: "nitric_acid_cloud", elem2: null, chance: 0.05 };
    });
  }
  function createAcid(name, reactions, gasReactions, color, categoryhidden, categoryhiddenGas, tempHigh, tempLowGas, tempLow, tempHighGas, density, densityGas, type, compound = "acid") {
    elements[name] = {
      forceAutoGen: true,
      color: color,
      behavior: ["XX|DB%5|XX", "DB%5 AND M2|XX|DB%5 AND M2", "DB%5 AND M2|DB%10 AND M1|DB%5 AND M2"],
      ignore: defaultAcidIgnore.concat(eLists.CAUSTICIGNORE),
      reactions: reactions,
      category: "liquids",
      hidden: categoryhidden,
      tempHigh: tempHigh,
      stateHigh: name + "_gas",
      tempLow: tempLow,
      state: "liquid",
      density: density,
    };
    elements[name + "_gas"] = {
      behavior: ["M1|DB%5 AND M1|M1", "DB%5 AND M1|XX|DB%5 AND M1", "DB%5 AND M1|DB%10 AND M1|DB%5 AND M1"],
      ignore: defaultAcidGasIgnore.concat(eLists.CAUSTICIGNORE),
      reactions: gasReactions,
      category: "gases",
      hidden: categoryhiddenGas,
      tempHigh: tempHighGas,
      stateHigh: "fire",
      tempLow: tempLowGas,
      stateLow: name,
      temp: tempLowGas + 20,
      state: "gas",
      density: densityGas,
    };
    elements.bless.reactions[name] = { elem2: "hydrogen" };
    elements.bless.reactions[name + "_gas"] = { elem2: "hydrogen" };
    if (enabledMods.includes("mods/generative_mods.js")) {
      runAfterLoad(function () {
        generateCloud(name);
        elements[name + "_gas"].reactions[name + "_gas"] = { elem1: null, elem2: name + "_cloud", chance: 0.3, y: [0, 12], setting: "clouds" };
        elements[name + "_gas"].reactions["rain_cloud"] = { elem1: null, elem2: name + "_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
        elements[name + "_gas"].reactions["cloud"] = { elem1: null, elem2: name + "_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
        elements[name + "_gas"].reactions["snow_cloud"] = { elem1: null, elem2: name + "_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
        elements[name + "_gas"].reactions["hail_cloud"] = { elem1: null, elem2: name + "_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
        elements[name + "_gas"].reactions["pyrocumulus"] = { elem1: null, elem2: name + "_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
        elements[name + "_gas"].reactions["fire_cloud"] = { elem1: null, elem2: name + "_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
      });
    } else {
      elements[name + "_gas"].reactions[name + "_gas"] = { elem1: null, elem2: "acid_cloud", chance: 0.3, y: [0, 12], setting: "clouds" };
    }
    eLists.CAUSTIC.push(name, name + "_gas");
    acidIgnore([name, name + "_gas", name + "_ice", name + "_cloud"]);
    if (type) {
      eListAddIon(type, [name, name + "_gas"], compound);
    }
    if (compound == "acid") {
      eListAddIon("HYDROGEN", [name, name + "_gas"], compound);
  
      runAfterLoad(function () {
        reactList(name, eLists.WATER, { elem1: null, elem2: "dirty_water" });
        reactList(name + "_gas", eLists.WATER, { elem1: null, elem2: "dirty_water" });
        delete elements[name].reactions["dirty_water"];
        delete elements[name + "_gas"].reactions["dirty_water"];
      });
    }
  }
  
  function eListAddIon(listName, itemList, compoundType = "default", priority = 0) {
    eListAdd(listName, itemList);
    if (typeof itemList === "string") {
      itemList = [itemList];
    }
    for (var i = 0; i < itemList.length; i++) {
      if (!elements[itemList[i]]) {
        elements[itemList[i]] = {};
      }
      if (!elements[itemList[i]].salt) {
        elements[itemList[i]].salt = {};
      }
      if (!elements[itemList[i]].salt[compoundType]) {
        elements[itemList[i]].salt[compoundType] = {};
        elements[itemList[i]].salt[compoundType].priority = priority;
        elements[itemList[i]].salt[compoundType].components = [];
      }
      if (elements[itemList[i]].salt[compoundType].components.indexOf(listName) === -1) {
        elements[itemList[i]].salt[compoundType].components.push(listName);
      }
    }
  }
  
  function acidIgnore(ignore) {
    for (let i = 0; i < eLists.CAUSTIC.length; i++) {
      elements[eLists.CAUSTIC[i]].ignore = elements[eLists.CAUSTIC[i]].ignore.concat(ignore);
    }
    eLists.CAUSTICIGNORE = eLists.CAUSTICIGNORE.concat(ignore);
  }
  
  eListAdd("WATER", ["water", "salt_water", "sugar_water", "dirty_water", "neutral_acid", "seltzer", "pool_water", "primordial_soup"]);
  function reactList(element, list, reaction) {
    for (let i = 0; i < list.length; i++) {
      if (!elements[element].reactions[list[i]] && !(elements[element].ignore && elements[element].ignore.includes[list[i]])) {
        acidReact(element, list[i], reaction.elem1, reaction.elem2);
        elements[element].reactions[list[i]] = reaction;
      }
    }
  }
  
  function createSalt(name, nameWater, color, colorWater, hidden, hiddenWater, tempHigh, tempLowWater, tempHighWater, density, densityWater, cation, anion) {
    if (!elements[name]) {
      elements[name] = {
        color: color,
        behavior: behaviors.POWDER,
        category: "powders",
        density: density,
        state: "solid",
        tempHigh: tempHigh,
        reactions: {
          ice: { elem1: null, elem2: nameWater, chance: 0.1 },
          rime: { elem1: null, elem2: nameWater, chance: 0.075 },
          snow: { elem1: null, elem2: nameWater, chance: 0.25 },
          packed_snow: { elem1: null, elem2: nameWater, chance: 0.05 },
          packed_ice: { elem1: null, elem2: nameWater, chance: 0.01 },
          water: { elem2: nameWater, elem1: null },
        },
        hidden: hidden,
      };
    }
    if (!elements[nameWater]) {
      elements[nameWater] = {
        color: colorWater,
        behavior: behaviors.LIQUID,
        tempHigh: tempHighWater,
        stateHigh: ["steam", name],
        tempLow: tempLowWater,
        category: "liquids",
        reactions: {
          dirt: { elem1: null, elem2: "mud" },
          sand: { elem1: null, elem2: "wet_sand" },
          clay_soil: { elem1: null, elem2: "clay" },
          dust: { elem1: "dirty_water", elem2: null },
          ash: { elem1: "dirty_water", elem2: null },
          carbon_dioxide: { elem1: "dirty_water", elem2: null },
          sulfur: { elem1: "dirty_water", elem2: null },
          charcoal: { elem1: "dirty_water", chance: 0.005 },
          plague: { elem1: "dirty_water", elem2: null },
          fallout: { elem1: "dirty_water", chance: 0.25 },
          radiation: { elem1: "dirty_water", chance: 0.25 },
          rust: { elem1: "dirty_water", chance: 0.005 },
          quicklime: { elem1: null, elem2: "slaked_lime" },
          rock: { elem2: "wet_sand", chance: 0.0005 },
          fly: { elem2: "dead_bug", chance: 0.1, oneway: true },
          firefly: { elem2: "dead_bug", chance: 0.1, oneway: true },
          bee: { elem2: "dead_bug", chance: 0.05, oneway: true },
          stink_bug: { elem2: "dead_bug", chance: 0.1, oneway: true },
          cancer: { elem1: "dirty_water", chance: 0.25 },
          // electrolysis:
          aluminum: { elem1: ["hydrogen", "hydrogen", "oxygen", name], charged: true, chance: 0.0025 },
          zinc: { elem1: ["hydrogen", "hydrogen", "oxygen", name], charged: true, chance: 0.015 },
          steel: { elem1: ["hydrogen", "hydrogen", "oxygen", name], charged: true, chance: 0.0125 },
          iron: { elem1: ["hydrogen", "hydrogen", "oxygen", name], charged: true, chance: 0.0125 },
          tin: { elem1: ["hydrogen", "hydrogen", "oxygen", name], charged: true, chance: 0.01 },
          lead: { elem1: ["hydrogen", "hydrogen", "oxygen", name], charged: true, chance: 0.01 },
          brass: { elem1: ["hydrogen", "hydrogen", "oxygen", name], charged: true, chance: 0.001 },
          bronze: { elem1: ["hydrogen", "hydrogen", "oxygen", name], charged: true, chance: 0.001 },
          copper: { elem1: ["hydrogen", "hydrogen", "oxygen", name], charged: true, chance: 0.0075 },
          silver: { elem1: ["hydrogen", "hydrogen", "oxygen", name], charged: true, chance: 0.0075 },
          gold: { elem1: ["hydrogen", "hydrogen", "oxygen", name], charged: true, chance: 0.0075 },
          fire: { elem2: "smoke" },
          snow: { elem2: "slush" },
          rat: { elem1: "dirty_water", chance: 0.2 },
          slug: { elem2: "slime", elem1: null },
          snail: { elem2: "calcium", elem1: null },
          torch: { elem2: "wood" },
          light: { color2: "#a1bac9" },
          sawdust: { elem2: "cellulose", elem1: null },
          oxygen: { elem2: "foam" },
          paper: { elem2: "cellulose", elem1: null },
          pollen: { elem2: null },
          soda: { elem1: "foam", chance: 0.01 },
          ice_nine: { elem1: "ice_nine" },
          ant_wall: { elem2: ["mud", "mud", "wet_sand"], elem1: null, chance: 0.007 },
          soap: { elem1: "water" },
          dye: { elem2: null, chance: 0.05 },
          ink: { elem2: null, chance: 0.01 },
          sodium: { elem2: ["pop", "pop", "pop", "hydrogen"], chance: 0.01, temp1: 250 },
          molten_sodium: { elem2: ["pop", "pop", "pop", "hydrogen"], chance: 0.01, temp1: 250 },
          confetti: { elem2: [null, "cellulose"], chance: 0.001 },
          greek_fire: {
            func: function (p, pixel) {
              if (!pixel.burning) {
                pixel.burning = true;
                pixel.burnStart = pixelTick;
              }
            },
          },
        },
        state: "liquid",
        density: densityWater,
        conduct: 0.1,
        stain: -0.66,
        hidden: hiddenWater,
      };
  
      elements["soap"].reactions[nameWater] = { elem1: ["foam", "bubble"], chance: 0.005 };
      elements["radiation"].reactions[nameWater] = { elem1: "rad_steam", chance: 0.4 };
      elements["iron"].reactions[nameWater] = { elem1: "rust", chance: 0.005 };
      elements["copper"].reactions[nameWater] = { elem1: "oxidized_copper", chance: 0.005 };
      elements["steel"].reactions[nameWater] = { elem1: "rust", chance: 0.004 };
      elements["bronze"].reactions[nameWater] = { elem1: "oxidized_copper", chance: 0.0025 };
    }
    eListAddIon(cation, [name, nameWater, "molten_" + name]);
    eListAddIon(anion, [name, nameWater, "molten_" + name]);
    eListAdd("WATER", nameWater);
    eListAdd("COMPOUND", name);
  }
  
  function toxic(name, chance) {
    Object.assign(elements[name].reactions, {
      blood: { elem1: null, elem2: "infection", chance: chance },
      water: { elem1: null, elem2: "dirty_water", chance: chance },
      soap: { elem1: null, chance: 0.02 },
      plant: { elem1: null, elem2: "dead_plant", chance: chance },
      evergreen: { elem1: null, elem2: "dead_plant", chance: chance },
      cactus: { elem1: null, elem2: "dead_plant", chance: chance },
      grass: { elem1: null, elem2: "dead_plant", chance: chance },
      vine: { elem1: null, elem2: "dead_plant", chance: chance },
      algae: { elem1: null, elem2: null, chance: chance },
      kelp: { elem1: null, elem2: "dirty_water", chance: chance },
      mushroom_spore: { elem1: null, elem2: null, chance: chance },
      lichen: { elem1: null, elem2: null, chance: chance },
      yeast: { elem1: null, elem2: null, chance: chance },
      rat: { elem1: null, elem2: "rotten_meat", chance: chance },
      frog: { elem1: null, elem2: "rotten_meat", chance: chance },
      tadpole: { elem2: null, chance: chance },
      fish: { elem1: null, elem2: "rotten_meat", chance: chance },
      bird: { elem1: null, elem2: "rotten_meat", chance: chance },
      head: { elem1: null, elem2: "rotten_meat", chance: chance },
      body: { elem1: null, elem2: "rotten_meat", chance: chance },
      homunculus: { elem1: null, elem2: "rotten_meat", chance: chance },
      ant: { elem1: null, elem2: "dead_bug", chance: chance },
      worm: { elem1: null, elem2: "dead_bug", chance: chance },
      fly: { elem1: null, elem2: "dead_bug", chance: chance },
      firefly: { elem1: null, elem2: "dead_bug", chance: chance },
      bee: { elem1: null, elem2: "dead_bug", chance: chance },
      stink_bug: { elem1: null, elem2: "dead_bug", chance: chance },
      termite: { elem1: null, elem2: "dead_bug", chance: chance },
      flea: { elem1: null, elem2: "dead_bug", chance: chance },
      slug: { elem1: null, elem2: "slime", chance: chance },
      snail: { elem1: null, elem2: "limestone", chance: chance },
      sapling: { elem1: null, elem2: "dead_plant", chance: chance },
      root: { elem1: null, elem2: "dead_plant", chance: chance },
      flower_seed: { elem1: null, elem2: "dead_plant", chance: chance },
      pistil: { elem1: null, elem2: "dead_plant", chance: chance },
      petal: { elem1: null, elem2: "dead_plant", chance: chance },
      grass_seed: { elem1: null, elem2: "dead_plant", chance: chance },
      meat: { elem1: null, elem2: "rotten_meat", chance: chance },
      cheese: { elem1: null, elem2: "rotten_cheese", chance: chance },
      tree_branch: { elem1: null, elem2: "wood", chance: chance },
      mushroom_cap: { elem1: null, elem2: null, chance: chance },
      mushroom_gill: { elem1: null, elem2: null, chance: chance },
      mushroom_stalk: { elem1: null, elem2: null, chance: chance },
      hyphae: { elem1: null, elem2: null, chance: chance },
      mycelium: { elem1: null, elem2: "dirt", chance: chance },
      pollen: { elem2: null, chance: chance },
      bone_marrow: { elem1: null, elem2: "rotten_meat", chance: chance },
      hair: { elem1: null, elem2: null, chance: chance },
      cell: { elem1: null, chance: chance },
      cancer: { elem1: null, chance: chance },
    });
  }
  
  createSalt("salt", "salt_water", null, null, false, false, 0, 0, 0, 0, 0, "SODIUM", "CHLORIDE");
  
  acidIgnore(["acid", "acid_gas", "acid_ice", "liquid_fluorine", "fluorine", "fluorine_ice", "hydrogen_fluoride", "liquid_hydrogen_fluoride", "hydrogen_fluoride_ice", "hydrofluoric_acid_ice", "hydrofluoric_acid", "hydrofluoric_acid_gas", "hydrofluoric_acid_cloud", "acid_cloud"]);
  elements.acid.name = "hydrochloricAcid";
  elements.acid_gas.name = "hydrochloricAcidGas";
  eListAddIon("CHLORIDE", ["acid", "acid_gas"], "acid");
  eListAddIon("HYDROGEN", ["acid", "acid_gas"], "acid");
  eListAddIon("FLUORIDE", ["hydrofluoric_acid", "hydrofluoric_acid_gas"], "acid");
  eListAddIon("HYDROGEN", ["hydrofluoric_acid", "hydrofluoric_acid_gas"], "acid");
  
  createAcid("generic_acid", defaultAcidReactions, defaultAcidGasReactions, "#80d488", true, true, 110, 100, -10, 400, 1020, 1);
  elements.generic_acid.name = "acid";
  elements.generic_acid_gas.name = "acid_gas";
  
  eLists.ACID.push("generic_acid");
  eLists.ACIDGAS.push("generic_acid_gas");
  
  if (!enabledMods.includes("mods/generative_mods.js")) {
    elements.acid_cloud.behavior = ["XX|XX|XX", "XX|CH:generic_acid%0.05|M1%2.5 AND BO", "XX|XX|XX"];
  }
  
  createAcid("nitric_acid", structuredClone(defaultAcidReactions), structuredClone(defaultAcidGasReactions), ["#91993c", "#6b7041", "#5f614b"], false, false, 83, 70, -42, 400, 1500, 1.5, "NITRATE");
  
  acidReact("nitric_acid", "ammonia", "fertilizer", null, 0);
  acidReact("nitric_acid_gas", "ammonia", "fertilizer", null, 0);
  
  eLists.ACID.push("nitric_acid");
  eLists.ACIDGAS.push("nitric_acid_gas");
  
  elements.nitric_oxide = {
    color: "#b8926c",
    behavior: behaviors.GAS,
    reactions: {
      steam: { elem1: "smog", elem2: null, chance: 0.01 },
      oxygen: { elem1: "nitrogen_dioxide", elem2: null },
    },
    tempLow: -152,
    category: "gases",
    state: "gas",
    density: 1.34,
  };
  
  toxic("nitric_oxide", 0.01);
  
  elements.liquid_nitric_oxide = {
    tempLow: -164,
    hidden: true,
  };
  elements.nitrogen_dioxide = {
    color: "#964B00",
    behavior: behaviors.GAS,
    reactions: {
      steam: { elem1: "smog", elem2: null, chance: 0.01 },
    },
    temp: 30,
    tempLow: 21.15,
    category: "gases",
    state: "gas",
    density: 1.88,
  };
  
  toxic("nitrogen_dioxide", 0.01);
  
  runAfterLoad(function () {
    reactList("nitrogen_dioxide", eLists.WATER, { elem1: null, elem2: "nitric_acid", chance: 0.01 });
  });
  runAfterLoad(function () {
    reactList("liquid_nitrogen_dioxide", eLists.WATER, { elem1: null, elem2: "nitric_acid", chance: 0.01 });
  });
  
  elements.liquid_nitrogen_dioxide = {
    tempLow: -9.3,
    hidden: true,
    reactions: structuredClone(elements.nitrogen_dioxide.reactions),
  };
  
  if (enabledMods.includes("mods/generative_mods.js")) {
    elements["nitrogen_dioxide"].reactions["rain_cloud"] = { elem1: null, elem2: "nitric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
    elements["nitrogen_dioxide"].reactions["cloud"] = { elem1: null, elem2: "nitric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
    elements["nitrogen_dioxide"].reactions["snow_cloud"] = { elem1: null, elem2: "nitric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
    elements["nitrogen_dioxide"].reactions["hail_cloud"] = { elem1: null, elem2: "nitric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
    elements["nitrogen_dioxide"].reactions["pyrocumulus"] = { elem1: null, elem2: "nitric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
    elements["nitrogen_dioxide"].reactions["fire_cloud"] = { elem1: null, elem2: "nitric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
    elements["nitrogen_dioxide"].reactions["thunder_cloud"] = { elem1: null, elem2: "nitric_acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
  } else {
    elements["nitrogen_dioxide"].reactions["rain_cloud"] = { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
    elements["nitrogen_dioxide"].reactions["cloud"] = { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
    elements["nitrogen_dioxide"].reactions["snow_cloud"] = { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
    elements["nitrogen_dioxide"].reactions["hail_cloud"] = { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
    elements["nitrogen_dioxide"].reactions["pyrocumulus"] = { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
    elements["nitrogen_dioxide"].reactions["fire_cloud"] = { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
    elements["nitrogen_dioxide"].reactions["thunder_cloud"] = { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" };
  }
  
  acidIgnore(["nitric_oxide", "liquid_nitric_oxide", "nitric_oxide_ice", "nitrogen_dioxide", "liquid_nitrogen_dioxide", "nitrogen_dioxide_ice"]);
  
  elements.fertilizer = {
    color: "#e6c3a1",
    behavior: behaviors.POWDER,
    reactions: {
      plant: { elem1: "plant", chance: 0.05 },
      wheat_seed: { elem1: "wheat", chance: 0.05 },
      grass: { elem1: "grass", chance: 0.05 },
      grass_seed: { elem1: "grass", chance: 0.05 },
      bamboo_plant: { elem1: "bamboo", chance: 0.05 },
      flower_seed: { elem1: "flower_seed", chance: 0.05 },
      petal: { elem1: "flower_seed", chance: 0.05 },
      vine: { elem1: "vine", chance: 0.05 },
      sapling: { elem1: "tree_branch", chance: 0.05 },
      tree_branch: { elem1: "tree_branch", chance: 0.05 },
      corn_seed: { elem1: "corn", chance: 0.05 },
      root: { elem1: "root", chance: 0.05 },
      dirt: { elem1: "grass", chance: 0.05 },
      mud: { elem1: "grass", chance: 0.05 },
      potato_seed: { elem1: "potato", chance: 0.05 },
      yeast: { elem1: "yeast", chance: 0.05 },
    },
    tempHigh: 169.6,
    stateHigh: "fire",
    category: "powders",
    state: "solid",
    density: 1725,
  };
  
  elements.ammonia.reactions["oxygen"] = { elem1: "steam", elem2: "nitric_oxide" };
  
  elements.supernova.behavior = ["XX|XX|XX", "XX|EX:80>plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,molten_iron,molten_uranium,molten_lead,oxygen,molten_sodium,sulfur_gas,fluorine,neon,molten_potassium,chlorine,molten_calcium,molten_titanium,molten_nickel,molten_copper,molten_zinc,gallium_gas,bromine_gas,iodine_gas AND CH:neutronium,neutronium,quark_matter,void|XX", "XX|XX|XX"];
  
  elements.gamma_ray_burst = {
    color: ["#fbf8ff", "#fbf3ff", "#f8f7ff"],
    behavior: ["XX|XX|XX", "XX|EX:100>plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,molten_gold,molten_uranium,molten_lead,molten_tungsten,molten_nickel,molten_copper,molten_zinc,gallium_gas,bromine_gas,iodine_gas,molten_tin,molten_silver AND CH:void|XX", "XX|XX|XX"],
    temp: 99999999700,
    category: "energy",
    state: "gas",
    density: 1000,
    hardness: 1,
    hidden: true,
    excludeRandom: true,
    maxSize: 1,
  };
  
  elements.neutronium = {
    color: "#aaffff",
    behavior: ["XX|CR:neutron%0.1|XX", "CR:neutron%0.1|XX|CR:neutron%0.1", "XX|CR:neutron%0.1|XX"],
    temp: 1e6,
    tempHigh: 1e7,
    stateHigh: "liquid_neutronium",
    tempLow: 1e5,
    stateLow: ["molten_uranium", "molten_gold", "molten_tungsten", "molten_lead"],
    breakInto: ["gamma_ray_burst", "supernova", "supernova"],
    category: "special",
    state: "solid",
    density: 4e17,
    hardness: 0.999,
    excludeRandom: true,
  };
  
  elements.liquid_neutronium = {
    color: "#ffffaa",
    behavior2: ["XX|CR:neutron%0.2|XX".split("|"), "M1 AND CR:neutron%0.2|XX|M1 AND CR:neutron%0.2".split("|"), "M1|M1|M1".split("|")],
    tick: function (pixel) {
      if (!isEmpty(pixel.x - 1, pixel.y, false) && (isEmpty(pixel.x - 1, pixel.y, true) || pixelMap[pixel.x - 1][pixel.y].element !== "liquid_neutronium") && !(outOfBounds(pixel.x - 1, pixel.y - 1) || !isEmpty(pixel.x - 1, pixel.y - 1, true))) {
        tryMove(pixel, pixel.x - 1, pixel.y - 1);
      } else if (!isEmpty(pixel.x + 1, pixel.y, false) && (isEmpty(pixel.x + 1, pixel.y, true) || pixelMap[pixel.x + 1][pixel.y].element !== "liquid_neutronium") && !(outOfBounds(pixel.x + 1, pixel.y - 1) || !isEmpty(pixel.x + 1, pixel.y - 1, true))) {
        tryMove(pixel, pixel.x + 1, pixel.y - 1);
      } else if (((!isEmpty(pixel.x + 1, pixel.y, false) && (isEmpty(pixel.x + 1, pixel.y, true) || pixelMap[pixel.x + 1][pixel.y].element !== "liquid_neutronium")) || (!isEmpty(pixel.x - 1, pixel.y, false) && (isEmpty(pixel.x - 1, pixel.y, true) || pixelMap[pixel.x - 1][pixel.y].element !== "liquid_neutronium"))) && !(outOfBounds(pixel.x, pixel.y - 1) || !isEmpty(pixel.x, pixel.y - 1, true))) {
        tryMove(pixel, pixel.x, pixel.y - 1);
      } else {
        pixelTick(pixel, elements.liquid_neutronium.behavior2);
      }
      doDefaults(pixel);
    },
    temp: 2e7,
    tempLow: 1e7,
    stateLow: "neutronium",
    breakInto: ["gamma_ray_burst", "supernova", "supernova"],
    category: "special",
    state: "liquid",
    density: 2e17,
    hardness: 0.999,
    excludeRandom: true,
  };
  
  elements.liquid_helium.behavior2 = ["XX|XX|XX".split("|"), "M1|XX|M1".split("|"), "M1|M1|M1".split("|")];
  elements.liquid_helium.behavior = null;
  
  elements.liquid_helium.tick = function (pixel) {
    if (Math.random() < 0.9) {
      if (!isEmpty(pixel.x - 1, pixel.y, false) && (isEmpty(pixel.x - 1, pixel.y, true) || pixelMap[pixel.x - 1][pixel.y].element !== "liquid_helium") && !(outOfBounds(pixel.x - 1, pixel.y - 1) || !isEmpty(pixel.x - 1, pixel.y - 1, true))) {
        tryMove(pixel, pixel.x - 1, pixel.y - 1);
      } else if (!isEmpty(pixel.x + 1, pixel.y, false) && (isEmpty(pixel.x + 1, pixel.y, true) || pixelMap[pixel.x + 1][pixel.y].element !== "liquid_helium") && !(outOfBounds(pixel.x + 1, pixel.y - 1) || !isEmpty(pixel.x + 1, pixel.y - 1, true))) {
        tryMove(pixel, pixel.x + 1, pixel.y - 1);
      } else if (((!isEmpty(pixel.x + 1, pixel.y, false) && (isEmpty(pixel.x + 1, pixel.y, true) || pixelMap[pixel.x + 1][pixel.y].element !== "liquid_helium")) || (!isEmpty(pixel.x - 1, pixel.y, false) && (isEmpty(pixel.x - 1, pixel.y, true) || pixelMap[pixel.x - 1][pixel.y].element !== "liquid_helium"))) && !(outOfBounds(pixel.x, pixel.y - 1) || !isEmpty(pixel.x, pixel.y - 1, true))) {
        tryMove(pixel, pixel.x, pixel.y - 1);
      } else {
        pixelTick(pixel, elements.liquid_helium.behavior2);
      }
    } else {
      pixelTick(pixel, elements.liquid_helium.behavior2);
    }
    doDefaults(pixel);
  };
  
  elements.quark_matter = {
    color: ["#ff0000", "#00ff00", "#0000ff"],
    behavior: ["XX|CR:neutron%0.1 AND CR:proton%0.1|XX", "M2 AND CR:neutron%0.1 AND CR:proton%0.1|XX|M2 AND CR:neutron%0.1 AND CR:proton%0.1", "M1|M1|M1"],
    tick: function (pixel) {
      pixel.color = pixelColorPick(pixel);
    },
    temp: 2e7,
    breakInto: "gamma_ray_burst",
    category: "special",
    state: "liquid",
    density: 4e18,
    hardness: 0.999,
    excludeRandom: true,
  };
  
  elements.sulfur.burnInto = ["sulfur_dioxide"];
  elements.molten_sulfur.burnInto = ["sulfur_dioxide"];
  elements.sulfur_gas.burnInto = ["sulfur_dioxide"];
  elements.sulfur.reactions["hydrogen"] = { elem1: "hydrogen_sulfide", elem2: null };
  
  elements.sulfur_dioxide = {
    color: "#FFF700",
    behavior: behaviors.GAS,
    reactions: {
      steam: { elem1: null, elem2: "sulfuric_acid_gas" },
      acid_gas: { elem1: null, elem2: "sulfuric_acid_gas" },
      //clouds
      rain_cloud: { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" },
      cloud: { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" },
      snow_cloud: { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" },
      hail_cloud: { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" },
      pyrocumulus: { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" },
      fire_cloud: { elem1: null, elem2: "acid_cloud", chance: 0.4, y: [0, 12], setting: "clouds" },
    },
    tempLow: -10,
    stateLow: "liquid_sulfur_dioxide",
    state: "gas",
    category: "gases",
    density: 2.6,
  };
  
  toxic("sulfur_dioxide", 0.05);
  
  runAfterLoad(function () {
    reactList("sulfur_dioxide", eLists.WATER, { elem1: null, elem2: "sulfuric_acid" });
  });
  
  elements.liquid_sulfur_dioxide = {
    color: "#d1cb17",
    behavior: behaviors.LIQUID,
    category: "liquids",
    reactions: elements.sulfur_dioxide.reactions,
    tempHigh: -10,
    temp: -15,
    tempLow: -72,
    stateHigh: "sulfur_dioxide",
    state: "liquid",
    hidden: true,
    density: 1435,
  };
  
  elements.hydrogen_sulfide = {
    color: "#d9e366",
    behavior: behaviors.GAS,
    reactions: {
      oxygen: { elem2: "stench" },
      nitrogen: { elem2: "stench" },
      baking_soda: { elem1: null },
    },
    category: "gases",
    tempHigh: 1000,
    stateHigh: "fire",
    state: "gas",
    density: 1.539,
    tempLow: -59.55,
    burn: 1,
    burnTime: 10,
    burnInto: ["sulfur_dioxide", "steam"],
    fireColor: ["#8180CC", "#7F84E6"],
  };
  toxic("hydrogen_sulfide", 0.005);
  
  runAfterLoad(function () {
    reactList("hydrogen_sulfide", eLists.WATER, { elem1: null, elem2: "dirty_water" });
    delete elements.hydrogen_sulfide.reactions["dirty_water"];
    delete elements.hydrogen_sulfide.reactions["iron_dichloride_solution"];
  });
  
  acidIgnore(["sulfur_dioxide", "liquid_sulfur_dioxide", "sulfur_dioxide_ice"]);
  
  elements.acid.ignore.push("liquid_hydrogen_sulfide");
  elements.acid_gas.ignore.push("liquid_hydrogen_sulfide");
  
  acidReact("acid", "pyrite", "iron_dichloride_solution", "hydrogen_sulfide", 50);
  acidReact("acid_gas", "pyrite", "iron_dichloride_solution", "hydrogen_sulfide", 50);
  
  function blendColors(colorA, colorB, amount = 0.5) {
    const [rA, gA, bA] = colorA.match(/\w\w/g).map((c) => parseInt(c, 16));
    const [rB, gB, bB] = colorB.match(/\w\w/g).map((c) => parseInt(c, 16));
    const r = Math.round(rA + (rB - rA) * amount)
      .toString(16)
      .padStart(2, "0");
    const g = Math.round(gA + (gB - gA) * amount)
      .toString(16)
      .padStart(2, "0");
    const b = Math.round(bA + (bB - bA) * amount)
      .toString(16)
      .padStart(2, "0");
    return "#" + r + g + b;
  }
  
  createSalt("iron_dichloride", "iron_dichloride_solution", ["#207d09", "#b51259"], [blendColors("#207d09", "#2167ff", 0.5), blendColors("#b51259", "#2167ff", 0.5)], false, true, 307.6, -2, 102, 2900, 1030, "IRONII", "CHLORIDE");
  
  createAcid("sulfuric_acid", structuredClone(defaultAcidReactions), structuredClone(defaultAcidGasReactions), ["#e9e05e", "#c2bd7a", "#9e9c7b"], false, false, 337, 337, 10, 500, 1830, 1.26, "SULFATE");
  
  elements.sulfuric_acid.ignore.push("charcoal");
  elements.sulfuric_acid_gas.ignore.push("charcoal");
  
  runAfterLoad(function () {
    reactList("sulfuric_acid", eLists.WATER, { elem2: "dirty_water" });
    reactList("sulfuric_acid_gas", eLists.WATER, { elem2: "dirty_water" });
    delete elements.sulfuric_acid.reactions["dirty_water"];
    delete elements.sulfuric_acid_gas.reactions["dirty_water"];
  });
  elements.sulfuric_acid.reactions["grape"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid.reactions["juice"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid.reactions["corn"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid.reactions["popcorn"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid.reactions["potato"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid.reactions["bread"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid.reactions["toast"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid.reactions["wheat"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid.reactions["flour"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid.reactions["dough"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid.reactions["sugar"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid.reactions["candy"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  delete elements.sulfuric_acid.reactions["charcoal"];
  elements.sulfuric_acid_gas.reactions["chocolate"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid_gas.reactions["grape"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid_gas.reactions["juice"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid_gas.reactions["corn"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid_gas.reactions["popcorn"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid_gas.reactions["potato"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid_gas.reactions["bread"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid_gas.reactions["toast"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid_gas.reactions["wheat"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid_gas.reactions["flour"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid_gas.reactions["dough"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid_gas.reactions["sugar"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  elements.sulfuric_acid_gas.reactions["candy"] = { elem1: "charcoal", elem2: "steam", temp2: 200 };
  delete elements.sulfuric_acid_gas.reactions["charcoal"];
  
  acidReact("sulfuric_acid", "magnesium_oxide", "epsom_salt", null, 50);
  acidReact("sulfuric_acid_gas", "magnesium_oxide", "epsom_salt", null, 50);
  
  eLists.ACID.push("sulfuric_acid");
  eLists.ACIDGAS.push("sulfuric_acid_gas");
  
  elements.polytetrafluoroethylene = {
    color: "#efefef",
    behavior: behaviors.WALL,
    properties: {
      colored: false,
    },
    tick: function (pixel) {
      if (!pixel.colored) {
        let rgb = elements.polytetrafluoroethylene.colorObject;
  
        let coloroffset = Math.floor(Math.random() * (Math.random() > 0.5 ? -1 : 1) * Math.random() * 2);
        let r = rgb.r + coloroffset;
        let g = rgb.g + coloroffset;
        let b = rgb.b + coloroffset;
        pixel.color = "rgb(" + r + "," + g + "," + b + ")";
        pixel.colored = true;
        pixel.origColor = pixel.color.match(/\d+/g);
      }
      if (pixel.origColor != pixel.color) {
        pixel.color = "rgb(" + pixel.origColor.join(",") + ")";
      }
    },
    state: "solid",
    category: "solids",
    density: 1450,
    tempHigh: 327,
  };
  acidIgnore(["polytetrafluoroethylene", "molten_polytetrafluoroethylene", "tetrafluoroethylene"]);
  
  doStaining = function (pixel) {
    if (settings["stainoff"]) {
      return;
    }
    var stain = elements[pixel.element].stain;
    let newColor = null;
    if (stain > 0) {
      newColor = pixel.color.match(/\d+/g);
    } else {
      newColor = null;
    }
  
    for (var i = 0; i < adjacentCoords.length; i++) {
      var x = pixel.x + adjacentCoords[i][0];
      var y = pixel.y + adjacentCoords[i][1];
      if (!isEmpty(x, y, true)) {
        var newPixel = pixelMap[x][y];
        if ((elements[pixel.element].ignore && elements[pixel.element].ignore.indexOf(newPixel.element) !== -1) || newPixel.element == "polytetrafluoroethylene") {
          continue;
        }
        if ((elements[newPixel.element].id !== elements[pixel.element].id || elements[newPixel.element].stainSelf) && (solidStates[elements[newPixel.element].state] || elements[newPixel.element].id === elements[pixel.element].id)) {
          if (Math.random() < Math.abs(stain)) {
            if (stain < 0) {
              if (newPixel.origColor) {
                newColor = newPixel.origColor;
              } else {
                continue;
              }
            } else if (!newPixel.origColor) {
              newPixel.origColor = newPixel.color.match(/\d+/g);
            }
            // if newPixel.color doesn't start with rgb, continue
            if (!newPixel.color.match(/^rgb/)) {
              continue;
            }
            // parse rgb color string of newPixel rgb(r,g,b)
            var rgb = newPixel.color.match(/\d+/g);
            let avg = [];
            if (elements[pixel.element].stainSelf && elements[newPixel.element].id === elements[pixel.element].id) {
              // if rgb and newColor are the same, continue
              if (rgb[0] === newColor[0] && rgb[1] === newColor[1] && rgb[2] === newColor[2]) {
                continue;
              }
              for (var j = 0; j < rgb.length; j++) {
                avg[j] = Math.round(rgb[j] * (1 - Math.abs(stain)) + newColor[j] * Math.abs(stain));
              }
            } else {
              // get the average of rgb and newColor, more intense as stain reaches 1
              for (let j = 0; j < rgb.length; j++) {
                avg[j] = Math.floor(rgb[j] * (1 - Math.abs(stain)) + newColor[j] * Math.abs(stain));
              }
            }
            // set newPixel color to avg
            newPixel.color = "rgb(" + avg.join(",") + ")";
          }
        }
      }
    }
  };
  elements["bleach"].reactions.vinegar = { elem1: "chlorine", elem2: null };
  elements["bleach"].reactions.alcohol = { elem1: "chloroform", elem2: null };
  elements["chlorine"].reactions.methane = { elem1: "chloroform", elem2: null };
  
  elements.chloroform = {
    color: "#7f7f7f",
    behavior: behaviors.LIQUID,
    reactions: elements.poison.reactions,
    state: "liquid",
    category: "liquids",
    density: 1564,
    tempLow: -63,
    tempHigh: 61,
  };
  
  elements.chloroform_gas = {
    color: "#8f8f8f",
    behavior: behaviors.GAS,
    reactions: elements.poison.reactions,
    state: "gas",
    hidden: true,
    density: 4.12,
    tempLow: 61,
    stateLow: "chloroform",
  };
  
  elements["chloroform_gas"].reactions.hydrogen_fluoride = { elem1: "tetrafluoroethylene", elem2: null, tempMin: 550 };
  
  elements.tetrafluoroethylene = {
    color: "#8f8f8f",
    behavior: behaviors.GAS,
    reactions: {
      oxygen: { elem1: "fire", elem2: "fire" },
      sulfuric_acid: { elem1: "polytetrafluoroethylene", elem2: "sulfuric_acid", chance: 0.25 },
      sulfuric_acid_gas: { elem1: "polytetrafluoroethylene", elem2: "sulfuric_acid_gas", chance: 0.25 },
    },
    state: "gas",
    hidden: true,
    burn: 100,
    burnTime: 2,
    density: 1.52,
    category: "gases",
  };
  
  elements.methanol = {
    color: "#969380",
    behavior: behaviors.LIQUID,
    reactions: {
      plant: { elem2: "dead_plant", elem1: null, chance: 0.05 },
      cell: { elem2: [null, "dna"], chance: 0.075 },
      blood: { elem2: [null, "dna"], chance: 0.075 },
      antibody: { elem2: [null, "dna"], chance: 0.075 },
      infection: { elem2: [null, "dna"], chance: 0.075 },
      cancer: { elem2: [null, "dna"], chance: 0.0375 },
      flea: { elem2: "dead_bug", elem1: null },
      termite: { elem2: "dead_bug", elem1: null },
      ant: { elem2: "dead_bug", elem1: null },
      frog: { elem2: "meat", chance: 0.05 },
      evergreen: { elem2: "dead_plant", chance: 0.05 },
      cactus: { elem2: "dead_plant", chance: 0.05 },
      paper: { elem2: "cellulose" },
      primordial_soup: { elem2: "water" },
    },
    state: "liquid",
    category: "liquids",
    density: 792,
    tempLow: -97.6,
    tempHigh: 64.7,
    burn: 100,
    burnTime: 3,
    fireColor: ["#80acf0", "#96cdfe", "#bee6d4"],
  };
  
  elements.carbon_dioxide.reactions.hydrogen = { elem1: "steam", elem2: "methanol", tempMin: 100 };
  
  elements.polyethylene = {
    color: "#a7a7a7",
    behavior: behaviors.WALL,
    properties: {
      colored: false,
    },
    tick: function (pixel) {
      if (!pixel.colored) {
        let rgb = elements.polyethylene.colorObject;
  
        let coloroffset = Math.floor(Math.random() * (Math.random() > 0.5 ? -1 : 1) * Math.random() * 2);
        let r = rgb.r + coloroffset;
        let g = rgb.g + coloroffset;
        let b = rgb.b + coloroffset;
        pixel.color = "rgb(" + r + "," + g + "," + b + ")";
        pixel.colored = true;
        pixel.origColor = pixel.color.match(/\d+/g);
      }
    },
    state: "solid",
    category: "solids",
    density: 1450,
    tempHigh: 125,
  };
  
  elements.ethane = {
    color: "#afafaf",
    behavior: behaviors.GAS,
    reactions: {
      steam: { elem1: "hydrogen", elem2: "ethylene", chance: 0.01 },
      chlorine: { elem1: "chloroethane", elem2: null, chance: 0.01 },
    },
    category: "gases",
    tempHigh: 400,
    stateHigh: "fire",
    tempLow: -88.5,
    burn: 85,
    burnTime: 5,
    fireColor: ["#00ffff", "#00ffdd"],
    state: "gas",
    density: 1.356,
  };
  
  elements.chloroethane = {
    color: "#afdfaf",
    behavior: behaviors.GAS,
    reactions: {
      aluminum: { elem1: "diethylaluminium_chloride", elem2: null, chance: 0.1 },
    },
    category: "gases",
    tempHigh: 510,
    stateHigh: "fire",
    tempLow: 12.27,
    burn: 85,
    burnTime: 5,
    fireColor: ["#00ffff", "#00ffdd"],
    state: "gas",
    density: 2.879,
  };
  
  elements.diethylaluminium_chloride = {
    color: "#7faf7f",
    behavior: behaviors.LIQUID,
    category: "liquids",
    hidden: true,
    tempHigh: 125,
    stateHigh: "fire",
    tempLow: -74,
    burn: 85,
    burnTime: 10,
    state: "liquid",
    density: 2.879,
  };
  
  elements.ethylene = {
    color: "#a7a7a7",
    behavior: behaviors.GAS,
    reactions: {
      titanium_trichloride: { elem1: "polyethylene", elem2: "titanium_trichloride", chance: 0.1 },
      acid_gas: { elem1: "chloroethane", elem2: null },
      diethylaluminium_chloride: { elem1: "polyethylene", elem2: "diethylaluminium_chloride", chance: 0.1 },
    },
    category: "gases",
    tempHigh: 400,
    stateHigh: "fire",
    tempLow: -103.7,
    burn: 85,
    burnTime: 5,
    fireColor: ["#00ffff", "#00ffdd"],
    state: "gas",
    density: 1.356,
  };
  
  elements.liquid_ethylene = {
    tempHigh: -103.7,
    stateHigh: "ethylene",
    tempLow: -154.4,
  };
  elements.liquid_ethane = {
    tempHigh: -88.5,
    stateHigh: "ethane",
    tempLow: -128.2,
  };
  
  elements.liquid_ethylene = {
    tempHigh: -103.7,
    stateHigh: "ethylene",
    tempLow: -169.2,
  };
  elements.liquid_ethane = {
    tempHigh: -88.5,
    stateHigh: "ethane",
    tempLow: -182.8,
  };
  
  elements.liquid_chloroethane = {
    tempHigh: -12.27,
    stateHigh: "chloroethane",
    tempLow: -138.7,
  };
  
  elements.liquid_propane = {
    tempHigh: -42.25,
    stateHigh: "propane",
    tempLow: -187.7,
  };
  
  elements.acid.ignore.push("ethylene", "ethylene_ice", "liquid_ethylene", "chloroethane", "chloroethane_ice", "liquid_chloroethane");
  elements.acid_gas.ignore.push("ethylene", "ethylene_ice", "liquid_ethylene", "chloroethane", "chloroethane_ice", "liquid_chloroethane");
  
  elements.titanium = {
    color: "#e3e5e6",
    category: "solids",
    density: 4500,
    state: "solid",
    behavior: behaviors.WALL,
    reactions: {
      acid: { elem1: "titanium_trichloride", elem2: null },
    },
    stateHigh: "molten_titanium",
    tempHigh: 1668,
    conduct: 0.5,
    hardness: 0.7,
    forceAutoGen: true,
    glow: true,
  };
  
  elements.rutile = {
    color: "#522614",
    behavior: behaviors.POWDER,
    category: "land",
    density: 4240,
    state: "solid",
    tempHigh: 1843,
    stateHigh: "molten_rutile",
    forceAutoGen: true,
  };
  elements.titanium_tetrachloride = {
    color: "#d9d7b2",
    behavior: behaviors.LIQUID,
    category: "liquids",
    density: 1728,
    state: "liquid",
    tempHigh: 136.4,
    stateHighName: "titanium_tetrachloride_gas",
    tempLow: -24,
    stateLowName: "solid_titanium_tetrachloride",
  };
  eListAddIon("TITANIUMIV", "solid_titanium_tetrachloride");
  eListAddIon("CHLORIDE", "solid_titanium_tetrachloride");
  eListAddIon("TITANIUMIV", "titanium_tetrachloride");
  eListAddIon("CHLORIDE", "titanium_tetrachloride");
  eListAddIon("TITANIUMIV", "titanium_tetrachloride_gas");
  eListAddIon("CHLORIDE", "titanium_tetrachloride_gas");
  eListAdd("INSOLUBLE", "titanium_tetrachloride");
  elements.titanium_tetrachloride_gas = {
    behavior: behaviors.GAS,
    hidden: true,
    category: "gases",
    density: 500,
    state: "gas",
    temp: 200,
    tempLow: 136.4,
    stateLow: "titanium_tetrachloride",
  };
  elements.solid_titanium_tetrachloride = {
    behavior: behaviors.WALL,
    hidden: true,
    category: "solids",
    density: 1728,
    state: "solid",
    temp: -50,
    tempHigh: -24,
    stateHigh: "titanium_tetrachloride",
  };
  
  createSalt("titanium_trichloride", "titanium_trichloride_solution", "#c71585", blendColors("#c71585", "#2167ff", 0.4), false, true, 440, -2, 102, 2640, 1020, "TITANIUMIII", "CHLORIDE");
  
  elements["titanium_trichloride"].behavior = behaviors.SOLID;
  elements["titanium_trichloride"].category = "solids";
  elements["titanium_trichloride"].stateHigh = ["chlorine", "titanium_tetrachloride"];
  delete elements["molten_titanium_trichloride"];
  
  elements.magnesium.burnInto = "magnesium_oxide";
  elements.molten_magnesium.burnInto = "magnesium_oxide";
  elements.molten_magnesium.reactions = {
    titanium_tetrachloride: { elem1: "titanium", elem2: "magnesium_chloride" },
    titanium_tetrachloride_gas: { elem1: "titanium", elem2: "magnesium_chloride" },
  };
  
  elements.magnesium_oxide = {
    color: "#f0f0f0",
    behavior: behaviors.POWDER,
    reactions: {
      quicklime: { elem1: "cement", elem2: null },
    },
    category: "powders",
    density: 3600,
    state: "solid",
    tempHigh: 2852,
  };
  
  eListAdd("INSOLUBLE", "magnesium_oxide");
  eListAddIon("MAGNESIUM", "magnesium_oxide");
  eListAddIon("OXIDE", "magnesium_oxide");
  eListAddIon("MAGNESIUM", "molten_magnesium_oxide");
  eListAddIon("OXIDE", "molten_magnesium_oxide");
  
  elements.molten_magnesium_chloride = {
    behaviorOn: ["XX|CR:fire%2.5|XX", "M2|CH:chlorine,magnesium%25|M2", "M1|M1|M1"],
    conduct: 0.3,
  };
  
  createSalt("magnesium_chloride", "magnesium_chloride_solution", "#bfbfbf", blendColors("#bfbfbf", "#2167ff", 0.75), false, true, 714, -2, 102, 2320, 1015, "MAGNESIUM", "CHLORIDE");
  
  elements.magnesium_chloride.forceAutoGen = true;
  
  elements.francium = {
    color: "#3eff3b",
    behavior: ["XX|CR:radiation%50|XX", "CR:radiation%50|CH:radon%0.1|CR:radiation%50", "M2|M1|M2"],
    tick: function (pixel) {
      pixel.temp += 5;
    },
    reactions: {
      steam: { elem1: "radon", elem2: [null, null, "rad_pop"] },
      rad_steam: { elem1: "radon", elem2: [null, null, "rad_pop"] },
      quark_matter: { elem1: "stable_francium", elem2: "quark_matter" },
    },
    tempHigh: 27,
    category: "powders",
    state: "solid",
    density: 2480,
    conduct: 0.7,
  };
  
  runAfterLoad(function () {
    reactList("francium", eLists.WATER, { elem1: "radon", elem2: [null, null, "rad_pop"] });
  });
  
  elements.molten_francium = {
    behavior: ["XX|CR:radiation%50|XX", "M2 AND CR:radiation%50|CH:radon%0.1|M2 AND CR:radiation%50", "M1|M1|M1"],
    tick: function (pixel) {
      pixel.temp += 5;
    },
    reactions: {
      steam: { elem1: "radon", elem2: [null, null, "rad_pop"] },
      rad_steam: { elem1: "radon", elem2: [null, null, "rad_pop"] },
      quark_matter: { elem1: "stable_francium", elem2: "quark_matter" },
    },
    tempLow: 27,
    hidden: true,
    state: "liquid",
    density: 2480,
    conduct: 0.7,
  };
  
  runAfterLoad(function () {
    reactList("molten_francium", eLists.WATER, { elem1: "radon", elem2: [null, null, "rad_pop"] });
  });
  
  elements.astatine = {
    color: "#5a5e5a",
    behavior: ["XX|CR:radiation%50|XX", "CR:radiation%50|CH:polonium,big_pop%0.1|CR:radiation%50", "M2|M1|M2"],
    tick: function (pixel) {
      pixel.temp += 5;
    },
    reactions: {
      quark_matter: { elem1: "stable_astatine", elem2: "quark_matter" },
    },
    tempHigh: 301,
    category: "powders",
    state: "solid",
    density: 8910,
  };
  elements.molten_astatine = {
    color: "#aab0a0",
    behavior: ["XX|CR:radiation%50|XX", "M2 AND CR:radiation%50|CH:polonium,big_pop%0.1|M2 AND CR:radiation%50", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "molten_stable_astatine", elem2: "quark_matter" },
    },
    tick: function (pixel) {
      pixel.temp += 5;
    },
    tempLow: 301,
    hidden: true,
    state: "liquid",
    density: 8910,
    tempHigh: 336,
  };
  elements.astatine_gas = {
    behavior: behaviors.GAS,
    behavior2: [
      ["XX", "CR:radiation%50", "XX"],
      ["CR:radiation%50", "CH:polonium,big_pop%0.1", "CR:radiation%50"],
      ["XX", "CR:radiation%50", "XX"],
    ],
    reactions: {
      quark_matter: { elem1: "molten_stable_astatine", elem2: "quark_matter" },
    },
    tick: function (pixel) {
      pixel.temp += 5;
      pixelTick(pixel, elements[pixel.element].behavior2);
    },
  };
  
  elements.radon = {
    color: "#b6ffb5",
    behavior: ["M2|M1 AND CR:radiation%10|M2", "M1 AND CR:radiation%10|CH:polonium%0.1|M1 AND CR:radiation%10", "M2|M1 AND CR:radiation%10|M2"],
    reactions: {
      quark_matter: { elem1: "stable_radon", elem2: "quark_matter" },
    },
    tick: function (pixel) {
      pixel.temp += 1;
    },
    category: "gases",
    state: "gas",
    density: 9.73,
    colorOn: ["#b224ff", "#cc6caa", "#a16ccc"],
    conduct: 0.86,
  };
  
  elements.polonium = {
    color: "#56b870",
    behavior: ["XX|CR:radiation%10|XX", "CR:radiation%10|CH:lead%0.1|CR:radiation%10", "XX|CR:radiation%10|XX"],
    reactions: {
      quark_matter: { elem1: "stable_polonium", elem2: "quark_matter" },
    },
    tick: function (pixel) {
      pixel.temp += 1;
    },
    tempHigh: 254,
    category: "solids",
    state: "solid",
    density: 9196,
    conduct: 0.21,
  };
  elements.molten_polonium = {
    color: ["#ace638", "#acb838", "#ac8a00"],
    behavior: ["XX|CR:fire AND CR:radiation%12.5|XX", "M2 AND CR:radiation%10|CH:lead%0.1|M2 AND CR:radiation%10", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "molten_stable_polonium", elem2: "quark_matter" },
    },
    tick: function (pixel) {
      pixel.temp += 1;
    },
    tempLow: 254,
    hidden: true,
    state: "liquid",
    density: 9196,
    conduct: 0.21,
  };
  
  elements.rad_pop = {
    color: ["#ffb48f", "#ffd991", "#ffad91"],
    behavior: ["XX|XX|XX", "XX|EX:10>fire,radiation,radiation|XX", "XX|XX|XX"],
    category: "energy",
    state: "gas",
    density: 1000,
    excludeRandom: true,
    hidden: true,
  };
  
  elements.stable_radon = {
    color: [blendColors("#b6ffb5", "#ff0000"), blendColors("#b6ffb5", "#00ff00"), blendColors("#b6ffb5", "#0000ff")],
    behavior: behaviors.GAS,
    category: "gases",
    state: "gas",
    density: 9.73,
    hidden: true,
    tempLow: -61.7,
    colorOn: ["#b224ff", "#cc6caa", "#a16ccc"],
    conduct: 0.86,
  };
  
  elements.liquid_stable_radon = {
    tempLow: -71,
    density: 4400,
    colorOn: ["#b224ff", "#cc6caa", "#a16ccc"],
    conduct: 0.86,
  };
  
  elements.stable_polonium = {
    color: [blendColors("#56b870", "#ff0000"), blendColors("#56b870", "#00ff00"), blendColors("#56b870", "#0000ff")],
    behavior: behaviors.WALL,
    reactions: {
      oxygen: { elem1: "polonium_dioxide", elem2: null },
    },
    tempHigh: 254,
    hidden: true,
    category: "solids",
    state: "solid",
    density: 9196,
    conduct: 0.21,
  };
  elements.molten_stable_polonium = {
    color: [blendColors("#ace638", "#ff0000"), blendColors("#acb838", "#00ff00"), blendColors("#ac8a00", "#0000ff")],
    behavior: behaviors.MOLTEN,
    reactions: {
      oxygen: { elem1: "polonium_dioxide", elem2: null },
      magnesium: { elem1: "magnesium_polonide", elem2: null },
      molten_magnesium: { elem1: "magnesium_polonide", elem2: null },
    },
    tempLow: 254,
    hidden: true,
    state: "liquid",
    density: 9196,
    conduct: 0.21,
  };
  
  elements.stable_astatine = {
    color: [blendColors("#5a5e5a", "#ff0000"), blendColors("#5a5e5a", "#00ff00"), blendColors("#5a5e5a", "#0000ff")],
    behavior: behaviors.POWDER,
    tempHigh: 301,
    reactions: {
      steam: { elem1: "hydroastatic_acid", elem2: null },
      rad_steam: { elem1: "hydroastatic_acid", elem2: null },
    },
    category: "powders",
    state: "solid",
    hidden: true,
    density: 8910,
  };
  
  runAfterLoad(function () {
    reactList("stable_astatine", eLists.WATER, { elem1: "hydroastatic_acid", elem2: null });
  });
  
  elements.molten_stable_astatine = {
    color: [blendColors("#aab0a0", "#ff0000"), blendColors("#aab0a0", "#00ff00"), blendColors("#aab0a0", "#0000ff")],
    behavior: behaviors.LIQUID,
    tempLow: 301,
    reactions: {
      steam: { elem1: "hydroastatic_acid", elem2: null },
      rad_steam: { elem1: "hydroastatic_acid", elem2: null },
    },
    hidden: true,
    state: "liquid",
    density: 8910,
    tempHigh: 336,
  };
  
  runAfterLoad(function () {
    reactList("molten_stable_astatine", eLists.WATER, { elem1: "hydroastatic_acid", elem2: null });
  });
  
  createAcid("hydroastatic_acid", structuredClone(defaultAcidReactions), structuredClone(defaultAcidGasReactions), [blendColors("#5a5e5a", "#ff0000", 0.25), blendColors("#5a5e5a", "#00ff00", 0.25), blendColors("#5a5e5a", "#0000ff", 0.25)], true, true, 100, 100, 0, 1000, 1200, 1, "ASTATIDE");
  
  elements.hydroastatic_acid.ignore.push("astatine", "molten_astatine", "stable_astatine", "molten_stable_astatine");
  elements.hydroastatic_acid_gas.ignore.push("astatine", "molten_astatine", "stable_astatine", "molten_stable_astatine");
  
  eLists.ACID.push("hydroastatic_acid");
  eLists.ACIDGAS.push("hydroastatic_acid_gas");
  
  runAfterLoad(function () {
    reactList("hydroastatic_acid", eLists.WATER, { elem2: "dirty_water" });
    reactList("hydroastatic_acid_gas", eLists.WATER, { elem2: "dirty_water" });
    delete elements.hydroastatic_acid.reactions["dirty_water"];
    delete elements.hydroastatic_acid_gas.reactions["dirty_water"];
  });
  
  elements.polonium_dioxide = {
    color: [blendColors("#ffff7f", "#ff0000"), blendColors("#ffff7f", "#00ff00"), blendColors("#ffff7f", "#0000ff")],
    behavior: behaviors.POWDER,
    tempHigh: 500,
    hidden: true,
    state: "solid",
    density: 8900,
    category: "powders",
  };
  
  eListAdd("INSOLUBLE", "polonium_dioxide");
  eListAddIon("POLONIUMIV", "polonium_dioxide");
  eListAddIon("OXIDE", "polonium_dioxide");
  eListAddIon("POLONIUMIV", "molten_polonium_dioxide");
  eListAddIon("OXIDE", "molten_polonium_dioxide");
  
  createSalt("magnesium_polonide", "magnesium_polonide_solution", [blendColors("#b5b5b5", "#ff0000", 0.25), blendColors("#b5b5b5", "#00ff00", 0.25), blendColors("#b5b5b5", "#0000ff", 0.25)], [blendColors("#2167ff", "#ff0000", 0.25), blendColors("#2167ff", "#00ff00", 0.25), blendColors("#2167ff", "#0000ff", 0.25)], true, true, 1800, -2, 102, 6700, 1050, "MAGNESIUM", "POLONIDE");
  
  acidReact("acid", "magnesium_polonide", "magnesium_chloride_solution", "polonium_hydride", 100);
  acidReact("acid_gas", "magnesium_polonide", "magnesium_chloride_solution", "polonium_hydride", 100);
  acidReact("acid", "molten_magnesium_polonide", "magnesium_chloride_solution", "polonium_hydride", 100);
  acidReact("acid_gas", "molten_magnesium_polonide", "magnesium_chloride_solution", "polonium_hydride", 100);
  elements.acid.ignore.push("polonium_hydride_ice", "polonium_hydride_gas", "magnesium_chloride");
  elements.acid_gas.ignore.push("polonium_hydride_ice", "polonium_hydride_gas", "magnesium_chloride");
  
  elements.polonium_hydride = {
    density: 2450,
    color: [blendColors("#838396", "#ff0000"), blendColors("#838396", "#00ff00"), blendColors("#838396", "#0000ff")],
    hidden: true,
    state: "liquid",
    behavior: behaviors.LIQUID,
    tempLow: -35.3,
    tempHigh: 36.1,
    stain: 0.05,
    burn: 1,
    burnTime: 10,
    burnInto: ["polonium_dioxide", "steam"],
    category: "liquids",
  };
  
  elements.polonium_hydride_gas = {
    density: 8.29,
  };
  
  function franciumHydroxide(pixel) {
    elementCircle(pixel.x, pixel.y, 10, "francium_hydroxide", 0.1, eLists.WATER.concat(["steam", "rad_steam"]));
  }
  
  elements.stable_francium = {
    color: [blendColors("#3eff3b", "#ff0000"), blendColors("#3eff3b", "#00ff00"), blendColors("#3eff3b", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {
      steam: { elem1: "francium_hydroxide", elem2: [null, null, "big_pop"], func: franciumHydroxide },
      rad_steam: { elem1: "francium_hydroxide", elem2: [null, null, "big_pop"], func: franciumHydroxide },
    },
    tempHigh: 27,
    category: "powders",
    state: "solid",
    density: 2480,
    hidden: true,
    conduct: 0.7,
  };
  
  runAfterLoad(function () {
    reactList("stable_francium", eLists.WATER, { elem1: "francium_hydroxide", elem2: [null, null, "big_pop"], func: franciumHydroxide });
  });
  
  elements.molten_stable_francium = {
    behavior: behaviors.LIQUID,
    reactions: {
      steam: { elem1: "francium_hydroxide", elem2: [null, null, "big_pop"], func: franciumHydroxide },
      rad_steam: { elem1: "francium_hydroxide", elem2: [null, null, "big_pop"], func: franciumHydroxide },
    },
    tempLow: 27,
    state: "liquid",
    hidden: true,
    density: 2480,
    conduct: 0.7,
  };
  
  runAfterLoad(function () {
    reactList("molten_stable_francium", eLists.WATER, { elem1: "francium_hydroxide", elem2: [null, null, "big_pop"], func: franciumHydroxide });
  });
  
  elements.big_pop = {
    color: ["#ffb48f", "#ffd991", "#ffad91"],
    behavior: ["XX|XX|XX", "XX|EX:10|XX", "XX|XX|XX"],
    category: "energy",
    state: "gas",
    density: 1000,
    excludeRandom: true,
    hidden: true,
  };
  
  createSalt("potassium_salt", "potassium_salt_water", ["#f2f2f2", "#e0e0e0"], "#416ed1", false, false, 292, -2, 102, 3980, 1026, "POTASSIUM", "CHLORIDE");
  
  elements.potassium.reactions = {
    chlorine: { elem1: "potassium_salt", elem2: null, chance: 0.05 },
    smog: { elem1: ["potassium_hydroxide", "pop"], elem2: ["hydrogen", "pop", "fire"], chance: 0.01, temp2: 400 },
    electric: { elem1: [null, "pop"], elem2: ["pop", "fire"], chance: 0.05, temp2: 400 },
  };
  
  runAfterLoad(function () {
    reactList("potassium", eLists.WATER, { elem1: ["potassium_hydroxide", "pop"], elem2: ["hydrogen", "pop", "fire"], chance: 0.01, temp2: 400 });
  });
  
  elements.molten_potassium.reactions = {
    chlorine: { elem1: "potassium_salt", elem2: null, chance: 0.05 },
    smog: { elem1: ["potassium_hydroxide", "pop"], elem2: ["hydrogen", "pop", "fire"], chance: 0.01, temp2: 400 },
    electric: { elem1: [null, "pop"], elem2: ["pop", "fire"], chance: 0.05, temp2: 400 },
  };
  
  runAfterLoad(function () {
    reactList("molten_potassium", eLists.WATER, { elem1: ["potassium_hydroxide", "pop"], elem2: ["hydrogen", "pop", "fire"], chance: 0.01, temp2: 400 });
  });
  
  elements.molten_salt = {};
  elements.molten_potassium_salt = {};
  
  elements.molten_salt.reactions = {};
  elements.molten_salt.reactions.aluminum = { elem1: ["sodium", "chlorine"], charged: true, chance: 0.0025 };
  elements.molten_salt.reactions.zinc = { elem1: ["sodium", "chlorine"], charged: true, chance: 0.015 };
  elements.molten_salt.reactions.steel = { elem1: ["sodium", "chlorine"], charged: true, chance: 0.0125 };
  elements.molten_salt.reactions.iron = { elem1: ["sodium", "chlorine"], charged: true, chance: 0.0125 };
  elements.molten_salt.reactions.tin = { elem1: ["sodium", "chlorine"], charged: true, chance: 0.01 };
  elements.molten_salt.reactions.lead = { elem1: ["sodium", "chlorine"], charged: true, chance: 0.01 };
  elements.molten_salt.reactions.brass = { elem1: ["sodium", "chlorine"], charged: true, chance: 0.001 };
  elements.molten_salt.reactions.bronze = { elem1: ["sodium", "chlorine"], charged: true, chance: 0.001 };
  elements.molten_salt.reactions.copper = { elem1: ["sodium", "chlorine"], charged: true, chance: 0.0075 };
  elements.molten_salt.reactions.silver = { elem1: ["sodium", "chlorine"], charged: true, chance: 0.0075 };
  elements.molten_salt.reactions.gold = { elem1: ["sodium", "chlorine"], charged: true, chance: 0.0075 };
  elements.molten_salt.conduct = 0.7;
  
  elements.molten_potassium_salt.reactions = {};
  elements.molten_potassium_salt.reactions.aluminum = { elem1: ["potassium", "chlorine"], charged: true, chance: 0.0025 };
  elements.molten_potassium_salt.reactions.zinc = { elem1: ["potassium", "chlorine"], charged: true, chance: 0.015 };
  elements.molten_potassium_salt.reactions.steel = { elem1: ["potassium", "chlorine"], charged: true, chance: 0.0125 };
  elements.molten_potassium_salt.reactions.iron = { elem1: ["potassium", "chlorine"], charged: true, chance: 0.0125 };
  elements.molten_potassium_salt.reactions.tin = { elem1: ["potassium", "chlorine"], charged: true, chance: 0.01 };
  elements.molten_potassium_salt.reactions.lead = { elem1: ["potassium", "chlorine"], charged: true, chance: 0.01 };
  elements.molten_potassium_salt.reactions.brass = { elem1: ["potassium", "chlorine"], charged: true, chance: 0.001 };
  elements.molten_potassium_salt.reactions.bronze = { elem1: ["potassium", "chlorine"], charged: true, chance: 0.001 };
  elements.molten_potassium_salt.reactions.copper = { elem1: ["potassium", "chlorine"], charged: true, chance: 0.0075 };
  elements.molten_potassium_salt.reactions.silver = { elem1: ["potassium", "chlorine"], charged: true, chance: 0.0075 };
  elements.molten_potassium_salt.reactions.gold = { elem1: ["potassium", "chlorine"], charged: true, chance: 0.0075 };
  elements.molten_potassium_salt.conduct = 0.7;
  elements.molten_potassium_salt.burn = 0;
  elements.molten_potassium.burn = 0;
  
  //Hall–Heroult process
  elements.molten_cryolite_solution = {};
  elements.molten_cryolite_solution.reactions = {};
  elements.molten_cryolite_solution.reactions.charcoal = { elem1: "molten_aluminum", elem2: "carbon_dioxide" };
  
  elements.niter = {
    color: "#f0efcc",
    behavior: behaviors.POWDER,
    reactions: {
      plant: { elem1: "plant", chance: 0.05 },
      wheat_seed: { elem1: "wheat", chance: 0.05 },
      grass: { elem1: "grass", chance: 0.05 },
      grass_seed: { elem1: "grass", chance: 0.05 },
      bamboo_plant: { elem1: "bamboo", chance: 0.05 },
      flower_seed: { elem1: "flower_seed", chance: 0.05 },
      petal: { elem1: "flower_seed", chance: 0.05 },
      vine: { elem1: "vine", chance: 0.05 },
      sapling: { elem1: "tree_branch", chance: 0.05 },
      tree_branch: { elem1: "tree_branch", chance: 0.05 },
      corn_seed: { elem1: "corn", chance: 0.05 },
      root: { elem1: "root", chance: 0.05 },
      dirt: { elem1: "grass", chance: 0.05 },
      mud: { elem1: "grass", chance: 0.05 },
      potato_seed: { elem1: "potato", chance: 0.05 },
      yeast: { elem1: "yeast", chance: 0.05 },
      sulfur: { elem1: "gunpowder", elem2: null },
      ice: { elem1: null, elem2: "niter_solution", chance: 0.1 },
      rime: { elem1: null, elem2: "niter_solution", chance: 0.075 },
      snow: { elem1: null, elem2: "niter_solution", chance: 0.25 },
      packed_snow: { elem1: null, elem2: "niter_solution", chance: 0.05 },
      packed_ice: { elem1: null, elem2: "niter_solution", chance: 0.01 },
      water: { elem2: "niter_solution", elem1: null },
    },
    tempHigh: 334,
    stateHigh: "fire",
    category: "powders",
    state: "solid",
    density: 2109,
  };
  createSalt("niter", "niter_solution", "#f0efcc", blendColors("#f0efcc", "#2167ff", 0.75), false, true, 334, -2, 102, 2109, 1011, "POTASSIUM", "NITRATE");
  elements["niter"].stateHigh = "fire";
  elements["niter"].reactions = Object.assign(elements["niter"].reactions, {
    plant: { elem1: "plant", chance: 0.05 },
    wheat_seed: { elem1: "wheat", chance: 0.05 },
    grass: { elem1: "grass", chance: 0.05 },
    grass_seed: { elem1: "grass", chance: 0.05 },
    bamboo_plant: { elem1: "bamboo", chance: 0.05 },
    flower_seed: { elem1: "flower_seed", chance: 0.05 },
    petal: { elem1: "flower_seed", chance: 0.05 },
    vine: { elem1: "vine", chance: 0.05 },
    sapling: { elem1: "tree_branch", chance: 0.05 },
    tree_branch: { elem1: "tree_branch", chance: 0.05 },
    corn_seed: { elem1: "corn", chance: 0.05 },
    root: { elem1: "root", chance: 0.05 },
    dirt: { elem1: "grass", chance: 0.05 },
    mud: { elem1: "grass", chance: 0.05 },
    potato_seed: { elem1: "potato", chance: 0.05 },
    yeast: { elem1: "yeast", chance: 0.05 },
    sulfur: { elem1: "gunpowder", elem2: null },
  });
  elements["niter_solution"].reactions = Object.assign(elements["niter_solution"].reactions, {
    plant: { elem1: "plant", chance: 0.05 },
    wheat_seed: { elem1: "wheat", chance: 0.05 },
    grass: { elem1: "grass", chance: 0.05 },
    grass_seed: { elem1: "grass", chance: 0.05 },
    bamboo_plant: { elem1: "bamboo", chance: 0.05 },
    flower_seed: { elem1: "flower_seed", chance: 0.05 },
    petal: { elem1: "flower_seed", chance: 0.05 },
    vine: { elem1: "vine", chance: 0.05 },
    sapling: { elem1: "tree_branch", chance: 0.05 },
    tree_branch: { elem1: "tree_branch", chance: 0.05 },
    corn_seed: { elem1: "corn", chance: 0.05 },
    root: { elem1: "root", chance: 0.05 },
    dirt: { elem1: "grass", chance: 0.05 },
    mud: { elem1: "grass", chance: 0.05 },
    potato_seed: { elem1: "potato", chance: 0.05 },
    yeast: { elem1: "yeast", chance: 0.05 },
    sulfur: { elem1: "gunpowder", elem2: "water" },
  });
  delete elements["molten_niter"];
  
  elements.potassium_salt.hidden = false;
  
  elements.fluorite = {
    color: ["#8fc4f2", "#d0e5f7"],
    behavior: behaviors.POWDER,
    category: "land",
    density: 3180,
    state: "solid",
    tempHigh: 1418,
    reactions: {
      sulfuric_acid: { elem1: "hydrogen_fluoride", elem2: "chalk" },
    },
  };
  
  eListAddIon("CALCIUM", "fluorite");
  eListAddIon("FLUORIDE", "fluorite");
  eListAdd("INSOLUBLE", "fluorite");
  eListAddIon("CALCIUM", "chalk");
  eListAddIon("SULFATE", "chalk");
  eListAddIon("CALCIUM", "molten_chalk");
  eListAddIon("SULFATE", "molten_chalk");
  eListAdd("INSOLUBLE", "chalk");
  
  elements.sulfuric_acid.ignore.push("chalk", "fluorite");
  elements.sulfuric_acid_gas.ignore.push("chalk", "fluorite");
  
  elements.hydrogen_fluoride.ignore.push("chalk", "fluorite");
  elements.liquid_hydrogen_fluoride.ignore.push("chalk", "fluorite");
  
  elements.chalk = {
    color: ["#e0e0e0", "#bfbfbf"],
    behavior: behaviors.POWDER,
    category: "land",
    density: 2320,
    state: "solid",
    tempHigh: 1460,
    stain: 0.05,
  };
  
  elements.sulfur.reactions.fluorine = { elem1: "sulfur_hexafluoride", elem2: "fire" };
  
  elements.sulfur_hexafluoride = {
    color: "#f2ff00",
    behavior: behaviors.GAS,
    category: "gases",
    density: 6.17,
    state: "gas",
    tempLow: -50.8,
  };
  
  elements.liquid_sulfur_hexafluoride = {
    tempLow: -64,
  };
  
  createAcid("hexafluorosilicic_acid", structuredClone(defaultAcidReactions), structuredClone(defaultAcidGasReactions), ["#ebeed8", "#f9ffc2", "#c7e189"], true, true, 100, 100, 0, 1000, 1460, 1, "HEXAFLUOROSILICATE");
  
  eLists.ACID.push("hexafluorosilicic_acid");
  eLists.ACIDGAS.push("hexafluorosilicic_acid_gas");
  
  elements.hydrofluoric_acid.ignore.push("sand", "hexafluorosilicic_acid", "hexafluorosilicic_acid_gas", "potassium_carbonate", "potassium_fluoride", "carbon_dioxide", "hydrogen");
  elements.hydrofluoric_acid_gas.ignore.push("sand", "hexafluorosilicic_acid", "hexafluorosilicic_acid_gas", "potassium_carbonate", "potassium_fluoride", "carbon_dioxide", "hydrogen");
  elements.hydrogen_fluoride.ignore.push("sand", "hexafluorosilicic_acid", "hexafluorosilicic_acid_gas", "potassium_carbonate", "potassium_fluoride", "carbon_dioxide", "hydrogen");
  elements.liquid_hydrogen_fluoride.ignore.push("sand", "hexafluorosilicic_acid", "hexafluorosilicic_acid_gas", "potassium_carbonate", "potassium_fluoride", "carbon_dioxide", "hydrogen");
  elements.hexafluorosilicic_acid.ignore.push("sand");
  elements.hexafluorosilicic_acid_gas.ignore.push("sand");
  
  acidReact("hydrofluoric_acid", "sand", "hexafluorosilicic_acid", "fire", 0);
  acidReact("hydrofluoric_acid_gas", "sand", "hexafluorosilicic_acid", "fire", 0);
  acidReact("hydrofluoric_acid", "potassium_carbonate", "potassium_fluoride_solution", "carbon_dioxide", 100);
  acidReact("hydrofluoric_acid_gas", "potassium_carbonate", "potassium_fluoride_solution", "carbon_dioxide", 100);
  acidReact("hydrogen_fluoride", "potassium_carbonate", "potassium_fluoride_solution", "carbon_dioxide", 100);
  acidReact("liquid_hydrogen_fluoride", "potassium_carbonate", "potassium_fluoride_solution", "carbon_dioxide", 100);
  
  acidReact("hydrofluoric_acid", "potassium_carbonate_solution", "potassium_fluoride_solution", "carbon_dioxide", 100);
  acidReact("hydrofluoric_acid_gas", "potassium_carbonate_solution", "potassium_fluoride_solution", "carbon_dioxide", 100);
  acidReact("hydrogen_fluoride", "potassium_carbonate_solution", "potassium_fluoride_solution", "carbon_dioxide", 100);
  acidReact("liquid_hydrogen_fluoride", "potassium_carbonate_solution", "potassium_fluoride_solution", "carbon_dioxide", 100);
  
  acidReact("hydrofluoric_acid", "potassium_fluoride", "fluorine", "potassium_fluoride_solution", 100);
  acidReact("hydrofluoric_acid_gas", "potassium_fluoride", "fluorine", "potassium_fluoride_solution", 100);
  acidReact("hydrofluoric_acid", "potassium_fluoride", "fluorine", ["potassium_fluoride_solution", null], 100);
  acidReact("hydrofluoric_acid_gas", "potassium_fluoride", "fluorine", ["potassium_fluoride_solution", null], 100);
  
  elements.fluorine.ignore.push("sand", "potassium_carbonate", "potassium_fluoride", "carbon_dioxide");
  elements.liquid_fluorine.ignore.push("sand", "potassium_carbonate", "potassium_fluoride", "carbon_dioxide");
  
  createSalt("potassium_carbonate", "potassium_carbonate_solution", "#e2e1e8", blendColors("#e2e1e8", "#2167ff", 0.75), true, true, 891, -2, 102, 2430, 1024, "POTASSIUM", "CARBONATE");
  createSalt("potassium_fluoride", "potassium_fluoride_solution", "#e8e8e1", blendColors("#e8e8e1", "#2167ff", 0.75), true, true, 858, -2, 102, 2480, 1020, "POTASSIUM", "FLUORIDE");
  
  elements.soy_sauce = {
    color: "#470500",
    behavior: behaviors.LIQUID,
    tempLow: -5,
    tempHigh: 105,
    state: "liquid",
    category: "liquids",
    density: 1200,
    stain: 0.5,
    stateHigh: ["steam", "steam", "steam", "steam", "salt"],
  };
  
  elements.bromine = {
    color: "#470500",
    behavior: behaviors.LIQUID,
    tick: function (pixel) {
      if (pixel.temp > 0 && Math.random() < 0.001) {
        changePixel(pixelMap[pixel.x][pixel.y], "bromine_gas", false);
      }
    },
    reactions: {
      water: { elem1: "pool_water", elem2: null },
      dirty_water: { elem2: "water" },
      potassium: { elem1: "potassium_bromide", elem2: "fire" },
      sodium: { elem1: "sodium_bromide", elem2: "fire" },
      virus: { elem2: null },
    },
    tempLow: -7.2,
    tempHigh: 58.8,
    state: "liquid",
    category: "liquids",
    density: 3102,
    stain: 0.5,
  };
  
  toxic("bromine", 0.1);
  
  elements.bromine_gas = {
    behavior: behaviors.GAS,
    tick: function (pixel) {
      if (pixel.temp < 58.8 && pixel.temp > 0 && Math.random() < 0.01) {
        changePixel(pixelMap[pixel.x][pixel.y], "bromine", false);
      }
    },
    reactions: {
      water: { elem1: "pool_water", elem2: null },
      dirty_water: { elem2: "water" },
      potassium: { elem1: "potassium_bromide", elem2: "fire" },
      sodium: { elem1: "sodium_bromide", elem2: "fire" },
      virus: { elem2: null },
    },
    tempLow: 0,
    stateLow: "bromine",
    state: "gas",
    category: "gases",
    hidden: true,
    density: 7.59,
    stain: 0.5,
  };
  
  toxic("bromine_gas", 0.1);
  
  createSalt("potassium_bromide", "potassium_bromide_solution", ["#fccaca", "#f7cbcb"], blendColors("#fccaca", "#2167ff", 0.75), false, true, 734, -2, 102, 2740, 1050, "POTASSIUM", "BROMIDE");
  createSalt("sodium_bromide", "sodium_bromide_solution", ["#f5f4ed", "#f2f2eb"], blendColors("#f5f4ed", "#2167ff", 0.75), false, true, 747, -2, 102, 3210, 1040, "SODIUM", "BROMIDE");
  
  elements.silver_bromide = {
    color: ["#fcfcca", "#f7f24f"],
    tick: function (pixel) {
      for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
          if (!isEmpty(pixel.x + i, pixel.y + j, true) && Math.random() < 0.1 && (pixelMap[pixel.x + i][pixel.y + j].element === "light" || pixelMap[pixel.x + i][pixel.y + j].element === "laser" || pixelMap[pixel.x + i][pixel.y + j].element === "liquid_light")) {
            let coords = circleCoords(pixel.x + i, pixel.y + j, 20);
            for (var n = 0; n < coords.length; n++) {
              let k = coords[n].x;
              let l = coords[n].y;
              let distance = (k - pixel.x - i) * (k - pixel.x - i) + (l - pixel.y - j) * (l - pixel.y - j);
              if (!isEmpty(k, l, true) && pixelMap[k][l].element === "silver_bromide") {
                if (distance <= 0) {
                  console.log("silver bromide broke");
                }
                let rgb = hexToRGB(blendColors(RGBToHex2(toObject(pixelMap[k][l].color)), RGBToHex2(toObject(pixelMap[pixel.x + i][pixel.y + j].color)), 10 / (10 + distance)));
                pixelMap[k][l].color = "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
                //pixelMap[k][l].color = pixelColorPick(pixelMap[k][l],blendColors(RGBToHex2(toObject(pixelMap[k][l].color)),RGBToHex2(toObject(pixelMap[pixel.x+i][pixel.y+j].color)),1/distance));
              }
            }
            if (pixelMap[pixel.x + i][pixel.y + j].element === "light" || pixelMap[pixel.x + i][pixel.y + j].element === "laser") {
              deletePixel(pixel.x + i, pixel.y + j);
            }
          }
        }
      }
    },
    behavior: behaviors.POWDER,
    category: "powders",
    tempHigh: 430,
    state: "solid",
    density: 6470,
  };
  
  eListAddIon("SILVER", "silver_bromide");
  eListAddIon("BROMIDE", "silver_bromide");
  eListAdd("INSOLUBLE", "silver_bromide");
  eListAddIon("SILVER", "molten_silver_bromide");
  eListAddIon("BROMIDE", "molten_silver_bromide");
  
  elements.nitric_acid.reactions["silver"] = { elem1: "nitrogen_dioxide", elem2: "silver_nitrate_solution" };
  elements.nitric_acid_gas.reactions["silver"] = { elem1: "nitrogen_dioxide", elem2: "silver_nitrate_solution" };
  
  elements.nitric_acid.ignore.push("silver", "silver_nitrate", "silver_nitrate_solution");
  elements.nitric_acid_gas.ignore.push("silver", "silver_nitrate", "silver_nitrate_solution");
  
  elements.molten_silver_nitrate = {
    tempHigh: 440,
    stateHigh: ["silver", "nitrogen_dioxide", "oxygen", "fire"],
  };
  
  createSalt("silver_nitrate", "silver_nitrate_solution", ["#cad7fc", "#cbd2f7"], blendColors("#cad7fc", "#2167ff", 0.5), true, true, 209, -2, 102, 4350, 1060, "SILVER", "NITRATE");
  
  elements.silver_nitrate_solution.reactions["potassium_bromide"] = { elem1: "niter_solution", elem2: "silver_bromide" };
  elements.silver_nitrate_solution.reactions["potassium_bromide_solution"] = { elem1: "niter_solution", elem2: "silver_bromide" };
  
  createAcid("hydrobromic_acid", structuredClone(defaultAcidReactions), structuredClone(defaultAcidGasReactions), ["#ff3b3b", "#ca0000", "#9e7b7b"], true, true, 100, 100, 0, 1000, 1100, 1, "BROMIDE");
  
  eLists.ACID.push("hydrobromic_acid");
  eLists.ACIDGAS.push("hydrobromic_acid_gas");
  
  acidReact("sulfuric_acid", "bromine", "sulfuric_acid", "hydrobromic_acid", 50);
  acidReact("sulfuric_acid", "bromine_ice", "sulfuric_acid", "hydrobromic_acid", 50);
  acidReact("sulfuric_acid", "bromine_gas", "sulfuric_acid", "hydrobromic_acid", 50);
  acidReact("sulfuric_acid_gas", "bromine", "sulfuric_acid", "hydrobromic_acid", 50);
  acidReact("sulfuric_acid_gas", "bromine_ice", "sulfuric_acid", "hydrobromic_acid", 50);
  acidReact("sulfuric_acid_gas", "bromine_gas", "sulfuric_acid", "hydrobromic_acid", 50);
  
  acidReact("sulfuric_acid", "potassium_salt", "potassium_sulfate", "acid", 50);
  acidReact("sulfuric_acid_gas", "potassium_salt", "potassium_sulfate", "acid", 50);
  acidReact("sulfuric_acid", "niter", "potassium_sulfate", "nitric_acid", 50);
  acidReact("sulfuric_acid_gas", "niter", "potassium_sulfate", "nitric_acid", 50);
  acidReact("sulfuric_acid", "potassium_bromide", "potassium_sulfate", "hydrobromic_acid", 50);
  acidReact("sulfuric_acid_gas", "potassium_bromide", "potassium_sulfate", "hydrobromic_acid", 50);
  
  createSalt("potassium_sulfate", "potassium_sulfate_solution", "#f0d8cc", blendColors("#f0d8cc", "#2167ff", 0.75), true, true, 1069, -2, 102, 2660, 1012, "POTASSIUM", "SULFATE");
  elements["potassium_sulfate"].reactions = Object.assign(elements["potassium_sulfate"].reactions, {
    plant: { elem1: "plant", chance: 0.05 },
    wheat_seed: { elem1: "wheat", chance: 0.05 },
    grass: { elem1: "grass", chance: 0.05 },
    grass_seed: { elem1: "grass", chance: 0.05 },
    bamboo_plant: { elem1: "bamboo", chance: 0.05 },
    flower_seed: { elem1: "flower_seed", chance: 0.05 },
    petal: { elem1: "flower_seed", chance: 0.05 },
    vine: { elem1: "vine", chance: 0.05 },
    sapling: { elem1: "tree_branch", chance: 0.05 },
    tree_branch: { elem1: "tree_branch", chance: 0.05 },
    corn_seed: { elem1: "corn", chance: 0.05 },
    root: { elem1: "root", chance: 0.05 },
    dirt: { elem1: "grass", chance: 0.05 },
    mud: { elem1: "grass", chance: 0.05 },
    potato_seed: { elem1: "potato", chance: 0.05 },
    yeast: { elem1: "yeast", chance: 0.05 },
  });
  elements["potassium_sulfate_solution"].reactions = Object.assign(elements["potassium_sulfate_solution"].reactions, {
    plant: { elem1: "plant", chance: 0.05 },
    wheat_seed: { elem1: "wheat", chance: 0.05 },
    grass: { elem1: "grass", chance: 0.05 },
    grass_seed: { elem1: "grass", chance: 0.05 },
    bamboo_plant: { elem1: "bamboo", chance: 0.05 },
    flower_seed: { elem1: "flower_seed", chance: 0.05 },
    petal: { elem1: "flower_seed", chance: 0.05 },
    vine: { elem1: "vine", chance: 0.05 },
    sapling: { elem1: "tree_branch", chance: 0.05 },
    tree_branch: { elem1: "tree_branch", chance: 0.05 },
    corn_seed: { elem1: "corn", chance: 0.05 },
    root: { elem1: "root", chance: 0.05 },
    dirt: { elem1: "grass", chance: 0.05 },
    mud: { elem1: "grass", chance: 0.05 },
    potato_seed: { elem1: "potato", chance: 0.05 },
    yeast: { elem1: "yeast", chance: 0.05 },
  });
  
  createSalt("sodium_chlorate", "sodium_chlorate_solution", "#cff0cc", blendColors("#cff0cc", "#2167ff", 0.25), true, true, 255, -2, 102, 2490, 1011, "SODIUM", "CHLORATE");
  elements.sodium_chlorate.stateHigh = "fire";
  elements.sodium_chlorate_solution.reactions["gold"] = { elem1: "sodium_perchlorate_solution", charged: true, chance: 0.1 };
  
  elements.chlorine.reactions["bleach"] = { elem1: "sodium_chlorate_solution", elem2: null };
  delete elements["molten_sodium_chlorate"];
  
  createSalt("sodium_perchlorate", "sodium_perchlorate_solution", "#cff0cc", blendColors("#d6f0cc", "#2167ff", 0.25), true, true, 468, -2, 102, 2499, 1011, "SODIUM", "PERCHLORATE");
  elements.sodium_perchlorate.stateHigh = "fire";
  elements.sodium_perchlorate.reactions["acid"] = { elem1: "perchloric_acid", elem2: "salt" };
  elements.sodium_perchlorate_solution.reactions["acid"] = { elem1: "perchloric_acid", elem2: "salt_water" };
  
  elements.acid.ignore.push("salt", "sodium_perchlorate", "sodium_perchlorate_solution");
  elements.acid_gas.ignore.push("salt", "sodium_perchlorate", "sodium_perchlorate_solution");
  delete elements["molten_sodium_perchlorate"];
  
  createAcid("perchloric_acid", structuredClone(defaultAcidReactions), structuredClone(defaultAcidGasReactions), ["#ff963b", "#ca6800", "#c48a56"], true, true, 100, 100, 0, 1000, 1768, 1, "PERCHLORATE");
  
  elements.perchloric_acid.tick = function (pixel) {
    let change = false;
    for (let i = -1; i <= 1; i++) {
      for (let j = -1; j <= 1; j++) {
        if (!(i === 0 && j === 0) && !isEmpty(pixel.x + i, pixel.y + j, true) && !elements[pixel.element].ignore.includes(pixelMap[pixel.x + i][pixel.y + j].element)) {
          if (!elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness || Math.random() > elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness) {
            changePixel(pixelMap[pixel.x + i][pixel.y + j], "fire");
            change = true;
          }
        }
      }
    }
    if (change) {
      if (Math.random() < 0.2) {
        changePixel(pixel, "big_pop");
      } else {
        deletePixel(pixel.x, pixel.y);
        return;
      }
    } else {
      behaviors.LIQUID(pixel);
    }
  };
  delete elements.perchloric_acid.behavior;
  elements.perchloric_acid.burn = 0;
  elements.perchloric_acid.ignore.push("fire", "smoke");
  
  elements.perchloric_acid_gas.tick = function (pixel) {
    let change = false;
    for (let i = -1; i <= 1; i++) {
      for (let j = -1; j <= 1; j++) {
        if (!(i === 0 && j === 0) && !isEmpty(pixel.x + i, pixel.y + j, true) && !elements[pixel.element].ignore.includes(pixelMap[pixel.x + i][pixel.y + j].element)) {
          if (!elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness || Math.random() > elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness) {
            changePixel(pixelMap[pixel.x + i][pixel.y + j], "fire");
            change = true;
          }
        }
      }
    }
    if (change) {
      if (Math.random() < 0.2) {
        changePixel(pixel, "big_pop");
      } else {
        deletePixel(pixel.x, pixel.y);
        return;
      }
    } else {
      behaviors.GAS(pixel);
    }
  };
  elements.perchloric_acid_gas.behavior = ["XX|XX|XX", "XX|XX|XX", "XX|XX|XX"];
  elements.perchloric_acid_gas.burn = 0;
  elements.perchloric_acid_gas.ignore.push("fire", "smoke");
  
  eLists.ACID.push("perchloric_acid");
  eLists.ACIDGAS.push("perchloric_acid_gas");
  
  acidReact("perchloric_acid", "ammonia", "rocket_fuel", null, 100);
  acidReact("perchloric_acid_gas", "ammonia", "rocket_fuel", null, 100);
  
  elements.perchloric_acid.ignore.push("salt", "sodium_perchlorate", "sodium_perchlorate_solution");
  elements.perchloric_acid_gas.ignore.push("salt", "sodium_perchlorate", "sodium_perchlorate_solution");
  
  elements.rocket_fuel = {
    color: "#edcfca",
    behavior: behaviors.POWDER,
    tempHigh: 200,
    stateHigh: "big_explosion",
    category: "weapons",
    state: "solid",
    density: 1950,
    burn: 100,
    burnTime: 100,
    burnInto: "big_explosion",
    excludeRandom: true,
  };
  
  elements.big_explosion = {
    color: ["#ffb48f", "#ffd991", "#ffad91"],
    behavior: ["XX|XX|XX", "XX|EX:20|XX", "XX|XX|XX"],
    temp: 300,
    category: "energy",
    state: "gas",
    density: 1000,
    excludeRandom: true,
    noMix: true,
  };
  
  elements.iodine = {
    color: ["#240030", "#15061a", "#752191"],
    behavior: behaviors.POWDER,
    tick: function (pixel) {
      if (pixel.temp > 25 && Math.random() < 0.001) {
        changePixel(pixelMap[pixel.x][pixel.y], "iodine_gas", false);
      }
    },
    reactions: {
      water: { elem1: "disinfectant", elem2: null },
      dirty_water: { elem2: "water" },
      potato: { color2: "#3e0252" },
      bread: { color2: "#3e0252" },
      toast: { color2: "#3e0252" },
      flour: { color2: "#3e0252" },
      dough: { color2: "#3e0252" },
      batter: { color2: "#3e0252" },
      hydrogen: { elem1: "hydrogen_iodide", elem2: null },
      hydrogen_sulfide: { elem1: "hydrogen_iodide", elem2: "sulfur" },
      algae: { elem2: null, chance: 0.035 },
      cell: { elem2: null, chance: 0.02 },
      plague: { elem2: null },
      virus: { elem2: null },
    },
    tempHigh: 113,
    stateHigh: "molten_iodine",
    state: "solid",
    category: "powders",
    density: 4933,
    stain: 0.01,
  };
  
  elements.molten_iodine = {
    color: ["#360147", "#2b0d36", "#9b2ebf"],
    forceAutoGen: true,
    behavior: behaviors.LIQUID,
    tempHigh: 184,
    tempLow: 113,
    temp: 123,
    stateHigh: "iodine_gas",
    stateLow: "iodine",
    state: "liquid",
    hidden: true,
    category: "liquids",
  };
  
  elements.iodine_gas = {
    behavior: behaviors.GAS,
    tick: function (pixel) {
      if (pixel.temp < 113 && pixel.temp > 25 && Math.random() < 0.01) {
        changePixel(pixelMap[pixel.x][pixel.y], "iodine", false);
      }
    },
    tempLow: 25,
    stateLow: "iodine",
    state: "gas",
    category: "gases",
    hidden: true,
    density: 11.27,
    stain: 0.01,
  };
  
  elements.disinfectant = {
    color: "#2d004f",
    behavior: behaviors.LIQUID,
    reactions: {
      blood: { elem1: null, elem2: "water" },
      dirty_water: { elem2: "water" },
      plague: { elem2: null },
      virus: { elem2: null },
      infection: { elem2: null },
      mushroom_spore: { elem2: null },
      lichen: { elem2: null },
      rotten_meat: { elem2: "meat" },
      rotten_cheese: { elem2: "cheese" },
      stench: { elem2: null },
      cancer: { elem2: null, chance: 0.01 },
      rat: { elem2: null, chance: 0.01 },
      ant: { elem2: "dead_bug", chance: 0.1 },
      bee: { elem2: "dead_bug", chance: 0.1 },
      fly: { elem2: "dead_bug", chance: 0.1 },
      firefly: { elem2: "dead_bug", chance: 0.1 },
      worm: { elem2: "dead_bug", chance: 0.1 },
      flea: { elem2: "dead_bug", chance: 0.1 },
      termite: { elem2: "dead_bug", chance: 0.1 },
      stink_bug: { elem2: "dead_bug", chance: 0.1 },
    },
    tempHigh: 100,
    tempLow: 0,
    stateHigh: ["steam", "iodine"],
    state: "liquid",
    category: "liquids",
    density: 1020,
    stain: 0.01,
  };
  
  createAcid("hydroiodic_acid", structuredClone(defaultAcidReactions), structuredClone(defaultAcidGasReactions), ["#9670ff", "#da6afc", "#a77af5", "#9670ff", "#da6afc", "#a77af5", "#633a1d"], true, true, 100, 100, 0, 1000, 1150, 1, "IODIDE");
  
  elements.hydrogen_iodide = {
    color: "#aa8df2",
    behavior: behaviors.GAS,
    reactions: {
      water: { elem1: "hydroiodic_acid", elem2: null },
      salt_water: { elem1: "hydroiodic_acid", elem2: null },
      sugar_water: { elem1: "hydroiodic_acid", elem2: null },
      dirty_water: { elem1: "hydroiodic_acid", elem2: null },
      seltzer: { elem1: "hydroiodic_acid", elem2: null },
      pool_water: { elem1: "hydroiodic_acid", elem2: null },
      primordial_soup: { elem1: "hydroiodic_acid", elem2: null },
      steam: { elem1: "hydroiodic_acid_gas", elem2: null },
      neutral_acid: { elem1: "hydroiodic_acid", elem2: null },
    },
    state: "gas",
    category: "gases",
    hidden: true,
    density: 2.85,
    tempLow: -35.4,
    stateLow: "liquid_hydrogen_iodide",
    forceAutoGen: true,
  };
  
  runAfterLoad(function () {
    reactList("hydrogen_iodide", eLists.WATER, { elem1: "hydroiodic_acid", elem2: null });
  });
  
  elements.liquid_hydrogen_iodide = {
    reactions: {
      water: { elem1: "hydroiodic_acid", elem2: null },
      salt_water: { elem1: "hydroiodic_acid", elem2: null },
      sugar_water: { elem1: "hydroiodic_acid", elem2: null },
      dirty_water: { elem1: "hydroiodic_acid", elem2: null },
      seltzer: { elem1: "hydroiodic_acid", elem2: null },
      pool_water: { elem1: "hydroiodic_acid", elem2: null },
      primordial_soup: { elem1: "hydroiodic_acid", elem2: null },
      steam: { elem1: "hydroiodic_acid_gas", elem2: null },
      neutral_acid: { elem1: "hydroiodic_acid", elem2: null },
    },
    state: "liquid",
    tempLow: -50.8,
  };
  
  runAfterLoad(function () {
    reactList("liquid_hydrogen_iodide", eLists.WATER, { elem1: "hydroiodic_acid", elem2: null });
  });
  
  elements.hydroiodic_acid.ignore.push("hydrogen_iodide", "liquid_hydrogen_iodide", "hydrogen_iodide_ice");
  elements.hydroiodic_acid_gas.ignore.push("hydrogen_iodide", "liquid_hydrogen_iodide", "hydrogen_iodide_ice");
  
  eListAddIon("HYDROGEN", "hydrogen_iodide");
  eListAddIon("IODIDE", "hydrogen_iodide");
  eListAddIon("HYDROGEN", "liquid_hydrogen_iodide");
  eListAddIon("IODIDE", "liquid_hydrogen_iodide");
  eListAddIon("HYDROGEN", "hydroiodic_acid");
  eListAddIon("IODIDE", "hydroiodic_acid");
  eListAddIon("HYDROGEN", "hydroiodic_acid_gas");
  eListAddIon("IODIDE", "hydroiodic_acid_gas");
  runAfterLoad(function () {
    reactList("hydroiodic_acid", eLists.WATER, { elem2: "dirty_water" });
    reactList("hydroiodic_acid_gas", eLists.WATER, { elem2: "dirty_water" });
    delete elements.hydroiodic_acid.reactions["dirty_water"];
    delete elements.hydroiodic_acid_gas.reactions["dirty_water"];
  });
  
  elements.bauxite = {
    color: ["#915a30", "#cc7533"],
    behavior: behaviors.POWDER,
    category: "land",
    density: 2420,
    state: "solid",
    tempHigh: 300,
  };
  
  elements.spent_sodium_aluminate_solution = {
    color: ["#696380", "#7a759e"],
    behavior: behaviors.LIQUID,
    category: "liquids",
    hidden: true,
    density: 1005,
    state: "liquid",
    tempHigh: 100,
    stateHigh: ["sodium_aluminate", "sodium_aluminate", "sodium_aluminate", "gallium", "steam", "steam", "steam", "steam"],
  };
  
  createSalt("sodium_aluminate", "sodium_aluminate_solution", ["#e6c9b3", "#ebc8ad"], ["#bdb3e6", "#b4adeb"], true, true, 1650, -2, 102, 1500, 1005, "SODIUM", "ALUMINATE");
  elements.sodium_aluminate_solution.reactions["carbon_dioxide"] = { elem1: "aluminum_hydroxide", elem2: ["sodium_carbonate_solution", "spent_sodium_aluminate_solution"] };
  
  createSalt("sodium_carbonate", "sodium_carbonate_solution", "#d8dae6", ["#c5c1d6", "#afacc2"], true, true, 851, -2, 102, 2540, 1010, "SODIUM", "CARBONATE");
  createSalt("ammonium_chloride", "ammonium_chloride_solution", "#daeced", ["#a299c7", "#7e76b3"], true, true, 338, -2, 102, 1519, 1008, "AMMONIUM", "CHLORIDE");
  elements["ammonium_chloride"].stateHigh = ["ammonia", "acid_gas"];
  delete elements["molten_ammonium_chloride"];
  acidReact("acid_gas", "ammonia", "ammonium_chloride", null, 0);
  
  elements.aluminum_hydroxide = {
    color: "#d1cbcb",
    behavior: behaviors.POWDER,
    category: "powders",
    hidden: true,
    density: 2420,
    state: "solid",
    tempHigh: 300,
    stateHigh: ["alumina", "steam"],
  };
  
  eListAddIon("ALUMINUM", "aluminum_hydroxide");
  eListAddIon("HYDROXIDE", "aluminum_hydroxide");
  eListAdd("INSOLUBLE", "aluminum_hydroxide");
  
  elements.alumina = {
    color: "#d1cbcb",
    behavior: behaviors.SOLID,
    category: "solids",
    density: 3987,
    state: "solid",
    tempHigh: 2072,
    reactions: {
      molten_cryolite_mixture: { elem1: "molten_cryolite_solution", elem2: "molten_cryolite_solution" },
    },
  };
  
  eListAddIon("ALUMINUM", "alumina");
  eListAddIon("OXIDE", "alumina");
  eListAdd("INSOLUBLE", "alumina");
  
  eListAddIon("ALUMINUM", "molten_alumina");
  eListAddIon("OXIDE", "molten_alumina");
  
  elements.cryolite = {
    color: ["#9ab6d9", "#dae4f0"],
    behavior: behaviors.POWDER,
    category: "land",
    density: 2900,
    state: "solid",
    tempHigh: 950,
    reactions: {
      aluminum_trifluoride: { elem1: "cryolite_mixture", elem2: "cryolite_mixture" },
    },
  };
  
  eListAddIon("SODIUM", "cryolite");
  eListAddIon("HEXAFLUOROALUMINATE", "cryolite");
  eListAdd("INSOLUBLE", "cryolite");
  
  eListAddIon("SODIUM", "molten_cryolite");
  eListAddIon("HEXAFLUOROALUMINATE", "molten_cryolite");
  
  elements.aluminum_trifluoride = {
    color: ["#ebf4ff", "#e3fdff"],
    behavior: behaviors.POWDER,
    category: "powders",
    hidden: true,
    density: 3100,
    state: "solid",
    tempHigh: 1290,
  };
  
  eListAddIon("ALUMINUM", "aluminum_trifluoride");
  eListAddIon("FLUORIDE", "aluminum_trifluoride");
  eListAdd("INSOLUBLE", "aluminum_trifluoride");
  
  eListAddIon("ALUMINUM", "aluminum_trifluoride_gas");
  eListAddIon("FLUORIDE", "aluminum_trifluoride_gas");
  
  elements.molten_aluminum_trifluoride = {
    tempHigh: 1290,
    tempLow: 1290,
  };
  
  elements.aluminum_trifluoride_gas = {
    tempLow: 1290,
    state: "gas",
    stateLow: "molten_aluminum_trifluoride",
  };
  
  elements.cryolite_mixture = {
    color: [blendColors("#9ab6d9", "#ebf4ff"), blendColors("#dae4f0", "#e3fdff")],
    behavior: behaviors.POWDER,
    category: "powders",
    hidden: true,
    density: 2910,
    state: "solid",
    tempHigh: 950,
  };
  
  elements.cryolite_solution = {
    color: [blendColors(blendColors("#9ab6d9", "#ebf4ff"), "#d1cbcb"), blendColors(blendColors("#dae4f0", "#e3fdff"), "#d1cbcb")],
    behavior: behaviors.POWDER,
    category: "powders",
    hidden: true,
    density: 2920,
    state: "solid",
    tempHigh: 950,
  };
  
  createSalt("sodium_fluoride", "sodium_fluoride_solution", ["#8aebce", "#b9edde"], ["#8ad0eb", "#b9e3ed"], false, true, 993, -2, 102, 2558, 1012, "SODIUM", "FLUORIDE");
  
  elements.magnesium_fluoride = {
    color: ["#aaabae", "#a9adae"],
    behavior: behaviors.POWDER,
    category: "powders",
    density: 3148,
    state: "solid",
    tempHigh: 1263,
    reactions: {
      sulfuric_acid: { elem1: "hydrogen_fluoride", elem2: "epsom_salt" },
    },
    hidden: true,
  };
  
  eListAddIon("MAGNESIUM", "magnesium_fluoride");
  eListAddIon("FLUORIDE", "magnesium_fluoride");
  eListAdd("INSOLUBLE", "magnesium_fluoride");
  
  eListAddIon("MAGNESIUM", "molten_magnesium_fluoride");
  eListAddIon("FLUORIDE", "molten_magnesium_fluoride");
  
  elements.sulfuric_acid.ignore.push("epsom_salt", "magnesium_fluoride");
  elements.sulfuric_acid_gas.ignore.push("epsom_salt", "magnesium_fluoride");
  
  elements.hydrogen_fluoride.ignore.push("epsom_salt", "magnesium_fluoride");
  elements.liquid_hydrogen_fluoride.ignore.push("epsom_salt", "magnesium_fluoride");
  
  //boron
  
  acidReact("acid", "borax", "boric_acid", "salt", 0);
  acidReact("acid_gas", "borax", "boric_acid", "salt", 0);
  
  elements.boric_acid = {
    color: "#fbffeb",
    behavior: behaviors.POWDER,
    category: "powders",
    density: 1435,
    state: "solid",
    tempHigh: 170,
    reactions: {
      hydrofluoric_acid: { elem1: "fluoroboric_acid", elem2: "dirty_water" },
      hydrofluoric_acid_gas: { elem1: "fluoroboric_acid_gas", elem2: "steam" },
      neutron: { elem2: null },
    },
  };
  
  acidReact("hydrofluoric_acid", "boric_acid", "fluoroboric_acid", "dirty_water", 50);
  acidReact("hydrofluoric_acid_gas", "boric_acid", "fluoroboric_acid_gas", "steam", 50);
  
  elements.hydrofluoric_acid.ignore.push("molten_boric_acid");
  elements.hydrofluoric_acid_gas.ignore.push("molten_boric_acid");
  
  elements.borax.hidden = false;
  
  createSalt("sodium_sulfate", "sodium_sulfate_solution", "#f3f2f5", blendColors("#f3f2f5", "#2167ff", 0.5), true, true, 884, -2, 102, 2664, 1013, "SODIUM", "SULFATE");
  
  acidReact("sulfuric_acid", "salt", "acid", "sodium_sulfate_solution");
  acidReact("sulfuric_acid_gas", "salt", "acid", "sodium_sulfate_solution");
  acidReact("sulfuric_acid", "salt_water", "acid", "sodium_sulfate_solution");
  acidReact("sulfuric_acid_gas", "salt_water", "acid", "sodium_sulfate_solution");
  
  eListAddIon("BORON", "boric_acid", "base");
  eListAddIon("HYDROXIDE", "boric_acid", "base");
  eListAddIon("BORATE", "boric_acid", "acid");
  eListAddIon("HYDROGEN", "boric_acid", "acid");
  eListAdd("INSOLUBLE", "boric_acid");
  
  eListAddIon("BORON", "molten_boric_acid", "base");
  eListAddIon("HYDROXIDE", "molten_boric_acid", "base");
  eListAddIon("BORATE", "molten_boric_acid", "acid");
  eListAddIon("HYDROGEN", "molten_boric_acid", "acid");
  
  eListAdd("AMPHOTERIC", "boric_acid");
  eListAdd("AMPHOTERIC", "molten_boric_acid");
  
  eListAddIon("BORATE", "borax");
  eListAddIon("SODIUM", "borax");
  eListAdd("INSOLUBLE", "borax");
  
  eListAddIon("BORATE", "molten_borax");
  eListAddIon("SODIUM", "molten_borax");
  
  elements.boron = {
    color: ["#80736a", "#a2999c", "#5e5544", "#292d2c"],
    behavior: behaviors.WALL,
    category: "solids",
    density: 2080,
    state: "solid",
    tempHigh: 2076,
    fireColor: ["#34eb67", "#5ceb34"],
    reactions: {
      chlorine: { elem1: "boron_trichloride", elem2: null },
      liquid_chlorine: { elem1: "boron_trichloride", elem2: null },
      fluorine: { elem1: "boron_trifluoride", elem2: null },
      liquid_fluorine: { elem1: "boron_trifluoride", elem2: null },
    },
  };
  
  elements.fluorine.ignore.push("boron", "molten_boron");
  elements.liquid_fluorine.ignore.push("boron", "molten_boron");
  
  elements.boron_trioxide = {
    color: "#c6c5c7",
    behavior: behaviors.POWDER,
    category: "powders",
    density: 2550,
    state: "solid",
    hidden: true,
    tempHigh: 450,
    fireColor: ["#34eb67", "#5ceb34"],
  };
  
  eListAddIon("BORON", "boron_trioxide");
  eListAddIon("OXIDE", "boron_trioxide");
  eListAdd("INSOLUBLE", "boron_trioxide");
  
  eListAddIon("BORON", "molten_boron_trioxide");
  eListAddIon("OXIDE", "molten_boron_trioxide");
  
  elements.molten_boron_trioxide = {
    reactions: {
      chlorine: { elem1: "boron_trichloride", elem2: null },
    },
  };
  
  acidReact("sulfuric_acid", "borax", "boron_trioxide", "sodium_sulfate", 200);
  acidReact("sulfuric_acid_gas", "borax", "boron_trioxide", "sodium_sulfate", 200);
  
  acidReact("hydrofluoric_acid", "boron_trioxide", "boron_trifluoride", "fire", 0);
  acidReact("hydrofluoric_acid_gas", "boron_trioxide", "boron_trifluoride", "fire", 0);
  
  acidReact("hydrogen_fluoride", "boron_trioxide", "boron_trifluoride", "fire", 0);
  acidReact("liquid_hydrogen_fluoride", "boron_trioxide", "boron_trifluoride", "fire", 0);
  
  elements.boron_trifluoride = {
    color: "#d5d9ce",
    behavior: behaviors.GAS,
    category: "gases",
    density: 2.76,
    state: "gas",
    hidden: true,
    tempLow: -100.3,
    reactions: {
      steam: { elem1: "fluoroboric_acid_gas", elem2: "boric_acid" },
    },
  };
  
  eListAddIon("BORON", "boron_trifluoride");
  eListAddIon("FLUORIDE", "boron_trifluoride");
  eListAdd("INSOLUBLE", "boron_trifluoride");
  
  runAfterLoad(function () {
    reactList("boron_trifluoride", eLists.WATER, { elem1: "fluoroboric_acid", elem2: "boric_acid" });
  });
  
  elements.liquid_boron_trifluoride = {
    tempLow: -126.8,
  };
  
  eListAddIon("BORON", "liquid_boron_trifluoride");
  eListAddIon("FLUORIDE", "liquid_boron_trifluoride");
  eListAddIon("BORON", "boron_trifluoride_ice");
  eListAddIon("FLUORIDE", "boron_trifluoride_ice");
  
  elements.boron_trichloride = {
    color: "#ddf0dd",
    behavior: behaviors.GAS,
    category: "gases",
    density: 4.9,
    state: "gas",
    hidden: true,
    tempLow: 12.6,
    reactions: {
      steam: { elem1: "acid_gas", elem2: "boric_acid" },
      hydrogen: { elem1: "boron", elem2: "acid_gas" },
    },
  };
  
  eListAddIon("BORON", "boron_trichloride");
  eListAddIon("CHLORIDE", "boron_trichloride");
  eListAddIon("BORON", "liquid_boron_trichloride");
  eListAddIon("CHLORIDE", "liquid_boron_trichloride");
  eListAddIon("BORON", "boron_trichloride_ice");
  eListAddIon("CHLORIDE", "boron_trichloride_ice");
  eListAdd("INSOLUBLE", "boron_trichloride");
  
  runAfterLoad(function () {
    reactList("boron_trichloride", eLists.WATER, { elem1: "acid", elem2: "boric_acid" });
  });
  
  elements.liquid_boron_trichloride = {
    tempLow: -107.3,
  };
  
  runAfterLoad(function () {
    reactList("fluoroboric_acid", eLists.WATER, { elem2: "dirty_water" });
    reactList("fluoroboric_acid_gas", eLists.WATER, { elem2: "dirty_water" });
    delete elements.fluoroboric_acid.reactions["dirty_water"];
    delete elements.fluoroboric_acid_gas.reactions["dirty_water"];
  });
  
  createAcid("fluoroboric_acid", {}, {}, ["#3bffdb", "#00caaf", "#56c4a3"], true, true, 100, 100, 0, 1000, 1020, 1, "TETRAFLUOROBORATE");
  
  elements.fluoroboric_acid.ignore.push("boron_trifluoride", "liquid_boron_trifluoride", "boron_trifluoride_ice");
  elements.fluoroboric_acid_gas.ignore.push("boron_trifluoride", "liquid_boron_trifluoride", "boron_trifluoride_ice");
  elements.fluoroboric_acid.ignore.push("boric_acid", "molten_boric_acid");
  elements.fluoroboric_acid_gas.ignore.push("boric_acid", "molten_boric_acid");
  elements.fluoroboric_acid.tick = function (pixel) {
    let change = false;
    for (let i = -1; i <= 1; i++) {
      for (let j = -1; j <= 1; j++) {
        if (!(i === 0 && j === 0) && !isEmpty(pixel.x + i, pixel.y + j, true) && !elements[pixel.element].ignore.includes(pixelMap[pixel.x + i][pixel.y + j].element)) {
          if (!elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness || Math.random() > elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness) {
            changePixel(pixelMap[pixel.x + i][pixel.y + j], "fire");
            change = true;
          }
        }
      }
    }
    if (change) {
      if (Math.random() < 0.2) {
        changePixel(pixel, "boron_trifluoride");
      } else {
        deletePixel(pixel.x, pixel.y);
        return;
      }
    } else {
      behaviors.LIQUID(pixel);
    }
  };
  
  delete elements.fluoroboric_acid.behavior;
  
  elements.fluoroboric_acid_gas.tick = function (pixel) {
    let change = false;
    for (let i = -1; i <= 1; i++) {
      for (let j = -1; j <= 1; j++) {
        if (!(i === 0 && j === 0) && !isEmpty(pixel.x + i, pixel.y + j, true) && !elements[pixel.element].ignore.includes(pixelMap[pixel.x + i][pixel.y + j].element)) {
          if (!elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness || Math.random() > elements[pixelMap[pixel.x + i][pixel.y + j].element].hardness) {
            changePixel(pixelMap[pixel.x + i][pixel.y + j], "fire");
            change = true;
          }
        }
      }
    }
    if (change) {
      if (Math.random() < 0.2) {
        changePixel(pixel, "boron_trifluoride");
      } else {
        deletePixel(pixel.x, pixel.y);
        return;
      }
    } else {
      behaviors.GAS(pixel);
    }
  };
  
  elements.fluoroboric_acid_gas.behavior = ["XX|XX|XX", "XX|XX|XX", "XX|XX|XX"];
  
  elements.fluoroboric_acid.ignore.push("molten_boric_acid");
  elements.fluoroboric_acid_gas.ignore.push("molten_boric_acid");
  
  eLists.ACID.push("fluoroboric_acid");
  eLists.ACIDGAS.push("fluoroboric_acid_gas");
  
  acidReact("fluoroboric_acid", "sodium_carbonate", "sodium_tetrafluoroborate", ["carbon_dioxide,steam"], 50);
  acidReact("fluoroboric_acid_gas", "sodium_carbonate", "sodium_tetrafluoroborate", ["carbon_dioxide,steam"], 50);
  acidReact("fluoroboric_acid", "sodium_carbonate_solution", "sodium_tetrafluoroborate", ["seltzer,steam"], 50);
  acidReact("fluoroboric_acid_gas", "sodium_carbonate_solution", "sodium_tetrafluoroborate", ["seltzer,steam"], 50);
  
  behaviors.CAUSTIC = ["XX|DB%5|XX", "DB%5|XX|DB%5", "DB%5 AND M2|DB%10 AND M1|DB%5 AND M2"];
  behaviors.MOLTEN_CAUSTIC = ["XX|DB%5 AND CR:fire%2.5|XX", "DB%5 AND M2|XX|DB%5 AND M2", "DB%5 AND M2|DB%10 AND M1|DB%5 AND M2"];
  elements.sodium_hydride = {
    color: ["#9e9e9e", "#4f4f4f", "#616161", "#454545"],
    tempHigh: 638,
    stateHigh: ["sodium", "hydrogen"],
    behavior: behaviors.CAUSTIC,
    fireColor: "#ffff00",
    reactions: {
      chlorine: { elem1: "salt", elem2: "acid_gas" },
      vinegar: { elem1: "sodium_acetate", elem2: null, attr1: { foam: 15 } },
    },
    category: "powders",
    state: "solid",
    hidden: true,
    density: 1390,
    burn: 75,
    burnTime: 120,
  };
  
  eListAddIon("SODIUM", "sodium_hydride", "base");
  eListAddIon("HYDRIDE", "sodium_hydride", "base");
  eListAdd("INSOLUBLE", "sodium_hydride");
  
  runAfterLoad(function () {
    reactList("sodium_hydride", eLists.WATER, { elem1: ["pop", "pop", "hydrogen", "hydrogen"], chance: 0.1, temp2: 250 });
  });
  
  eLists.CAUSTIC.push("sodium_hydride");
  elements.sodium_hydride.ignore = defaultAcidIgnore.concat(eLists.CAUSTICIGNORE).concat(["sodium", "molten_sodium", "hydrogen"]);
  acidIgnore(["sodium_hydride"]);
  
  elements.molten_sodium.reactions.hydrogen = { elem1: "sodium_hydride", elem2: null };
  
  elements.methanol.reactions.sodium = { elem1: "sodium_methoxide", elem2: "hydrogen", temp1: 200, temp2: 200 };
  elements.methanol.reactions.molten_sodium = { elem1: "sodium_methoxide", elem2: "hydrogen", temp1: 200, temp2: 200 };
  
  elements.sodium_methoxide = {
    color: ["#c4c4c4", "#8c8c8c", "#ababab", "#787878"],
    tempHigh: 127,
    behavior: behaviors.CAUSTIC,
    fireColor: "#ffff00",
    category: "powders",
    state: "solid",
    hidden: true,
    density: 970,
    burn: 5,
    burnTime: 100,
    reactions: {
      water: { elem1: "methanol", elem2: "sodium_hydroxide" },
      salt_water: { elem1: "methanol", elem2: "sodium_hydroxide" },
      sugar_water: { elem1: "methanol", elem2: "sodium_hydroxide" },
      dirty_water: { elem1: "methanol", elem2: "sodium_hydroxide" },
      seltzer: { elem1: "methanol", elem2: "sodium_hydroxide" },
      pool_water: { elem1: "methanol", elem2: "sodium_hydroxide" },
      primordial_soup: { elem1: "methanol", elem2: "sodium_hydroxide" },
    },
  };
  
  eListAddIon("SODIUM", "sodium_methoxide", "base");
  eListAddIon("METHOXIDE", "sodium_methoxide", "base");
  eListAdd("INSOLUBLE", "sodium_methoxide");
  eListAddIon("SODIUM", "molten_sodium_methoxide", "base");
  eListAddIon("METHOXIDE", "molten_sodium_methoxide", "base");
  
  runAfterLoad(function () {
    reactList("sodium_methoxide", eLists.WATER, { elem1: "methanol", elem2: "sodium_hydroxide" });
  });
  
  elements.molten_sodium_methoxide = {
    behavior: behaviors.MOLTEN_CAUSTIC,
    tempLow: 127,
  };
  
  eLists.CAUSTIC.push("sodium_methoxide");
  eLists.CAUSTIC.push("molten_sodium_methoxide");
  elements.sodium_methoxide.ignore = defaultAcidIgnore.concat(eLists.CAUSTICIGNORE).concat(["sodium", "molten_sodium", "hydrogen", "methanol", "methanol_gas", "trimethyl_borate"]);
  elements.molten_sodium_methoxide.ignore = defaultAcidGasIgnore.concat(eLists.CAUSTICIGNORE).concat(["sodium", "molten_sodium", "hydrogen", "methanol", "methanol_gas", "trimethyl_borate"]);
  acidIgnore(["sodium_methoxide", "molten_sodium_methoxide"]);
  
  elements.trimethyl_borate = {
    color: "#c4bc89",
    tempHigh: 69,
    tempLow: -34,
    behavior: behaviors.LIQUID,
    reactions: {
      sodium_hydride: { elem1: "sodium_borohydride", elem2: "sodium_methoxide" },
    },
    category: "liquids",
    state: "liquid",
    hidden: true,
    density: 932,
    burn: 100,
    burnTime: 10,
    fireColor: ["#34eb67", "#5ceb34"],
  };
  
  createSalt("sodium_borohydride", "sodium_borohydride_solution", ["#d3d3de", "#c7c7eb", "#ededfc", "#d9d9d9"], ["#ababc7", "#9d9dd1", "#bdbddb", "#a8a8a8"], false, true, 400, -2, 102, 1070, 1005, "SODIUM", "BOROHYDRIDE");
  
  elements.sodium_borohydride.behavior = behaviors.CAUSTIC;
  elements.sodium_borohydride_solution.behavior = ["XX|DB%5|XX", "DB%5 AND M2|XX|DB%5 AND M2", "DB%5 AND M2|DB%10 AND M1|DB%5 AND M2"];
  elements.sodium_borohydride.fireColor = ["#34eb67", "#5ceb34"];
  elements.sodium_borohydride_solution.fireColor = ["#34eb67", "#5ceb34"];
  elements.sodium_borohydride.stateHigh = ["sodium_hydride", "sodium", "boron"];
  
  delete elements["molten_sodium_borohydride"];
  
  eLists.CAUSTIC.push("sodium_borohydride");
  eLists.CAUSTIC.push("sodium_borohydride_solution");
  elements.sodium_borohydride.ignore = defaultAcidIgnore.concat(eLists.CAUSTICIGNORE).concat(["sodium", "molten_sodium", "hydrogen", "boron", "trimethyl_borate"]);
  elements.sodium_borohydride_solution.ignore = defaultAcidIgnore.concat(eLists.CAUSTICIGNORE).concat(["sodium", "molten_sodium", "hydrogen", "boron", "trimethyl_borate"]);
  acidIgnore(["sodium_borohydride", "sodium_borohydride_solution"]);
  elements.sodium_hydride.ignore.push(["sodium", "molten_sodium", "hydrogen", "boron"]);
  
  createSalt("sodium_tetrafluoroborate", "sodium_tetrafluoroborate_solution", ["#deded3", "#ebebc7", "#fcfced", "#d9d9d9"], ["#ababb7", "#9d9dc1", "#bdbdcb", "#a8a898"], true, true, 384, -2, 102, 2470, 1012, "SODIUM", "TETRAFLUOROBORATE");
  
  elements.sodium_tetrafluoroborate.stateHigh = ["sodium_fluoride", "boron_trifluoride"];
  elements.sodium_tetrafluoroborate.fireColor = ["#34eb67", "#5ceb34"];
  
  delete elements["molten_sodium_tetrafluoroborate"];
  
  elements.fluoroboric_acid.ignore.push("sodium_tetrafluoroborate", "sodium_tetrafluoroborate_solution");
  elements.fluoroboric_acid_gas.ignore.push("sodium_tetrafluoroborate", "sodium_tetrafluoroborate_solution");
  
  acidReact("sodium_hydride", "boron_trifluoride", "diborane", "sodium_tetrafluoroborate", 20);
  acidReact("sulfuric_acid", "sodium_borohydride", "diborane", "hydrogen", 50);
  
  elements.diborane = {
    color: "#ffcac9",
    tempLow: -92.5,
    behavior: behaviors.GAS,
    fireColor: ["#34eb67", "#5ceb34"],
    category: "gases",
    state: "gas",
    density: 1.131,
    burn: 100,
    burnTime: 20,
    burnInto: "boron_trioxide",
    reactions: {
      oxygen: { elem1: "boron_trioxide", elem2: "fire" },
      water: { elem1: "boric_acid", elem2: "hydrogen", temp1: 100 },
      salt_water: { elem1: "boric_acid", elem2: "hydrogen", temp1: 100 },
      sugar_water: { elem1: "boric_acid", elem2: "hydrogen", temp1: 100 },
      dirty_water: { elem1: "boric_acid", elem2: "hydrogen", temp1: 100 },
      seltzer: { elem1: "boric_acid", elem2: "hydrogen", temp1: 100 },
      pool_water: { elem1: "boric_acid", elem2: "hydrogen", temp1: 100 },
      primordial_soup: { elem1: "boric_acid", elem2: "hydrogen", temp1: 100 },
    },
    tempHigh: 200,
    stateHigh: ["pentaborane", "pentaborane", "decaborane"],
  };
  
  runAfterLoad(function () {
    reactList("diborane", eLists.WATER, { elem1: "boric_acid", elem2: "hydrogen", temp1: 100 });
  });
  
  elements.liquid_diborane = {
    tempLow: -164,
  };
  
  elements.decaborane = {
    color: "#d9cece",
    tempHigh: 98,
    behavior: behaviors.POWDER,
    fireColor: ["#34eb67", "#5ceb34"],
    category: "powders",
    state: "solid",
    hidden: true,
    density: 940,
    burn: 100,
    burnTime: 100,
    burnInto: "boron_trioxide",
    reactions: {
      oxygen: { elem1: "boron_trioxide", elem2: "fire" },
    },
  };
  runAfterLoad(function () {
    reactList("decaborane", eLists.WATER, { elem1: "boric_acid", elem2: "hydrogen", temp1: 100 });
  });
  
  elements.molten_decaborane = {
    behavior: behaviors.LIQUID,
    tempLow: 98,
    burn: 100,
    burnTime: 1000,
    burnInto: "boron_trioxide",
    reactions: {
      oxygen: { elem1: "boron_trioxide", elem2: "fire" },
    },
    fireColor: ["#34eb67", "#5ceb34"],
    category: "liquids",
    state: "liquid",
    hidden: true,
    density: 900,
  };
  
  runAfterLoad(function () {
    reactList("molten_decaborane", eLists.WATER, { elem1: "boric_acid", elem2: "hydrogen", temp1: 100 });
  });
  
  elements.pentaborane = {
    color: "#f7b5b5",
    tempHigh: 60.1,
    tempLow: -46.8,
    behavior: behaviors.LIQUID,
    fireColor: ["#34eb67", "#5ceb34"],
    category: "liquids",
    state: "liquid",
    hidden: true,
    density: 618,
    burn: 100,
    burnTime: 1,
    burnInto: "explosion",
    reactions: {
      oxygen: { elem1: "boron_trioxide", elem2: "explosion" },
    },
  };
  
  runAfterLoad(function () {
    reactList("pentaborane", eLists.WATER, { elem1: "boric_acid", elem2: "hydrogen", temp1: 100 });
  });
  
  elements.pentaborane_gas = {
    tempHigh: 250,
    stateHigh: "decaborane",
  };
  
  acidReact("sodium_borohydride", "boron_trifluoride", "sodium_octahydrotriborate", ["sodium_fluoride", "hydrogen"], 20);
  acidReact("hydrobromic_acid", "sodium_octahydrotriborate", "sodium_bromoheptahydrotriborate", "hydrogen", 20);
  
  elements.sodium_octahydrotriborate = {
    color: ["#ded3de", "#ebc7eb", "#fbedfb", "#e3cce3"],
    tempHigh: 500, //i have no idea
    behavior: behaviors.POWDER,
    fireColor: ["ffff00", "#34eb67", "#5ceb34"],
    category: "powders",
    state: "solid",
    hidden: true,
    density: 1070, //???
    burn: 5,
    burnTime: 10,
    burnInto: "boron_trioxide",
    stateHigh: "sodium_dodecaborate",
  };
  
  eListAddIon("SODIUM", "sodium_octahydrotriborate");
  eListAddIon("OCTAHYDROTRIBORATE", "sodium_octahydrotriborate");
  eListAdd("INSOLUBLE", "sodium_octahydrotriborate");
  
  elements.sodium_dodecaborate = {
    color: "#f5aef5",
    tempHigh: 700, //see above comment
    behavior: behaviors.POWDER,
    fireColor: ["ffff00", "#34eb67", "#5ceb34"],
    category: "powders",
    state: "solid",
    hidden: true,
    density: 1050, //guess
    burn: 1,
    burnTime: 10,
    burnInto: "boron_trioxide",
  };
  
  eListAddIon("SODIUM", "sodium_dodecaborate");
  eListAddIon("DODECABORATE", "sodium_dodecaborate");
  eListAdd("INSOLUBLE", "sodium_dodecaborate");
  eListAddIon("SODIUM", "molten_sodium_dodecaborate");
  eListAddIon("DODECABORATE", "molten_sodium_dodecaborate");
  
  elements.sodium_bromoheptahydrotriborate = {
    color: ["#ded9d3", "#ebd9c7", "#fbf4ed", "#e3d5cc"],
    tempHigh: 150, //idk
    behavior: behaviors.POWDER,
    fireColor: ["ffff00", "#34eb67", "#5ceb34"],
    category: "powders",
    state: "solid",
    hidden: true,
    density: 1090, //idk
    burn: 5,
    burnTime: 10,
    burnInto: "boron_trioxide",
    stateHigh: ["pentaborane", "sodium_bromide", "hydrogen"],
  };
  
  eListAddIon("SODIUM", "sodium_bromoheptahydrotriborate");
  eListAddIon("BROMOHEPTAHYDROTRIBORATE", "sodium_bromoheptahydrotriborate");
  eListAdd("INSOLUBLE", "sodium_bromoheptahydrotriborate");
  
  //elements.indium = {
  //
  //}
  
  //quit snooping around
  
  elements.uraninite = {
    color: ["#545323", "#50573b", "#656660", "#4d4933", "#615e4a", "#525043"],
    behavior: ["XX|CR:radiation%0.05|XX", "CR:radiation%0.05|XX|CR:radiation%0.05", "M2|M1|M2"],
    tempHigh: 2865,
    category: "land",
    state: "solid",
    density: 10970,
  };
  
  elements.yellowcake = {
    color: ["#dbd827", "#bce346", "#a8c418", "#d9bb1a", "#dec418", "#cfb615"],
    behavior: ["XX|CR:radiation%0.05|XX", "CR:radiation%0.05|XX|CR:radiation%0.05", "M2|M1|M2"],
    tempHigh: 1150,
    category: "powders",
    hidden: true,
    state: "solid",
    density: 8300,
    reactions: {
      hydrogen: { elem1: ["uranium_dioxide", "uranium_dioxide", "uranium_dioxide", "uranium_dioxide", "thorium_dioxide"], elem2: "steam" },
    },
  };
  
  elements.yellowcake_solution = {
    color: "#d2ed6f",
    ignore: elements.sulfuric_acid.ignore.concat(eLists.CAUSTICIGNORE).concat(["radiation", "yellowcake", "uraninite"]),
    behavior: ["XX|DB%5 AND CR:radiation%0.05|XX", "DB%5 AND M2 AND CR:radiation%0.05|XX|DB%5 AND M2 AND CR:radiation%0.05", "DB%5 AND M2|DB%10 AND M1|DB%5 AND M2"],
    tempHigh: 337,
    category: "liquids",
    stateHigh: ["sulfuric_acid_gas", "yellowcake"],
    state: "liquid",
    hidden: true,
    density: 1850,
    reactions: {},
  };
  
  acidIgnore(["yellowcake_solution"]);
  eLists.CAUSTIC.push("yellowcake_solution");
  eLists.ACID.push("yellowcake_solution");
  
  acidReact("sulfuric_acid", "uraninite", "yellowcake_solution", null, 50);
  acidReact("sulfuric_acid_gas", "uraninite", "yellowcake", "sulfuric_acid_gas", 50);
  acidReact("sulfuric_acid", "yellowcake", "yellowcake_solution", "yellowcake_solution", 50);
  
  elements.alpha_particle = {
    color: "#ff7878",
    behavior: ["XX|XX|XX", "XX|CH:helium%0.01 AND DL%0.25|XX", "XX|XX|XX"],
    reactions: {
      electric: { elem1: null, elem2: "helium", temp2: 200 },
    },
    tick: behaviors.BOUNCY,
    temp: 35,
    category: "energy",
    state: "gas",
    density: 0.00012,
    ignoreAir: true,
  };
  
  elements.depleted_uranium = {
    color: ["#599e61", "#364d3c", "#494d4a", "#6c8a42", "#798d65", "#b5e089"],
    behavior: ["XX|CR:alpha_particle%0.01|XX", "CR:alpha_particle%0.01|CH:thorium%0.001|CR:alpha_particle%0.01", "M2|M1|M2"],
    reactions: {
      neutron: { elem2: null, func: depleted_uranium },
      oxygen: { elem1: "depleted_uranium_dioxide", elem2: null, chance: 0.1 },
      meat: { elem2: "rotten_meat", chance: 0.1 },
      cheese: { elem2: "rotten_cheese", chance: 0.1 },
      quark_matter: { elem1: "stable_uranium" },
    },
    tempHigh: 1132.2,
    category: "powders",
    hidden: true,
    state: "solid",
    density: 19100,
    hardness: 0.6,
    conduct: 0.235,
  };
  
  runAfterLoad(function () {
    reactList("depleted_uranium", eLists.WATER, { elem2: "dirty_water", chance: 0.25 });
    delete elements.depleted_uranium.reactions["dirty_water"];
  });
  
  elements.molten_depleted_uranium = {
    behavior: ["XX|CR:fire%2.5 AND CR:alpha_particle%0.01|XX", "M2 AND CR:alpha_particle%0.01|XX|M2 AND CR:alpha_particle%0.01", "M1|M1|M1"],
    reactions: {
      neutron: { elem2: null, func: depleted_uranium },
      quark_matter: { elem1: "stable_uranium" },
    },
  };
  
  elements.enriched_uranium = {
    color: ["#599e61", "#364d3c", "#494d4a", "#6c8a42", "#798d65", "#b5e089"],
    behavior: ["XX|CR:radiation%2.5 AND CR:alpha_particle%0.1|XX", "CR:radiation%2.5 AND CR:alpha_particle%0.1|CH:thorium%0.05 AND CH:protactinium%0.01|CR:radiation%2.5 AND CR:alpha_particle%0.1", "M2|M1|M2"],
    reactions: {
      neutron: { func: enriched_uranium, temp1: 150 },
      oxygen: { elem1: "enriched_uranium_dioxide", elem2: null, chance: 0.1 },
      meat: { elem2: "rotten_meat", chance: 0.1 },
      cheese: { elem2: "rotten_cheese", chance: 0.1 },
      quark_matter: { elem1: "stable_uranium" },
    },
    tempHigh: 1132.2,
    category: "powders",
    hidden: true,
    state: "solid",
    density: 19100,
    hardness: 0.6,
    conduct: 0.235,
    excludeRandom: true,
  };
  
  runAfterLoad(function () {
    reactList("enriched_uranium", eLists.WATER, { elem2: "dirty_water", chance: 0.25 });
    delete elements.enriched_uranium.reactions["dirty_water"];
  });
  
  runAfterLoad(function () {
    reactList("uranium", eLists.WATER, { elem2: "dirty_water", chance: 0.25 });
    delete elements.uranium.reactions["dirty_water"];
  });
  
  elements.molten_enriched_uranium = {
    behavior: ["XX|CR:fire%2.5 AND CR:radiation%2.5 AND CR:alpha_particle%0.1|XX", "M2 AND CR:radiation%2.5 AND CR:alpha_particle%0.1|XX|M2 AND CR:radiation%2.5 AND CR:alpha_particle%0.1", "M1|M1|M1"],
    reactions: {
      neutron: { func: enriched_uranium, temp1: 150 },
      quark_matter: { elem1: "stable_uranium" },
    },
    excludeRandom: true,
  };
  function enriched_uranium(pixel, p) {
    if (pixel.temp >= 500) {
      transmuteAround(pixel);
      changePixel(pixel, "n_explosion");
    }
    if (Math.random() < 0.1) {
      changePixel(pixel, "neptunium");
    }
    elementCircle(p.x, p.y, 2, "neutron");
  }
  
  function depleted_uranium(pixel) {
    if (Math.random() < 0.1) {
      changePixel(pixel, "plutonium");
    }
  }
  
  elements.stable_uranium = {
    color: [blendColors("#599e61", "#ff0000"), blendColors("#364d3c", "#00ff00"), blendColors("#494d4a", "#0000ff"), blendColors("#6c8a42", "#ff0000"), blendColors("#798d65", "#00ff00"), blendColors("#b5e089", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {
      oxygen: { elem1: "stable_uranium_dioxide", elem2: null, chance: 0.1 },
      meat: { elem2: "rotten_meat", chance: 0.1 },
      cheese: { elem2: "rotten_cheese", chance: 0.1 },
      water: { elem2: "dirty_water", chance: 0.25 },
    },
    tempHigh: 1132.2,
    category: "powders",
    hidden: true,
    state: "solid",
    density: 19100,
    hardness: 0.6,
    conduct: 0.235,
  };
  runAfterLoad(function () {
    reactList("stable_uranium", eLists.WATER, { elem2: "dirty_water", chance: 0.25 });
    delete elements.stable_uranium.reactions["dirty_water"];
  });
  
  elements.uranium.reactions["oxygen"] = { elem1: "uranium_dioxide", elem2: null, chance: 0.1 };
  elements.uranium.reactions["quark_matter"] = { elem1: "stable_uranium" };
  elements.uranium.behavior = ["XX|CR:radiation%1 AND CR:alpha_particle%0.01|XX", "CR:radiation%1 AND CR:alpha_particle%0.01|CH:thorium%0.001|CR:radiation%1 AND CR:alpha_particle%0.01", "M2|M1|M2"];
  elements.molten_uranium.behavior = ["XX|CR:fire%2.5 AND CR:radiation%1 AND CR:alpha_particle%0.01|XX", "M2 AND CR:radiation%1 AND CR:alpha_particle%0.01|XX|M2 AND CR:radiation%1 AND CR:alpha_particle%0.01", "M1|M1|M1"];
  elements.molten_uranium.reactions["quark_matter"] = { elem1: "stable_uranium" };
  elements.molten_uranium.excludeRandom = true;
  
  eListAddIon("URANIUMIV", "uranium_dioxide");
  eListAddIon("OXIDE", "uranium_dioxide");
  eListAdd("INSOLUBLE", "uranium_dioxide");
  eListAddIon("ENRICHEDURANIUMIV", "enriched_uranium_dioxide");
  eListAddIon("OXIDE", "enriched_uranium_dioxide");
  eListAdd("INSOLUBLE", "enriched_uranium_dioxide");
  eListAddIon("DEPLETEDURANIUMIV", "depleted_uranium_dioxide");
  eListAddIon("OXIDE", "depleted_uranium_dioxide");
  eListAdd("INSOLUBLE", "depleted_uranium_dioxide");
  eListAddIon("STABLEURANIUMIV", "stable_uranium_dioxide");
  eListAddIon("OXIDE", "stable_uranium_dioxide");
  eListAdd("INSOLUBLE", "stable_uranium_dioxide");
  
  elements.uranium_dioxide = {
    color: ["#474744", "#21211f", "#2b2b2b", "#9c998c", "#40403f", "#24231d"],
    behavior: ["XX|CR:radiation%0.05|XX", "CR:radiation%0.05|XX|CR:radiation%0.05", "M2|M1|M2"],
    reactions: {
      neutron: { temp1: 25 },
    },
    tempHigh: 2865,
    category: "powders",
    state: "solid",
    density: 10970,
  };
  
  elements.molten_uranium_dioxide = {
    behavior: ["XX|CR:fire%2.5 AND CR:radiation%0.05|XX", "M2 AND CR:radiation%0.05|XX|M2 AND CR:radiation%0.05", "M1|M1|M1"],
    reactions: {
      neutron: { temp1: 25 },
    },
  };
  
  elements.depleted_uranium_dioxide = {
    color: ["#474744", "#21211f", "#2b2b2b", "#9c998c", "#40403f", "#24231d"],
    behavior: behaviors.POWDER,
    reactions: {
      neutron: { elem2: null },
    },
    tempHigh: 2865,
    category: "powders",
    hidden: true,
    state: "solid",
    density: 10970,
  };
  
  elements.stable_uranium_dioxide = {
    color: [blendColors("#474744", "#ff0000"), blendColors("#21211f", "#00ff00"), blendColors("#2b2b2b", "#0000ff"), blendColors("#9c998c", "#ff0000"), blendColors("#40403f", "#00ff00"), blendColors("#24231d", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {
      neutron: { elem2: null },
    },
    tempHigh: 2865,
    category: "powders",
    hidden: true,
    state: "solid",
    density: 10970,
  };
  
  elements.enriched_uranium_dioxide = {
    color: ["#474744", "#21211f", "#2b2b2b", "#9c998c", "#40403f", "#24231d"],
    behavior: ["XX|CR:radiation%0.25|XX", "CR:radiation%0.25|XX|CR:radiation%0.25", "M2|M1|M2"],
    reactions: {
      neutron: {
        func: function (pixel, p) {
          if (pixel.temp >= 500) {
            transmuteAround(pixel);
            changePixel(pixel, "n_explosion");
          }
          elementCircle(p.x, p.y, 2, "neutron");
        },
        temp1: 150,
      },
    },
    tempHigh: 2865,
    category: "powders",
    hidden: true,
    state: "solid",
    density: 10970,
    excludeRandom: true,
  };
  
  elements.molten_enriched_uranium_dioxide = {
    behavior: ["XX|CR:fire%2.5 AND CR:radiation%0.25|XX", "M2 AND CR:radiation%0.25|XX|M2 AND CR:radiation%0.25", "M1|M1|M1"],
    reactions: {
      neutron: {
        func: function (pixel, p) {
          transmuteAround(pixel);
          changePixel(pixel, "n_explosion");
          elementCircle(p.x, p.y, 2, "neutron");
        },
      },
    },
    excludeRandom: true,
  };
  
  function reduce(element, element2, result) {
    if (element2 === "oxygen") {
      Object.assign(elements[element].reactions, {
        molten_magnesium: { elem1: result, elem2: "magnesium_oxide" },
        molten_calcium: { elem1: result, elem2: "quicklime" },
        //"molten_sodium": { elem1: result, elem2: "sodium_oxide"},
      });
    }
    if (element2 === "fluorine") {
      Object.assign(elements[element].reactions, {
        molten_magnesium: { elem1: result, elem2: "magnesium_fluoride" },
        molten_calcium: { elem1: result, elem2: "fluorite" },
        molten_sodium: { elem1: result, elem2: "sodium_fluoride" },
        molten_potassium: { elem1: result, elem2: "potassium_fluoride" },
      });
    }
  }
  
  reduce("uranium_dioxide", "oxygen", "uranium");
  reduce("enriched_uranium_dioxide", "oxygen", "enriched_uranium");
  reduce("depleted_uranium_dioxide", "oxygen", "depleted_uranium");
  reduce("stable_uranium_dioxide", "oxygen", "stable_uranium");
  
  acidReact("hydrofluoric_acid", "uranium_dioxide", "uranium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid", "depleted_uranium_dioxide", "depleted_uranium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid", "enriched_uranium_dioxide", "enriched_uranium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid", "stable_uranium_dioxide", "stable_uranium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid_gas", "uranium_dioxide", "uranium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid_gas", "depleted_uranium_dioxide", "depleted_uranium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid_gas", "enriched_uranium_dioxide", "enriched_uranium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid_gas", "stable_uranium_dioxide", "stable_uranium_tetrafluoride", "fire");
  acidReact("hydrogen_fluoride", "uranium_dioxide", "uranium_tetrafluoride", "fire");
  acidReact("hydrogen_fluoride", "depleted_uranium_dioxide", "depleted_uranium_tetrafluoride", "fire");
  acidReact("hydrogen_fluoride", "enriched_uranium_dioxide", "enriched_uranium_tetrafluoride", "fire");
  acidReact("hydrogen_fluoride", "stable_uranium_dioxide", "stable_uranium_tetrafluoride", "fire");
  acidReact("liquid_hydrogen_fluoride", "uranium_dioxide", "uranium_tetrafluoride", "fire");
  acidReact("liquid_hydrogen_fluoride", "depleted_uranium_dioxide", "depleted_uranium_tetrafluoride", "fire");
  acidReact("liquid_hydrogen_fluoride", "enriched_uranium_dioxide", "enriched_uranium_tetrafluoride", "fire");
  acidReact("liquid_hydrogen_fluoride", "stable_uranium_dioxide", "stable_uranium_tetrafluoride", "fire");
  
  elements.hydrofluoric_acid.ignore.push("uranium_hexafluoride", "enriched_uranium_hexafluoride", "depleted_uranium_hexafluoride", "stable_uranium_hexafluoride");
  elements.hydrofluoric_acid_gas.ignore.push("uranium_hexafluoride", "enriched_uranium_hexafluoride", "depleted_uranium_hexafluoride", "stable_uranium_hexafluoride");
  elements.hydrogen_fluoride.ignore.push("uranium_hexafluoride", "enriched_uranium_hexafluoride", "depleted_uranium_hexafluoride", "stable_uranium_hexafluoride");
  elements.liquid_hydrogen_fluoride.ignore.push("uranium_hexafluoride", "enriched_uranium_hexafluoride", "depleted_uranium_hexafluoride", "stable_uranium_hexafluoride");
  
  eListAddIon("URANIUMIV", "uranium_tetrafluoride");
  eListAddIon("FLUORIDE", "uranium_tetrafluoride");
  eListAdd("INSOLUBLE", "uranium_tetrafluoride");
  eListAddIon("ENRICHEDURANIUMIV", "enriched_uranium_tetrafluoride");
  eListAddIon("FLUORIDE", "enriched_uranium_tetrafluoride");
  eListAdd("INSOLUBLE", "enriched_uranium_tetrafluoride");
  eListAddIon("DEPLETEDURANIUMIV", "depleted_uranium_tetrafluoride");
  eListAddIon("FLUORIDE", "depleted_uranium_tetrafluoride");
  eListAdd("INSOLUBLE", "depleted_uranium_tetrafluoride");
  eListAddIon("STABLEURANIUMIV", "stable_uranium_tetrafluoride");
  eListAddIon("FLUORIDE", "stable_uranium_tetrafluoride");
  eListAdd("INSOLUBLE", "stable_uranium_tetrafluoride");
  
  elements.uranium_tetrafluoride = {
    color: ["#495747", "#394d38", "#5a7859"],
    behavior: ["XX|CR:radiation%0.05|XX", "CR:radiation%0.05|XX|CR:radiation%0.05", "M2|M1|M2"],
    reactions: {},
    tempHigh: 1036,
    category: "powders",
    state: "solid",
    density: 6700,
    hidden: true,
  };
  
  elements.molten_uranium_tetrafluoride = {
    behavior: ["XX|CR:fire%2.5 AND CR:radiation%0.05|XX", "M2 AND CR:radiation%0.05|XX|M2 AND CR:radiation%0.05", "M1|M1|M1"],
  };
  
  elements.depleted_uranium_tetrafluoride = {
    color: ["#495747", "#394d38", "#5a7859"],
    behavior: behaviors.POWDER,
    reactions: {},
    tempHigh: 1036,
    category: "powders",
    state: "solid",
    density: 6700,
    hidden: true,
  };
  
  elements.stable_uranium_tetrafluoride = {
    color: [blendColors("#495747", "#ff0000"), blendColors("#394d38", "#00ff00"), blendColors("#5a7859", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {},
    tempHigh: 1036,
    category: "powders",
    state: "solid",
    density: 6700,
    hidden: true,
  };
  
  elements.enriched_uranium_tetrafluoride = {
    color: ["#495747", "#394d38", "#5a7859"],
    behavior: ["XX|CR:radiation%0.25|XX", "CR:radiation%0.25|XX|CR:radiation%0.25", "M2|M1|M2"],
    reactions: {},
    tempHigh: 1036,
    category: "powders",
    state: "solid",
    density: 6700,
    hidden: true,
  };
  
  elements.molten_enriched_uranium_tetrafluoride = {
    behavior: ["XX|CR:fire%2.5 AND CR:radiation%0.25|XX", "M2 AND CR:radiation%0.25|XX|M2 AND CR:radiation%0.25", "M1|M1|M1"],
  };
  
  acidReact("fluorine", "uranium_tetrafluoride", "uranium_hexafluoride", "fire");
  acidReact("fluorine", "depleted_uranium_tetrafluoride", "depleted_uranium_hexafluoride", "fire");
  acidReact("fluorine", "enriched_uranium_tetrafluoride", "enriched_uranium_hexafluoride", "fire");
  acidReact("fluorine", "stable_uranium_tetrafluoride", "stable_uranium_hexafluoride", "fire");
  acidReact("liquid_fluorine", "uranium_tetrafluoride", "uranium_hexafluoride", "fire");
  acidReact("liquid_fluorine", "depleted_uranium_tetrafluoride", "depleted_uranium_hexafluoride", "fire");
  acidReact("liquid_fluorine", "enriched_uranium_tetrafluoride", "enriched_uranium_hexafluoride", "fire");
  acidReact("liquid_fluorine", "stable_uranium_tetrafluoride", "stable_uranium_hexafluoride", "fire");
  
  reduce("uranium_tetrafluoride", "fluorine", "uranium");
  reduce("enriched_uranium_tetrafluoride", "fluorine", "enriched_uranium");
  reduce("depleted_uranium_tetrafluoride", "fluorine", "depleted_uranium");
  reduce("stable_uranium_tetrafluoride", "fluorine", "stable_uranium");
  
  eListAddIon("URANIUMVI", "uranium_hexafluoride");
  eListAddIon("FLUORIDE", "uranium_hexafluoride");
  eListAdd("INSOLUBLE", "uranium_hexafluoride");
  eListAddIon("ENRICHEDURANIUMVI", "enriched_uranium_hexafluoride");
  eListAddIon("FLUORIDE", "enriched_uranium_hexafluoride");
  eListAdd("INSOLUBLE", "enriched_uranium_hexafluoride");
  eListAddIon("DEPLETEDURANIUMVI", "depleted_uranium_hexafluoride");
  eListAddIon("FLUORIDE", "depleted_uranium_hexafluoride");
  eListAdd("INSOLUBLE", "depleted_uranium_hexafluoride");
  eListAddIon("STABLEURANIUMVI", "stable_uranium_hexafluoride");
  eListAddIon("FLUORIDE", "stable_uranium_hexafluoride");
  eListAdd("INSOLUBLE", "stable_uranium_hexafluoride");
  
  elements.uranium_hexafluoride = {
    color: "#f7fff7",
    behavior: ["XX|CR:radiation%0.05|XX", "CR:radiation%0.05|XX|CR:radiation%0.05", "M2|M1|M2"],
    reactions: {
      hydrogen: { elem1: "uranium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 56.5,
    category: "powders",
    state: "solid",
    density: 5090,
    stateHighName: "uranium_hexafluoride_gas",
    forceAutoGen: true,
    hidden: true,
  };
  
  elements.uranium_hexafluoride_gas = {
    behavior: behaviors.GAS,
    behavior2: [
      ["XX", "CR:radiation%0.05", "XX"],
      ["CR:radiation%0.05", "XX", "CR:radiation%0.05"],
      ["XX", "CR:radiation%0.05", "XX"],
    ],
    tick: function (pixel) {
      pixelTick(pixel, elements[pixel.element].behavior2);
    },
    state: "gas",
    density: 12.84,
    reactions: {
      hydrogen: { elem1: "uranium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    onCentrifuge: function (pixel) {
      if (Math.random() < 0.05) {
        if (Math.random() < 0.8) {
          changePixel(pixel, "depleted_uranium_hexafluoride");
        } else {
          changePixel(pixel, "enriched_uranium_hexafluoride");
        }
      }
    },
  };
  
  elements.depleted_uranium_hexafluoride = {
    color: "#f7fff7",
    behavior: behaviors.POWDER,
    reactions: {
      hydrogen: { elem1: "depleted_uranium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 56.5,
    category: "powders",
    state: "solid",
    density: 5090,
    stateHighName: "depleted_uranium_hexafluoride_gas",
    forceAutoGen: true,
    hidden: true,
  };
  
  elements.depleted_uranium_hexafluoride_gas = {
    behavior: behaviors.GAS,
    state: "gas",
    density: 12.84,
    reactions: {
      hydrogen: { elem1: "depleted_uranium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
  };
  
  elements.stable_uranium_hexafluoride = {
    color: [blendColors("#f7fff7", "#ff0000"), blendColors("#f7fff7", "#00ff00"), blendColors("#f7fff7", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {
      hydrogen: { elem1: "stable_uranium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 56.5,
    category: "powders",
    state: "solid",
    density: 5090,
    stateHighName: "stable_uranium_hexafluoride_gas",
    forceAutoGen: true,
    hidden: true,
  };
  
  elements.stable_uranium_hexafluoride_gas = {
    behavior: behaviors.GAS,
    state: "gas",
    density: 12.84,
    reactions: {
      hydrogen: { elem1: "stable_uranium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
  };
  
  elements.enriched_uranium_hexafluoride = {
    color: "#f7fff7",
    behavior: ["XX|CR:radiation%0.25|XX", "CR:radiation%0.25|XX|CR:radiation%0.25", "M2|M1|M2"],
    reactions: {
      hydrogen: { elem1: "enriched_uranium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 56.5,
    category: "powders",
    state: "solid",
    density: 5090,
    stateHighName: "enriched_uranium_hexafluoride_gas",
    forceAutoGen: true,
    hidden: true,
  };
  
  elements.enriched_uranium_hexafluoride_gas = {
    behavior: behaviors.GAS,
    behavior2: [
      ["XX", "CR:radiation%0.25", "XX"],
      ["CR:radiation%0.25", "XX", "CR:radiation%0.25"],
      ["XX", "CR:radiation%0.25", "XX"],
    ],
    tick: function (pixel) {
      pixelTick(pixel, elements[pixel.element].behavior2);
    },
    reactions: {
      hydrogen: { elem1: "enriched_uranium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    state: "gas",
    density: 12.84,
  };
  
  runAfterLoad(function () {
    reactList("uranium_hexafluoride", eLists.WATER, { elem1: "uranium_tetrafluoride", elem2: "hydrofluoric_acid" });
    reactList("depleted_uranium_hexafluoride", eLists.WATER, { elem1: "depleted_uranium_tetrafluoride", elem2: "hydrofluoric_acid" });
    reactList("enriched_uranium_hexafluoride", eLists.WATER, { elem1: "enriched_uranium_tetrafluoride", elem2: "hydrofluoric_acid" });
    reactList("stable_uranium_hexafluoride", eLists.WATER, { elem1: "stable_uranium_tetrafluoride", elem2: "hydrofluoric_acid" });
    reactList("uranium_hexafluoride_gas", eLists.WATER, { elem1: "uranium_tetrafluoride", elem2: "hydrofluoric_acid" });
    reactList("depleted_uranium_hexafluoride_gas", eLists.WATER, { elem1: "depleted_uranium_tetrafluoride", elem2: "hydrofluoric_acid" });
    reactList("enriched_uranium_hexafluoride_gas", eLists.WATER, { elem1: "enriched_uranium_tetrafluoride", elem2: "hydrofluoric_acid" });
    reactList("stable_uranium_hexafluoride_gas", eLists.WATER, { elem1: "stable_uranium_tetrafluoride", elem2: "hydrofluoric_acid" });
  });
  
  elements.radium = {
    color: "#3bdeff",
    behavior: ["XX|CR:radiation%10|XX", "CR:radiation%10|CH:radon%0.1|CR:radiation%10", "M2|M1|M2"],
    tick: function (pixel) {
      pixel.temp += 1;
    },
    reactions: {
      quark_matter: { elem1: "stable_radium" },
    },
    tempHigh: 700,
    category: "powders",
    state: "solid",
    density: 5500,
    conduct: 0.4,
  };
  
  runAfterLoad(function () {
    reactList("radium", eLists.WATER, { elem1: ["radium_water", "rad_pop"], elem2: ["hydrogen", "bubble"], chance: 0.05, temp2: 350, func: radiumWater });
  });
  
  elements.molten_radium = {
    behavior: ["XX|CR:radiation%10|XX", "M2 AND CR:radiation%10|CH:radon%0.01|M2 AND CR:radiation%10", "M1|M1|M1"],
    tick: function (pixel) {
      pixel.temp += 1;
    },
    reactions: {
      quark_matter: { elem1: "stable_radium" },
    },
    conduct: 0.4,
  };
  
  runAfterLoad(function () {
    reactList("molten_radium", eLists.WATER, { elem1: ["radium_water", "rad_pop"], elem2: ["hydrogen", "bubble"], chance: 0.05, temp2: 350, func: radiumWater });
  });
  
  function radiumWater(pixel) {
    elementCircle(pixel.x, pixel.y, 15, "radium_water", 0.1, eLists.WATER);
  }
  
  elements.radium_water = {
    color: "#3bc4ff",
    behavior: ["XX|CR:radiation%0.05|XX", "M2 AND CR:radiation%0.05|XX|M2 AND CR:radiation%0.05", "M1|M1|M1"],
    reactions: {
      head: { elem2: null, chance: 0.4 },
      bone: { elem2: ["quicklime", "quicklime"], chance: 0.4 },
      bone_marrow: { elem2: ["quicklime", "blood"], chance: 0.4 },
    },
    tempHigh: 100,
    stateHigh: "rad_steam",
    state: "liquid",
    density: 1100,
    category: "liquids",
    hidden: true,
    tempLow: 0,
  };
  
  eListAdd("WATER", "radium_water");
  
  elements.actinium = {
    color: "#62ebf0",
    behavior: ["XX|CR:alpha_particle%0.1 AND CR:radiation%10|XX", "CR:alpha_particle%0.1 AND CR:radiation%10|CH:radium%0.02|CR:alpha_particle%0.1 AND CR:radiation%10", "M2|M1|M2"],
    tick: function (pixel) {
      pixel.temp += 2.5;
    },
    reactions: {
      quark_matter: { elem1: "stable_actinium" },
    },
    tempHigh: 1227,
    category: "powders",
    state: "solid",
    density: 10000,
    conduct: 0.225,
  };
  elements.molten_actinium = {
    behavior: ["XX|CR:fire%2.5 AND CR:alpha_particle%0.1 AND CR:radiation%10|XX", "M2 AND CR:alpha_particle%0.1 AND CR:radiation%10|CH:radium%0.02|M2 AND CR:alpha_particle%0.1 AND CR:radiation%10", "M1|M1|M1"],
    tick: function (pixel) {
      pixel.temp += 2.5;
    },
    reactions: {
      quark_matter: { elem1: "stable_actinium" },
    },
    conduct: 0.225,
  };
  
  elements.thorium = {
    color: ["#599e8a", "#364d4b", "#494d4c", "#428a58", "#658d7a", "#89e0a2"],
    behavior: ["XX|CR:alpha_particle%0.01|XX", "CR:alpha_particle%0.01|CH:lead%0.001|CR:alpha_particle%0.01", "XX|CR:alpha_particle%0.01|XX"],
    reactions: {
      neutron: {
        temp1: 100,
        func: function (pixel, p) {
          if (Math.random() < 0.1) {
            changePixel(pixel, "radium");
            elementCircle(p.x, p.y, 2, "neutron");
          }
        },
      },
      oxygen: { elem1: "thorium_dioxide", elem2: null, chance: 0.1 },
      quark_matter: { elem1: "stable_thorium" },
    },
    tempHigh: 1750,
    category: "solids",
    state: "solid",
    density: 11700,
    hardness: 0.7,
    conduct: 0.235,
  };
  elements.molten_thorium = {
    behavior: ["XX|CR:alpha_particle%0.01|XX", "M2 AND CR:alpha_particle%0.01|XX|M2 AND CR:alpha_particle%0.01", "M1|M1|M1"],
    reactions: {
      neutron: {
        temp1: 100,
        func: function (pixel, p) {
          if (Math.random() < 0.1) {
            changePixel(pixel, "radium");
            elementCircle(p.x, p.y, 2, "neutron");
          }
        },
      },
      oxygen: { elem1: "thorium_dioxide", elem2: null },
      quark_matter: { elem1: "stable_thorium" },
    },
  };
  
  elements.protactinium = {
    color: ["#9899a3", "#44464a", "#5a5b5e"],
    behavior: ["XX|CR:alpha_particle%0.01 AND CR:radiation%2|XX", "CR:alpha_particle%0.01 AND CR:radiation%2|CH:actinium%0.01|CR:alpha_particle%0.01 AND CR:radiation%2", "M2|M1|M2"],
    reactions: {
      quark_matter: { elem1: "stable_protactinium" },
    },
    tempHigh: 1568,
    category: "powders",
    state: "solid",
    density: 15700,
    hardness: 0.1,
    conduct: 0.235,
  };
  
  elements.molten_protactinium = {
    behavior: ["XX|CR:fire%2.5 AND CR:alpha_particle%0.01 AND CR:radiation%2|XX", "M2 AND CR:alpha_particle%0.01 AND CR:radiation%2|CH:actinium%0.01|M2 AND CR:alpha_particle%0.01 AND CR:radiation%2", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_protactinium" },
    },
  };
  
  elements.neptunium = {
    color: ["#626580", "#3f4a61", "#4a5463"],
    behavior: ["XX|CR:neutron%0.1 AND CR:radiation%2|XX", "CR:neutron%0.1 AND CR:radiation%2|CH:thorium%0.025|CR:neutron%0.1 AND CR:radiation%2", "XX|CR:neutron%0.1 AND CR:radiation%2|XX"],
    reactions: {
      quark_matter: { elem1: "stable_neptunium" },
      neutron: { func: fissile, temp1: 150 },
    },
    tempHigh: 639,
    category: "solids",
    state: "solid",
    density: 19380,
    hardness: 0.7,
    conduct: 0.2,
    excludeRandom: true,
  };
  
  elements.molten_neptunium = {
    behavior: ["XX|CR:fire%2.5 AND CR:neutron%0.1 AND CR:radiation%2|XX", "M2 AND CR:neutron%0.1 AND CR:radiation%2|CH:thorium%0.025|M2 AND CR:neutron%0.1 AND CR:radiation%2", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_neptunium" },
      neutron: { func: fissile, temp1: 150 },
    },
  };
  
  function fissile(pixel, p) {
    if (pixel.temp >= 500) {
      transmuteAround(pixel);
      changePixel(pixel, "n_explosion");
    }
    elementCircle(p.x, p.y, 2, "neutron");
  }
  
  elements.plutonium = {
    color: ["#5fc29f", "#5d9e7d", "#5b7d6b"],
    behavior: ["XX|CR:alpha_particle%0.05 AND CR:radiation%2|XX", "CR:alpha_particle%0.05 AND CR:radiation%2|CH:enriched_uranium%0.025 AND CH:americium%0.025|CR:alpha_particle%0.05 AND CR:radiation%2", "XX|CR:alpha_particle%0.05 AND CR:radiation%2|XX"],
    reactions: {
      oxygen: { elem1: "plutonium_dioxide", elem2: null },
      quark_matter: { elem1: "stable_plutonium" },
      neutron: { func: plutonium, temp1: 100 },
    },
    tempHigh: 639,
    category: "solids",
    state: "solid",
    density: 19850,
    hardness: 0.7,
    conduct: 0.2,
    excludeRandom: true,
  };
  
  elements.molten_plutonium = {
    behavior: ["XX|CR:fire%2.5 AND CR:alpha_particle%0.05 AND CR:radiation%2|XX", "M2 AND CR:alpha_particle%0.05 AND CR:radiation%2|CH:enriched_uranium%0.025|M2 AND CR:alpha_particle%0.05 AND CR:radiation%2", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_plutonium" },
      neutron: { func: plutonium, temp1: 100 },
    },
    excludeRandom: true,
  };
  
  elements.enriched_plutonium = {
    color: ["#5fc29f", "#5d9e7d", "#5b7d6b"],
    behavior: ["XX|CR:alpha_particle%0.05 AND CR:radiation%2|XX", "CR:alpha_particle%0.05 AND CR:radiation%2|CH:enriched_uranium%0.05|CR:alpha_particle%0.05 AND CR:radiation%2", "XX|CR:alpha_particle%0.05 AND CR:radiation%2|XX"],
    reactions: {
      oxygen: { elem1: "enriched_plutonium_dioxide", elem2: null },
      quark_matter: { elem1: "stable_plutonium" },
      neutron: { func: plutonium, temp1: 150 },
    },
    tempHigh: 639,
    category: "solids",
    state: "solid",
    density: 19850,
    hardness: 0.7,
    conduct: 0.2,
    excludeRandom: true,
  };
  
  elements.molten_enriched_plutonium = {
    behavior: ["XX|CR:fire%2.5 AND CR:alpha_particle%0.05 AND CR:radiation%2|XX", "M2 AND CR:alpha_particle%0.05 AND CR:radiation%2|CH:enriched_uranium%0.025|M2 AND CR:alpha_particle%0.05 AND CR:radiation%2", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_plutonium" },
      neutron: { func: plutonium, temp1: 150 },
    },
    excludeRandom: true,
  };
  
  elements.depleted_plutonium = {
    color: ["#5fc29f", "#5d9e7d", "#5b7d6b"],
    behavior: ["XX|CR:radiation%2|XX", "CR:radiation%2|CH:enriched_uranium%0.05|CR:radiation%2", "XX|CR:radiation%2|XX"],
    reactions: {
      oxygen: { elem1: "depleted_plutonium_dioxide", elem2: null },
      quark_matter: { elem1: "stable_plutonium" },
      neutron: { func: depleted_plutonium, temp1: 25 },
    },
    tempHigh: 639,
    category: "solids",
    state: "solid",
    density: 19850,
    hardness: 0.7,
    conduct: 0.2,
    excludeRandom: true,
  };
  
  elements.molten_depleted_plutonium = {
    behavior: ["XX|CR:fire%2.5 AND CR:radiation%2|XX", "M2 AND CR:radiation%2|CH:enriched_uranium%0.025|M2 AND CR:radiation%2", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_plutonium" },
      neutron: { func: plutonium, temp1: 25 },
    },
  };
  
  elements.stable_plutonium = {
    color: [blendColors("#5fc29f", "#ff0000"), blendColors("#5d9e7d", "#00ff00"), blendColors("#5b7d6b", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {
      oxygen: { elem1: "stable_plutonium_dioxide", elem2: null },
    },
    tempHigh: 639,
    category: "solids",
    state: "solid",
    density: 19850,
    hardness: 0.7,
    conduct: 0.2,
    hidden: true,
  };
  
  function plutonium(pixel, p) {
    if (pixel.temp >= 500) {
      transmuteAround(pixel);
      changePixel(pixel, "n_explosion");
      elementCircle(p.x, p.y, 5, "neutron");
    }
    if (Math.random() < 0.1) {
      changePixel(pixel, "americium");
    }
    elementCircle(p.x, p.y, 2, "neutron");
  }
  
  function depleted_plutonium(pixel, p) {
    if (pixel.temp >= 500) {
      transmuteAround(pixel);
      changePixel(pixel, "n_explosion");
      elementCircle(p.x, p.y, 5, "neutron");
    }
    if (Math.random() < 0.1) {
      changePixel(pixel, "americium");
    }
  }
  
  runAfterLoad(function () {
    reactList("plutonium", eLists.WATER, { elem2: "dirty_water", chance: 0.25 });
    delete elements.plutonium.reactions["dirty_water"];
    reactList("enriched_plutonium", eLists.WATER, { elem2: "dirty_water", chance: 0.25 });
    delete elements.plutonium.reactions["dirty_water"];
    reactList("depleted_plutonium", eLists.WATER, { elem2: "dirty_water", chance: 0.25 });
    delete elements.plutonium.reactions["dirty_water"];
    reactList("stable_plutonium", eLists.WATER, { elem2: "dirty_water", chance: 0.25 });
    delete elements.stable_plutonium.reactions["dirty_water"];
  });
  
  elements.plutonium_dioxide = {
    color: ["#edcf47", "#c7a924", "#e3c129"],
    behavior: ["XX|CR:radiation%0.25|XX", "CR:radiation%0.25|XX|CR:radiation%0.25", "M2|M1|M2"],
    reactions: {
      neutron: {
        func: function (pixel, p) {
          if (pixel.temp >= 500) {
            transmuteAround(pixel);
            changePixel(pixel, "n_explosion");
          }
          elementCircle(p.x, p.y, 2, "neutron");
        },
        temp1: 20,
      },
    },
    tempHigh: 2744,
    category: "powders",
    hidden: true,
    state: "solid",
    density: 11500,
    excludeRandom: true,
  };
  
  elements.molten_plutonium_dioxide = {
    behavior: ["XX|CR:fire%2.5 AND CR:radiation%0.25|XX", "M2 AND CR:radiation%0.25|XX|M2 AND CR:radiation%0.25", "M1|M1|M1"],
    reactions: {
      neutron: {
        func: function (pixel, p) {
          transmuteAround(pixel);
          changePixel(pixel, "n_explosion");
          elementCircle(p.x, p.y, 2, "neutron");
        },
      },
    },
    excludeRandom: true,
  };
  
  elements.enriched_plutonium_dioxide = {
    color: ["#edcf47", "#c7a924", "#e3c129"],
    behavior: ["XX|CR:radiation%0.5|XX", "CR:radiation%0.5|XX|CR:radiation%0.5", "M2|M1|M2"],
    reactions: {
      neutron: {
        func: function (pixel, p) {
          if (pixel.temp >= 500) {
            transmuteAround(pixel);
            changePixel(pixel, "n_explosion");
          }
          elementCircle(p.x, p.y, 2, "neutron");
        },
        temp1: 50,
      },
    },
    tempHigh: 2744,
    category: "powders",
    hidden: true,
    state: "solid",
    density: 11500,
    excludeRandom: true,
  };
  
  elements.molten_enriched_plutonium_dioxide = {
    behavior: ["XX|CR:fire%2.5 AND CR:radiation%0.5|XX", "M2 AND CR:radiation%0.5|XX|M2 AND CR:radiation%0.5", "M1|M1|M1"],
    reactions: {
      neutron: {
        func: function (pixel, p) {
          transmuteAround(pixel);
          changePixel(pixel, "n_explosion");
          elementCircle(p.x, p.y, 2, "neutron");
        },
      },
    },
    excludeRandom: true,
  };
  
  elements.depleted_plutonium_dioxide = {
    color: ["#edcf47", "#c7a924", "#e3c129"],
    behavior: ["XX|CR:radiation%0.1|XX", "CR:radiation%0.1|XX|CR:radiation%0.1", "M2|M1|M2"],
    reactions: {
      neutron: {
        func: function (pixel, p) {
          if (pixel.temp >= 500) {
            transmuteAround(pixel);
            changePixel(pixel, "n_explosion");
          }
          elementCircle(p.x, p.y, 2, "neutron");
        },
        temp1: 50,
      },
    },
    tempHigh: 2744,
    category: "powders",
    hidden: true,
    state: "solid",
    density: 11500,
    excludeRandom: true,
  };
  
  elements.molten_depleted_plutonium_dioxide = {
    behavior: ["XX|CR:fire%2.5 AND CR:radiation%0.1|XX", "M2 AND CR:radiation%0.1|XX|M2 AND CR:radiation%0.1", "M1|M1|M1"],
    reactions: {
      neutron: {
        func: function (pixel, p) {
          transmuteAround(pixel);
          changePixel(pixel, "n_explosion");
          elementCircle(p.x, p.y, 2, "neutron");
        },
      },
    },
    excludeRandom: true,
  };
  
  elements.stable_plutonium_dioxide = {
    color: [blendColors("#edcf47", "#ff0000"), blendColors("#c7a924", "#00ff00"), blendColors("#e3c129", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {
      neutron: { elem2: null },
    },
    tempHigh: 2744,
    category: "powders",
    hidden: true,
    state: "solid",
    density: 11500,
  };
  
  reduce("plutonium_dioxide", "oxygen", "plutonium");
  reduce("enriched_plutonium_dioxide", "oxygen", "enriched_plutonium");
  reduce("depleted_plutonium_dioxide", "oxygen", "depleted_plutonium");
  reduce("stable_plutonium_dioxide", "oxygen", "stable_plutonium");
  
  acidReact("hydrofluoric_acid", "plutonium_dioxide", "plutonium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid", "enriched_plutonium_dioxide", "enriched_plutonium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid", "depleted_plutonium_dioxide", "depleted_plutonium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid", "stable_plutonium_dioxide", "stable_plutonium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid_gas", "plutonium_dioxide", "plutonium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid_gas", "enriched_plutonium_dioxide", "enriched_plutonium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid_gas", "depleted_plutonium_dioxide", "depleted_plutonium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid_gas", "stable_plutonium_dioxide", "stable_plutonium_tetrafluoride", "fire");
  acidReact("hydrogen_fluoride", "plutonium_dioxide", "plutonium_tetrafluoride", "fire");
  acidReact("hydrogen_fluoride", "enriched_plutonium_dioxide", "enriched_plutonium_tetrafluoride", "fire");
  acidReact("hydrogen_fluoride", "depleted_plutonium_dioxide", "depleted_plutonium_tetrafluoride", "fire");
  acidReact("hydrogen_fluoride", "stable_plutonium_dioxide", "stable_plutonium_tetrafluoride", "fire");
  acidReact("liquid_hydrogen_fluoride", "plutonium_dioxide", "plutonium_tetrafluoride", "fire");
  acidReact("liquid_hydrogen_fluoride", "enriched_plutonium_dioxide", "enriched_plutonium_tetrafluoride", "fire");
  acidReact("liquid_hydrogen_fluoride", "depleted_plutonium_dioxide", "depleted_plutonium_tetrafluoride", "fire");
  acidReact("liquid_hydrogen_fluoride", "stable_plutonium_dioxide", "stable_plutonium_tetrafluoride", "fire");
  
  elements.hydrofluoric_acid.ignore.push("plutonium_hexafluoride", "enriched_plutonium_hexafluoride", "depleted_plutonium_hexafluoride", "stable_plutonium_hexafluoride");
  elements.hydrofluoric_acid_gas.ignore.push("plutonium_hexafluoride", "enriched_plutonium_hexafluoride", "depleted_plutonium_hexafluoride", "stable_plutonium_hexafluoride");
  elements.hydrogen_fluoride.ignore.push("plutonium_hexafluoride", "enriched_plutonium_hexafluoride", "depleted_plutonium_hexafluoride", "stable_plutonium_hexafluoride");
  elements.liquid_hydrogen_fluoride.ignore.push("plutonium_hexafluoride", "enriched_plutonium_hexafluoride", "depleted_plutonium_hexafluoride", "stable_plutonium_hexafluoride");
  
  eListAddIon("PLUTONIUMIV", "plutonium_tetrafluoride");
  eListAddIon("FLUORIDE", "plutonium_tetrafluoride");
  eListAdd("INSOLUBLE", "plutonium_tetrafluoride");
  eListAddIon("ENRICHEDPLUTONIUMIV", "enriched_plutonium_tetrafluoride");
  eListAddIon("FLUORIDE", "enriched_plutonium_tetrafluoride");
  eListAdd("INSOLUBLE", "enriched_plutonium_tetrafluoride");
  eListAddIon("DEPLETEDPLUTONIUMIV", "depleted_plutonium_tetrafluoride");
  eListAddIon("FLUORIDE", "depleted_plutonium_tetrafluoride");
  eListAdd("INSOLUBLE", "depleted_plutonium_tetrafluoride");
  eListAddIon("STABLEPLUTONIUMIV", "stable_plutonium_tetrafluoride");
  eListAddIon("FLUORIDE", "stable_plutonium_tetrafluoride");
  eListAdd("INSOLUBLE", "stable_plutonium_tetrafluoride");
  
  elements.plutonium_tetrafluoride = {
    color: ["#a13d0b", "#85401d", "#733211"],
    behavior: ["XX|CR:radiation%0.05|XX", "CR:radiation%0.05|XX|CR:radiation%0.05", "M2|M1|M2"],
    reactions: {},
    tempHigh: 1027,
    category: "powders",
    state: "solid",
    density: 7100,
    hidden: true,
  };
  
  elements.enriched_plutonium_tetrafluoride = {
    color: ["#a13d0b", "#85401d", "#733211"],
    behavior: ["XX|CR:radiation%0.25|XX", "CR:radiation%0.25|XX|CR:radiation%0.25", "M2|M1|M2"],
    reactions: {},
    tempHigh: 1027,
    category: "powders",
    state: "solid",
    density: 7100,
    hidden: true,
  };
  
  elements.depleted_plutonium_tetrafluoride = {
    color: ["#a13d0b", "#85401d", "#733211"],
    behavior: ["XX|CR:radiation%0.02|XX", "CR:radiation%0.02|XX|CR:radiation%0.02", "M2|M1|M2"],
    reactions: {},
    tempHigh: 1027,
    category: "powders",
    state: "solid",
    density: 7100,
    hidden: true,
  };
  
  elements.molten_plutonium_tetrafluoride = {
    behavior: ["XX|CR:fire%2.5 AND CR:radiation%0.05|XX", "M2 AND CR:radiation%0.05|XX|M2 AND CR:radiation%0.05", "M1|M1|M1"],
  };
  
  elements.molten_enriched_plutonium_tetrafluoride = {
    behavior: ["XX|CR:fire%2.5 AND CR:radiation%0.1|XX", "M2 AND CR:radiation%0.1|XX|M2 AND CR:radiation%0.1", "M1|M1|M1"],
  };
  
  elements.molten_depleted_plutonium_tetrafluoride = {
    behavior: ["XX|CR:fire%2.5 AND CR:radiation%0.02|XX", "M2 AND CR:radiation%0.02|XX|M2 AND CR:radiation%0.02", "M1|M1|M1"],
  };
  
  elements.stable_plutonium_tetrafluoride = {
    color: [blendColors("#a13d0b", "#ff0000"), blendColors("#85401d", "#00ff00"), blendColors("#733211", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {},
    tempHigh: 1027,
    category: "powders",
    state: "solid",
    density: 7100,
    hidden: true,
  };
  
  acidReact("fluorine", "plutonium_tetrafluoride", [null, null, null, null, "plutonium_hexafluoride"], null);
  acidReact("fluorine", "enriched_plutonium_tetrafluoride", [null, null, null, null, "enriched_plutonium_hexafluoride"], null);
  acidReact("fluorine", "depleted_plutonium_tetrafluoride", [null, null, null, null, "depleted_plutonium_hexafluoride"], null);
  acidReact("fluorine", "stable_plutonium_tetrafluoride", [null, null, null, null, "stable_plutonium_hexafluoride"], null);
  acidReact("liquid_fluorine", "plutonium_tetrafluoride", [null, null, null, null, "plutonium_hexafluoride"], null);
  acidReact("liquid_fluorine", "enriched_plutonium_tetrafluoride", [null, null, null, null, "enriched_plutonium_hexafluoride"], null);
  acidReact("liquid_fluorine", "depleted_plutonium_tetrafluoride", [null, null, null, null, "depleted_plutonium_hexafluoride"], null);
  acidReact("liquid_fluorine", "stable_plutonium_tetrafluoride", [null, null, null, null, "stable_plutonium_hexafluoride"], null);
  acidReact("foof", "plutonium_tetrafluoride", "plutonium_hexafluoride", null);
  acidReact("foof", "enriched_plutonium_tetrafluoride", "enriched_plutonium_hexafluoride", null);
  acidReact("foof", "depleted_plutonium_tetrafluoride", "depleted_plutonium_hexafluoride", null);
  acidReact("foof", "stable_plutonium_tetrafluoride", "stable_plutonium_hexafluoride", null);
  acidReact("solid_foof", "plutonium_tetrafluoride", "plutonium_hexafluoride", null);
  acidReact("solid_foof", "enriched_plutonium_tetrafluoride", "enriched_plutonium_hexafluoride", null);
  acidReact("solid_foof", "depleted_plutonium_tetrafluoride", "depleted_plutonium_hexafluoride", null);
  acidReact("solid_foof", "stable_plutonium_tetrafluoride", "stable_plutonium_hexafluoride", null);
  elements.foof.ignore.push("radiation");
  elements.solid_foof.ignore.push("radiation");
  
  reduce("plutonium_tetrafluoride", "fluorine", "plutonium");
  reduce("enriched_plutonium_tetrafluoride", "fluorine", "enriched_plutonium");
  reduce("depleted_plutonium_tetrafluoride", "fluorine", "depleted_plutonium");
  reduce("stable_plutonium_tetrafluoride", "fluorine", "stable_plutonium");
  
  eListAddIon("PLUTONIUMVI", "plutonium_hexafluoride");
  eListAddIon("FLUORIDE", "plutonium_hexafluoride");
  eListAdd("INSOLUBLE", "plutonium_hexafluoride");
  eListAddIon("ENRICHEDPLUTONIUMVI", "enriched_plutonium_hexafluoride");
  eListAddIon("FLUORIDE", "enriched_plutonium_hexafluoride");
  eListAdd("INSOLUBLE", "enriched_plutonium_hexafluoride");
  eListAddIon("DEPLETEDPLUTONIUMVI", "depleted_plutonium_hexafluoride");
  eListAddIon("FLUORIDE", "depleted_plutonium_hexafluoride");
  eListAdd("INSOLUBLE", "depleted_plutonium_hexafluoride");
  eListAddIon("STABLEPLUTONIUMVI", "stable_plutonium_hexafluoride");
  eListAddIon("FLUORIDE", "stable_plutonium_hexafluoride");
  eListAdd("INSOLUBLE", "stable_plutonium_hexafluoride");
  
  elements.plutonium_hexafluoride = {
    color: "#6e2602",
    behavior: ["XX|CR:radiation%0.05|XX", "CR:radiation%0.05|XX|CR:radiation%0.05", "M2|M1|M2"],
    reactions: {
      hydrogen: { elem1: "plutonium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 62.5,
    category: "powders",
    state: "solid",
    density: 5080,
    stateHighName: "plutonium_hexafluoride_gas",
    forceAutoGen: true,
    hidden: true,
  };
  
  elements.plutonium_hexafluoride_gas = {
    behavior: behaviors.GAS,
    behavior2: [
      ["XX", "CR:radiation%0.05", "XX"],
      ["CR:radiation%0.05", "XX", "CR:radiation%0.05"],
      ["XX", "CR:radiation%0.05", "XX"],
    ],
    tick: function (pixel) {
      pixelTick(pixel, elements[pixel.element].behavior2);
    },
    state: "gas",
    density: 14.88,
    reactions: {
      hydrogen: { elem1: "plutonium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 280,
    stateHigh: ["plutonium_tetrafluoride", "fluorine"],
    onCentrifuge: function (pixel) {
      if (Math.random() < 0.05) {
        if (Math.random() < 0.5) {
          changePixel(pixel, "depleted_plutonium_hexafluoride");
        } else {
          changePixel(pixel, "enriched_plutonium_hexafluoride");
        }
      }
    },
  };
  
  elements.enriched_plutonium_hexafluoride = {
    color: "#6e2602",
    behavior: ["XX|CR:radiation%0.25|XX", "CR:radiation%0.25|XX|CR:radiation%0.25", "M2|M1|M2"],
    reactions: {
      hydrogen: { elem1: "enriched_plutonium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 62.5,
    category: "powders",
    state: "solid",
    density: 5080,
    stateHighName: "enriched_plutonium_hexafluoride_gas",
    forceAutoGen: true,
    hidden: true,
  };
  
  elements.enriched_plutonium_hexafluoride_gas = {
    behavior: behaviors.GAS,
    behavior2: [
      ["XX", "CR:radiation%0.25", "XX"],
      ["CR:radiation%0.25", "XX", "CR:radiation%0.25"],
      ["XX", "CR:radiation%0.25", "XX"],
    ],
    tick: function (pixel) {
      pixelTick(pixel, elements[pixel.element].behavior2);
    },
    state: "gas",
    density: 14.88,
    reactions: {
      hydrogen: { elem1: "enriched_plutonium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 280,
    stateHigh: ["enriched_plutonium_tetrafluoride", "fluorine"],
  };
  
  elements.depleted_plutonium_hexafluoride = {
    color: "#6e2602",
    behavior: ["XX|CR:radiation%0.25|XX", "CR:radiation%0.25|XX|CR:radiation%0.25", "M2|M1|M2"],
    reactions: {
      hydrogen: { elem1: "depleted_plutonium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 62.5,
    category: "powders",
    state: "solid",
    density: 5080,
    stateHighName: "depleted_plutonium_hexafluoride_gas",
    forceAutoGen: true,
    hidden: true,
  };
  
  elements.depleted_plutonium_hexafluoride_gas = {
    behavior: behaviors.GAS,
    behavior2: [
      ["XX", "CR:radiation%0.01", "XX"],
      ["CR:radiation%0.01", "XX", "CR:radiation%0.01"],
      ["XX", "CR:radiation%0.01", "XX"],
    ],
    tick: function (pixel) {
      pixelTick(pixel, elements[pixel.element].behavior2);
    },
    state: "gas",
    density: 14.88,
    reactions: {
      hydrogen: { elem1: "depleted_plutonium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 280,
    stateHigh: ["depleted_plutonium_tetrafluoride", "fluorine"],
  };
  
  elements.stable_plutonium_hexafluoride = {
    color: [blendColors("#6e2602", "#ff0000"), blendColors("#6e2602", "#00ff00"), blendColors("#6e2602", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {
      hydrogen: { elem1: "stable_plutonium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 62.5,
    category: "powders",
    state: "solid",
    density: 5080,
    stateHighName: "stable_plutonium_hexafluoride_gas",
    forceAutoGen: true,
    hidden: true,
  };
  
  elements.stable_plutonium_hexafluoride_gas = {
    behavior: behaviors.GAS,
    state: "gas",
    density: 14.88,
    reactions: {
      hydrogen: { elem1: "stable_plutonium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 280,
    stateHigh: ["stable_plutonium_tetrafluoride", "fluorine"],
  };
  
  runAfterLoad(function () {
    reactList("plutonium_hexafluoride", eLists.WATER, { elem1: "plutonium_tetrafluoride", elem2: "hydrofluoric_acid" });
    reactList("enriched_plutonium_hexafluoride", eLists.WATER, { elem1: "enriched_plutonium_tetrafluoride", elem2: "hydrofluoric_acid" });
    reactList("depleted_plutonium_hexafluoride", eLists.WATER, { elem1: "depleted_plutonium_tetrafluoride", elem2: "hydrofluoric_acid" });
    reactList("stable_plutonium_hexafluoride", eLists.WATER, { elem1: "stable_plutonium_tetrafluoride", elem2: "hydrofluoric_acid" });
  });
  
  elements.americium = {
    color: ["#42ebaf", "#59d998", "#d0dbd5"],
    behavior: ["XX|CR:neutron%0.1 AND CR:radiation%2 AND CR:alpha_particle%2|XX", "CR:neutron%0.1 AND CR:radiation%2 AND CR:alpha_particle%2|CH:neptunium%0.05 AND CH:plutonium%0.05|CR:neutron%0.1 AND CR:radiation%2 AND CR:alpha_particle%2", "XX|CR:neutron%0.1 AND CR:radiation%2 AND CR:alpha_particle%2|XX"],
    reactions: {
      quark_matter: { elem1: "stable_americium" },
      neutron: { func: americium, temp1: 150 },
    },
    tempHigh: 1176,
    category: "solids",
    state: "solid",
    density: 12000,
    hardness: 0.9,
    conduct: 0.2,
    excludeRandom: true,
  };
  
  elements.stable_americium = {
    color: [blendColors("#42ebaf", "#ff0000"), blendColors("#59d998", "#00ff00"), blendColors("#d0dbd5", "#0000ff")],
    behavior: behaviors.WALL,
    tempHigh: 1176,
    category: "solids",
    state: "solid",
    density: 12000,
    hardness: 0.9,
    conduct: 0.2,
    hidden: true,
  };
  
  elements.molten_americium = {
    behavior: ["XX|CR:fire%2.5 AND CR:neutron%0.1 AND CR:radiation%2 AND CR:alpha_particle%2|XX", "M2 AND CR:neutron%0.1 AND CR:radiation%2 AND CR:alpha_particle%2|CH:neptunium%0.05 AND CH:plutonium%0.05|M2 AND CR:neutron%0.1 AND CR:radiation%2 AND CR:alpha_particle%2", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_americium" },
      neutron: { func: americium, temp1: 150 },
    },
    excludeRandom: true,
  };
  
  function americium(pixel, p) {
    if (pixel.temp >= 500) {
      transmuteAround(pixel);
      changePixel(pixel, "n_explosion");
      elementCircle(p.x, p.y, 5, "neutron");
    }
    if (Math.random() < 0.1) {
      changePixel(pixel, "curium");
    }
    elementCircle(p.x, p.y, 2, "neutron");
  }
  
  elements.curium = {
    color: ["#fab1f1", "#d6c9d5", "#e0b1d6"],
    behavior: ["XX|CR:neutron%0.5 AND CR:radiation%1 AND CR:alpha_particle%1|XX", "CR:neutron%0.5 AND CR:radiation%1 AND CR:alpha_particle%1|CH:plutonium%0.075|CR:neutron%0.5 AND CR:radiation%1 AND CR:alpha_particle%1", "XX|CR:neutron%0.5 AND CR:radiation%1 AND CR:alpha_particle%1|XX"],
    reactions: {
      quark_matter: { elem1: "stable_curium" },
      neutron: { func: curium, temp1: 175 },
    },
    tempHigh: 1340,
    category: "solids",
    state: "solid",
    density: 13510,
    hardness: 0.9,
    conduct: 0.2,
    excludeRandom: true,
  };
  
  elements.stable_curium = {
    color: [blendColors("#fab1f1", "#ff0000"), blendColors("#d6c9d5", "#00ff00"), blendColors("#e0b1d6", "#0000ff")],
    behavior: behaviors.WALL,
    tempHigh: 1340,
    category: "solids",
    state: "solid",
    density: 13510,
    hardness: 0.9,
    conduct: 0.2,
    hidden: true,
  };
  
  elements.molten_curium = {
    behavior: ["XX|CR:fire%2.5 AND CR:neutron%0.5 AND CR:radiation%1 AND CR:alpha_particle%1|XX", "M2 AND CR:neutron%0.5 AND CR:radiation%1 AND CR:alpha_particle%1|CH:plutonium%0.075|M2 AND CR:neutron%0.5 AND CR:radiation%1 AND CR:alpha_particle%1", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_curium" },
      neutron: { func: curium, temp1: 150 },
    },
    excludeRandom: true,
  };
  
  function curium(pixel, p) {
    if (pixel.temp >= 500) {
      transmuteAround(pixel);
      changePixel(pixel, "n_explosion");
      elementCircle(p.x, p.y, 5, "neutron");
    }
    if (Math.random() < 0.1) {
      changePixel(pixel, "berkelium");
    }
    elementCircle(p.x, p.y, 2, "neutron");
  }
  
  elements.berkelium = {
    color: ["#f2edfa", "#bdbccf", "#d7cae8"],
    behavior: ["XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|XX", "CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|CH:californium%0.075|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1", "XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|XX"],
    reactions: {
      quark_matter: { elem1: "stable_berkelium" },
      neutron: { func: berkelium, temp1: 175 },
    },
    tempHigh: 986,
    category: "solids",
    state: "solid",
    density: 13250,
    hardness: 0.9,
    conduct: 0.2,
    excludeRandom: true,
  };
  
  elements.stable_berkelium = {
    color: [blendColors("#f2edfa", "#ff0000"), blendColors("#bdbccf", "#00ff00"), blendColors("#d7cae8", "#0000ff")],
    behavior: behaviors.WALL,
    tempHigh: 986,
    category: "solids",
    state: "solid",
    density: 13250,
    hardness: 0.9,
    conduct: 0.2,
    hidden: true,
  };
  
  elements.molten_berkelium = {
    behavior: ["XX|CR:fire%2.5 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|XX", "M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|CH:californium%0.075|M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_berkelium" },
      neutron: { func: berkelium, temp1: 150 },
    },
    excludeRandom: true,
  };
  
  function berkelium(pixel, p) {
    if (pixel.temp >= 500) {
      transmuteAround(pixel);
      changePixel(pixel, "n_explosion");
      elementCircle(p.x, p.y, 5, "neutron");
    }
    if (Math.random() < 0.1) {
      changePixel(pixel, "californium");
    }
    elementCircle(p.x, p.y, 2, "neutron", 0.2);
  }
  
  elements.californium = {
    color: ["#dfd0f7", "#bcbade", "#b99be0"],
    behavior: ["XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|XX", "CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|CH:curium%0.05 AND CH:einsteinium%0.05|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1", "XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|XX"],
    reactions: {
      quark_matter: { elem1: "stable_californium" },
      neutron: { func: californium, temp1: 175 },
    },
    tempHigh: 900,
    category: "solids",
    state: "solid",
    density: 15100,
    hardness: 0.9,
    conduct: 0.2,
    excludeRandom: true,
  };
  
  elements.stable_californium = {
    color: [blendColors("#dfd0f7", "#ff0000"), blendColors("#bcbade", "#00ff00"), blendColors("#b99be0", "#0000ff")],
    behavior: behaviors.WALL,
    tempHigh: 900,
    category: "solids",
    state: "solid",
    density: 15100,
    hardness: 0.9,
    conduct: 0.2,
    hidden: true,
  };
  
  elements.molten_californium = {
    behavior: ["XX|CR:fire%2.5 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|XX", "M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|CH:curium%0.05 AND CH:einsteinium%0.05|M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_californium" },
      neutron: { func: californium, temp1: 150 },
    },
    excludeRandom: true,
  };
  
  function californium(pixel, p) {
    if (pixel.temp >= 500) {
      transmuteAround(pixel);
      changePixel(pixel, "n_explosion");
      elementCircle(p.x, p.y, 5, "neutron");
    }
    if (Math.random() < 0.1) {
      changePixel(pixel, "einsteinium");
    }
    elementCircle(p.x, p.y, 2, "neutron", 0.25);
  }
  
  elements.einsteinium = {
    color: ["#3aa6c2", "#b8edf1", "#83d9e4"],
    behavior: ["XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|XX", "CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|CH:berkelium%0.05 AND CH:fermium%0.05|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1", "XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|XX"],
    reactions: {
      quark_matter: { elem1: "stable_einsteinium" },
      neutron: { func: einsteinium, temp1: 175 },
    },
    tempHigh: 1133,
    category: "solids",
    state: "solid",
    density: 8840,
    hardness: 0.9,
    conduct: 0.2,
    excludeRandom: true,
  };
  
  elements.stable_einsteinium = {
    color: [blendColors("#3aa6c2", "#ff0000"), blendColors("#b8edf1", "#00ff00"), blendColors("#83d9e4", "#0000ff")],
    behavior: behaviors.WALL,
    tempHigh: 1133,
    category: "solids",
    state: "solid",
    density: 8840,
    hardness: 0.9,
    conduct: 0.2,
    hidden: true,
  };
  
  elements.molten_einsteinium = {
    behavior: ["XX|CR:fire%2.5 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|XX", "M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|CH:berkelium%0.05 AND CH:fermium%0.05|M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_einsteinium" },
      neutron: { func: einsteinium, temp1: 150 },
    },
    excludeRandom: true,
  };
  
  function einsteinium(pixel, p) {
    if (pixel.temp >= 500) {
      transmuteAround(pixel);
      changePixel(pixel, "n_explosion");
      elementCircle(p.x, p.y, 5, "neutron");
    }
    if (Math.random() < 0.1) {
      changePixel(pixel, "fermium");
    }
    elementCircle(p.x, p.y, 3, "neutron");
  }
  
  elements.fermium = {
    color: ["#c8a7fc", "#cecbf2", "#d5bff2"],
    behavior: ["XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|XX", "CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|CH:californium%0.1|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1", "XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|XX"],
    reactions: {
      quark_matter: { elem1: "stable_fermium" },
      neutron: { func: fermium, temp1: 175 },
    },
    tempHigh: 1800,
    category: "solids",
    state: "solid",
    density: 9710,
    hardness: 0.9,
    conduct: 0.2,
    excludeRandom: true,
  };
  
  elements.stable_fermium = {
    color: [blendColors("#c8a7fc", "#ff0000"), blendColors("#cecbf2", "#00ff00"), blendColors("#d5bff2", "#0000ff")],
    behavior: behaviors.WALL,
    tempHigh: 1800,
    category: "solids",
    state: "solid",
    density: 9710,
    hardness: 0.9,
    conduct: 0.2,
    hidden: true,
  };
  
  elements.molten_fermium = {
    behavior: ["XX|CR:fire%2.5 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|XX", "M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1|CH:californium%0.1|M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_fermium" },
      neutron: { func: fermium, temp1: 150 },
    },
    excludeRandom: true,
  };
  
  function fermium(pixel, p) {
    if (pixel.temp >= 500) {
      changePixel(pixel, "n_explosion");
      elementCircle(p.x, p.y, 5, "neutron");
    }
    elementCircle(p.x, p.y, 3, "neutron", 0.2);
  }
  
  function transmuteAround(pixel) {
    elementCircle(pixel.x, pixel.y, 40, "radium", 0.1, ["thorium", "molten_thorium"]);
    elementCircle(pixel.x, pixel.y, 40, "plutonium", 0.1, ["depleted_uranium", "molten_depleted_uranium"]);
    elementCircle(pixel.x, pixel.y, 40, "neptunium", 0.1, ["enriched_uranium", "molten_enriched_uranium"]);
    elementCircle(pixel.x, pixel.y, 40, "americium", 0.1, ["plutonium", "molten_plutonium"]);
    elementCircle(pixel.x, pixel.y, 40, "curium", 0.1, ["americium", "molten_americium"]);
    elementCircle(pixel.x, pixel.y, 40, "berkelium", 0.1, ["curium", "molten_curium"]);
    elementCircle(pixel.x, pixel.y, 40, "californium", 0.1, ["berkelium", "molten_berkelium"]);
    elementCircle(pixel.x, pixel.y, 40, "einsteinium", 0.1, ["californium", "molten_californium"]);
    elementCircle(pixel.x, pixel.y, 40, "fermium", 0.1, ["einsteinium", "molten_einsteinium"]);
  }
  
  function elementCircle(x, y, radius, pixelType = "fire", chance = 0.1, replace = [null]) {
    if (!Array.isArray(replace)) {
      replace = [replace];
    }
    // if pixelType includes , split it into an array
    if (pixelType.indexOf(",") !== -1) {
      pixelType = pixelType.split(",");
    }
    var coords = circleCoords(x, y, radius);
    for (var i = 0; i < coords.length; i++) {
      if (isEmpty(coords[i].x, coords[i].y) && replace.includes(null)) {
        if (Math.random() <= chance) {
          // if pixelType is an array, choose a random item
          if (Array.isArray(pixelType)) {
            createPixel(pixelType[Math.floor(Math.random() * pixelType.length)], coords[i].x, coords[i].y);
          } else {
            createPixel(pixelType, coords[i].x, coords[i].y);
          }
        }
      }
      if (!isEmpty(coords[i].x, coords[i].y, true) && replace.includes(pixelMap[coords[i].x][coords[i].y].element)) {
        if (Math.random() <= chance) {
          // if pixelType is an array, choose a random item
          if (Array.isArray(pixelType)) {
            changePixel(pixelMap[coords[i].x][coords[i].y], pixelType[Math.floor(Math.random() * pixelType.length)]);
          } else {
            changePixel(pixelMap[coords[i].x][coords[i].y], pixelType);
          }
        }
      }
    }
  }
  
  elements.thorium_dioxide = {
    color: ["#313331", "#1a1a18", "#171717", "#24231d", "#262622", "#171613"],
    behavior: ["XX|CR:radiation%0.01|XX", "CR:radiation%0.01|XX|CR:radiation%0.01", "M2|M1|M2"],
    reactions: {},
    hidden: true,
    tempHigh: 2865,
    category: "powders",
    state: "solid",
    density: 10970,
  };
  
  elements.stable_thorium_dioxide = {
    color: [blendColors("#313331", "#ff0000"), blendColors("#1a1a18", "#00ff00"), blendColors("#171717", "#0000ff"), blendColors("#24231d", "#ff0000"), blendColors("#262622", "#00ff00"), blendColors("#171613", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {},
    hidden: true,
    tempHigh: 2865,
    category: "powders",
    state: "solid",
    density: 10970,
  };
  
  eListAddIon("THORIUMIV", "thorium_dioxide");
  eListAddIon("OXIDE", "thorium_dioxide");
  eListAdd("INSOLUBLE", "thorium_dioxide");
  eListAddIon("STABLETHORIUMIV", "stable_thorium_dioxide");
  eListAddIon("OXIDE", "stable_thorium_dioxide");
  eListAdd("INSOLUBLE", "stable_thorium_dioxide");
  
  acidReact("hydrofluoric_acid", "thorium_dioxide", "thorium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid", "stable_thorium_dioxide", "stable_thorium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid_gas", "thorium_dioxide", "thorium_tetrafluoride", "fire");
  acidReact("hydrofluoric_acid_gas", "stable_thorium_dioxide", "stable_thorium_tetrafluoride", "fire");
  acidReact("hydrogen_fluoride", "thorium_dioxide", "thorium_tetrafluoride", "fire");
  acidReact("hydrogen_fluoride", "stable_thorium_dioxide", "stable_thorium_tetrafluoride", "fire");
  acidReact("liquid_hydrogen_fluoride", "thorium_dioxide", "thorium_tetrafluoride", "fire");
  acidReact("liquid_hydrogen_fluoride", "stable_thorium_dioxide", "stable_thorium_tetrafluoride", "fire");
  
  elements.thorium_tetrafluoride = {
    color: "#e5e6e5",
    behavior: ["XX|CR:radiation%0.01|XX", "CR:radiation%0.01|XX|CR:radiation%0.01", "M2|M1|M2"],
    reactions: {},
    hidden: true,
    tempHigh: 1110,
    category: "powders",
    state: "solid",
    density: 6300,
  };
  
  elements.stable_thorium_tetrafluoride = {
    color: [blendColors("#e5e6e5", "#ff0000"), blendColors("#e5e6e5", "#00ff00"), blendColors("#e5e6e5", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {},
    hidden: true,
    tempHigh: 1110,
    category: "powders",
    state: "solid",
    density: 6300,
  };
  
  eListAddIon("THORIUMIV", "thorium_tetrafluoride");
  eListAddIon("OXIDE", "thorium_tetrafluoride");
  eListAdd("INSOLUBLE", "thorium_tetrafluoride");
  eListAddIon("STABLETHORIUMIV", "stable_thorium_tetrafluoride");
  eListAddIon("OXIDE", "stable_thorium_tetrafluoride");
  eListAdd("INSOLUBLE", "stable_thorium_tetrafluoride");
  
  reduce("thorium_dioxide", "oxygen", "thorium");
  reduce("stable_thorium_dioxide", "oxygen", "stable_thorium");
  reduce("thorium_tetrafluoride", "fluorine", "thorium");
  reduce("stable_thorium_tetrafluoride", "fluorine", "stable_thorium");
  
  elements.stable_thorium = {
    color: [blendColors("#599e8a", "#ff0000"), blendColors("#364d4b", "#00ff00"), blendColors("#494d4c", "#0000ff"), blendColors("#428a58", "#ff0000"), blendColors("#658d7a", "#00ff00"), blendColors("#89e0a2", "#0000ff")],
    behavior: behaviors.WALL,
    reactions: {
      oxygen: { elem1: "stable_thorium_dioxide", elem2: null },
    },
    tempHigh: 1750,
    category: "solids",
    state: "solid",
    hidden: true,
    density: 11700,
    hardness: 0.7,
    conduct: 0.235,
  };
  elements.molten_stable_thorium = {
    reactions: {
      oxygen: { elem1: "stable_thorium_dioxide", elem2: null },
    },
  };
  
  elements.stable_radium = {
    color: [blendColors("#3bdeff", "#ff0000"), blendColors("#3bdeff", "#00ff00"), blendColors("#3bdeff", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {
      oxygen: { elem1: "radium_oxide" },
    },
    tempHigh: 700,
    category: "powders",
    state: "solid",
    density: 5500,
    hidden: true,
    conduct: 0.4,
  };
  
  elements.radium_oxide = {
    color: [blendColors("#b2d9d9", "#ff0000", 0.25), blendColors("#b2d9d9", "#00ff00", 0.25), blendColors("#b2d9d9", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    reactions: {},
    hidden: true,
    tempHigh: 2327,
    category: "powders",
    state: "solid",
    density: 12000,
  };
  
  eListAddIon("RADIUM", "radium_oxide");
  eListAddIon("OXIDE", "radium_oxide");
  eListAdd("INSOLUBLE", "radium_oxide");
  
  elements.radium_hydroxide = {
    color: [blendColors("#f2fafa", "#ff0000", 0.25), blendColors("#f2fafa", "#00ff00", 0.25), blendColors("#f2fafa", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 600,
    reactions: {},
    stateHigh: "radium_oxide",
    category: "powders",
    state: "solid",
    density: 12000,
  };
  
  eListAdd("BASE", "radium_hydroxide");
  eListAddIon("RADIUM", "radium_hydroxide", "base");
  eListAddIon("HYDROXIDE", "radium_hydroxide", "base");
  eListAdd("INSOLUBLE", "radium_hydroxide");
  
  createSalt("radium_chloride", "radium_chloride_solution", [blendColors("#faf3de", "#ff0000", 0.25), blendColors("#faf3de", "#00ff00", 0.25), blendColors("#faf3de", "#0000ff", 0.25)], [blendColors("#8eadef", "#ff0000", 0.25), blendColors("#8eadef", "#00ff00", 0.25), blendColors("#8eadef", "#0000ff", 0.25)], true, true, 900, -2, 102, 4900, 1050, "RADIUM", "CHLORIDE");
  
  elements.radium_chloride_solution.reactions["mercury"] = { elem1: ["stable_radium", "chlorine", "hydrogen"], charged: true, chance: 0.02 };
  
  elements.molten_stable_radium = {
    reactions: {
      oxygen: { elem1: "radium_oxide" },
    },
    conduct: 0.4,
  };
  
  runAfterLoad(function () {
    reactList("radium_oxide", eLists.WATER, { elem1: "radium_hydroxide", elem2: null, chance: 0.01 });
    reactList("stable_radium", eLists.WATER, { elem1: ["radium_hydroxide", "pop"], elem2: ["hydrogen", "bubble"], chance: 0.05, temp2: 350 });
    reactList("molten_stable_radium", eLists.WATER, { elem1: ["radium_hydroxide", "pop"], elem2: ["hydrogen", "bubble"], chance: 0.05, temp2: 350 });
  });
  
  elements.stable_actinium = {
    color: [blendColors("#e5e6e5", "#ff0000", 0.25), blendColors("#62ebf0", "#00ff00"), blendColors("#62ebf0", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {
      oxygen: { elem1: "actinium_oxide" },
    },
    hidden: true,
    tempHigh: 1227,
    category: "powders",
    state: "solid",
    density: 10000,
    conduct: 0.225,
  };
  elements.molten_stable_actinium = {
    reactions: {
      oxygen: { elem1: "actinium_oxide" },
    },
    conduct: 0.225,
  };
  
  runAfterLoad(function () {
    reactList("stable_actinium", eLists.WATER, { elem1: "actinium_hydroxide", elem2: "hydrogen", chance: 0.01 });
    reactList("molten_stable_actinium", eLists.WATER, { elem1: "actinium_hydroxide", elem2: "hydrogen", chance: 0.01 });
  });
  
  elements.actinium_oxide = {
    color: [blendColors("#ebf5f5", "#ff0000", 0.25), blendColors("#ebf5f5", "#00ff00", 0.25), blendColors("#ebf5f5", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    reactions: {
      water: { elem1: "actinium_hydroxide", elem2: null, chance: 0.01 },
      salt_water: { elem1: "actinium_hydroxide", elem2: null, chance: 0.01 },
      sugar_water: { elem1: "actinium_hydroxide", elem2: null, chance: 0.01 },
      dirty_water: { elem1: "actinium_hydroxide", elem2: null, chance: 0.01 },
      steam: { elem1: "actinium_hydroxide", elem2: null, chance: 0.01 },
      seltzer: { elem1: "actinium_hydroxide", elem2: null, chance: 0.01 },
      pool_water: { elem1: "actinium_hydroxide", elem2: null, chance: 0.01 },
      primordial_soup: { elem1: "actinium_hydroxide", elem2: null, chance: 0.01 },
    },
    hidden: true,
    tempHigh: 2327,
    category: "powders",
    state: "solid",
    density: 12000,
  };
  
  runAfterLoad(function () {
    reactList("actinium_oxide", eLists.WATER, { elem1: "actinium_hydroxide", elem2: null, chance: 0.01 });
  });
  
  elements.actinium_hydroxide = {
    color: [blendColors("#f2cef2", "#ff0000", 0.25), blendColors("#f2cef2", "#00ff00", 0.25), blendColors("#f2cef2", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 350,
    stateHigh: ["actinium_oxide", "steam"],
    category: "powders",
    state: "solid",
    density: 12000,
  };
  
  eListAdd("BASE", "actinium_hydroxide");
  eListAddIon("ACTINIUM", "actinium_hydroxide", "base");
  eListAddIon("HYDROXIDE", "actinium_hydroxide", "base");
  eListAdd("INSOLUBLE", "actinium_hydroxide");
  
  reduce("actinium_oxide", "oxygen", "stable_actinium");
  
  elements.stable_protactinium = {
    color: [blendColors("#9899a3", "#ff0000"), blendColors("#44464a", "#00ff00"), blendColors("#5a5b5e", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {
      oxygen: { elem1: "protactinium_v_oxide", chance: 0.01 },
      steam: { elem1: "protactinium_hydroxide", elem2: "hydrogen", chance: 0.01 },
    },
  
    tempHigh: 1568,
    category: "powders",
    state: "solid",
    density: 15700,
    hardness: 0.1,
    conduct: 0.235,
    hidden: true,
  };
  
  elements.molten_stable_protactinium = {
    reactions: {
      oxygen: { elem1: "protactinium_v_oxide", chance: 0.01 },
      steam: { elem1: "protactinium_hydroxide", elem2: "hydrogen", chance: 0.01 },
    },
  };
  
  eListAdd("BASE", "protactinium_hydroxide");
  eListAddIon("PROTACTINIUMV", "protactinium_hydroxide", "base");
  eListAddIon("HYDROXIDE", "protactinium_hydroxide", "base");
  eListAdd("INSOLUBLE", "protactinium_hydroxide");
  
  elements.protactinium_hydroxide = {
    color: [blendColors("#95c7c7", "#ff0000", 0.25), blendColors("#95c7c7", "#00ff00", 0.25), blendColors("#95c7c7", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 350,
    category: "powders",
    state: "solid",
    stateHigh: ["protactinium_v_oxide", "steam"],
    density: 12000,
  };
  
  elements.protactinium_v_oxide = {
    color: [blendColors("#353b3b", "#ff0000", 0.25), blendColors("#353b3b", "#00ff00", 0.25), blendColors("#353b3b", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 2500,
    category: "powders",
    state: "solid",
    density: 12000,
    reactions: {},
  };
  
  eListAddIon("PROTACTINIUMV", "protactinium_v_oxide");
  eListAddIon("OXIDE", "protactinium_v_oxide");
  eListAdd("INSOLUBLE", "protactinium_v_oxide");
  
  acidReact("hydrofluoric_acid", "protactinium_v_oxide", "protactinium_pentafluoride", "fire", 0);
  acidReact("hydrofluoric_acid_gas", "protactinium_v_oxide", "protactinium_pentafluoride", "fire", 0);
  acidReact("hydrogen_fluoride", "protactinium_v_oxide", "protactinium_pentafluoride", "fire", 0);
  acidReact("liquid_hydrogen_fluoride", "protactinium_v_oxide", "protactinium_pentafluoride", "fire", 0);
  
  elements.protactinium_pentafluoride = {
    color: [blendColors("#cbf2ec", "#ff0000", 0.25), blendColors("#cbf2ec", "#00ff00", 0.25), blendColors("#cbf2ec", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 2500,
    category: "powders",
    state: "solid",
    density: 12000,
    reactions: {},
  };
  
  eListAddIon("PROTACTINIUMV", "protactinium_pentafluoride");
  eListAddIon("OXIDE", "protactinium_pentafluoride");
  eListAdd("INSOLUBLE", "protactinium_pentafluoride");
  
  reduce("protactinium_v_oxide", "oxygen", "stable_protactinium");
  reduce("protactinium_pentafluoride", "fluorine", "stable_protactinium");
  
  elements.stable_neptunium = {
    color: [blendColors("#626580", "#ff0000"), blendColors("#3f4a61", "#00ff00"), blendColors("#4a5463", "#0000ff")],
    behavior: behaviors.WALL,
    reactions: {
      oxygen: { elem1: "neptunium_dioxide", chance: 0.01 },
    },
    tempHigh: 639,
    category: "solids",
    state: "solid",
    density: 19380,
    hardness: 0.7,
    conduct: 0.2,
    hidden: true,
  };
  
  elements.molten_stable_neptunium = {
    reactions: {
      oxygen: { elem1: "neptunium_dioxide", chance: 0.01 },
    },
  };
  
  elements.neptunium_dioxide = {
    color: [blendColors("#47c94f", "#ff0000"), blendColors("#47c94f", "#00ff00"), blendColors("#47c94f", "#0000ff")],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 2600,
    category: "powders",
    state: "solid",
    density: 12000,
    reactions: {},
  };
  
  eListAddIon("NEPTUNIUMIV", "neptunium_dioxide");
  eListAddIon("OXIDE", "neptunium_dioxide");
  eListAdd("INSOLUBLE", "neptunium_dioxide");
  
  elements.neptunium_tetrafluoride = {
    color: [blendColors("#73e67a", "#ff0000"), blendColors("#73e67a", "#00ff00"), blendColors("#73e67a", "#0000ff")],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 2550,
    category: "powders",
    state: "solid",
    density: 12000,
    reactions: {},
  };
  
  eListAddIon("NEPTUNIUMIV", "neptunium_tetrafluoride");
  eListAddIon("FLUORIDE", "neptunium_tetrafluoride");
  eListAdd("INSOLUBLE", "neptunium_tetrafluoride");
  
  acidReact("hydrofluoric_acid", "neptunium_dioxide", "neptunium_tetrafluoride", "fire", 0);
  acidReact("hydrofluoric_acid_gas", "neptunium_dioxide", "neptunium_tetrafluoride", "fire", 0);
  acidReact("hydrogen_fluoride", "neptunium_dioxide", "neptunium_tetrafluoride", "fire", 0);
  acidReact("liquid_hydrogen_fluoride", "neptunium_dioxide", "neptunium_tetrafluoride", "fire", 0);
  
  acidReact("fluorine", "neptunium_tetrafluoride", "neptunium_hexafluoride", "fire", 0);
  acidReact("liquid_fluorine", "neptunium_tetrafluoride", "neptunium_hexafluoride", "fire", 0);
  acidReact("fluorine", "neptunium_dioxide", "neptunium_hexafluoride", "fire", 0);
  acidReact("liquid_fluorine", "neptunium_dioxide", "neptunium_hexafluoride", "fire", 0);
  
  eListAddIon("NEPTUNIUMVI", "neptunium_hexafluoride");
  eListAddIon("FLUORIDE", "neptunium_hexafluoride");
  eListAdd("INSOLUBLE", "neptunium_hexafluoride");
  
  reduce("neptunium_dioxide", "oxygen", "stable_neptunium");
  reduce("neptunium_tetrafluoride", "fluorine", "stable_neptunium");
  
  elements.neptunium_hexafluoride = {
    color: [blendColors("#eda042", "#ff0000"), blendColors("#eda042", "#00ff00"), blendColors("#eda042", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {
      hydrogen: { elem1: "neptunium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
    tempHigh: 55,
    category: "powders",
    state: "solid",
    density: 5000,
    stateHighName: "neptunium_hexafluoride_gas",
    forceAutoGen: true,
    hidden: true,
  };
  
  elements.neptunium_hexafluoride_gas = {
    behavior: behaviors.GAS,
    state: "gas",
    density: 14.591,
    reactions: {
      hydrogen: { elem1: "neptunium_tetrafluoride", elem2: "hydrogen_fluoride" },
    },
  };
  
  runAfterLoad(function () {
    reactList("neptunium_hexafluoride", eLists.WATER, { elem1: "neptunium_tetrafluoride", elem2: "hydrofluoric_acid" });
    reactList("neptunium_hexafluoride_gas", eLists.WATER, { elem1: "neptunium_tetrafluoride", elem2: "hydrofluoric_acid" });
  });
  elements.fallout.reactions = { quark_matter: { elem1: null } };
  elements.transactinide_fallout = {
    color: ["#5ab891", "#00ff5e", "#a7ff4a", "#a2f752"],
    behavior: ["XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|XX", "CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|CH:fallout%1 AND CH:radium%0.1 AND CH:francium%0.1 AND CH:fermium%0.01 AND CH:einsteinium%0.01 AND CH:californium%0.01 AND CH:berkelium%0.01 AND CH:curium%0.01 AND CH:americium%0.01 AND CH:plutonium%0.01 AND CH:neptunium%0.01 AND CH:uranium%0.01 AND CH:protactinium%0.01 AND CH:thorium%0.01 AND CH:actinium%0.01|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1", "M2|M1|M2"],
    reactions: {
      quark_matter: { elem1: null },
    },
    category: "energy",
    hidden: true,
    state: "solid",
    density: 10000,
    hardness: 0.9,
    excludeRandom: true,
  };
  
  elements.copernicium = {
    color: ["#a7fcbc", "#8cc299", "#9db9c2"],
    behavior: ["XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|XX", "M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|CH:transactinide_fallout%1|M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_copernicium" },
      neutron: { elem1: "nihonium", elem2: null, chance: 0.1 },
    },
    tempHigh: 67,
    tempLow: 10,
    category: "liquids",
    state: "liquid",
    density: 14010,
    hardness: 1.0,
    conduct: 0.2,
    stateLowName: "solid_copernicium",
    tick: function (pixel) {
      pixel.temp += 50;
    },
    excludeRandom: true,
  };
  
  elements.solid_copernicium = {
    behavior: ["XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|XX", "CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|CH:transactinide_fallout%1|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1", "XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|XX"],
    reactions: {
      quark_matter: { elem1: "stable_copernicium" },
      neutron: { elem1: "nihonium", elem2: null, chance: 0.1 },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 50;
    },
    excludeRandom: true,
  };
  
  elements.copernicium_gas = {
    behavior: ["M2|M1 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|M2", "M1 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|CH:transactinide_fallout%1|M1 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1", "M2|M1 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|M2"],
    reactions: {
      quark_matter: { elem1: "stable_copernicium" },
      neutron: { elem1: "nihonium", elem2: null, chance: 0.1 },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 50;
    },
    excludeRandom: true,
    density: 11.848,
  };
  
  elements.stable_copernicium = {
    color: [blendColors("#a7fcbc", "#ff0000"), blendColors("#8cc299", "#00ff00"), blendColors("#9db9c2", "#0000ff")],
    behavior: behaviors.LIQUID,
    tempHigh: 67,
    tempLow: 10,
    category: "liquids",
    state: "liquid",
    density: 14010,
    conduct: 0.2,
    stateLowName: "solid_stable_copernicium",
    hidden: true,
  };
  elements.stable_copernicium_gas = {
    density: 11.848,
    reactions: {
      oxygen: { elem1: "copernicium_dioxide", elem2: null, chance: 0.01 },
      molten_sulfur: { elem1: "copernicium_sulfide", elem2: null, tempMax: 421 },
      sulfur_gas: { elem1: "copernicium_sulfide", elem2: null, tempMax: 421 },
    },
  };
  
  elements.copernicium_dioxide = {
    color: [blendColors("#e6c973", "#ff0000", 0.25), blendColors("#e6c973", "#00ff00", 0.25), blendColors("#e6c973", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 300, //made up
    category: "powders",
    state: "solid",
    density: 13120, //made up
    stateHigh: ["stable_copernicium_gas", "stable_copernicium_gas", "fire"],
    reactions: {},
  };
  
  eListAddIon("COPERNICIUMIV", "copernicium_dioxide");
  eListAddIon("OXIDE", "copernicium_dioxide");
  eListAdd("INSOLUBLE", "copernicium_dioxide");
  
  elements.copernicium_sulfide = {
    color: [blendColors("#9c5f4f", "#ff0000", 0.25), blendColors("#9c5f4f", "#00ff00", 0.25), blendColors("#9c5f4f", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 421, //made up
    category: "powders",
    state: "solid",
    density: 13200, //made up
    stateHigh: ["stable_copernicium_gas", "molten_sulfur"],
  };
  
  eListAddIon("COPERNICIUMII", "copernicium_sulfide");
  eListAddIon("SULFIDE", "copernicium_sulfide");
  eListAdd("INSOLUBLE", "copernicium_sulfide");
  
  elements.copernicium_tetrafluoride = {
    color: [blendColors("#eff2e4", "#ff0000", 0.25), blendColors("#eff2e4", "#00ff00", 0.25), blendColors("#eff2e4", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 502, //made up
    category: "powders",
    state: "solid",
    density: 12110, //made up
    stateHigh: ["stable_copernicium_gas", "fluorine"],
    reactions: {},
  };
  
  eListAddIon("COPERNICIUMIV", "copernicium_tetrafluoride");
  eListAddIon("FLUORIDE", "copernicium_tetrafluoride");
  eListAdd("INSOLUBLE", "copernicium_tetrafluoride");
  
  runAfterLoad(function () {
    reactList("copernicium_tetrafluoride", eLists.WATER, { elem1: "hydrofluoric_acid", elem2: "stable_copernicium" });
  });
  
  acidIgnore(["copernicium", "copernicium_gas", "solid_copernicium", "stable_copernicium", "stable_copernicium_gas", "solid_stable_copernicium", "copernicium_tetrafluoride"]);
  elements.fluorine.ignore.push("copernicium", "copernicium_gas", "solid_copernicium", "stable_copernicium", "stable_copernicium_gas", "solid_stable_copernicium", "copernicium_tetrafluoride");
  elements.liquid_fluorine.ignore.push("copernicium", "copernicium_gas", "solid_copernicium", "stable_copernicium", "stable_copernicium_gas", "solid_stable_copernicium", "copernicium_tetrafluoride");
  
  acidReact("copernicium_dioxide", "fluorine", "copernicium_tetrafluoride", "fire");
  acidReact("copernicium_dioxide", "liquid_fluorine", "copernicium_tetrafluoride", "fire");
  
  elements.molten_uranium.reactions["molten_calcium"] = { elem1: "copernicium", elem2: null, tempMin: 10000, chance: 0.01 };
  elements.molten_depleted_uranium.reactions["molten_calcium"] = { elem1: "copernicium", elem2: null, tempMin: 10000, chance: 0.01 };
  elements.molten_enriched_uranium.reactions["molten_calcium"] = { elem1: "copernicium", elem2: null, tempMin: 10000, chance: 0.01 };
  
  elements.nihonium = {
    color: ["#c94a0a"], //spike viper reference
    behavior: ["XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|XX", "CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|CH:transactinide_fallout%1|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1", "XX|M1|XX"],
    reactions: {
      quark_matter: { elem1: "stable_nihonium" },
      neutron: { elem1: "flerovium", elem2: null, chance: 0.1 },
    },
    tempHigh: 430,
    category: "powders",
    state: "solid",
    density: 16000,
    hardness: 1.0,
    conduct: 0.2,
    tick: function (pixel) {
      pixel.temp += 50;
    },
    excludeRandom: true,
  };
  
  elements.molten_nihonium = {
    behavior: ["XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|XX", "M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|CH:transactinide_fallout%1|M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_nihonium" },
      neutron: { elem1: "flerovium", elem2: null, chance: 0.1 },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 50;
    },
    excludeRandom: true,
  };
  
  elements.stable_nihonium = {
    color: [blendColors("#c94a0a", "#ff0000"), blendColors("#c94a0a", "#00ff00"), blendColors("#c94a0a", "#0000ff")],
    behavior: behaviors.STURDYPOWDER,
    reactions: {
      molten_stable_francium: { elem1: "francium_nihonide", elem2: null },
    },
    tempHigh: 430,
    category: "powders",
    state: "solid",
    density: 16000,
    conduct: 0.2,
    hidden: true,
  };
  
  acidReact("stable_nihonium", "nitric_acid", "nihonium_nitrate_solution", "nitrogen_dioxide");
  acidReact("stable_nihonium", "nitric_acid_gas", "nihonium_nitrate_solution", "nitrogen_dioxide");
  elements.nitric_acid.ignore.push("nihonium_nitrate");
  elements.nitric_acid_gas.ignore.push("nihonium_nitrate");
  
  acidReact("stable_nihonium", "sulfuric_acid", "nihonium_sulfate_solution", "hydrogen", 50);
  acidReact("stable_nihonium", "sulfuric_acid_gas", "nihonium_sulfate_solution", "hydrogen", 50);
  elements.sulfuric_acid.ignore.push("nihonium_sulfate_solution");
  elements.sulfuric_acid_gas.ignore.push("nihonium_sulfate_solution");
  
  createSalt("nihonium_nitrate", "nihonium_nitrate_solution", [blendColors("#fccadd", "#ff0000", 0.25), blendColors("#fccadd", "#00ff00", 0.25), blendColors("#fccadd", "#0000ff", 0.25)], [blendColors("#8f19f7", "#ff0000", 0.25), blendColors("#8f19f7", "#00ff00", 0.25), blendColors("#8f19f7", "#0000ff", 0.25)], true, true, 203, -2, 102, 9350, 1090, "NIHONIUM", "NITRATE");
  createSalt("nihonium_sulfate", "nihonium_sulfate_solution", [blendColors("#fcf1ca", "#ff0000", 0.25), blendColors("#fcf1ca", "#00ff00", 0.25), blendColors("#fcf1ca", "#0000ff", 0.25)], [blendColors("#1984f7", "#ff0000", 0.25), blendColors("#1984f7", "#00ff00", 0.25), blendColors("#1984f7", "#0000ff", 0.25)], true, true, 1305, -2, 102, 12050, 1092, "NIHONIUM", "SULFATE");
  
  elements.nihonium_nitrate.stateHigh = ["nihonium_oxide", "nitrogen_dioxide", "fire"];
  
  elements.nihonium_hydroxide = {
    color: [blendColors("#ebc7c7", "#ff0000", 0.25), blendColors("#ebc7c7", "#00ff00", 0.25), blendColors("#ebc7c7", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 292, //made up
    category: "powders",
    state: "solid",
    density: 10220, //made up
    stateHigh: ["nihonium_oxide", "steam"],
    reactions: {},
  };
  
  eListAdd("INSOLUBLE", "nihonium_hydroxide");
  eListAddIon("NIHONIUM", "nihonium_hydroxide");
  eListAddIon("HYDROXIDE", "nihonium_hydroxide");
  
  elements.nihonium_oxide = {
    color: [blendColors("#ab9a95", "#ff0000", 0.25), blendColors("#ab9a95", "#00ff00", 0.25), blendColors("#ab9a95", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 567, //made up
    category: "powders",
    state: "solid",
    density: 12370, //made up
    reactions: {
      steam: { elem1: "nihonium_hydroxide", elem2: null, tempMax: 292 },
    },
  };
  
  eListAdd("INSOLUBLE", "nihonium_oxide");
  eListAddIon("NIHONIUM", "nihonium_oxide");
  eListAddIon("OXIDE", "nihonium_oxide");
  
  elements.francium_nihonide = {
    color: [blendColors("#d6d3a9", "#ff0000"), blendColors("#d6d3a9", "#00ff00"), blendColors("#d6d3a9", "#0000ff")],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 10920, //made up
    category: "powders",
    state: "solid",
    density: 13700, //made up
    reactions: {},
  };
  
  runAfterLoad(function () {
    reactList("francium_nihonide", eLists.WATER, { elem1: ["nihonium_hydroxide", "francium_hydroxide"], elem2: "hydrogen", temp1: 100, temp2: 100 });
  });
  
  eListAdd("INSOLUBLE", "francium_nihonide");
  eListAddIon("FRANCIUM", "francium_nihonide");
  eListAddIon("NIHONIDE", "francium_nihonide");
  
  elements.molten_neptunium.reactions["molten_calcium"] = { elem1: "nihonium", elem2: null, tempMin: 10000, chance: 0.01 };
  
  elements.flerovium = {
    color: ["#a8ffe2", "#7ddbcd", "#9dc2b1"],
    behavior: ["XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|XX", "M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|CH:copernicium%1|M2 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_flerovium" },
      neutron: { elem1: "moscovium", elem2: null, chance: 0.1 },
    },
    tempHigh: 107,
    tempLow: -73,
    category: "liquids",
    state: "liquid",
    density: 11400,
    hardness: 1.0,
    conduct: 0.2,
    stateLowName: "solid_flerovium",
    tick: function (pixel) {
      pixel.temp += 50;
    },
    excludeRandom: true,
  };
  
  elements.solid_flerovium = {
    behavior: ["XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|XX", "CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|CH:copernicium%1|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1", "XX|CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|XX"],
    reactions: {
      quark_matter: { elem1: "stable_flerovium" },
      neutron: { elem1: "moscovium", elem2: null, chance: 0.1 },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 50;
    },
    excludeRandom: true,
  };
  
  elements.flerovium_gas = {
    behavior: ["M2|M1 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|M2", "M1 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|CH:copernicium%1|M1 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1", "M2|M1 AND CR:neutron%1 AND CR:radiation%1 AND CR:alpha_particle%1 AND CR:rad_pop%1|M2"],
    reactions: {
      quark_matter: { elem1: "stable_flerovium" },
      neutron: { elem1: "moscovium", elem2: null, chance: 0.1 },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 50;
    },
    excludeRandom: true,
    density: 12.014,
  };
  
  elements.stable_flerovium = {
    color: [blendColors("#a8ffe2", "#ff0000"), blendColors("#7ddbcd", "#00ff00"), blendColors("#9dc2b1", "#0000ff")],
    behavior: behaviors.LIQUID,
    reactions: {
      molten_sulfur: { elem1: "flerovium_sulfide", elem2: null },
    },
    tempHigh: 107,
    tempLow: -73,
    category: "liquids",
    state: "liquid",
    density: 14010,
    conduct: 0.2,
    stateLowName: "solid_stable_flerovium",
    hidden: true,
  };
  
  elements.stable_flerovium_gas = {
    density: 12.014,
    reactions: {
      molten_sulfur: { elem1: "flerovium_sulfide", elem2: null },
    },
  };
  
  elements.flerovium_sulfide = {
    color: [blendColors("#121107", "#ff0000", 0.25), blendColors("#121107", "#00ff00", 0.25), blendColors("#121107", "#0000ff", 0.25), blendColors("#d9d8d4", "#ff0000", 0.25), blendColors("#d9d8d4", "#00ff00", 0.25), blendColors("#d9d8d4", "#0000ff", 0.25)],
    behavior: behaviors.WALL,
    hidden: true,
    tempHigh: 1220, //made up
    category: "solids",
    state: "solid",
    density: 14700, //made up
    burnInto: ["flerovium_oxide", "sulfur_dioxide"],
    burn: 1,
  };
  eListAdd("INSOLUBLE", "flerovium_sulfide");
  eListAddIon("FLEROVIUM", "flerovium_sulfide");
  eListAddIon("SULFIDE", "flerovium_sulfide");
  
  elements.flerovium_oxide = {
    color: [blendColors("#eddb93", "#ff0000", 0.25), blendColors("#eddb93", "#00ff00", 0.25), blendColors("#eddb93", "#0000ff", 0.25)],
    behavior: behaviors.STURDYPOWDER,
    hidden: true,
    reactions: {},
    tempHigh: 1120, //made up
    category: "powders",
    state: "solid",
    density: 14320, //made up
  };
  elements.molten_flerovium_oxide = {
    reactions: {
      charcoal: { elem1: "stable_flerovium", elem2: "carbon_dioxide" },
    },
  };
  
  reduce("flerovium_oxide", "oxygen", "stable_flerovium");
  
  eListAdd("INSOLUBLE", "flerovium_sulfide");
  eListAddIon("FLEROVIUM", "flerovium_sulfide");
  eListAddIon("SULFIDE", "flerovium_sulfide");
  elements.molten_plutonium.reactions["molten_calcium"] = { elem1: "flerovium", elem2: null, tempMin: 10000, chance: 0.01 };
  elements.molten_depleted_plutonium.reactions["molten_calcium"] = { elem1: "flerovium", elem2: null, tempMin: 10000, chance: 0.01 };
  elements.molten_enriched_plutonium.reactions["molten_calcium"] = { elem1: "flerovium", elem2: null, tempMin: 10000, chance: 0.01 };
  
  elements.moscovium = {
    color: ["#8a3683", "#b0339b", "#d14fcd"],
    behavior: ["XX|CR:neutron%2 AND CR:radiation%2 AND CR:alpha_particle%2 AND CR:rad_pop%2|XX", "CR:neutron%2 AND CR:radiation%2 AND CR:alpha_particle%2 AND CR:rad_pop%2|CH:nihonium%1|CR:neutron%2 AND CR:radiation%2 AND CR:alpha_particle%2 AND CR:rad_pop%2", "XX|CR:neutron%2 AND CR:radiation%2 AND CR:alpha_particle%2 AND CR:rad_pop%2|XX"],
    reactions: {
      quark_matter: { elem1: "stable_moscovium" },
      neutron: { elem1: "livermorium", elem2: null, chance: 0.1 },
    },
    tempHigh: 400,
    category: "solids",
    state: "solid",
    density: 13500,
    hardness: 1.0,
    conduct: 0.2,
    tick: function (pixel) {
      pixel.temp += 100;
    },
    excludeRandom: true,
  };
  
  elements.molten_moscovium = {
    behavior: ["XX|CR:neutron%2 AND CR:radiation%2 AND CR:alpha_particle%2 AND CR:rad_pop%2|XX", "M2 AND CR:neutron%2 AND CR:radiation%2 AND CR:alpha_particle%2 AND CR:rad_pop%2|CH:nihonium%1|CR:neutron%2 AND CR:radiation%2 AND CR:alpha_particle%2 AND CR:rad_pop%2", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_moscovium" },
      neutron: { elem1: "livermorium", elem2: null, chance: 0.1 },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 100;
    },
    excludeRandom: true,
  };
  
  elements.stable_moscovium = {
    color: [blendColors("#8a3683", "#ff0000"), blendColors("#b0339b", "#00ff00"), blendColors("#d14fcd", "#0000ff")],
    behavior: behaviors.WALL,
    reactions: {
      //TODO
    },
    tempHigh: 400,
    category: "solids",
    state: "solid",
    density: 13500,
    conduct: 0.2,
    hidden: true,
  };
  
  runAfterLoad(function () {
    reactList("stable_moscovium", eLists.WATER, { elem1: "moscovium_hydroxide_solution", elem2: "hydrogen", chance: 0.05, temp1: 100, temp2: 100 });
  });
  
  createSalt("moscovium_hydroxide", "moscovium_hydroxide_solution", [blendColors("#f5dff3", "#ff0000", 0.25), blendColors("#f5dff3", "#00ff00", 0.25), blendColors("#f5dff3", "#0000ff", 0.25)], [blendColors("#6548f7", "#ff0000", 0.25), blendColors("#6548f7", "#00ff00", 0.25), blendColors("#6548f7", "#0000ff", 0.25)], true, true, 670, -2, 102, 5620, 1092, "MOSCOVIUM", "HYDROXIDE");
  
  eListAdd("BASE", "moscovium_hydroxide");
  eListAddIon("MOSCOVIUM", "moscovium_hydroxide", "base");
  eListAddIon("HYDROXIDE", "moscovium_hydroxide", "base");
  eListAdd("BASE", "moscovium_hydroxide_solution");
  eListAddIon("MOSCOVIUM", "moscovium_hydroxide_solution", "base");
  eListAddIon("HYDROXIDE", "moscovium_hydroxide_solution", "base");
  
  elements.moscovium_fluoride = {
    color: [blendColors("#eedff5", "#ff0000", 0.25), blendColors("#eedff5", "#00ff00", 0.25), blendColors("#eedff5", "#0000ff", 0.25)],
    behavior: behaviors.STURDYPOWDER,
    hidden: true,
    tempHigh: 720, //made up
    category: "powders",
    state: "solid",
    density: 6220, //made up
    reactions: {},
  };
  
  acidReact("stable_moscovium", "hydrofluoric_acid", "moscovium_fluoride", "fire");
  acidReact("stable_moscovium", "liquid_hydrogen_fluoride", "moscovium_fluoride", "fire");
  acidReact("stable_moscovium", "hydrofluoric_acid_gas", "moscovium_fluoride", "fire");
  acidReact("stable_moscovium", "hydrogen_fluoride", "moscovium_fluoride", "fire");
  acidReact("moscovium_hydroxide", "hydrofluoric_acid", "moscovium_fluoride", "fire");
  acidReact("moscovium_hydroxide", "liquid_hydrogen_fluoride", "moscovium_fluoride", "fire");
  acidReact("moscovium_hydroxide", "hydrofluoric_acid_gas", "moscovium_fluoride", "fire");
  acidReact("moscovium_hydroxide", "hydrogen_fluoride", "moscovium_fluoride", "fire");
  acidReact("moscovium_hydroxide_solution", "hydrofluoric_acid", "moscovium_fluoride", "fire");
  acidReact("moscovium_hydroxide_solution", "liquid_hydrogen_fluoride", "moscovium_fluoride", "fire");
  acidReact("moscovium_hydroxide_solution", "hydrofluoric_acid_gas", "moscovium_fluoride", "fire");
  acidReact("moscovium_hydroxide_solution", "hydrogen_fluoride", "moscovium_fluoride", "fire");
  
  reduce("moscovium_fluoride", "fluorine", "stable_moscovium");
  
  eListAdd("INSOLUBLE", "moscovium_fluoride");
  eListAddIon("MOSCOVIUM", "moscovium_fluoride");
  eListAddIon("FLUORIDE", "moscovium_fluoride");
  
  elements.molten_americium.reactions["molten_calcium"] = { elem1: "moscovium", elem2: null, tempMin: 10000, chance: 0.01 };
  
  elements.livermorium = {
    color: ["#c9c26b", "#5ee04c", "#8bc253"],
    behavior: ["XX|CR:neutron%10 AND CR:radiation%10 AND CR:alpha_particle%10 AND CR:rad_pop%10 AND CR:n_explosion%0.1|XX", "CR:neutron%10 AND CR:radiation%10 AND CR:alpha_particle%10 AND CR:rad_pop%10 AND CR:n_explosion%0.1|CH:flerovium%1|CR:neutron%10 AND CR:radiation%10 AND CR:alpha_particle%10 AND CR:rad_pop%10 AND CR:n_explosion%0.1", "XX|CR:neutron%10 AND CR:radiation%10 AND CR:alpha_particle%10 AND CR:rad_pop%10 AND CR:n_explosion%0.1|XX"],
    reactions: {
      quark_matter: { elem1: "stable_livermorium" },
      neutron: { elem1: "tennessine", elem2: null, chance: 0.1 },
    },
    tempHigh: 455,
    category: "solids",
    state: "solid",
    density: 12900,
    hardness: 1.0,
    conduct: 0.2,
    tick: function (pixel) {
      pixel.temp += 100;
    },
    excludeRandom: true,
  };
  
  elements.molten_livermorium = {
    behavior: ["XX|CR:neutron%10 AND CR:radiation%10 AND CR:alpha_particle%10 AND CR:rad_pop%10 AND CR:n_explosion%0.1|XX", "M2 AND CR:neutron%10 AND CR:radiation%10 AND CR:alpha_particle%10 AND CR:rad_pop%10 AND CR:n_explosion%0.1|CH:flerovium%1|CR:neutron%10 AND CR:radiation%10 AND CR:alpha_particle%10 AND CR:rad_pop%10 AND CR:n_explosion%0.1", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_livermorium" },
      neutron: { elem1: "tennessine", elem2: null, chance: 0.1 },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 100;
    },
    excludeRandom: true,
  };
  
  elements.stable_livermorium = {
    color: [blendColors("#c9c26b", "#ff0000"), blendColors("#5ee04c", "#00ff00"), blendColors("#8bc253", "#0000ff")],
    behavior: behaviors.WALL,
    reactions: {
      oxygen: { elem1: "livermorium_oxide", elem2: "fire", chance: 0.05 },
    },
    tempHigh: 455,
    category: "solids",
    state: "solid",
    density: 12900,
    conduct: 0.2,
    hidden: true,
    burn: 1,
    burnInto: "livermorium_oxide",
  };
  
  elements.livermorium_oxide = {
    color: [blendColors("#ebcb8f", "#ff0000", 0.25), blendColors("#ebcb8f", "#00ff00", 0.25), blendColors("#ebcb8f", "#0000ff", 0.25)],
    behavior: behaviors.STURDYPOWDER,
    reactions: {},
    hidden: true,
    tempHigh: 730, //made up
    category: "powders",
    state: "solid",
    density: 12430, //made up
  };
  elements.molten_livermorium_oxide = {
    reactions: {
      charcoal: { elem1: "stable_livermorium", elem2: "carbon_dioxide" },
    },
  };
  
  reduce("livermorium_oxide", "oxygen", "stable_livermorium");
  
  elements.molten_curium.reactions["molten_calcium"] = { elem1: "livermorium", elem2: null, tempMin: 10000, chance: 0.01 };
  
  elements.tennessine = {
    color: ["#4f4c42"],
    behavior: ["XX|CR:neutron%15 AND CR:radiation%15 AND CR:alpha_particle%15 AND CR:rad_pop%15 AND CR:n_explosion%0.2|XX", "CR:neutron%15 AND CR:radiation%15 AND CR:alpha_particle%15 AND CR:rad_pop%15 AND CR:n_explosion%0.2|CH:moscovium%1|CR:neutron%15 AND CR:radiation%15 AND CR:alpha_particle%15 AND CR:rad_pop%15 AND CR:n_explosion%0.2", "M2|M1|M2"],
    reactions: {
      quark_matter: { elem1: "stable_tennessine" },
      neutron: { elem1: "oganesson", elem2: null, chance: 0.1 },
    },
    tempHigh: 425,
    category: "powders",
    state: "solid",
    density: 7200,
    hardness: 1.0,
    conduct: 0.1,
    tick: function (pixel) {
      pixel.temp += 100;
    },
    excludeRandom: true,
  };
  
  elements.molten_tennessine = {
    behavior: ["XX|CR:neutron%15 AND CR:radiation%15 AND CR:alpha_particle%15 AND CR:rad_pop%15 AND CR:n_explosion%0.2|XX", "M2 AND CR:neutron%15 AND CR:radiation%15 AND CR:alpha_particle%15 AND CR:rad_pop%15 AND CR:n_explosion%0.2|CH:moscovium%1|M2 AND CR:neutron%15 AND CR:radiation%15 AND CR:alpha_particle%15 AND CR:rad_pop%15 AND CR:n_explosion%0.2", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_tennessine" },
      neutron: { elem1: "oganesson", elem2: null, chance: 0.1 },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 100;
    },
    excludeRandom: true,
  };
  
  elements.stable_tennessine = {
    color: [blendColors("#4f4c42", "#ff0000"), blendColors("#4f4c42", "#00ff00"), blendColors("#4f4c42", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {},
    tempHigh: 425,
    category: "powders",
    state: "solid",
    density: 7200,
    conduct: 0.1,
    hidden: true,
  };
  
  acidReact("stable_tennessine", "hydrofluoric_acid", "tennessine_monofluoride", "fire");
  acidReact("stable_tennessine", "liquid_hydrogen_fluoride", "tennessine_monofluoride", "fire");
  acidReact("stable_tennessine", "hydrofluoric_acid_gas", "tennessine_monofluoride", "fire");
  acidReact("stable_tennessine", "hydrogen_fluoride", "tennessine_monofluoride", "fire");
  
  elements.tennessine_monofluoride = {
    color: [blendColors("#4a4123", "#ff0000", 0.25), blendColors("#4a4123", "#00ff00", 0.25), blendColors("#4a4123", "#0000ff", 0.25)],
    behavior: behaviors.LIQUID,
    reactions: {},
    tempHigh: 130, //made up
    tempLow: 5,
    category: "liquids",
    state: "liquid",
    density: 5200, //made up
    hidden: true,
    stain: 0.2,
  };
  
  elements.tennessine_monofluoride_gas = {
    density: 13.012,
  };
  
  acidReact("fluorine", "tennessine_monofluoride_ice", "tennessine_trifluoride", "fire");
  acidReact("liquid_fluorine", "tennessine_monofluoride_ice", "tennessine_trifluoride", "fire");
  acidReact("fluorine", "tennessine_monofluoride", "tennessine_trifluoride", "fire");
  acidReact("liquid_fluorine", "tennessine_monofluoride", "tennessine_trifluoride", "fire");
  acidReact("fluorine", "tennessine_monofluoride_gas", "tennessine_trifluoride", "fire");
  acidReact("liquid_fluorine", "tennessine_monofluoride_gas", "tennessine_trifluoride", "fire");
  
  elements.fluorine.ignore.push("tennessine_trifluoride_gas");
  elements.fluorine.ignore.push("tennessine_trifluoride_ice");
  elements.liquid_fluorine.ignore.push("tennessine_trifluoride_gas");
  elements.liquid_fluorine.ignore.push("tennessine_trifluoride_ice");
  
  elements.tennessine_trifluoride = {
    color: [blendColors("#ffc400", "#ff0000", 0.25), blendColors("#ffc400", "#00ff00", 0.25), blendColors("#ffc400", "#0000ff", 0.25)],
    behavior: behaviors.LIQUID,
    reactions: {},
    tempHigh: 105, //made up
    tempLow: 3,
    category: "liquids",
    state: "liquid",
    density: 5600, //made up
    hidden: true,
    stain: 0.3,
  };
  
  elements.tennessine_trifluoride_gas = {
    density: 14.591,
  };
  
  runAfterAutogen(function () {
    reactList("tennessine_trifluoride", eLists.WATER, { elem1: "hydrofluoric_acid", elem2: "tennessine_monofluoride" });
  });
  
  elements.molten_berkelium.reactions["molten_calcium"] = { elem1: "tennessine", elem2: null, tempMin: 10000, chance: 0.01 };
  
  elements.oganesson = {
    color: ["#c4ccc6", "#9ea39f", "#8e9294"],
    behavior: ["XX|CR:neutron%20 AND CR:radiation%20 AND CR:alpha_particle%20 AND CR:rad_pop%20 AND CR:n_explosion%1|XX", "CR:neutron%20 AND CR:radiation%20 AND CR:alpha_particle%20 AND CR:rad_pop%20 AND CR:n_explosion%1|CH:livermorium%1|CR:neutron%20 AND CR:radiation%20 AND CR:alpha_particle%20 AND CR:rad_pop%20 AND CR:n_explosion%1", "XX|CR:neutron%20 AND CR:radiation%20 AND CR:alpha_particle%20 AND CR:rad_pop%20 AND CR:n_explosion%1|XX"],
  
    reactions: {
      quark_matter: { elem1: "stable_oganesson" },
      neutron: { elem1: "ununennium", elem2: null, chance: 0.1 },
    },
    tempHigh: 52,
    category: "solids",
    state: "solid",
    density: 7200,
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 100;
    },
    excludeRandom: true,
  };
  
  elements.molten_oganesson = {
    behavior: ["XX|CR:neutron%20 AND CR:radiation%20 AND CR:alpha_particle%20 AND CR:rad_pop%20 AND CR:n_explosion%1|XX", "M2 AND CR:neutron%20 AND CR:radiation%20 AND CR:alpha_particle%20 AND CR:rad_pop%20 AND CR:n_explosion%1|CH:livermorium%1|M2 AND CR:neutron%20 AND CR:radiation%20 AND CR:alpha_particle%20 AND CR:rad_pop%20 AND CR:n_explosion%1", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_oganesson" },
      neutron: { elem1: "ununennium", elem2: null, chance: 0.1 },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 100;
    },
    tempHigh: 177,
    excludeRandom: true,
  };
  
  elements.oganesson_gas = {
    behavior: ["M2|M1 AND CR:neutron%20 AND CR:radiation%20 AND CR:alpha_particle%20 AND CR:rad_pop%20 AND CR:n_explosion%1|M2", "M1 AND CR:neutron%20 AND CR:radiation%20 AND CR:alpha_particle%20 AND CR:rad_pop%20 AND CR:n_explosion%1|CH:livermorium%1|M1 AND CR:neutron%20 AND CR:radiation%20 AND CR:alpha_particle%20 AND CR:rad_pop%20 AND CR:n_explosion%1", "M2|M1 AND CR:neutron%20 AND CR:radiation%20 AND CR:alpha_particle%20 AND CR:rad_pop%20 AND CR:n_explosion%1|M2"],
    reactions: {
      quark_matter: { elem1: "stable_oganesson" },
      neutron: { elem1: "ununennium", elem2: null, chance: 0.1 },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 100;
    },
    excludeRandom: true,
    density: 12.222,
    colorOn: ["#e224ff", "#cc6c96", "#c76ccc"],
    conduct: 0.86,
  };
  
  elements.stable_oganesson = {
    color: [blendColors("#c4ccc6", "#ff0000"), blendColors("#9ea39f", "#00ff00"), blendColors("#8e9294", "#0000ff")],
    behavior: behaviors.SOLID,
    reactions: {
      tennessine_trifluoride: { elem1: "oganesson_tetrafluoride", elem2: "oganesson_tetratennesside" },
      tennessine_trifluoride_gas: { elem1: "oganesson_tetrafluoride", elem2: "oganesson_tetratennesside" },
    },
    tempHigh: 52,
    category: "solids",
    state: "solid",
    density: 7200,
    hidden: true,
  };
  elements.molten_stable_oganesson = {
    tempLow: 52,
    tempHigh: 177,
    reactions: {
      tennessine_trifluoride: { elem1: "oganesson_tetrafluoride", elem2: "oganesson_tetratennesside" },
      tennessine_trifluoride_gas: { elem1: "oganesson_tetrafluoride", elem2: "oganesson_tetratennesside" },
    },
  };
  elements.stable_oganesson_gas = {
    density: 12.222,
    reactions: {
      tennessine_trifluoride: { elem1: "oganesson_tetrafluoride", elem2: "oganesson_tetratennesside" },
      tennessine_trifluoride_gas: { elem1: "oganesson_tetrafluoride", elem2: "oganesson_tetratennesside" },
    },
    colorOn: ["#e224ff", "#cc6c96", "#c76ccc"],
    conduct: 0.86,
  };
  
  acidReact("stable_oganesson", "hydrofluoric_acid", "oganesson_difluoride", "fire");
  acidReact("stable_oganesson", "liquid_hydrogen_fluoride", "oganesson_difluoride", "fire");
  acidReact("stable_oganesson", "hydrofluoric_acid_gas", "oganesson_difluoride", "fire");
  acidReact("stable_oganesson", "hydrogen_fluoride", "oganesson_difluoride", "fire");
  
  elements.oganesson_difluoride = {
    color: [blendColors("#e3e2de", "#ff0000", 0.25), blendColors("#e3e2de", "#00ff00", 0.25), blendColors("#e3e2de", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    reactions: {},
    tempHigh: 160, //made up
    category: "powders",
    state: "solid",
    density: 6100, //made up
    hidden: true,
  };
  
  acidReact("fluorine", "oganesson_difluoride", "oganesson_tetrafluoride", "fire");
  acidReact("liquid_fluorine", "oganesson_difluoride", "oganesson_tetrafluoride", "fire");
  acidReact("fluorine", "molten_oganesson_difluoride", "oganesson_tetrafluoride", "fire");
  acidReact("liquid_fluorine", "molten_oganesson_difluoride", "oganesson_tetrafluoride", "fire");
  
  elements.fluorine.ignore.push("molten_oganesson_tetrafluoride");
  elements.liquid_fluorine.ignore.push("molten_oganesson_tetrafluoride");
  
  elements.oganesson_tetrafluoride = {
    color: [blendColors("#d6d5d2", "#ff0000", 0.25), blendColors("#d6d5d2", "#00ff00", 0.25), blendColors("#d6d5d2", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    reactions: {},
    tempHigh: 120, //made up
    category: "powders",
    state: "solid",
    density: 6300, //made up
    hidden: true,
  };
  
  runAfterAutogen(function () {
    reactList("oganesson_tetrafluoride", eLists.WATER, { elem1: "hydrofluoric_acid", elem2: "oganesson_difluoride" });
  });
  
  elements.oganesson_tetratennesside = {
    color: [blendColors("#f7f7f5", "#ff0000"), blendColors("#f7f7f5", "#00ff00"), blendColors("#f7f7f5", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {},
    tempHigh: 180, //made up
    category: "powders",
    state: "solid",
    density: 13800, //made up
    stateHigh: ["molten_stable_oganesson", "stable_tennessine"],
    hidden: true,
  };
  
  elements.molten_californium.reactions["molten_calcium"] = { elem1: "oganesson", elem2: null, tempMin: 10000, chance: 0.01 };
  
  elements.ununennium = {
    color: ["#c0eb9b", "#82e082", "#b8c29d"],
    behavior: ["XX|CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2|XX", "M2 AND CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2|CH:tennessine%1|M2 AND CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_ununennium" },
      neutron: { elem1: "unbinilium", elem2: null, chance: 0.1 },
    },
    tempHigh: 630,
    tempLow: 15,
    category: "liquids",
    state: "liquid",
    density: 3000,
    hardness: 1.0,
    conduct: 0.2,
    stateLowName: "solid_ununennium",
    tick: function (pixel) {
      pixel.temp += 150;
    },
    excludeRandom: true,
  };
  
  elements.solid_ununennium = {
    behavior: ["XX|CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2|XX", "CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2|CH:tennessine%1|CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2", "M2|M1|M2"],
    reactions: {
      quark_matter: { elem1: "stable_ununennium" },
      neutron: { elem1: "unbinilium", elem2: null, chance: 0.1 },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 150;
    },
    excludeRandom: true,
  };
  
  elements.ununennium_gas = {
    behavior: ["M2|M1 AND CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2|M2", "M1 AND CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2|CH:tennessine%1|M1 AND CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2", "M2|M1 AND CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2|M2"],
    reactions: {
      quark_matter: { elem1: "stable_ununennium" },
      neutron: { elem1: "unbinilium", elem2: null, chance: 0.1 },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 150;
    },
    excludeRandom: true,
    density: 12.555,
  };
  
  runAfterAutogen(function () {
    reactList("ununennium", eLists.WATER, { elem1: "n_explosion", elem2: null });
    reactList("solid_ununennium", eLists.WATER, { elem1: "n_explosion", elem2: null });
    reactList("ununennium_gas", eLists.WATER, { elem1: "n_explosion", elem2: null });
  });
  
  elements.stable_ununennium = {
    color: [blendColors("#c0eb9b", "#ff0000"), blendColors("#82e082", "#00ff00"), blendColors("#b8c29d", "#0000ff")],
    behavior: behaviors.LIQUID,
    reactions: {
      steam: { elem1: "ununennium_hydroxide", elem2: [null, null, "big_pop"], func: ununenniumHydroxide },
      rad_steam: { elem1: "ununennium_hydroxide", elem2: [null, null, "big_pop"], func: ununenniumHydroxide },
    },
    tempHigh: 630,
    tempLow: 15,
    category: "liquids",
    state: "liquid",
    density: 14010,
    conduct: 0.2,
    stateLowName: "solid_stable_ununennium",
    hidden: true,
  };
  
  runAfterLoad(function () {
    reactList("stable_ununennium", eLists.WATER, { elem1: "ununennium_hydroxide", elem2: [null, null, "big_pop"], func: ununenniumHydroxide });
    reactList("stable_ununennium_gas", eLists.WATER, { elem1: "ununennium_hydroxide", elem2: [null, null, "big_pop"], func: ununenniumHydroxide });
    reactList("solid_stable_ununennium", eLists.WATER, { elem1: "ununennium_hydroxide", elem2: [null, null, "big_pop"], func: ununenniumHydroxide });
  });
  
  elements.stable_ununennium_gas = {
    density: 12.555,
    reactions: {
      steam: { elem1: "ununennium_hydroxide", elem2: [null, null, "big_pop"], func: ununenniumHydroxide },
      rad_steam: { elem1: "ununennium_hydroxide", elem2: [null, null, "big_pop"], func: ununenniumHydroxide },
    },
  };
  
  elements.solid_stable_ununennium = {
    behavior: behaviors.POWDER,
    reactions: {
      steam: { elem1: "ununennium_hydroxide", elem2: [null, null, "big_pop"], func: ununenniumHydroxide },
      rad_steam: { elem1: "ununennium_hydroxide", elem2: [null, null, "big_pop"], func: ununenniumHydroxide },
    },
  };
  
  function ununenniumHydroxide(pixel) {
    elementCircle(pixel.x, pixel.y, 10, "ununennium_hydroxide", 0.1, eLists.WATER.concat(["steam", "rad_steam"]));
  }
  
  elements.hydrofluoric_acid.ignore.push("ununennium_fluoride", "ununennium_trifluoride", "ununennium_pentafluoride");
  elements.hydrofluoric_acid_gas.ignore.push("ununennium_fluoride", "ununennium_trifluoride", "ununennium_pentafluoride");
  elements.hydrogen_fluoride.ignore.push("ununennium_fluoride", "ununennium_trifluoride", "ununennium_pentafluoride");
  elements.liquid_hydrogen_fluoride.ignore.push("ununennium_fluoride", "ununennium_trifluoride", "ununennium_pentafluoride");
  
  createSalt("ununennium_fluoride", "ununennium_fluoride_solution", [blendColors("#e1e4eb", "#ff0000", 0.25), blendColors("#e1e4eb", "#00ff00", 0.25), blendColors("#e1e4eb", "#0000ff", 0.25)], [blendColors("#3061f2", "#ff0000", 0.25), blendColors("#3061f2", "#00ff00", 0.25), blendColors("#3061f2", "#0000ff", 0.25)], true, true, 1270, -2, 102, 6703, 1094, "UNUNENNIUM", "FLUORIDE");
  
  acidReact("fluorine", "ununennium_fluoride", "ununennium_trifluoride", "fire");
  acidReact("liquid_fluorine", "ununennium_fluoride", "ununennium_trifluoride", "fire");
  acidReact("fluorine", "molten_ununennium_fluoride", "ununennium_trifluoride", "fire");
  acidReact("liquid_fluorine", "molten_ununennium_fluoride", "ununennium_trifluoride", "fire");
  
  elements.fluorine.ignore.push("molten_ununennium_trifluoride");
  elements.liquid_fluorine.ignore.push("molten_ununennium_trifluoride");
  
  elements.ununennium_trifluoride = {
    color: [blendColors("#ccb87a", "#ff0000", 0.25), blendColors("#ccb87a", "#00ff00", 0.25), blendColors("#ccb87a", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    reactions: {},
    tempHigh: 140, //made up
    category: "powders",
    state: "solid",
    density: 7200, //made up
    hidden: true,
  };
  
  runAfterAutogen(function () {
    reactList("ununennium_trifluoride", eLists.WATER, { elem1: "hydrofluoric_acid", elem2: "ununennium_fluoride" });
  });
  
  acidReact("foof", "ununennium_trifluoride", "ununennium_pentafluoride", "oxygen");
  acidReact("solid_foof", "ununennium_trifluoride", "ununennium_pentafluoride", "oxygen");
  
  elements.fluorine.ignore.push("ununennium_pentafluoride");
  elements.liquid_fluorine.ignore.push("ununennium_pentafluoride");
  
  elements.ununennium_pentafluoride = {
    color: [blendColors("#db5030", "#ff0000", 0.25), blendColors("#db5030", "#00ff00", 0.25), blendColors("#db5030", "#0000ff", 0.25)],
    behavior: behaviors.CAUSTIC,
    reactions: {},
    tempHigh: 70, //made up
    category: "powders",
    state: "solid",
    stateHigh: ["ununennium_trifluoride", "fluorine"],
    density: 7250, //made up
    hidden: true,
    ignore: ["foof", "solid_foof", "fluorine", "liquid_fluorine", "fluorine_ice", "ununennium_trifluoride", "oxygen", "liquid_oxygen", "oxygen_ice", "ozone", "hydrofluoric_acid", "hydrofluoric_acid_gas", "hydrogen_fluoride", "liquid_hydrogen_fluoride"],
  };
  
  elements.molten_einsteinium.reactions["molten_calcium"] = { elem1: "ununennium", elem2: null, tempMin: 10000, chance: 0.01 };
  
  elements.unbinilium = {
    color: ["#faf069", "#fcf0c7", "#edcd3e"],
    behavior: ["XX|CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2|XX", "CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2|CH:oganesson%1|CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2", "M2|M1|M2"],
    reactions: {
      quark_matter: { elem1: "stable_unbinilium" },
    },
    tempHigh: 680,
    category: "powders",
    state: "solid",
    density: 7000,
    hardness: 1.0,
    conduct: 0.2,
    tick: function (pixel) {
      pixel.temp += 150;
    },
    excludeRandom: true,
  };
  
  elements.molten_unbinilium = {
    behavior: ["XX|CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2|XX", "M2 AND CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2|CH:oganesson%1|M2 AND CR:neutron%25 AND CR:radiation%25 AND CR:alpha_particle%25 AND CR:rad_pop%25 AND CR:n_explosion%2", "M1|M1|M1"],
    reactions: {
      quark_matter: { elem1: "stable_unbinilium" },
    },
    hardness: 1.0,
    tick: function (pixel) {
      pixel.temp += 150;
    },
    excludeRandom: true,
  };
  
  elements.stable_unbinilium = {
    color: [blendColors("#faf069", "#ff0000"), blendColors("#fcf0c7", "#00ff00"), blendColors("#edcd3e", "#0000ff")],
    behavior: behaviors.POWDER,
    reactions: {
      oxygen: { elem1: "unbinilium_oxide" },
    },
    tempHigh: 680,
    category: "powders",
    state: "solid",
    density: 7000,
    conduct: 0.2,
    hidden: true,
  };
  
  elements.unbinilium_oxide = {
    color: [blendColors("#f5f2e1", "#ff0000", 0.25), blendColors("#f5f2e1", "#00ff00", 0.25), blendColors("#f5f2e1", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    reactions: {},
    hidden: true,
    tempHigh: 2763,
    category: "powders",
    state: "solid",
    density: 15000,
  };
  
  eListAddIon("UNBINILIUM", "unbinilium_oxide");
  eListAddIon("OXIDE", "unbinilium_oxide");
  eListAdd("INSOLUBLE", "unbinilium_oxide");
  
  elements.unbinilium_hydroxide = {
    color: [blendColors("#f9faf2", "#ff0000", 0.25), blendColors("#f9faf2", "#00ff00", 0.25), blendColors("#f9faf2", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    hidden: true,
    tempHigh: 620,
    reactions: {},
    stateHigh: "unbinilium_oxide",
    category: "powders",
    state: "solid",
    density: 12000,
  };
  
  eListAdd("BASE", "unbinilium_hydroxide");
  eListAddIon("UNBINILIUM", "unbinilium_hydroxide", "base");
  eListAddIon("HYDROXIDE", "unbinilium_hydroxide", "base");
  eListAdd("INSOLUBLE", "unbinilium_hydroxide");
  
  elements.molten_stable_unbinilium = {
    reactions: {
      oxygen: { elem1: "unbinilium_oxide" },
    },
    conduct: 0.2,
  };
  
  runAfterLoad(function () {
    reactList("unbinilium_oxide", eLists.WATER, { elem1: "unbinilium_hydroxide", elem2: null, chance: 0.01 });
    reactList("stable_unbinilium", eLists.WATER, { elem1: ["unbinilium_hydroxide", "pop"], elem2: ["hydrogen", "bubble"], chance: 0.05, temp2: 350 });
    reactList("molten_stable_unbinilium", eLists.WATER, { elem1: ["unbinilium_hydroxide", "pop"], elem2: ["hydrogen", "bubble"], chance: 0.05, temp2: 350 });
  });
  
  acidReact("hydrofluoric_acid", "unbinilium_hydroxide", "unbinilium_difluoride_solution", "fire");
  acidReact("hydrofluoric_acid_gas", "unbinilium_hydroxide", "unbinilium_difluoride_solution", "fire");
  acidReact("hydrogen_fluoride", "unbinilium_hydroxide", "unbinilium_difluoride_solution", "fire");
  acidReact("liquid_hydrogen_fluoride", "unbinilium_hydroxide", "unbinilium_difluoride_solution", "fire");
  elements.hydrofluoric_acid.ignore.push("unbinilium_difluoride", "unbinilium_tetrafluoride", "unbinilium_hexafluoride");
  elements.hydrofluoric_acid_gas.ignore.push("unbinilium_difluoride", "unbinilium_tetrafluoride", "unbinilium_hexafluoride");
  elements.hydrogen_fluoride.ignore.push("unbinilium_difluoride", "unbinilium_tetrafluoride", "unbinilium_hexafluoride");
  elements.liquid_hydrogen_fluoride.ignore.push("unbinilium_difluoride", "unbinilium_tetrafluoride", "unbinilium_hexafluoride");
  
  createSalt("unbinilium_difluoride", "unbinilium_difluoride_solution", [blendColors("#e8ebe1", "#ff0000", 0.25), blendColors("#e8ebe1", "#00ff00", 0.25), blendColors("#e8ebe1", "#0000ff", 0.25)], [blendColors("#3087f2", "#ff0000", 0.25), blendColors("#3087f2", "#00ff00", 0.25), blendColors("#3087f2", "#0000ff", 0.25)], true, true, 1340, -2, 102, 6800, 1095, "UNBINILIUM", "FLUORIDE");
  
  acidReact("fluorine", "unbinilium_difluoride", "unbinilium_tetrafluoride", "fire");
  acidReact("liquid_fluorine", "unbinilium_difluoride", "unbinilium_tetrafluoride", "fire");
  acidReact("fluorine", "molten_unbinilium_difluoride", "unbinilium_tetrafluoride", "fire");
  acidReact("liquid_fluorine", "molten_unbinilium_difluoride", "unbinilium_tetrafluoride", "fire");
  
  elements.fluorine.ignore.push("molten_unbinilium_tetrafluoride");
  elements.liquid_fluorine.ignore.push("molten_unbinilium_tetrafluoride");
  
  elements.unbinilium_tetrafluoride = {
    color: [blendColors("#e0dd12", "#ff0000", 0.25), blendColors("#e0dd12", "#00ff00", 0.25), blendColors("#e0dd12", "#0000ff", 0.25)],
    behavior: behaviors.POWDER,
    reactions: {},
    tempHigh: 210, //made up
    category: "powders",
    state: "solid",
    density: 7500, //made up
    hidden: true,
  };
  
  runAfterAutogen(function () {
    reactList("unbinilium_tetrafluoride", eLists.WATER, { elem1: "hydrofluoric_acid", elem2: "unbinilium_difluoride" });
  });
  
  acidReact("foof", "unbinilium_tetrafluoride", "unbinilium_hexafluoride", "oxygen");
  acidReact("solid_foof", "unbinilium_tetrafluoride", "unbinilium_hexafluoride", "oxygen");
  
  elements.fluorine.ignore.push("unbinilium_hexafluoride");
  elements.liquid_fluorine.ignore.push("unbinilium_hexafluoride");
  
  elements.unbinilium_hexafluoride = {
    color: [blendColors("#ffca7a", "#ff0000", 0.25), blendColors("#ffca7a", "#00ff00", 0.25), blendColors("#ffca7a", "#0000ff", 0.25)],
    behavior: behaviors.CAUSTIC,
    reactions: {},
    tempHigh: 70, //made up
    category: "powders",
    state: "solid",
    stateHigh: ["unbinilium_tetrafluoride", "fluorine"],
    density: 7700, //made up
    hidden: true,
    ignore: ["foof", "solid_foof", "fluorine", "liquid_fluorine", "fluorine_ice", "unbinilium_tetrafluoride", "oxygen", "liquid_oxygen", "oxygen_ice", "ozone", "hydrofluoric_acid", "hydrofluoric_acid_gas", "hydrogen_fluoride", "liquid_hydrogen_fluoride"],
  };
  
  elements.molten_fermium.reactions["molten_calcium"] = { elem1: "unbinilium", elem2: null, tempMin: 10000, chance: 0.01 };
  
  let defaultBaseReactions = {
    grape: { elem2: "juice", color1: "#291824" },
    sodium: { elem1: "pop" },
    meat: { elem2: "rotten_meat", elem1: null, chance: 0.5 },
    grease: { elem2: "soap", elem1: null },
    fat: { elem2: "soap", elem1: null },
  };
  
  let defaultBaseGasReactions = {
    grape: { elem2: "juice", color1: "#291824" },
    sodium: { elem1: "pop" },
    meat: { elem2: "rotten_meat", elem1: null, chance: 0.4 },
    grease: { elem2: "soap", elem1: null },
    fat: { elem2: "soap", elem1: null },
  };
  
  createAcid("francium_hydroxide", structuredClone(defaultBaseReactions), structuredClone(defaultBaseGasReactions), [blendColors("#863bff", "#ff0000"), blendColors("#4d00ca", "#00ff00"), blendColors("#897b9e", "#0000ff")], true, true, 100, 100, 0, 1000, 1200, 1, "FRANCIUM", "base");
  
  elements.francium_hydroxide.ignore.push("francium_nihonide", "nihonium_hydroxide", "hydrogen", "steam");
  elements.francium_hydroxide_gas.ignore.push("francium_nihonide", "nihonium_hydroxide", "hydrogen", "steam");
  
  eListAddIon("HYDROXIDE", ["francium_hydroxide", "francium_hydroxide_gas"], "base");
  
  eListAdd("BASE", []);
  
  function acidNeutralize(base) {
    for (let i = 0; i < eLists.ACID.length; i++) {
      elements[eLists.ACID[i]].reactions[base] = { elem1: "neutral_acid", elem2: null };
    }
    for (let i = 0; i < eLists.ACIDGAS.length; i++) {
      elements[eLists.ACIDGAS[i]].reactions[base] = { elem1: "hydrogen", elem2: null };
    }
    eLists.BASE.push(base);
    if (eLists.HYDROGEN.indexOf(base) >= 0) {
      eLists.HYDROGEN.splice(eLists.HYDROGEN.indexOf(base), 1);
    }
    if (elements[base].salt)
      for (let i in elements[base].salt) {
        if (elements[base].salt[i]) {
          if (elements[base].salt[i].components.indexOf("HYDROGEN") >= 0) {
            elements[base].salt[i].components.splice(elements[base].salt[i].components.indexOf("HYDROGEN"), 1);
          }
        }
      }
  }
  
  acidNeutralize("radium_hydroxide");
  acidNeutralize("actinium_hydroxide");
  acidNeutralize("protactinium_hydroxide");
  acidNeutralize("unbinilium_hydroxide");
  
  elements.caustic_soda = {
    color: "#ffe8ff",
    behavior: behaviors.CAUSTIC,
    category: "powders",
    tempHigh: 323,
    state: "solid",
    density: 2130,
    hidden: true,
    alias: "sodium hydroxide powder",
  };
  
  acidNeutralize("sodium_hydride");
  
  acidNeutralize("sodium_methoxide");
  acidNeutralize("molten_sodium_methoxide");
  
  elements.francium_hydroxide_powder = {
    color: [blendColors("#e8ede8", "#ff0000"), blendColors("#e8ede8", "#00ff00"), blendColors("#e8ede8", "#0000ff")],
    behavior: behaviors.CAUSTIC,
    category: "powders",
    tempHigh: 251, //made up
    state: "solid",
    density: 5100, //made up
    hidden: true,
    reactions: {},
    ignore: [],
  };
  elements.francium_hydroxide_powder.ignore.push("francium_nihonide", "nihonium_hydroxide", "hydrogen", "steam");
  
  elements.francium.breakInto = "francium";
  elements.molten_francium.breakInto = "molten_francium";
  elements.stable_francium.breakInto = "stable_francium";
  elements.molten_stable_francium.breakInto = "molten_stable_francium";
  elements.francium_hydroxide_gas.breakInto = "francium_hydroxide_gas";
  elements.francium_hydroxide_powder.breakInto = "francium_hydroxide_powder";
  elements.molten_francium_hydroxide_powder = { breakInto: "molten_francium_hydroxide_powder" };
  elements.francium_hydroxide_gas.stateHigh = ["francium_hydroxide_powder", "steam"];
  elements.francium_hydroxide.ignore.push("fire", "smoke", "smog", "steam");
  elements.francium_hydroxide_gas.ignore.push("fire", "smoke", "smog", "steam");
  acidNeutralize("francium_hydroxide");
  acidNeutralize("francium_hydroxide_gas");
  acidNeutralize("francium_hydroxide_powder");
  
  elements.francium_hydroxide_powder.ignore = elements.francium_hydroxide.ignore;
  acidIgnore(["francium_hydroxide_powder"]);
  
  eListAddIon("FRANCIUM", ["francium_hydroxide_powder", "molten_francium_hydroxide_powder"], "base");
  eListAddIon("HYDROXIDE", ["francium_hydroxide_powder", "molten_francium_hydroxide_powder"], "base");
  
  runAfterLoad(function () {
    for (let i = 0; i < eLists.WATER.length; i++) {
      delete elements["francium_hydroxide"].reactions[eLists.WATER[i]];
      delete elements["francium_hydroxide_gas"].reactions[eLists.WATER[i]];
    }
    reactList("francium_hydroxide_powder", eLists.WATER, { elem1: "francium_hydroxide", elem2: null });
  });
  
  createAcid("ununennium_hydroxide", structuredClone(defaultBaseReactions), structuredClone(defaultBaseGasReactions), [blendColors("#eb3bff", "#ff0000"), blendColors("#eb3bff", "#00ff00"), blendColors("#eb3bff", "#0000ff")], true, true, 100, 100, 0, 1000, 1200, 1, "UNUNENNIUM", "base");
  
  eListAddIon("HYDROXIDE", ["ununennium_hydroxide", "ununennium_hydroxide_gas"], "base");
  
  elements.ununennium_hydroxide_powder = {
    color: [blendColors("#c8cdc8", "#ff0000"), blendColors("#c8cdc8", "#00ff00"), blendColors("#c8cdc8", "#0000ff")],
    behavior: behaviors.CAUSTIC,
    category: "powders",
    tempHigh: 271, //made up
    state: "solid",
    density: 8200, //made up
    hidden: true,
    reactions: {},
    ignore: [],
  };
  
  elements.ununennium_hydroxide_gas.breakInto = "ununennium_hydroxide_gas";
  elements.ununennium_hydroxide_powder.breakInto = "ununennium_hydroxide_powder";
  elements.molten_ununennium_hydroxide_powder = { breakInto: "molten_ununennium_hydroxide_powder" };
  elements.ununennium_hydroxide_gas.stateHigh = ["ununennium_hydroxide_powder", "steam"];
  elements.ununennium_hydroxide.ignore.push("fire", "smoke", "smog", "steam", "ununennium_fluoride", "ununennium_fluoride_solution");
  elements.ununennium_hydroxide_gas.ignore.push("fire", "smoke", "smog", "steam", "ununennium_fluoride", "ununennium_fluoride_solution");
  acidNeutralize("ununennium_hydroxide");
  acidNeutralize("ununennium_hydroxide_gas");
  acidNeutralize("ununennium_hydroxide_powder");
  
  elements.ununennium_hydroxide_powder.ignore = elements.ununennium_hydroxide.ignore;
  acidIgnore(["ununennium_hydroxide_powder"]);
  
  eListAddIon("UNUNENNIUM", ["ununennium_hydroxide_powder", "molten_ununennium_hydroxide_powder"], "base");
  eListAddIon("HYDROXIDE", ["ununennium_hydroxide_powder", "molten_ununennium_hydroxide_powder"], "base");
  
  runAfterLoad(function () {
    for (let i = 0; i < eLists.WATER.length; i++) {
      delete elements["ununennium_hydroxide"].reactions[eLists.WATER[i]];
      delete elements["ununennium_hydroxide_gas"].reactions[eLists.WATER[i]];
    }
    reactList("ununennium_hydroxide_powder", eLists.WATER, { elem1: "ununennium_hydroxide", elem2: null });
  });
  
  createAcid("sodium_hydroxide", structuredClone(defaultBaseReactions), structuredClone(defaultBaseGasReactions), ["#fc3bff", "#c000ca", "#9b7b9e"], false, true, 100, 100, 0, 1000, 1050, 1, "SODIUM", "base");
  acidNeutralize("sodium_hydroxide");
  acidNeutralize("sodium_hydroxide_gas");
  eListAddIon("HYDROXIDE", ["sodium_hydroxide", "sodium_hydroxide_gas"], "base");
  
  eLists.CAUSTIC.push("caustic_soda");
  acidNeutralize("caustic_soda");
  elements.caustic_soda.ignore = elements.sodium_hydroxide.ignore;
  acidIgnore(["caustic_soda"]);
  
  eListAddIon("SODIUM", ["caustic_soda", "molten_caustic_soda"], "base");
  eListAddIon("HYDROXIDE", ["caustic_soda", "molten_caustic_soda"], "base");
  eListAdd("COMPOUND", "caustic_soda");
  
  elements.caustic_soda.behavior = behaviors.CAUSTIC;
  if (!elements.caustic_soda.reactions) {
    elements.caustic_soda.reactions = {};
  }
  runAfterLoad(function () {
    reactList("caustic_soda", eLists.WATER, { elem1: "sodium_hydroxide", elem2: null });
    delete elements.sodium_hydroxide.reactions["sodium_aluminate_solution"];
    delete elements.sodium_hydroxide_gas.reactions["sodium_aluminate_solution"];
  });
  
  elements.sodium_hydroxide_gas.tempHigh = 150;
  elements.sodium_hydroxide_gas.stateHigh = ["caustic_soda", "steam"];
  
  createAcid("potassium_hydroxide", structuredClone(defaultBaseReactions), structuredClone(defaultBaseGasReactions), ["#3bc4ff", "#0062ca", "#7b949e"], false, true, 100, 100, 0, 1000, 1075, 1, "POTASSIUM", "base");
  acidNeutralize("potassium_hydroxide");
  acidNeutralize("potassium_hydroxide_gas");
  eListAddIon("HYDROXIDE", ["potassium_hydroxide", "potassium_hydroxide_gas"], "base");
  
  eLists.CAUSTIC.push("caustic_potash");
  acidNeutralize("caustic_potash");
  elements.caustic_potash.ignore = elements.potassium_hydroxide.ignore;
  acidIgnore(["caustic_potash"]);
  
  eListAddIon("POTASSIUM", ["caustic_potash", "molten_caustic_potash"], "base");
  eListAddIon("HYDROXIDE", ["caustic_potash", "molten_caustic_potash"], "base");
  eListAdd("COMPOUND", "caustic_potash");
  
  elements.caustic_potash.behavior = behaviors.CAUSTIC;
  if (!elements.caustic_potash.reactions) {
    elements.caustic_potash.reactions = {};
  }
  runAfterLoad(function () {
    reactList("caustic_potash", eLists.WATER, { elem1: "potassium_hydroxide", elem2: null });
  });
  elements.potassium_hydroxide_gas.tempHigh = 150;
  elements.potassium_hydroxide_gas.stateHigh = ["caustic_potash", "steam"];
  
  createAcid("red_mud", structuredClone(defaultBaseReactions), structuredClone(defaultBaseGasReactions), ["#ab3d24", "#cc5d2d", "#a81b1b"], true, true, 1600, 1600, 0, Infinity, 5200, 3, "REDMUD", "base");
  acidNeutralize("red_mud");
  acidNeutralize("red_mud_gas");
  elements.red_mud.viscosity = 1000000;
  
  runAfterLoad(function () {
    reactList("red_mud", eLists.WATER, { elem2: "dirty_water" });
    delete elements.red_mud.reactions["dirty_water"];
    delete elements.red_mud.reactions["sodium_aluminate_solution"];
  });
  
  acidReact("potassium_hydroxide", "fertilizer", "niter", "ammonia", 10);
  acidReact("potassium_hydroxide_gas", "fertilizer", "niter", "ammonia", 10);
  
  acidReact("potassium_hydroxide", "carbon_dioxide", "potassium_carbonate", null, 10);
  acidReact("potassium_hydroxide_gas", "carbon_dioxide", "potassium_carbonate", null, 10);
  elements.potassium_hydroxide.ignore.push("carbon_dioxide", "potassium_carbonate");
  elements.potassium_hydroxide_gas.ignore.push("carbon_dioxide", "potassium_carbonate");
  
  elements.salt_water.reactions["mercury"] = { elem1: ["sodium_hydroxide", "chlorine", "hydrogen"], charged: true, chance: 0.02 };
  elements.sodium_hydroxide.ignore.push("mercury", "chlorine", "salt_water");
  elements.sodium_hydroxide_gas.ignore.push("mercury", "chlorine", "salt_water");
  elements.potassium_salt_water.reactions["mercury"] = { elem1: ["potassium_hydroxide", "chlorine", "hydrogen"], charged: true, chance: 0.02 };
  elements.potassium_hydroxide.ignore.push("mercury", "chlorine", "potassium_salt_water");
  elements.potassium_hydroxide_gas.ignore.push("mercury", "chlorine", "potassium_salt_water");
  
  acidReact("sodium_hydroxide", "bauxite", "sodium_aluminate_solution", "red_mud", 10);
  acidReact("sodium_hydroxide_gas", "bauxite", "sodium_aluminate_solution", "red_mud", 10);
  elements.red_mud.ignore.push("sodium_aluminate_solution_ice", "sodium_aluminate", "molten_sodium_aluminate", "sodium_carbonate_solution", "spent_sodium_aluminate_solution", "spent_sodium_aluminate_solution_ice", "aluminum_hydroxide", "alumina", "molten_alumina");
  elements.red_mud_gas.ignore.push("sodium_aluminate_solution_ice", "sodium_aluminate", "molten_sodium_aluminate", "sodium_carbonate_solution", "spent_sodium_aluminate_solution", "spent_sodium_aluminate_solution_ice", "aluminum_hydroxide", "alumina", "molten_alumina");
  elements.sodium_hydroxide.ignore.push("sodium_aluminate_solution_ice", "sodium_aluminate", "molten_sodium_aluminate", "sodium_carbonate_solution", "spent_sodium_aluminate_solution", "spent_sodium_aluminate_solution_ice", "aluminum_hydroxide", "alumina", "molten_alumina");
  elements.sodium_hydroxide_gas.ignore.push("sodium_aluminate_solution_ice", "sodium_aluminate", "molten_sodium_aluminate", "sodium_carbonate_solution", "spent_sodium_aluminate_solution", "spent_sodium_aluminate_solution_ice", "aluminum_hydroxide", "alumina", "molten_alumina");
  
  //Cryolite
  acidReact("hydrofluoric_acid", "sodium_aluminate", "cryolite", "fire", 0);
  acidReact("hydrofluoric_acid_gas", "sodium_aluminate", "cryolite", "fire", 0);
  
  acidReact("hydrogen_fluoride", "sodium_aluminate", "cryolite", "fire", 0);
  acidReact("liquid_hydrogen_fluoride", "sodium_aluminate", "cryolite", "fire", 0);
  
  elements.hydrofluoric_acid.ignore.push("molten_cryolite", "molten_sodium_aluminate");
  elements.hydrofluoric_acid_gas.ignore.push("molten_cryolite", "molten_sodium_aluminate");
  elements.hydrogen_fluoride.ignore.push("molten_cryolite", "molten_sodium_aluminate");
  elements.liquid_hydrogen_fluoride.ignore.push("molten_cryolite", "molten_sodium_aluminate");
  
  acidReact("hexafluorosilicic_acid", "sodium_aluminate", "cryolite", "sand", 0);
  acidReact("hexafluorosilicic_acid_gas", "sodium_aluminate", "cryolite", "sand", 0);
  elements.hexafluorosilicic_acid.ignore.push("molten_cryolite", "molten_sodium_aluminate");
  elements.hexafluorosilicic_acid_gas.ignore.push("molten_cryolite", "molten_sodium_aluminate");
  
  //Aluminum trifluoride
  acidReact("hydrofluoric_acid", "alumina", "aluminum_trifluoride", "fire", 0);
  acidReact("hydrofluoric_acid_gas", "alumina", "aluminum_trifluoride", "fire", 0);
  
  acidReact("hydrogen_fluoride", "alumina", "aluminum_trifluoride", "fire", 0);
  acidReact("liquid_hydrogen_fluoride", "alumina", "aluminum_trifluoride", "fire", 0);
  
  elements.hydrofluoric_acid.ignore.push("molten_alumina", "aluminum_trifluoride_gas");
  elements.hydrofluoric_acid_gas.ignore.push("molten_alumina", "aluminum_trifluoride_gas");
  elements.hydrogen_fluoride.ignore.push("molten_alumina", "aluminum_trifluoride_gas");
  elements.liquid_hydrogen_fluoride.ignore.push("molten_alumina", "aluminum_trifluoride_gas");
  
  acidReact("hydrofluoric_acid", "aluminum_hydroxide", "aluminum_trifluoride", "fire", 0);
  acidReact("hydrofluoric_acid_gas", "aluminum_hydroxide", "aluminum_trifluoride", "fire", 0);
  
  acidReact("hydrogen_fluoride", "aluminum_hydroxide", "aluminum_trifluoride", "fire", 0);
  acidReact("liquid_hydrogen_fluoride", "aluminum_hydroxide", "aluminum_trifluoride", "fire", 0);
  
  acidReact("hydrofluoric_acid", "sodium_hydroxide", "sodium_fluoride_solution", "fire", 0);
  acidReact("hydrofluoric_acid_gas", "sodium_hydroxide", "sodium_fluoride_solution", "fire", 0);
  acidReact("hydrofluoric_acid", "sodium_hydroxide_gas", "sodium_fluoride_solution", "fire", 0);
  acidReact("hydrofluoric_acid_gas", "sodium_hydroxide_gas", "sodium_fluoride_solution", "fire", 0);
  
  acidReact("acid", "sodium_hydroxide", "salt_water", null, 0);
  acidReact("acid_gas", "sodium_hydroxide", "salt_water", null, 0);
  acidReact("acid", "sodium_hydroxide_gas", "salt_water", null, 0);
  acidReact("acid_gas", "sodium_hydroxide_gas", "salt_water", null, 0);
  
  acidReact("acid", "potassium_hydroxide", "potassium_salt_water", null, 0);
  acidReact("acid_gas", "potassium_hydroxide", "potassium_salt_water", null, 0);
  acidReact("acid", "potassium_hydroxide_gas", "potassium_salt_water", null, 0);
  acidReact("acid_gas", "potassium_hydroxide_gas", "potassium_salt_water", null, 0);
  
  elements.sodium_hydroxide.ignore.push("sodium_methoxide", "methanol");
  elements.sodium_hydroxide_gas.ignore.push("sodium_methoxide", "methanol");
  elements.sodium_hydroxide.ignore.push("sodium_methoxide", "methanol");
  elements.sodium_hydroxide_gas.ignore.push("sodium_methoxide", "methanol");
  
  acidReact("fluoroboric_acid", "sodium_hydroxide", "sodium_tetrafluoroborate", null, 50);
  acidReact("fluoroboric_acid_gas", "sodium_hydroxide", "sodium_tetrafluoroborate", null, 50);
  acidReact("fluoroboric_acid", "sodium_hydroxide_gas", "sodium_tetrafluoroborate", null, 50);
  acidReact("fluoroboric_acid_gas", "sodium_hydroxide_gas", "sodium_tetrafluoroborate", null, 50);
  
  //nihonium
  
  acidReact("sodium_hydroxide", "nihonium_sulfate_solution", "sodium_sulfate_solution", "nihonium_hydroxide");
  acidReact("sodium_hydroxide_gas", "nihonium_sulfate_solution", "sodium_sulfate_solution", "nihonium_hydroxide");
  acidReact("sodium_hydroxide", "nihonium_sulfate", "sodium_sulfate_solution", "nihonium_hydroxide");
  acidReact("sodium_hydroxide_gas", "nihonium_sulfate", "sodium_sulfate_solution", "nihonium_hydroxide");
  
  acidReact("potassium_hydroxide", "nihonium_sulfate_solution", "potassium_sulfate_solution", "nihonium_hydroxide");
  acidReact("potassium_hydroxide_gas", "nihonium_sulfate_solution", "potassium_sulfate_solution", "nihonium_hydroxide");
  acidReact("potassium_hydroxide", "nihonium_sulfate", "potassium_sulfate_solution", "nihonium_hydroxide");
  acidReact("potassium_hydroxide_gas", "nihonium_sulfate", "potassium_sulfate_solution", "nihonium_hydroxide");
  
  acidReact("potassium_hydroxide", "nihonium_nitrate_solution", "niter_solution", "nihonium_hydroxide");
  acidReact("potassium_hydroxide_gas", "nihonium_nitrate_solution", "niter_solution", "nihonium_hydroxide");
  acidReact("potassium_hydroxide", "nihonium_nitrate", "niter_solution", "nihonium_hydroxide");
  acidReact("potassium_hydroxide_gas", "nihonium_nitrate", "niter_solution", "nihonium_hydroxide");
  
  elements.bless.reactions["foof"] = { elem2: "oxygen" };
  elements.bless.reactions["solid_foof"] = { elem2: "oxygen" };
  elements.bless.reactions["fluorine"] = { elem2: null };
  elements.bless.reactions["liquid_fluorine"] = { elem2: null };
  elements.bless.reactions["fluorine_ice"] = { elem2: null };
  elements.bless.reactions["hydrogen_fluoride"] = { elem2: "hydrogen" };
  elements.bless.reactions["liquid_hydrogen_fluoride"] = { elem2: "hydrogen" };
  elements.bless.reactions["hydrogen_fluoride_ice"] = { elem2: "hydrogen" };
  elements.bless.reactions["hydrofluoric_acid"] = { elem2: "hydrogen" };
  elements.bless.reactions["hydrofluoric_acid_ice"] = { elem2: "hydrogen" };
  elements.bless.reactions["francium"] = { elem2: null };
  elements.bless.reactions["molten_francium"] = { elem2: null };
  elements.bless.reactions["astatine"] = { elem2: null };
  elements.bless.reactions["molten_astatine"] = { elem2: null };
  elements.bless.reactions["astatine_gas"] = { elem2: null };
  elements.bless.reactions["big_pop"] = { elem2: null };
  elements.bless.reactions["rad_pop"] = { elem2: null };
  elements.bless.reactions["radon"] = { elem2: null };
  elements.bless.reactions["polonium"] = { elem2: null };
  elements.bless.reactions["molten_polonium"] = { elem2: null };
  elements.bless.reactions["neutronium"] = { elem2: "neutron" };
  elements.bless.reactions["liquid_neutronium"] = { elem2: "neutron" };
  elements.bless.reactions["quark_matter"] = { elem2: ["neutron", "proton"] };
  elements.bless.reactions["gamma_ray_burst"] = { elem2: null };
  elements.bless.reactions["nitrogen_dioxide"] = { elem2: "oxygen" };
  elements.bless.reactions["liquid_nitrogen_dioxide"] = { elem2: "oxygen" };
  elements.bless.reactions["sulfur_dioxide"] = { elem2: "oxygen" };
  elements.bless.reactions["liquid_sulfur_dioxide"] = { elem2: "oxygen" };
  elements.bless.reactions["sulfur_dioxide_ice"] = { elem2: "oxygen" };
  elements.bless.reactions["hydrogen_sulfide"] = { elem2: "hydrogen" };
  elements.bless.reactions["liquid_hydrogen_sulfide"] = { elem2: "hydrogen" };
  elements.bless.reactions["bromine"] = { elem2: [null, null, null, "soy_sauce"] };
  elements.bless.reactions["bromine_gas"] = { elem2: [null, null, null, "soy_sauce"] };
  elements.bless.reactions["bromine_ice"] = { elem2: [null, null, null, "soy_sauce"] };
  elements.bless.reactions["rocket_fuel"] = { elem2: null };
  elements.bless.reactions["diborane"] = { elem2: "hydrogen" };
  elements.bless.reactions["pentaborane"] = { elem2: "hydrogen" };
  elements.bless.reactions["decaborane"] = { elem2: "hydrogen" };
  elements.bless.reactions["sodium_hydride"] = { elem2: "hydrogen" };
  elements.bless.reactions["sodium_borohydride"] = { elem2: "hydrogen" };
  elements.bless.reactions["sodium_borohydride_solution"] = { elem2: "water" };
  elements.bless.reactions["uraninite"] = { elem2: "rock" };
  elements.bless.reactions["yellowcake_solution"] = { elem2: ["rock", "hydrogen", "rock", "hydrogen", "rock", "hydrogen", "baked_batter", "hydrogen"] };
  elements.bless.reactions["yellowcake"] = { elem2: ["rock", "rock", "rock", "baked_batter"] };
  elements.bless.reactions["depleted_uranium"] = { elem2: "rock" };
  elements.bless.reactions["enriched_uranium"] = { elem2: "rock" };
  elements.bless.reactions["uranium_dioxide"] = { elem2: "rock" };
  elements.bless.reactions["depleted_uranium_dioxide"] = { elem2: "rock" };
  elements.bless.reactions["enriched_uranium_dioxide"] = { elem2: "rock" };
  elements.bless.reactions["uranium_tetrafluoride"] = { elem2: "rock" };
  elements.bless.reactions["depleted_uranium_tetrafluoride"] = { elem2: "rock" };
  elements.bless.reactions["enriched_uranium_tetrafluoride"] = { elem2: "rock" };
  elements.bless.reactions["uranium_hexafluoride"] = { elem2: "rock" };
  elements.bless.reactions["depleted_uranium_hexafluoride"] = { elem2: "rock" };
  elements.bless.reactions["enriched_uranium_hexafluoride"] = { elem2: "rock" };
  elements.bless.reactions["stable_uranium_hexafluoride"] = { elem2: "stable_uranium" };
  elements.bless.reactions["molten_depleted_uranium"] = { elem2: "magma" };
  elements.bless.reactions["molten_enriched_uranium"] = { elem2: "magma" };
  elements.bless.reactions["molten_uranium_dioxide"] = { elem2: "magma" };
  elements.bless.reactions["molten_depleted_uranium_dioxide"] = { elem2: "magma" };
  elements.bless.reactions["molten_enriched_uranium_dioxide"] = { elem2: "magma" };
  elements.bless.reactions["molten_uranium_tetrafluoride"] = { elem2: "magma" };
  elements.bless.reactions["molten_depleted_uranium_tetrafluoride"] = { elem2: "magma" };
  elements.bless.reactions["molten_enriched_uranium_tetrafluoride"] = { elem2: "magma" };
  elements.bless.reactions["uranium_hexafluoride_gas"] = { elem2: "rock" };
  elements.bless.reactions["depleted_uranium_hexafluoride_gas"] = { elem2: "rock" };
  elements.bless.reactions["enriched_uranium_hexafluoride_gas"] = { elem2: "rock" };
  elements.bless.reactions["stable_uranium_hexafluoride_gas"] = { elem2: "stable_uranium" };
  elements.bless.reactions["neptunium"] = { elem2: "rock" };
  elements.bless.reactions["molten_neptunium"] = { elem2: "rock" };
  elements.bless.reactions["enriched_uranium_hexafluoride_gas"] = { elem2: "rock" };
  elements.bless.reactions["radium"] = { elem2: null };
  elements.bless.reactions["molten_radium"] = { elem2: null };
  elements.bless.reactions["actinium"] = { elem2: null };
  elements.bless.reactions["molten_actinium"] = { elem2: null };
  elements.bless.reactions["thorium"] = { elem2: "rock" };
  elements.bless.reactions["molten_thorium"] = { elem2: "magma" };
  elements.bless.reactions["thorium_dioxide"] = { elem2: "rock" };
  elements.bless.reactions["molten_thorium_dioxide"] = { elem2: "magma" };
  elements.bless.reactions["thorium_tetrafluoride"] = { elem2: "rock" };
  elements.bless.reactions["molten_thorium_tetrafluoride"] = { elem2: "magma" };
  elements.bless.reactions["protactinium"] = { elem2: "rock" };
  elements.bless.reactions["molten_protactinium"] = { elem2: "magma" };
  elements.bless.reactions["neptunium"] = { elem2: "rock" };
  elements.bless.reactions["molten_neptunium"] = { elem2: "magma" };
  elements.bless.reactions["neptunium_hexafluoride"] = { elem2: "stable_neptunium" };
  elements.bless.reactions["neptunium_hexafluoride_gas"] = { elem2: "stable_neptunium" };
  elements.bless.reactions["plutonium"] = { elem2: "rock" };
  elements.bless.reactions["molten_plutonium"] = { elem2: "magma" };
  elements.bless.reactions["plutonium_dioxide"] = { elem2: "rock" };
  elements.bless.reactions["molten_plutonium_dioxide"] = { elem2: "magma" };
  elements.bless.reactions["plutonium_tetrafluoride"] = { elem2: "rock" };
  elements.bless.reactions["molten_plutonium_tetrafluoride"] = { elem2: "magma" };
  elements.bless.reactions["plutonium_hexafluoride"] = { elem2: "rock" };
  elements.bless.reactions["plutonium_hexafluoride_gas"] = { elem2: "magma" };
  elements.bless.reactions["stable_plutonium_hexafluoride"] = { elem2: "stable_plutonium" };
  elements.bless.reactions["stable_plutonium_hexafluoride_gas"] = { elem2: "stable_plutonium" };
  elements.bless.reactions["americium"] = { elem2: "rock" };
  elements.bless.reactions["molten_americium"] = { elem2: "magma" };
  elements.bless.reactions["curium"] = { elem2: "rock" };
  elements.bless.reactions["molten_curium"] = { elem2: "magma" };
  elements.bless.reactions["berkelium"] = { elem2: "rock" };
  elements.bless.reactions["molten_berkelium"] = { elem2: "magma" };
  elements.bless.reactions["californium"] = { elem2: "rock" };
  elements.bless.reactions["molten_californium"] = { elem2: "magma" };
  elements.bless.reactions["einsteinium"] = { elem2: "rock" };
  elements.bless.reactions["molten_einsteinium"] = { elem2: "magma" };
  elements.bless.reactions["fermium"] = { elem2: "rock" };
  elements.bless.reactions["molten_fermium"] = { elem2: "magma" };
  
  elements.bless.reactions["copernicium"] = { elem2: "rock" };
  elements.bless.reactions["copernicium_gas"] = { elem2: "magma" };
  elements.bless.reactions["solid_copernicium"] = { elem2: "rock" };
  elements.bless.reactions["copernicium_tetrafluoride"] = { elem2: "stable_copernicium" };
  elements.bless.reactions["nihonium"] = { elem2: "rock" };
  elements.bless.reactions["molten_nihonium"] = { elem2: "magma" };
  elements.bless.reactions["francium_nihonide"] = { elem2: "stable_nihonium" };
  elements.bless.reactions["flerovium"] = { elem2: "rock" };
  elements.bless.reactions["flerovium_gas"] = { elem2: "magma" };
  elements.bless.reactions["solid_flerovium"] = { elem2: "rock" };
  elements.bless.reactions["moscovium"] = { elem2: "rock" };
  elements.bless.reactions["molten_moscovium"] = { elem2: "magma" };
  elements.bless.reactions["livermorium"] = { elem2: "rock" };
  elements.bless.reactions["molten_livermorium"] = { elem2: "magma" };
  elements.bless.reactions["tennessine"] = { elem2: null };
  elements.bless.reactions["molten_tennessine"] = { elem2: null };
  elements.bless.reactions["stable_tennessine"] = { elem2: null };
  elements.bless.reactions["molten_stable_tennessine"] = { elem2: null };
  elements.bless.reactions["tennessine_monofluoride"] = { elem2: null };
  elements.bless.reactions["tennessine_monofluoride_ice"] = { elem2: null };
  elements.bless.reactions["tennessine_monofluoride_gas"] = { elem2: null };
  elements.bless.reactions["tennessine_trifluoride"] = { elem2: null };
  elements.bless.reactions["tennessine_trifluoride_ice"] = { elem2: null };
  elements.bless.reactions["tennessine_trifluoride_gas"] = { elem2: null };
  elements.bless.reactions["molten_oganesson"] = { elem2: null };
  elements.bless.reactions["oganesson_gas"] = { elem2: null };
  elements.bless.reactions["oganesson"] = { elem2: null };
  elements.bless.reactions["oganesson_difluoride"] = { elem2: "stable_oganesson" };
  elements.bless.reactions["molten_oganesson_difluoride"] = { elem2: "stable_oganesson" };
  elements.bless.reactions["oganesson_tetrafluoride"] = { elem2: "stable_oganesson" };
  elements.bless.reactions["molten_oganesson_tetrafluoride"] = { elem2: "stable_oganesson" };
  elements.bless.reactions["oganesson_tetratennesside"] = { elem2: "stable_oganesson" };
  elements.bless.reactions["ununennium"] = { elem2: null };
  elements.bless.reactions["ununennium_gas"] = { elem2: null };
  elements.bless.reactions["solid_ununennium"] = { elem2: null };
  elements.bless.reactions["stable_ununennium"] = { elem2: null };
  elements.bless.reactions["stable_ununennium_gas"] = { elem2: null };
  elements.bless.reactions["solid_stable_ununennium"] = { elem2: null };
  elements.bless.reactions["ununennium_trifluoride"] = { elem2: null };
  elements.bless.reactions["molten_ununennium_trifluoride"] = { elem2: null };
  elements.bless.reactions["ununennium_pentafluoride"] = { elem2: null };
  elements.bless.reactions["unbinilium"] = { elem2: null };
  elements.bless.reactions["molten_unbinilium"] = { elem2: null };
  elements.bless.reactions["unbinilium_tetrafluoride"] = { elem2: null };
  elements.bless.reactions["molten_unbinilium_tetrafluoride"] = { elem2: null };
  elements.bless.reactions["unbinilium_hexafluoride"] = { elem2: null };
  
  elements.foof.ignore.push("foof_grass", "foof_grass_seed");
  elements.solid_foof.ignore.push("foof_grass", "foof_grass_seed");
  elements.fluorine.ignore.push("foof_grass", "foof_grass_seed");
  elements.liquid_fluorine.ignore.push("foof_grass", "foof_grass_seed");
  
  elements.foof_grass = {
    color: ["#980909", "#8b2708", "#852a11", "#7b1212", "#6d1d13"],
    tick: function (pixel) {
      if (!tryMove(pixel, pixel.x, pixel.y + 1)) {
        if (pixel.h < 2 && Math.random() < 0.0005 && isEmpty(pixel.x, pixel.y - 1)) {
          createPixel(pixel.element, pixel.x, pixel.y - 1);
          pixelMap[pixel.x][pixel.y - 1].h = pixel.h + 1;
        }
        var coords = [
          [pixel.x + 1, pixel.y],
          [pixel.x - 1, pixel.y],
          [pixel.x + 1, pixel.y + 1],
          [pixel.x - 1, pixel.y + 1],
        ];
        for (var i = 0; i < coords.length; i++) {
          if (Math.random() < 0.005 && isEmpty(coords[i][0], coords[i][1])) {
            if (!isEmpty(coords[i][0], coords[i][1] + 1, true)) {
              var soil = pixelMap[coords[i][0]][coords[i][1] + 1];
              if (eLists.SOIL.indexOf(soil.element) !== -1) {
                createPixel(pixel.element, coords[i][0], coords[i][1]);
              }
            }
          }
        }
      }
      doDefaults(pixel);
    },
    properties: {
      h: 0,
    },
    reactions: {
      vinegar: { elem1: "explosion", elem2: null, chance: 0.035 },
      mercury: { elem1: "explosion", elem2: null, chance: 0.01 },
    },
    temp: -120,
    tempHigh: -57,
    stateHigh: ["oxygen", "fluorine", "explosion"],
    tempLow: -200,
    stateLow: "solid_foof",
    burn: 50,
    burnTime: 20,
    breakInto: "foof",
    category: "life",
    state: "solid",
    density: 1400,
    hidden: true,
    seed: "foof_grass_seed",
  };
  
  elements.foof_grass_seed = {
    color: ["#980909", "#8b2708", "#852a11", "#7b1212", "#6d1d13"],
    behavior: ["XX|M2%0.05|XX", "XX|L2:foof_grass|XX", "XX|M1|XX"],
    temp: -120,
    tempHigh: -57,
    stateHigh: ["oxygen", "fluorine", "explosion"],
    tempLow: -200,
    stateLow: "solid_foof",
    burn: 50,
    burnTime: 20,
    category: "life",
    state: "solid",
    density: 1400,
    breakInto: "foof",
    hidden: true,
    cooldown: defaultCooldown,
    seed: true,
  };
  
  elements.centrifuge = {
    color: "#89888f",
    category: "machines",
    tempHigh: 1455.5,
    stateHigh: "molten_steel",
    tick: function (pixel) {
      if (!pixel.del) {
        for (let i = 0; i < 10; i++) {
          for (let j = 1; j < 10; j++) {
            let x = [pixel.x + i, pixel.x - j, pixel.x - i, pixel.x + j];
            let y = [pixel.y + j, pixel.y + i, pixel.y - j, pixel.y - i];
            var oob = outOfBounds(x[0], y[0]) || outOfBounds(x[1], y[1]) || outOfBounds(x[2], y[2]) || outOfBounds(x[3], y[3]);
            if (!oob) {
              let pixels = [null, null, null, null];
              let immovable = false;
              for (let k = 0; k < 4; k++) {
                pixels[k] = !isEmpty(x[k], y[k], true) ? pixelMap[x[k]][y[k]] : null;
                if (pixels[k] && !elements[pixels[k].element].movable) {
                  immovable = true;
                }
              }
              if (!immovable) {
                for (let k = 0; k < 4; k++) {
                  if (pixelMap[x[k]][y[k]]) {
                    delete pixelMap[x[k]][y[k]];
                  }
                }
                for (let k = 0; k < 4; k++) {
                  if (pixels[k] && !pixels[k].del) {
                    pixels[k].x = x[(k + 1) % 4];
                    pixels[k].y = y[(k + 1) % 4];
                    movePixel(pixels[k], x[(k + 1) % 4], y[(k + 1) % 4]);
                  }
                }
  
                for (let k = 0; k < 4; k++) {
                  if (pixels[k] && elements[pixels[k].element].onCentrifuge) {
                    elements[pixels[k].element].onCentrifuge(pixels[k]);
                  }
                }
              }
            }
          }
        }
      }
      doDefaults(pixel);
    },
    movable: false,
  };
  
  for (let i = 0; i < eLists.INSOLUBLE.length; i++) {
    eListAdd("COMPOUND", eLists.INSOLUBLE[i]);
  }
  
  eListAdd("COMPOUND", "water");
  eListAddIon("HYDROGEN", "water");
  eListAddIon("HYDROXIDE", "water");
  
  eListAdd("COMPOUND", "methanol");
  eListAddIon("HYDROGEN", "methanol");
  eListAddIon("METHOXIDE", "methanol");
  
  eListAdd("COMPOUND", "vinegar");
  eListAdd("ACID", "vinegar");
  eListAddIon("HYDROGEN", "vinegar", "acid");
  eListAddIon("ACETATE", "vinegar", "acid");
  
  createSalt("baking_soda", "baking_soda_solution", ["#f2f2f2", "#e0e0e0"], "#7494db", false, true, 292, -2, 102, 3980, 1026, "SODIUM", "BICARBONATE");
  
  delete elements["molten_baking_soda"];
  
  eListAdd("COMPOUND", "baking_soda");
  eListAdd("BASE", "baking_soda");
  eListAdd("COMPOUND", "baking_soda_solution");
  eListAdd("BASE", "baking_soda_solution");
  eListAddIon("SODIUM", "baking_soda", "base");
  eListAddIon("BICARBONATE", "baking_soda", "base");
  eListAddIon("SODIUM", "baking_soda_solution", "base");
  eListAddIon("BICARBONATE", "baking_soda_solution", "base");
  
  elements["baking_soda"].reactions["sodium_hydroxide"] = { elem1: "sodium_carbonate_solution", elem2: null };
  elements["baking_soda"].reactions["sodium_hydroxide_gas"] = { elem1: "sodium_carbonate_solution", elem2: null };
  elements["baking_soda_solution"].reactions["sodium_hydroxide"] = { elem1: "sodium_carbonate_solution", elem2: null };
  elements["baking_soda_solution"].reactions["sodium_hydroxide_gas"] = { elem1: "sodium_carbonate_solution", elem2: null };
  
  createSalt("sodium_acetate", "sodium_acetate_solution", ["#f2f2f2", "#e0e0e0"], "#7ea2f2", false, true, 292, -2, 102, 3980, 1028, "SODIUM", "ACETATE");
  
  eListAdd("ACID", "seltzer");
  eListAddIon("HYDROGEN", "seltzer", "acid");
  eListAddIon("CARBONATE", "seltzer", "acid");
  eListAddIon("HYDROGEN", "seltzer", "bicarbonate");
  eListAddIon("BICARBONATE", "seltzer", "bicarbonate");
  
  eListAdd("ACID", "soda");
  eListAddIon("HYDROGEN", "soda", "acid");
  eListAddIon("CARBONATE", "soda", "acid");
  eListAddIon("HYDROGEN", "soda", "bicarbonate");
  eListAddIon("BICARBONATE", "soda", "bicarbonate");
  
  eListAdd("ACID", "pilk");
  eListAddIon("HYDROGEN", "pilk", "acid");
  eListAddIon("CARBONATE", "pilk", "acid");
  eListAddIon("HYDROGEN", "pilk", "bicarbonate");
  eListAddIon("BICARBONATE", "pilk", "bicarbonate");
  
  eListAdd("COMPOUND", "copper_sulfate");
  eListAddIon("COPPERII", "copper_sulfate");
  eListAddIon("SULFATE", "copper_sulfate");
  
  eListAddIon("COPPERII", "molten_copper_sulfate");
  eListAddIon("SULFATE", "molten_copper_sulfate");
  
  function listMatching(list) {
    let result = [];
    for (let i in elements) {
      let valid = false;
      if (elements[i].salt) {
        for (let ii in elements[i].salt) {
          let valid2 = true;
  
          for (let j = 0; j < list.length; j++) {
            if (!elements[i].salt[ii].components.includes(list[j])) {
              valid2 = false;
              continue;
            }
          }
  
          for (let j = 0; j < elements[i].salt[ii].components.length; j++) {
            if (!list.includes(elements[i].salt[ii].components[j])) {
              valid2 = false;
              continue;
            }
          }
          valid = valid || valid2;
        }
      }
      if (valid) {
        result.push(i);
      }
    }
    return result;
  }
  
  function listMatching2(list, elem) {
    let result = [];
    for (let i = 0; i < elem.length; i++) {
      let valid = true;
      for (let j = 0; j < list.length; j++) {
        if (!eLists[list[j]].includes(elem[i])) {
          valid = false;
          break;
        }
      }
      if (valid) {
        result.push(elem[i]);
      }
    }
    return result;
  }
  
  runAfterAutogen(function () {
    for (let ii = 0; ii < eLists.WATER.length; ii++) {
      let i = eLists.WATER[ii];
      if (!elements[i]) {
        continue;
      }
      if (!elements[i].reactions) {
        elements[i].reactions = {};
      }
      for (let jj = 0; jj < eLists.WATER.length; jj++) {
        let j = eLists.WATER[jj];
        if (i != j && elements[i].salt && elements[j].salt) {
          let priorityA = -Infinity;
          let priorityB = -Infinity;
          for (let iii in elements[i].salt) {
            if (priorityA > elements[i].salt[iii].priority) {
              continue;
            }
            for (let jjj in elements[j].salt) {
              if (priorityB > elements[j].salt[jjj].priority) {
                continue;
              }
              if (elements[i].salt[iii].components.length > 1 && elements[j].salt[jjj].components.length > 1) {
                let match1 = listMatching([elements[i].salt[iii].components[0], elements[j].salt[jjj].components[1]]);
                let match2 = listMatching([elements[i].salt[iii].components[1], elements[j].salt[jjj].components[0]]);
                let match3 = listMatching([elements[i].salt[iii].components[0], elements[j].salt[jjj].components[0]]);
                let match4 = listMatching([elements[i].salt[iii].components[1], elements[j].salt[jjj].components[1]]);
  
                let water1 = listMatching2(["WATER"], match1);
                let water2 = listMatching2(["WATER"], match2);
                let water3 = listMatching2(["WATER"], match3);
                let water4 = listMatching2(["WATER"], match4);
                let salt1 = listMatching2(["INSOLUBLE"], match1);
                let salt2 = listMatching2(["INSOLUBLE"], match2);
                let salt3 = listMatching2(["INSOLUBLE"], match3);
                let salt4 = listMatching2(["INSOLUBLE"], match4);
  
                let productsA = [];
                let productsB = [];
  
                if (water1.length > 0 && salt2.length > 0) {
                  productsA = productsA.concat(water1);
                  productsB = productsB.concat(salt2);
                }
                if (water2.length > 0 && salt1.length > 0) {
                  productsA = productsA.concat(water2);
                  productsB = productsB.concat(salt1);
                }
  
                if (water3.length > 0 && salt4.length > 0) {
                  productsA = productsA.concat(water3);
                  productsB = productsB.concat(salt4);
                }
                if (water4.length > 0 && salt3.length > 0) {
                  productsA = productsA.concat(water4);
                  productsB = productsB.concat(salt3);
                }
  
                if (productsA.length > 0 && productsB.length > 0) {
                  acidReact(i, j, productsA, productsB, 0);
                  // console.log("precipitate");
                  // console.log(i);
                  // console.log(j);
                  // console.log(productsA);
                  // console.log(productsB);
                  priorityA = elements[i].salt[iii].priority;
                  priorityB = elements[j].salt[jjj].priority;
                  continue;
                }
  
                if (elements[i].salt[iii].components[0] == elements[j].salt[jjj].components[0] || elements[i].salt[iii].components[1] == elements[j].salt[jjj].components[1] || elements[i].salt[iii].components[1] == elements[j].salt[jjj].components[0] || elements[i].salt[iii].components[0] == elements[j].salt[jjj].components[1]) {
                  continue;
                }
  
                productsA = [];
                productsB = [];
  
                if (water1.length > 0 && water2.length > 0) {
                  productsA = productsA.concat(water1);
                  productsB = productsB.concat(water2);
                }
  
                if (water3.length > 0 && water4.length > 0) {
                  productsA = productsA.concat(water3);
                  productsB = productsB.concat(water4);
                }
  
                if (productsA.length > 0 && productsB.length > 0) {
                  elements[i].reactions[j] = { elem1: productsA, elem2: productsB, chance: 0.001, oneway: true };
                  //console.log(i);
                  //console.log(j);
                  //console.log(productsA);
                  //console.log(productsB);
                  priorityA = elements[i].salt[iii].priority;
                  priorityB = elements[j].salt[jjj].priority;
                }
              }
            }
          }
        }
      }
    }
    let acids = eLists.ACID.concat(eLists.ACIDGAS).concat(eLists.AMPHOTERIC);
    for (let ii = 0; ii < acids.length; ii++) {
      let i = acids[ii];
      if (!elements[i]) {
        continue;
      }
      if (!elements[i].reactions) {
        elements[i].reactions = {};
      }
      let bases = eLists.BASE.concat(eLists.AMPHOTERIC);
      for (let jj = 0; jj < bases.length; jj++) {
        let j = bases[jj];
        if (i != j && elements[i].salt && elements[j].salt && elements[i].salt["acid"].components.length > 1 && elements[j].salt["base"].components.length > 1) {
          let productsA = [];
          let productsB = [];
  
          let match = [listMatching([elements[i].salt["acid"].components[0], elements[j].salt["base"].components[1]]), listMatching([elements[i].salt["acid"].components[1], elements[j].salt["base"].components[0]]), listMatching([elements[i].salt["acid"].components[0], elements[j].salt["base"].components[0]]), listMatching([elements[i].salt["acid"].components[1], elements[j].salt["base"].components[1]])];
  
          let compounds = [listMatching2(["COMPOUND"], match[0]), listMatching2(["COMPOUND"], match[1]), listMatching2(["COMPOUND"], match[2]), listMatching2(["COMPOUND"], match[3])];
  
          for (let n = 0; n < compounds.length; n++) {
            let m = n - 1;
            if (n % 2 == 0) {
              m = n + 1;
            }
            if (compounds[n].includes("water")) {
              let water1 = listMatching2(["WATER"], match[m]);
              if (water1.length > 0) {
                compounds[m] = water1;
                compounds[n].splice(compounds[n].indexOf("water"), 1);
                if (compounds[n].length == 0) compounds[n] = [null];
              }
            }
          }
  
          if (compounds[0].length > 0 && compounds[1].length > 0) {
            productsA = productsA.concat(compounds[0]);
            productsB = productsB.concat(compounds[1]);
          }
          if (compounds[2].length > 0 && compounds[3].length > 0) {
            productsA = productsA.concat(compounds[2]);
            productsB = productsB.concat(compounds[3]);
          }
          if (productsA.length > 0 && productsB.length > 0) {
            let reactionTemp = 0;
            if (elements[i].salt["acid"].components.includes("FLUORIDE") && elements[i].salt["acid"].components.includes("HYDROGEN")) {
              if (productsB[0] === null && productsB.length === 1) {
                productsB = ["fire"];
              } else {
                productsB.push("fire");
              }
            }
            if ((elements[i].salt["acid"].components.includes("SULFATE") || elements[i].salt["acid"].components.includes("CHLORIDE")) && elements[i].salt["acid"].components.includes("HYDROGEN")) {
              reactionTemp = 50;
            }
  
            if (elements[i].reactions && elements[i].reactions[j]) {
              delete elements[i].reactions[j];
            }
            if (elements[j].reactions && elements[j].reactions[i]) {
              delete elements[j].reactions[i];
            }
            acidReact(i, j, productsA, productsB, reactionTemp);
            for (let k = 0; k < productsA.length; k++) {
              if (productsA[k] == "water") {
                continue;
              }
              if (elements[j].reactions && elements[j].reactions[productsA[k]]) {
                delete elements[j].reactions[productsA[k]];
              }
              if (elements[i].reactions && elements[i].reactions[productsA[k]]) {
                delete elements[i].reactions[productsA[k]];
              }
            }
            for (let k = 0; k < productsB.length; k++) {
              if (productsB[k] == "water") {
                continue;
              }
              if (elements[j].reactions && elements[j].reactions[productsB[k]]) {
                delete elements[j].reactions[productsB[k]];
              }
              if (elements[i].reactions && elements[i].reactions[productsB[k]]) {
                delete elements[i].reactions[productsB[k]];
              }
            }
            // console.log("neutral");
            // console.log(i);
            // console.log(j);
            // console.log(compounds);
            // console.log(productsA);
            // console.log(productsB);
          }
        }
        if (elements[i].salt) {
          let acidType = eLists[elements[i].salt["acid"].components[0]];
          for (let jj = 0; jj < acidType.length; jj++) {
            let j = acidType[jj];
            if (elements[i].reactions && elements[i].reactions[j] && elements[i].reactions[j].elem2 === "dirty_water") {
              delete elements[i].reactions[j];
            }
          }
        }
      }
  
      let acidType = eLists["NITRATE"];
      for (let jj = 0; jj < acidType.length; jj++) {
        let j = acidType[jj];
        if (elements["nitrogen_dioxide"].reactions[j] && elements["nitrogen_dioxide"].reactions[j].elem2 === "nitric_acid") {
          delete elements["nitrogen_dioxide"].reactions[j];
        }
        if (elements["liquid_nitrogen_dioxide"].reactions[j] && elements["liquid_nitrogen_dioxide"].reactions[j].elem2 === "nitric_acid") {
          delete elements["liquid_nitrogen_dioxide"].reactions[j];
        }
      }
  
      acidType = eLists["SULFATE"];
      for (let jj = 0; jj < acidType.length; jj++) {
        let j = acidType[jj];
        if (elements["sulfur_dioxide"].reactions[j] && elements["sulfur_dioxide"].reactions[j].elem2 === "sulfuric_acid") {
          delete elements["sulfur_dioxide"].reactions[j];
        }
      }
      delete elements["molten_iodine_ice"];
      delete elements["molten_nihonium_nitrate"];
      for (let i in elements) {
        if (elements[i].ignore) {
          elements[i].ignore = [...new Set(elements[i].ignore)];
        }
      }
    }
  });















































//---------------------------------------------------------------------------------------------------------
























































































elements.incinerator = {
    color: "#e600ff",
	desc: "A machine that works like the incinerate tool.",
    behavior: [
        "XX|HT:10000|XX",
        "HT:10000|XX|HT:10000",
        "XX|HT:10000|XX",
    ],
    category: "machines",
	state: "solid",
    insulate:true,
};

elements.e_incinerator = {
	color: "#9802a8",
	desc: "It works like the incinerator but it needs power to work.",
	behavior: behaviors.WALL,
	hardness: 0.5,
	conduct: 1,
	behaviorOn: [
        "XX|HT:10000|XX",
        "HT:10000|XX|HT:10000",
        "XX|HT:10000|XX",
    ],
	name: "E-Incinerator",
	category: "machines",
	state: "solid",
	insulate:true,
};



elements.big_bang = {
  color: ["#fbf8ff", "#fbf3ff", "#f8f7ff"],
  behavior: ["XX|XX|XX", "XX|EX:100>plasma,plasma,sun,sun,sun,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,molten_gold,molten_uranium,molten_lead,molten_tungsten,molten_nickel,molten_copper,molten_zinc,gallium_gas,bromine_gas,iodine_gas,molten_tin,molten_silver AND CH:void|XX", "XX|XX|XX"],
  temp: 99999999700,
  category: "energy",
  state: "gas",
  density: 1000,
  hardness: 1,
  hidden: true,
  excludeRandom: true,
  maxSize: 1,
};
















function camo(pixel) {
    if (!paused) {
        // set camouflage color to random color
        if (Math.random() < 0.002) {
            let n = Math.floor(Math.random() * lizard_colors.length);
            pixel.color = lizard_colors[n];
        }
        // set camouflage color to random color but make it slightly gray because camouflage isn't perfect
        if (Math.random() < 0.1) {
            for (let i = 0; i < currentPixels.length; i++) {
                let x = currentPixels[i].x;
                let y = currentPixels[i].y;
                let dx = Math.abs(x - pixel.x);
                let dy = Math.abs(y - pixel.y);
                if (dx <= 1 && dy <= 1 && currentPixels[i].element != "lizard") {
                    pixel.color = blendColors(blendColors(currentPixels[i].color, "#887766", 0.4), pixel.color);
                    break;
                }
            }
        }
    }
}

// define element
elements.lizard = {
    color: ["#3ce845","#212922","#c2c2c2"],
    behavior: [
        "ST%98|M1%6|ST%98",
        "XX|XX|M2%20 AND BO",
        "XX|M1%80|M2",
    ],
    tick: camo,
    tempHigh: 100,
    stateHigh: "ash",
    tempLow: 0,
    stateLow: "dead_bug",
    breakInto: "dead_bug",
    category: "life",
    burn: 95,
    burnTime: 25,
    state: "solid",
    density: 500,
    conduct: 0.15,
    reactions: {
        "bird": { elem2: null, chance: 0.1, func: behaviors.FEEDPIXEL },
        "plant": { elem2: null, chance: 0.05, func: behaviors.FEEDPIXEL },
        "tomato": { elem2: null, chance: 0.05, func: behaviors.FEEDPIXEL },
        "fly": { elem2: null, chance: 0.15, func: behaviors.FEEDPIXEL },
        "ant": { elem2: null, chance: 0.1, func: behaviors.FEEDPIXEL },
    }
};






















//---------------------------------------------------------------------------------------------------------------






































// yeniden boyutlandir

pixelResizeButton = document.createElement("button");
pixelResizeButton.onclick = function(pixel) {
    let canvas_width = document.getElementById("game").width;
    let canvas_height = document.getElementById("game").height;
    let pixelSizeNeeded = prompt("How big should pixels be?");
    if (!pixelSizeNeeded || isNaN(pixelSizeNeeded)) { alert('number is invalid!'); return; }
    resizeCanvas(canvas_height,canvas_width, parseFloat(pixelSizeNeeded), true);
};
pixelResizeButton.textContent = "Resize";
window.addEventListener("load",function(){
   document.getElementById("toolControls").appendChild(pixelResizeButton); 
});













































































//-----------------------------------------------------------------------------------------------------






























































































































//-------------------------------------------------------------------------------------------------------------------------















































































































































































//-----------save_slots--------------------------------------------------------------------------------------------------//extrasaveslots
        function showSaves() {
          var savesParent = document.getElementById("savesParent");
          var saveSlotList = document.getElementById("saveSlotList");
          saveSlotList.innerHTML = "";
          // loop 12 times, checking if local storage SandboxelsSaves/x exists
          // <span class="saveSlot">Slot 1 <span disabled="true">Clear</span> <span disabled="true">Load</span> <span onclick="saveSlot(2)">Save</span></span>
          // <span class="saveSlot">Unnamed <span onclick="clearSlot(2)">Clear</span> <span onclick="loadSlot(2)">Load</span> <span onclick="saveSlot(2)">Save</span></span>
          for (var i = 1; i < 151; i++) {
              var save = localStorage.getItem("SandboxelsSaves/"+i);
              var name = "Slot "+i;
              if (save) {
                  name = JSON.parse(save).meta.name || "Unnamed";
                  name = name.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
                  // truncate
                  if (name.length > 16) { name = name.substring(0,16)+"..."; }
                  saveSlotList.innerHTML += "<span id='saveSlot"+i+"' data-name='"+name+"' class='saveSlot'><span class='saveSlotName'>"+name+"</span> <span onclick='clearSlot("+i+")' class='saveOption'>Clear</span> <span onclick='loadSlot("+i+")' class='saveOption'>Load</span> <span onclick='saveSlot("+i+")' class='saveOption'>Save</span></span>";
              }
              else {
                  saveSlotList.innerHTML += "<span id='saveSlot"+i+"' data-name='"+name+"' class='saveSlot'><span class='saveSlotName'>"+name+"</span> <span disabled='true' class='saveOption'>Clear</span> <span disabled='true' class='saveOption'>Load</span> <span onclick='saveSlot("+i+")' class='saveOption'>Save</span></span>";
              }
          }
          savesParent.style.display = "block";
          showingMenu = "saves";
      }
      function saveSlot(i) {
          savingState = {slot:i};
          document.getElementById("saveName").value = document.getElementById("saveSlot"+i).getAttribute("data-name") || "Slot "+i;
          showSavePrompt();
      }
      function loadSlot(i) {
          var save = localStorage.getItem("SandboxelsSaves/"+i);
          if (save) {
              loadSave(JSON.parse(save));
              closeMenu();
          }
      }
      function clearSlot(i) {
          if (!confirm("Are you sure you want to erase this save slot?")) { return }
          localStorage.removeItem("SandboxelsSaves/"+i);
          showSaves();
      }






























      

























      {
        const inBounds = (x, y, width, height) => x >= 0 && x < width && y >= 0 && y < height;
        
        const getRandomValue = (min, max) => Math.floor(Math.random() * (max - min) + min);
        
        const generateMaze = (w, h, originX, originY) => {
            const map = [];
            for (let i = 0; i < w; i++) {
                map[i] = [];
                for (let j = 0; j < w; j++) {
                    map[i][j] = 0;
                }
            }
            
            const stack = [];
            let current = [];
        
            const start = [w - 2, h - 2];
            
            stack.push(start);
            current = start;
        
            while (stack.length > 0) {
                const [x, y] = current;
                const neighbors = [
                    inBounds(x, y + 2, w, h) ? [x, y + 2,  0,  1] : null,
                    inBounds(x, y - 2, w, h) ? [x, y - 2,  0, -1] : null,
                    inBounds(x + 2, y, w, h) ? [x + 2, y,  1,  0] : null,
                    inBounds(x - 2, y, w, h) ? [x - 2, y, -1,  0] : null
                ].filter(a => a != null && map[a[0]][a[1]] == 0);
        
                if (neighbors.length == 0) {
                    const cell = stack.pop();
                    current = cell;
                    continue;
                }
        
                const next = neighbors[getRandomValue(0, neighbors.length)];
        
                const [offsetX, offsetY] = next.slice(2);
        
                map[x + offsetX][y + offsetY] = 1;
                map[x + offsetX * 2][y + offsetY * 2] = 1;
        
                stack.push([x, y]);
        
                current = [next[0], next[1]];
            }
        
            for (let i = 0; i <= w; i++) {
                for (let j = 0; j <= h; j++) {
                    const x = i + originX;
                    const y = j + originY;
                    if (pixelMap[x][y]) deletePixel(x, y);
                    if (i == 0 || j == 0) createPixel("wall", x, y);
                    else if (map[i - 1][j - 1] == 0) createPixel("wall", x, y);
                    if ((i == 1 && j == 0) || (i == w - 1 && j == h)) deletePixel(x, y);
                }
            }
        }
        
        elements.maze = {
            color: "#760144",
            category: "special",
            tool: (_) => {},
            onMouseDown: () => {
                if (outOfBounds(Math.floor(mousePos.x - mouseSize / 2) + 1, Math.floor(mousePos.y - mouseSize / 2) + 1) || outOfBounds(Math.floor(mousePos.x - mouseSize / 2) + mouseSize, Math.floor(mousePos.y - mouseSize / 2) + mouseSize)) return;
                generateMaze(mouseSize - 1, mouseSize - 1, Math.floor(mousePos.x - mouseSize / 2) + 1, Math.floor(mousePos.y - mouseSize / 2) + 1)
            }
        }
        }



        
        































































































function general_display(w, h, colorMode) { // colorMode: 0 for monochrome, 1 for 3-bit, 2 for 4-bit
    return function(pixel) {
        var pins = [];

        // X input (expands right)
        for (var i = 0; i < Math.ceil(Math.log2(w)); i++) {
            pins.push([-1, (i * 2) + 1, true]);
        }

        // Y input (expands downward)
        for (var i = 0; i < Math.ceil(Math.log2(h)); i++) {
            pins.push([(i * 2) + 1, -1, true]);
        }

        if (colorMode === 1) { // 3-bit color
            pins.push([-1, 11, true]); // Red
            pins.push([-1, 13, true]); // Green
            pins.push([-1, 15, true]); // Blue
        } else if (colorMode === 2) { // 4-bit color
            for (var i = 0; i < 4; i++) {
                pins.push([-1, 11 + (i * 2), true]); // 4-bit color input
            }
        } else { // Monochrome
            pins.push([w - 4, -1, true]);
        }

        // Reset pin
        pins.push([w - 2, -1, true]);

        // Clock input
        pins.push([w, -1, true]);

        initializeCircuit(pixel, pins, w + 2, h + 2, false, pixel.circuitRotation, addDisplayCallback);

        var X = [];
        for (var i = 0; i < Math.ceil(Math.log2(w)); i++) {
            X.push(checkPin(pixel, pins, i));
        }

        var Y = [];
        for (var i = 0; i < Math.ceil(Math.log2(h)); i++) {
            Y.push(checkPin(pixel, pins, Math.ceil(Math.log2(w)) + i));
        }

        var color;
        if (colorMode === 1) {
            var red = checkPin(pixel, pins, Math.ceil(Math.log2(w)) + Math.ceil(Math.log2(h)));
            var green = checkPin(pixel, pins, Math.ceil(Math.log2(w)) + Math.ceil(Math.log2(h)) + 1);
            var blue = checkPin(pixel, pins, Math.ceil(Math.log2(w)) + Math.ceil(Math.log2(h)) + 2);
            color = `rgb(${red ? 255 : 0}, ${green ? 255 : 0}, ${blue ? 255 : 0})`;
        } else if (colorMode === 2) {
            var colorIndex = 0;
            for (var i = 0; i < 4; i++) {
                colorIndex += checkPin(pixel, pins, Math.ceil(Math.log2(w)) + Math.ceil(Math.log2(h)) + i) ? Math.pow(2, i) : 0;
            }
            color = colorPalette_4bit[colorIndex];
        } else {
            color = checkPin(pixel, pins, Math.ceil(Math.log2(w)) + Math.ceil(Math.log2(h))) ? "rgb(16, 230, 120)" : "rgb(16, 24, 32)";
        }

        var reset = checkPin(pixel, pins, Math.ceil(Math.log2(w)) + Math.ceil(Math.log2(h)) + (colorMode === 1 ? 3 : (colorMode === 2 ? 4 : 1)));
        var clock = checkPin(pixel, pins, Math.ceil(Math.log2(w)) + Math.ceil(Math.log2(h)) + (colorMode === 1 ? 4 : (colorMode === 2 ? 5 : 2)));

        var x_pos = 0;
        for (var i = 0; i < X.length; i++) {
            x_pos += X[i] ? Math.pow(2, (X.length - 1) - i) : 0;
        }

        var y_pos = 0;
        for (var i = 0; i < Y.length; i++) {
            y_pos += Y[i] ? Math.pow(2, (Y.length - 1) - i) : 0;
        }

        if (x_pos >= w || y_pos >= h) return;

        var px = pixel.x + 1 + x_pos;
        var py = pixel.y + 1 + y_pos;

        if (reset) {
            for (var y = 1; y <= h; y++) {
                for (var x = 1; x <= w; x++) {
                    var reset_px = pixel.x + x;
                    var reset_py = pixel.y + y;
                    if (pixelMap[reset_px] && pixelMap[reset_px][reset_py] && pixelMap[reset_px][reset_py].element == "displayPixel") {
                        pixelMap[reset_px][reset_py].color = "rgb(16, 24, 32)";
                    }
                }
            }
            return;
        }

        if (clock) {
            if (pixelMap[px] && pixelMap[px][py] && pixelMap[px][py].element == "displayPixel") {
                pixelMap[px][py].color = color;
            }
        }
    };
}

elements.gridDisplay = {
	color: "#33FF66",
    category: "logic",
    maxSize: 1,
    onSelect: function() {
        // Prompt the user for display width, height, and color depth
        var width = parseInt(prompt("Enter the display width (e.g., 16, 32, 64):", "16"));
        var height = parseInt(prompt("Enter the display height (e.g., 16, 32, 64):", "16"));
        var colorDepth = parseInt(prompt("Enter the color depth (1 for monochrome, 3 for 3-bit, 4 for 4-bit):", "4"));

        // Set these values for the pixel
        elements.gridDisplay.displayWidth = width;
        elements.gridDisplay.displayHeight = height;
        elements.gridDisplay.displayColorDepth = colorDepth;
    },
    cc_stableTick: function(pixel) {
        // Get the display properties
        var width = elements.gridDisplay.displayWidth || 16;
        var height = elements.gridDisplay.displayHeight || 16;
        var colorDepth = elements.gridDisplay.displayColorDepth || 4;

        // Call general_display with the appropriate parameters
        var displayFunction = general_display(width, height, colorDepth === 1 ? 0 : (colorDepth === 3 ? 1 : 2));
        displayFunction(pixel);
    }
};

elements.displayPixel = {
	color: "#000000",
	category: "logic",
	state: "solid",
	behavior: behaviors.WALL,
	tick: function(pixel) {
		if (pixel.start == pixelTicks) {
			pixel.color = "rgb(16, 24, 32)";
		}

//		if (lightmapEnabled && pixel.color) {
//			var x = Math.floor(pixel.x / lightmapScale);
//			var y = Math.floor(pixel.y / lightmapScale);
//			lightmap[y][x] = { color: scaleList(rgbToArray(pixel.color), 2) };
//		}
	}
};

























































































































elements.output = {
  color: "#601616",
  category: "logic",
  state: "solid",
  behavior: behaviors.WALL,
  conduct: 1,
  tick: function(pixel){
      for (var i = 0; i < adjacentCoords.length; i++) {
          var coord = adjacentCoords[i];
          var x = pixel.x+coord[0];
          var y = pixel.y+coord[1];
          if (!isEmpty(x,y,true) && pixel.charged) {           
              if (pixelMap[x][y].element == "logic_wire" && pixelMap[x][y].lstate == 0){
                  if (pixelMap[x][y].lastUpdate == pixelTicks){
                      pixelMap[x][y].lstate = 2
                      pixelMap[x][y].color = pixelColorPick(pixelMap[x][y], "#ffe49c")
                  } else {
                      pixelMap[x][y].lstate = 1
                  }
              }
          }
      }
  }
}
elements.logic_wire = {
  color: "#3d4d2c",
  behavior: behaviors.WALL,
  state: "solid",
  category: "logic",
  tick: function (pixel){ // -2 uncharge spread -1 uncharge buffer 0 uncharged 1 charge buffer 2 charge spread
      pixel.lastUpdate = pixelTicks
      if (!pixel.lstate){
          pixel.lstate = 0
      }
      if (pixel.lstate == 0){
          for (var i = 0; i < adjacentCoords.length; i++) {
              var coord = adjacentCoords[i];
              var x = pixel.x+coord[0];
              var y = pixel.y+coord[1];
              if (!isEmpty(x,y,true)) {           
                  if (pixelMap[x][y].element == "output" && pixelMap[x][y].charge == 1){
                      pixel.lstate = 2;
                      pixel.color = pixelColorPick(pixel, "#ffe49c");
                  }
              }
          }
      }
      if (pixel.lstate == 2){
          // lightmap.js integration
          if (enabledMods.includes("mods/lightmap.js")){
              let x = Math.floor(pixel.x / lightmapScale);
              let y = Math.floor(pixel.y / lightmapScale);
              lightmap[y][x] = { color: [255/4, 228/4, 156/4]};
          }
          for (var i = 0; i < adjacentCoords.length; i++) {
              var coord = adjacentCoords[i];
              var x = pixel.x+coord[0];
              var y = pixel.y+coord[1];
              if (!isEmpty(x,y,true)) {           
                  if (pixelMap[x][y].element == "logic_wire" && pixelMap[x][y].lstate == 0){
                      if (pixelMap[x][y].lastUpdate == pixelTicks){
                          pixelMap[x][y].lstate = 2
                          pixelMap[x][y].color = pixelColorPick(pixelMap[x][y], "#ffe49c")
                      } else {
                          pixelMap[x][y].lstate = 1
                      }
                  } else if (pixelMap[x][y].element == "output" && pixelMap[x][y].charged == 0){
                      pixel.lstate = -2
                      pixel.color = pixelColorPick(pixel, "#3d4d2c")
                  }
              }
          }
      }
      if (pixel.lstate == 1){
          // lightmap.js integration
          if (enabledMods.includes("mods/lightmap.js")){
              let x = Math.floor(pixel.x / lightmapScale);
              let y = Math.floor(pixel.y / lightmapScale);
              lightmap[y][x] = { color: [255/4, 228/4, 156/4]};
          }
          pixel.lstate = 2
          pixel.color = pixelColorPick(pixel, "#ffe49c");
      }
      if (pixel.lstate == -2){
          for (var i = 0; i < adjacentCoords.length; i++) {
              var coord = adjacentCoords[i];
              var x = pixel.x+coord[0];
              var y = pixel.y+coord[1];
              if (!isEmpty(x,y,true)) {           
                  if (pixelMap[x][y].element == "logic_wire" && (pixelMap[x][y].lstate == 1 || pixelMap[x][y].lstate == 2)){
                      if (pixelMap[x][y].lastUpdate == pixelTicks){
                          pixelMap[x][y].lstate = -2
                          pixelMap[x][y].color = pixelColorPick(pixelMap[x][y], "#3d4d2c")
                      } else {
                          pixelMap[x][y].lstate = -1
                      }
                  }
              }
          }
          pixel.lstate = 0
      }
      if (pixel.lstate == -1){
          pixel.lstate = -2
          pixel.color = pixelColorPick(pixel, "#3d4d2c");
      }
  }
}
function countNeighbors(pixel){
  var results = {
      "charged": 0,
      "uncharged": 0,
  }
  for (var i = 0; i < squareCoords.length; i++) {
      var coord = squareCoords[i];
      var x = pixel.x+coord[0];
      var y = pixel.y+coord[1];
      if (!isEmpty(x,y, true)) {
          var otherPixel = pixelMap[x][y];
          if (otherPixel.element == "logic_wire"){
              if (otherPixel.lstate > 0){
                  results.charged = results.charged + 1;
              } else {
                  results.uncharged = results.uncharged + 1;
              }
          }
      }
  }
  return results;
}
function chargeOutputs(pixel){
  for (var i = 0; i < squareCoords.length; i++) {
      var coord = squareCoords[i];
      var x = pixel.x+coord[0];
      var y = pixel.y+coord[1];
      if (!isEmpty(x,y, true)) {
          var otherPixel = pixelMap[x][y];
          if (otherPixel.element == "output"){
                  otherPixel.charged = 1;
          }
      }
  }
}
function unchargeOutputs(pixel){
  for (var i = 0; i < squareCoords.length; i++) {
      var coord = squareCoords[i];
      var x = pixel.x+coord[0];
      var y = pixel.y+coord[1];
      if (!isEmpty(x,y, true)) {
          var otherPixel = pixelMap[x][y];
          if (otherPixel.element == "output"){
                  otherPixel.charged = 0;
          }
      }
  }
}
elements.not_gate = {
  color: "#4a1b18",
  category: "logic",
  state: "solid",
  behavior: behaviors.WALL,
  tick: function(pixel){
      var countNeighborsResult = countNeighbors(pixel)
      if (countNeighborsResult.charged == 0){
          chargeOutputs(pixel);
      } else {
          unchargeOutputs(pixel);
      }
  }
}
elements.and_gate = {
  color: "#184a23",
  category: "logic",
  state: "solid",
  behavior: behaviors.WALL,
  tick: function(pixel){
      var countNeighborsResult = countNeighbors(pixel)
      if (countNeighborsResult.uncharged == 0){
          chargeOutputs(pixel);
      } else {
          unchargeOutputs(pixel);
      }
  }
}
elements.xor_gate = {
  color: "#30184a",
  category: "logic",
  state: "solid",
  behavior: behaviors.WALL,
  tick: function(pixel){
      var countNeighborsResult = countNeighbors(pixel)
      if (countNeighborsResult.charged == 1){
          chargeOutputs(pixel);
      } else {
          unchargeOutputs(pixel);
      }
  }
}
elements.or_gate = {
  color: "#4a4018",
  category: "logic",
  state: "solid",
  behavior: behaviors.WALL,
  tick: function(pixel){
      var countNeighborsResult = countNeighbors(pixel)
      if (countNeighborsResult.charged >= 1){
          chargeOutputs(pixel);
      } else {
          unchargeOutputs(pixel);
      }
  }
}
elements.nand_gate = {
  color: "#eb4034",
  category: "logic",
  state: "solid",
  behavior: behaviors.WALL,
  tick: function(pixel){
      var countNeighborsResult = countNeighbors(pixel)
      if (countNeighborsResult.uncharged){
          chargeOutputs(pixel);
      } else {
          unchargeOutputs(pixel);
      }
  }
}
elements.nor_gate = {
  color: "#eb8c34",
  category: "logic",
  state: "solid",
  behavior: behaviors.WALL,
  tick: function(pixel){
      var countNeighborsResult = countNeighbors(pixel)
      if (!countNeighborsResult.charged){
          chargeOutputs(pixel);
      } else {
          unchargeOutputs(pixel);
      }
  }
}
elements.nxor_gate = {
  color: "#ebd834",
  category: "logic",
  state: "solid",
  behavior: behaviors.WALL,
  tick: function(pixel){
      var countNeighborsResult = countNeighbors(pixel)
      if (!(countNeighborsResult.charged == 1)){
          chargeOutputs(pixel);
      } else {
          unchargeOutputs(pixel);
      }
  }
}
elements.E2L_lever = {
  color: "#b2ba75",
  behavior: behaviors.WALL,
  state: "solid",
  category: "logic",
  tick: function(pixel){
      if (pixel.start === pixelTicks){
    pixel.cooldown = 0;
    pixel.toggleMode = 1;
  }
      for (var i = 0; i < adjacentCoords.length; i++) {
          var coord = adjacentCoords[i];
          var x = pixel.x+coord[0];
          var y = pixel.y+coord[1];
          if (!isEmpty(x,y,true)) {           
              if ((pixelMap[x][y].charge || pixelMap[x][y].chargeCD) && pixel.cooldown == 0){
                  for (var i = 0; i < adjacentCoords.length; i++) {
                      var coord = adjacentCoords[i];
                      var x = pixel.x+coord[0];
                      var y = pixel.y+coord[1];
                      if (!isEmpty(x,y,true)) {           
                          if (pixelMap[x][y].element == "logic_wire"){
                              if (pixel.toggleMode == 1){
                              pixelMap[x][y].lstate = 2
                              pixelMap[x][y].color = pixelColorPick(pixel, "#ffe49c");
                              } else {
                              pixelMap[x][y].lstate = -2
                              pixelMap[x][y].color = pixelColorPick(pixel, "#3d4d2c");
                              }
                          }
                      }
                  }
                  pixel.cooldown = 15
                  if (pixel.toggleMode){
                      pixel.toggleMode = 0;
                  } else {
                      pixel.toggleMode = 1;
                  }
              }
          }
      }
      if (pixel.cooldown){
          pixel.cooldown = pixel.cooldown - 1
      }
  }
}
elements.E2L_button = {
  color: "#b2ba75",
  behavior: behaviors.WALL,
  state: "solid",
  category: "logic",
  tick: function(pixel){
      for (var i = 0; i < adjacentCoords.length; i++) {
          var coord = adjacentCoords[i];
          var x = pixel.x+coord[0];
          var y = pixel.y+coord[1];
          if (!isEmpty(x,y,true)) {           
              if ((pixelMap[x][y].charge || pixelMap[x][y].chargeCD)){
                  for (var j = 0; j < adjacentCoords.length; j++) {
                      var coord = adjacentCoords[j];
                      var x = pixel.x+coord[0];
                      var y = pixel.y+coord[1];
                      if (!isEmpty(x,y,true)) {           
                          if (pixelMap[x][y].element == "logic_wire"){
                              pixelMap[x][y].lstate = 2
                              pixelMap[x][y].color = pixelColorPick(pixel, "#ffe49c");
                          }
                      }
                  }
                  return;
              }
          }
      }
      for (var i = 0; i < adjacentCoords.length; i++) {
          var coord = adjacentCoords[i];
          var x = pixel.x+coord[0];
          var y = pixel.y+coord[1];
          if (!isEmpty(x,y,true)) {
              if (pixelMap[x][y].element == "logic_wire" && pixelMap[x][y].lstate > 0){
                  pixelMap[x][y].lstate = -2
                  pixelMap[x][y].color = pixelColorPick(pixel, "#3d4d2c");
              }
          }
      }
  }
}
elements.L2E_constant = {
  color: "#b2ba75",
  behavior: behaviors.WALL,
  state: "solid",
  category: "logic",
  tick: function(pixel){
      var foundOn = false;
      for (var i = 0; i < adjacentCoords.length; i++) {
          var coord = adjacentCoords[i];
          var x = pixel.x+coord[0];
          var y = pixel.y+coord[1];
          if (!isEmpty(x,y,true)) {           
              if (pixelMap[x][y].element == "logic_wire" && pixelMap[x][y].lstate > 0){
                  foundOn = true;
              }
          }
      }
      if (foundOn){
          for (var i = 0; i < adjacentCoords.length; i++) {
              var coord = adjacentCoords[i];
              var x = pixel.x+coord[0];
              var y = pixel.y+coord[1];
              if (!isEmpty(x,y,true)) {           
                  if (elements[pixelMap[x][y].element].conduct){
                      pixelMap[x][y].charge = 1
                  }
              }
          }
      } else {
          for (var i = 0; i < adjacentCoords.length; i++) {
              var coord = adjacentCoords[i];
              var x = pixel.x+coord[0];
              var y = pixel.y+coord[1];
              if (!isEmpty(x,y,true)) {           
                  if (elements[pixelMap[x][y].element].conduct){
                      pixelMap[x][y].charge = 0
                  }
              }
          }
      }
  }
}
var transmitterVar = 0;
elements.logic_transmitter = {
  onSelect: function() {
      var answertransmitter = prompt("Please input the desired channel of this transmitter. Placing multiple ones with the same channel while paused may break.",(transmitterVar||undefined));
      if (!answertransmitter) { return }
  transmitterVar = answertransmitter;
  },
  color: "#c26994",
  state: "solid",
  behavior: behaviors.WALL,
  category: "logic",
  tick: function(pixel){
      var neighborResult = countNeighbors(pixel);
      if (pixel.start === pixelTicks){
    pixel.channel = transmitterVar;
  }
      pixel.clone = pixel.channel;
      var receivers = currentPixels.filter(function(pixelToCheck) {
          return (
              pixelToCheck !== pixel && //should work if this pixel is the same as the other one by reference
              pixelToCheck.element == "logic_receiver" &&
              pixelToCheck.channel == pixel.channel
          );
      }).map(pixel => [pixel.x,pixel.y]);
      for(var i in receivers) {
          i = parseInt(i);
          var wifiCoords = receivers[i];
          var newPixel = pixelMap[wifiCoords[0]]?.[wifiCoords[1]];
          if(newPixel) {
              if (neighborResult.charged){
                  for(var j in adjacentCoords) {
                      j = parseInt(j);
                      var pixelAdjacentToWifi = pixelMap[newPixel.x+adjacentCoords[j][0]]?.[newPixel.y+adjacentCoords[j][1]];
                      if(pixelAdjacentToWifi && pixelAdjacentToWifi.element == "logic_wire") { pixelAdjacentToWifi.lstate = 2 };
                 };
              } else {
                  for(var j in adjacentCoords) {
                      j = parseInt(j);
                      var pixelAdjacentToWifi = pixelMap[newPixel.x+adjacentCoords[j][0]]?.[newPixel.y+adjacentCoords[j][1]];
                      if(pixelAdjacentToWifi && pixelAdjacentToWifi.element == "logic_wire") { pixelAdjacentToWifi.lstate = -2 };
                 };
              }
          }
      };
  }
}
elements.logic_receiver = {
  onSelect: function() {
      var answertransmitter = prompt("Please input the desired channel of this receiver. It will break if you do multiple different channels while paused.",(transmitterVar||undefined));
      if (!answertransmitter) { return }
  transmitterVar = answertransmitter;
  },
  color: "#69c2ba",
  behavior: behaviors.WALL,
  state: "solid",
  category: "logic",
  tick: function(pixel){
      if (pixel.start === pixelTicks){pixel.channel = transmitterVar}
      pixel.clone = pixel.channel;
  }
}
elements.logic_shock = {
  color: elements.shock.color,
  category: "tools",
  tool: function(pixel){
      if (pixel.element == "logic_wire"){pixel.lstate = 2; pixel.color = pixelColorPick(pixel, "#ffe49c")}
  },
  excludeRandom: true,
}
elements.logic_unshock = {
  color: elements.uncharge.color,
  category: "tools",
  tool: function(pixel){
      if (pixel.element == "logic_wire"){pixel.lstate = -2; pixel.color = pixelColorPick(pixel, "#3d4d2c")}
  },
  excludeRandom: true,
}
elements.list_all_wifi = {
  color: elements.lookup.color,
  category: "tools",
  tool: function(){},
  excludeRandom: true,
  onSelect: function(){
      let results = {}
      for (let i in currentPixels){
          var otherPixel = currentPixels[i]
          if (["logic_receiver", "logic_transmitter"].includes(otherPixel.element)){
              if (otherPixel.channel){
                  if (results[otherPixel.channel]){
                      results[otherPixel.channel].push([otherPixel.x, otherPixel.y])
                  } else {
                      results[otherPixel.channel] = [[otherPixel.x, otherPixel.y]]
                  }
              }
          }
      }
      console.log(results)
      let keys = Object.keys(results)
      let ans1 = prompt(keys.length + " unique channels have been found. Type 1 to list them all.", 1)
      if(ans1 == "1"){
          ans2 = prompt("["+keys +"]"+ " These are all the channels found. Type the name of one of them to see the positions of all pixels with that channel.", keys[0])
          if (keys.includes(ans2)){
              let finalString = ""
              for (i in results[ans2]){
                  finalString += ", ["
                  finalString += results[ans2][i]
                  finalString += "]"
              }
              alert(finalString)
          }
      }
  }
}
// CircuitCore: adds circuits to sandboxels, logicgates.js is required

if (!enabledMods.includes("mods/betterSettings.js")) { enabledMods.unshift("mods/betterSettings.js"); localStorage.setItem("enabledMods", JSON.stringify(enabledMods)); window.location.reload() };
var lightmapEnabled = enabledMods.includes("mods/lightmap.js") || enabledMods.includes("mods/fast_lightmap.js");

var cc_settingsTab = new SettingsTab("CircuitCore");
var cc_setting1 = new Setting("If true then circuits will emit heat", "mem_fill", settingType.BOOLEAN, false, defaultValue=true);
//var cc_setting2 = new Setting("Example Setting 2", "element", settingType.TEXT, false, "2");
cc_settingsTab.registerSettings("OverHeating", cc_setting1);
//cc_settingsTab.registerSettings("Setting 2", cc_setting2);
settingsManager.registerTab(cc_settingsTab);

var colorPalette_4bit = [
	"#101820", "#37175F", "#5F1717", "#6F175F",
	"#005F00", "#1563BF", "#7F401A", "#525252",
	"#8F8F8F", "#EE8822", "#FF3027", "#FF47FF",
	"#58E618", "#27FFDF", "#FFFF27", "#FFFFFF"
];

function hueLerp(value) {
	// Clamp the value between -50 and 400
	if (value < -50) value = -50;
	if (value > 400) value = 400;

	let r, g, b;

	if (value <= 300) {
		// Interpolate between blue and red
		let t = (value + 50) / 350; // Normalize value from -50 to 300 to a 0-1 range
		r = Math.round(255 * t);
		g = 0;
		b = Math.round(255 * (1 - t));
	} else {
		// Interpolate between red and white
		let t = (value - 300) / 100; // Normalize value from 300 to 400 to a 0-1 range
		r = 255;
		g = Math.round(255 * t);
		b = Math.round(255 * t);
	}

	// Convert RGB values to a hex string
	return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase();
}

function cc_rgbToArray(colorString) {
	if (typeof colorString !== 'string') {
		console.error('Invalid colorString:', colorString);
		return null;
	}

	if (colorString.startsWith('rgb')) {
		return colorString.slice(4, -1).split(',').map(val => parseInt(val.trim()));
	} else if (colorString.startsWith('#')) {
		let hex = colorString.slice(1);

		// Handle shorthand hex (e.g., #03F)
		if (hex.length === 3) {
			hex = hex.split('').map(char => char + char).join('');
		}

		if (hex.length !== 6) {
			console.error('Invalid hex color:', colorString);
			return null;
		}

		const r = parseInt(hex.slice(0, 2), 16);
		const g = parseInt(hex.slice(2, 4), 16);
		const b = parseInt(hex.slice(4, 6), 16);

		return [r, g, b];
	} else {
		console.error('Invalid color format:', colorString);
		return null;
	}
}

function cc_arrayToRgbString(rgbArray) {
	return `rgb(${rgbArray.join(', ')})`;
}

function cc_scaleList(numbers, scale) {
	return numbers.map(number => number * scale);
}

function binaryArrayToNumber(binaryArray) {
	return binaryArray.reduce((acc, bit, index) => acc + bit * Math.pow(2, (binaryArray.length - 1) - index), 0);
}

function hexToPixelGrid(hex) {
	var hexDigitStrings = [
		"111101101101111", // 0
		"001001001001001", // 1
		"111001111100111", // 2
		"111001111001111", // 3
		"101101111001001", // 4
		"111100111001111", // 5
		"111100111101111", // 6
		"111001001001001", // 7
		"111101111101111", // 8
		"111101111001111", // 9
		"111101111101101", // A
		"100100111101111", // B
		"111100100100111", // C
		"001001111101111", // D
		"111100111100111", // E
		"111100111100100"  // F
	];

	if (hex < 0 || hex > 15 || isNaN(hex)) {
		console.log("inputted value: ", hex);
		throw new Error("Input must be a valid 1-digit hexadecimal number.");
	}

	const binaryString = hexDigitStrings[hex];
	const hexDigitArray = [];
	for (let i = 0; i < 5; i++) {
		hexDigitArray.push(binaryString.slice(i * 3, i * 3 + 3).split('').map(Number));
	}
	return hexDigitArray;
}

// Function to rotate a coordinate around the origin
function rotateCoordinate(x, y, angle) {
	var radians = angle * (Math.PI / 180);
	var cos = Math.cos(radians);
	var sin = Math.sin(radians);

	var nx = Math.round(x * cos - y * sin);
	var ny = Math.round(x * sin + y * cos);

	return [nx, ny];
}

// Initialize the circuit with optional rotation
function initializeCircuit(pixel, pins, w, h, center=true, rotation=circuitRotation, callback=()=>{}) {
	if (pixel.hasGenerated) {return;}

	if (!center) {rotation = 0;} // non-centered circuits don't support rotation yet
	pixel.circuitRotation = rotation;

	createCircuitFrame(pixel, w, h, center, rotation);
	createPins(pixel, pins, rotation);
	callback(pixel, pins, w, h);

	pixel.hasGenerated = true;
}

function createCircuitFrame(pixel, width_, height_, center=true, rotation=0) {
	var halfHeight = Math.floor(height_ / 2);
	var halfWidth = Math.floor(width_ / 2);

	var a = -halfHeight;
	var b = halfHeight;
	var c = -halfWidth;
	var d = halfWidth;

	if (!center) {
		a = 0;
		b = height_ - 1;
		c = 0;
		d = width_ - 1;
	}

	for (var y = a; y <= b; y++) {
		for (var x = c; x <= d; x++) {
			var [rx, ry] = rotateCoordinate(x, y, rotation);
			var px = pixel.x + rx;
			var py = pixel.y + ry;

			if (!(0 <= px && px < width && 0 <= py && py < height)) {continue;}

			// Create the pixel
			if (!pixelMap[px] || pixelMap[px][py] === undefined) {
				createPixel("circuit_material", px, py);
			}

			// Set the core position property
			if (pixelMap[px] && pixelMap[px][py] && pixelMap[px][py].element === "circuit_material") {
				pixelMap[px][py].corePosition = { x: pixel.x, y: pixel.y };
			}
		}
	}
}


function createPins(pixel, pins, rotation=0) {
	for (var i = 0; i < pins.length; i++) {
		var [rx, ry] = rotateCoordinate(pins[i][0], pins[i][1], rotation);
		var px = pixel.x + rx;
		var py = pixel.y + ry;
		if (!(0 <= px && px < width && 0 <= py && py < height)) {continue;}

		if (!pixelMap[px] || pixelMap[px][py] == undefined) {
			var pinType = pins[i][2] ? "input_pin" : "output_pin";
			createPixel(pinType, px, py);
		}
	}
}

function checkPin(pixel, pins, index, rotation=pixel.circuitRotation) {
	var [rx, ry] = rotateCoordinate(pins[index][0], pins[index][1], rotation);
	var px = pixel.x + rx;
	var py = pixel.y + ry;
	if (!(0 <= px && px < width && 0 <= py && py < height)) {return;}

	return pixelMap[px][py] && pixelMap[px][py].active;
}

function setPin(pixel, pins, index, value, rotation=pixel.circuitRotation) {
	var [rx, ry] = rotateCoordinate(pins[index][0], pins[index][1], rotation);
	var px = pixel.x + rx;
	var py = pixel.y + ry;
	if (!(0 <= px && px < width && 0 <= py && py < height)) {return;}

	if (pixelMap[px][py] && pixelMap[px][py].element == "output_pin") {
		pixelMap[px][py].active = value;
	}
}

// Circuits
elements.four_bit_selector_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			// First 4-bit input (A)
			[-7, -2, true],  // A0
			[-5, -2, true],  // A1
			[-3, -2, true],  // A2
			[-1, -2, true],  // A3

			// Second 4-bit input (B)
			[1, -2, true],   // B0
			[3, -2, true],   // B1
			[5, -2, true],   // B2
			[7, -2, true],   // B3

			// Selection pin (Sel)
			[9, 0, true],	// Selection (Sel)

			// Output (O)
			[-3, 2, false],  // O0 (centered)
			[-1, 2, false],  // O1 (centered)
			[1, 2, false],  // O2 (centered)
			[3, 2, false],  // O3 (centered)
		];

		initializeCircuit(pixel, pins, 17, 3);

		// Read inputs
		var A = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3)
		];

		var B = [
			checkPin(pixel, pins, 4),
			checkPin(pixel, pins, 5),
			checkPin(pixel, pins, 6),
			checkPin(pixel, pins, 7)
		];

		var Sel = checkPin(pixel, pins, 8); // Selection pin

		// Select between A and B based on Sel
		var output = Sel ? B : A;

		// Output the selected 4-bit value
		setPin(pixel, pins, 9, output[0]);   // O0
		setPin(pixel, pins, 10, output[1]);  // O1
		setPin(pixel, pins, 11, output[2]);  // O2
		setPin(pixel, pins, 12, output[3]);  // O3
	}
};

elements.four_bit_enabler_circuit = {
	centered: true,
	cc_stableTick: function(pixel) {
		var pins = [
			// Data inputs (D0-D3)
			[-3, -2, true],  // D0
			[-1, -2, true],  // D1
			[1, -2, true],  // D2
			[3, -2, true],   // D3

			// Enable input (E)
			[5, 0, true],   // Enable (E)

			// Enable mirror (E2)
			[-5, 0, false],

			// Outputs (Q0-Q3)
			[-3, 2, false],  // Q0
			[-1, 2, false],  // Q1
			[1, 2, false],  // Q2
			[3, 2, false]	// Q3
		];

		var elementData = elements[pixel.element];
		initializeCircuit(pixel, pins, 9, 3, elementData.centered);

		// Read inputs
		var D = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3)
		];

		var C = checkPin(pixel, pins, 4); // Control input
		setPin(pixel, pins, 5, C);

		// Previous state initialization
		if (pixel._state === undefined) {
			pixel._state = [false, false, false, false];
		}

		// Update latch state based on control input
		if (C) {
			pixel._state = [D[0], D[1], D[2], D[3]]; // Update latch state with data inputs
		} else {
			pixel._state = [false, false, false, false];
		}

		// Output the latch state
		setPin(pixel, pins, 6, pixel._state[0]); // Q0
		setPin(pixel, pins, 7, pixel._state[1]); // Q1
		setPin(pixel, pins, 8, pixel._state[2]); // Q2
		setPin(pixel, pins, 9, pixel._state[3]); // Q3
	}
};

elements.randomizer = {
	color: "#FFCCFF",
	cc_stableTick: function(pixel) {
		for (var i = 0; i < adjacentCoords.length; i++) {
			var coord = adjacentCoords[i];
			var x = pixel.x + coord[0];
			var y = pixel.y + coord[1];
			if (!isEmpty(x, y, true)) {
				if (pixelMap[x][y].element == "logic_wire") {
					if (Math.random() < 0.5){
						pixelMap[x][y].lstate = 2
						pixelMap[x][y].color = pixelColorPick(pixelMap[x][y], "#ffe49c")
					} else {
						pixelMap[x][y].lstate = -2
						pixelMap[x][y].color = pixelColorPick(pixelMap[x][y], "#3d4d2c")
					}
				}
			}
		}
	},
}

elements.four_bit_randomizer_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			// Clock input
			[0, -2, true],   // Clock

			// Outputs (Q0-Q3)
			[-3, 2, false],  // Q0
			[-1, 2, false],  // Q1
			[1, 2, false],   // Q2
			[3, 2, false]	// Q3
		];

		initializeCircuit(pixel, pins, 9, 3);

		// Read clock input
		var clock = checkPin(pixel, pins, 0);

		// Initialize the state if not already done
		if (pixel._state === undefined) {
			pixel._state = [false, false, false, false];
			pixel.prevClock = false;
		}

		// Detect the positive edge on the clock pin
		if (clock && !pixel.prevClock) {
			// Generate a new 4-bit random number
			var randomValue = Math.floor(Math.random() * 16);

			// Update the state with the new random value
			pixel._state = [
				(randomValue & 1) !== 0,
				(randomValue & 2) !== 0,
				(randomValue & 4) !== 0,
				(randomValue & 8) !== 0
			];
		}

		// Output the current state
		setPin(pixel, pins, 1, pixel._state[0]); // Q0
		setPin(pixel, pins, 2, pixel._state[1]); // Q1
		setPin(pixel, pins, 3, pixel._state[2]); // Q2
		setPin(pixel, pins, 4, pixel._state[3]); // Q3

		// Update previous state of clock input
		pixel.prevClock = clock;
	}
};

var tempVar = 0;
elements.temperature_sensor = {
	behavior: behaviors.WALL,
	onSelect: function() {
		var answertemp = Number(prompt("Set your target temperature:",(tempVar||undefined)));
		if (!answertemp) { return }
		tempVar = answertemp;
	},
	hoverStat: function(pixel) {
		return `TargetTmp: {pixel.targetTemp}`;
	},
	cc_stableTick: function(pixel) {
		if (pixel.start === pixelTicks){
			pixel.targetTemp = tempVar;
		}

		pixel.color = hueLerp(pixel.targetTemp);

		pixel.active = pixel.temp >= pixel.targetTemp;
		var neighbors = getNeighbors(pixel);
		for (var i = 0;i < neighbors.length;i++) {
			var neighbor = neighbors[i];

			// Check if it's a wire
			if (elements[neighbor.element].conduct > 0 && pixel.active) {
				neighbor.charge = 1;
			}

			// Check if it's a logic wire (logicgates.js)
			if (neighbor.lstate != undefined) {
				if (pixel.active) {
					neighbor.lstate = 2;
					neighbor.color = pixelColorPick(neighbor, "#ffe49c");
				} else {
					neighbor.lstate = -2;
					neighbor.color = pixelColorPick(neighbor, "#3d4d2c");
				}
			}
		}
	}
}

/*elements.ROM_circuit = {
	previewSize: false,
	cc_stableTick: function(pixel) {
		var romWidth = 16;
		var romHeight = 16;

		var pins = [
			// Address inputs (D0-D7)
			[-1, 1, true],  // D0
			[-1, 3, true],  // D1
			[-1, 5, true],  // D2
			[-1, 7, true],  // D3
			[-1, 9, true],  // D4
			[-1, 11, true], // D5
			[-1, 13, true], // D6
			[-1, 15, true], // D7

			// ROM output
			[romWidth + 2, 1, false],
			[romWidth + 2, 3, false],
			[romWidth + 2, 5, false],
			[romWidth + 2, 7, false],
		];

		initializeCircuit(pixel, pins, romWidth + 2, romHeight + 2, false, pixel.circuitRotation, addDisplayCallback);

//		if (!pixel.romData) {pixel.romData = new Array(64).fill(0);}
		if (!pixel.romData) {
			pixel.romData = Array.from({length: romWidth * romHeight}, () => Array.from({length: 4}, () => Math.floor(Math.random() * 2)));
		}

		// Read inputs
		var D = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3),
			checkPin(pixel, pins, 4),
			checkPin(pixel, pins, 5),
			checkPin(pixel, pins, 6),
			checkPin(pixel, pins, 7)
		];

		var address = binaryArrayToNumber(D);
		if (isNaN(address)) {return;}

		// Draw the ROM data
		for (var y = 1; y <= romWidth; y++) {
			for (var x = 1; x <= romHeight; x++) {
				var px = pixel.x + x;
				var py = pixel.y + y;
				var cellAddress = ((y - 1) * romWidth) + x - 1;
				var cellData = pixel.romData[cellAddress];
				if (!(0 <= px && px < width && 0 <= py && py < height)) {continue;}

				if (pixelMap[px][py] && pixelMap[px][py].element == "displayPixel") {
//					if (address == cellAddress) {}
					pixelMap[px][py].color = colorPalette_4bit[binaryArrayToNumber(cellData)];
				}
			}
		}

		var output = pixel.romData[address];

		setPin(pixel, pins, 8, output[0]);
		setPin(pixel, pins, 9, output[1]);
		setPin(pixel, pins, 10, output[2]);
		setPin(pixel, pins, 11, output[3]);
	}
};*/

function general_encoder(inputBits) {
	return function(pixel) {
		var pins = [];
		var outputBits = Math.ceil(Math.log2(inputBits));
		var circuitWidth = (inputBits * 2) + 1;
		var circuitHeight = (outputBits * 2) + 1;

		// Define input pins
		for (var i = 0; i < inputBits; i++) {
			pins.push([Math.floor(circuitWidth / 2) - 1 - (2 * i), outputBits + 1, true]);
		}

		// Define output pins
		for (var i = 0; i < outputBits; i++) {
			pins.push([Math.floor(circuitWidth / 2) + 1, outputBits - 1 - (2 * i), false]); // Right outputs
		}

		// Mirrored outputs
		for (var i = 0; i < outputBits; i++) {
			pins.push([-Math.floor(circuitWidth / 2) - 1, outputBits - 1 - (2 * i), false]); // Left outputs
		}

		initializeCircuit(pixel, pins, circuitWidth, circuitHeight);

		// Determine which input is active (priority encoder)
		var activeInput = -1;
		for (var i = inputBits - 1; i >= 0; i--) {
			if (checkPin(pixel, pins, i)) {
				activeInput = i;
				break;
			}
		}

		// Set output values based on active input
		for (var i = 0; i < outputBits; i++) {
			var outputValue = activeInput >= 0 ? ((activeInput >> i) & 1) : false;
			setPin(pixel, pins, inputBits + i, outputValue); // Right outputs
			setPin(pixel, pins, inputBits + outputBits + i, outputValue); // Left outputs
		}
	};
}

// Define a 2-to-1 encoder using the general_encoder function
elements.two_to_one_encoder_circuit = {
	cc_stableTick: general_encoder(2)
};

// Define a 4-to-2 encoder using the general_encoder function
elements.four_to_two_encoder_circuit = {
	cc_stableTick: general_encoder(4)
};

// Define an 8-to-3 encoder using the general_encoder function
elements.eight_to_three_encoder_circuit = {
	cc_stableTick: general_encoder(8)
};

// Define a 16-to-4 encoder using the general_encoder function
elements.sixteen_to_four_encoder_circuit = {
	cc_stableTick: general_encoder(16)
};

function general_demultiplexer(selectorBits) {
	return function(pixel) {
		var pins = [];
		var outputCount = Math.pow(2, selectorBits);
		var circuitWidth = 3;
		var circuitHeight = (outputCount * 2) + 1;

		// Define the input pin
		pins.push([0, Math.floor(circuitHeight / 2) + 1, true]);

		// Define selector pins
		for (var i = 0; i < selectorBits; i++) {
			pins.push([-2, (Math.floor(circuitHeight / 2) - 1) - (2 * i), true]);
		}

		// Define output pins
		for (var i = 0; i < outputCount; i++) {
			pins.push([Math.floor(circuitWidth / 2) + 1, Math.floor(circuitHeight / 2) - 1 - (2 * i), false]);
		}

		initializeCircuit(pixel, pins, circuitWidth, circuitHeight);

		// Read input and selector values
		var input = checkPin(pixel, pins, 0);
		var selector = 0;
		for (var i = 0; i < selectorBits; i++) {
			if (checkPin(pixel, pins, 1 + i)) {
				selector += Math.pow(2, i);
			}
		}

		// Set output values based on selector
		for (var i = 0; i < outputCount; i++) {
			setPin(pixel, pins, 1 + selectorBits + i, i === selector ? input : false);
		}
	};
}

// Define a 1-to-2 demultiplexer using the general_demultiplexer function
elements.one_to_two_demultiplexer_circuit = {
	cc_stableTick: general_demultiplexer(1)
};

// Define a 1-to-4 demultiplexer using the general_demultiplexer function
elements.one_to_four_demultiplexer_circuit = {
	cc_stableTick: general_demultiplexer(2)
};

// Define a 1-to-8 demultiplexer using the general_demultiplexer function
elements.one_to_eight_demultiplexer_circuit = {
	cc_stableTick: general_demultiplexer(3)
};

// Define a 1-to-16 demultiplexer using the general_demultiplexer function
elements.one_to_sixteen_demultiplexer_circuit = {
	cc_stableTick: general_demultiplexer(4)
};

function general_decoder(inputBits) {
	return function(pixel) {
		var pins = [];
		var outputCount = Math.pow(2, inputBits);
		var circuitWidth = (inputBits * 2) + 1;
		var circuitHeight = (outputCount * 2) + 1;

		// Define input pins
		for (var i = 0; i < inputBits; i++) {
			pins.push([Math.floor(circuitWidth / 2) - 1 - (2 * i), outputCount + 1, true]);
		}

		// Define output pins
		for (var i = 0; i < outputCount; i++) {
			pins.push([Math.floor(circuitWidth / 2) + 1, outputCount - 1 - (2 * i), false]); // Right outputs
		}

		for (var i = 0; i < outputCount; i++) {
			pins.push([-Math.floor(circuitWidth / 2) - 1, outputCount - 1 - (2 * i), false]); // Left outputs
		}

		initializeCircuit(pixel, pins, circuitWidth, circuitHeight);

		// Read input values
		var input = 0;
		for (var i = 0; i < inputBits; i++) {
			if (checkPin(pixel, pins, i)) {
				input += Math.pow(2, i);
			}
		}

		// Set output values
		for (var i = 0; i < outputCount; i++) {
			var outputValue = (i === input);
			setPin(pixel, pins, inputBits + i, outputValue); // Right outputs
			setPin(pixel, pins, inputBits + outputCount + i, outputValue); // Left outputs
		}
	};
}

elements.one_to_two_decoder_circuit = {
	cc_stableTick: general_decoder(1)
};

elements.two_to_four_decoder_circuit = {
	cc_stableTick: general_decoder(2)
};

elements.three_to_eight_decoder_circuit = {
	cc_stableTick: general_decoder(3)
};

elements.four_to_sixteen_decoder_circuit = {
	cc_stableTick: general_decoder(4)
};

function general_multiplexer(inputLines) {
	return function(pixel) {
		var pins = [];
		var selectorBits = Math.ceil(Math.log2(inputLines));
		var circuitWidth = (selectorBits * 2) + 1;
		var circuitHeight = (inputLines * 2) + 1;

		// Define selector pins
		for (var i = 0; i < selectorBits; i++) {
			pins.push([Math.floor(circuitWidth / 2) - 1 - (2 * i), inputLines + 1, true]);
		}

		// Define input data pins
		for (var i = 0; i < inputLines; i++) {
			pins.push([-Math.floor(circuitWidth / 2) - 1, inputLines - 1 - (2 * i), true]);
		}

		// Define output pin
		pins.push([Math.floor(circuitWidth / 2) + 1, 0, false]);

		initializeCircuit(pixel, pins, circuitWidth, circuitHeight);

		// Read selector input
		var selector = 0;
		for (var i = 0; i < selectorBits; i++) {
			if (checkPin(pixel, pins, i)) {
				selector += Math.pow(2, i);
			}
		}

		setPin(pixel, pins, selectorBits + inputLines, checkPin(pixel, pins, selector + selectorBits)); // Output pin
	};
}

// Define a 2-input multiplexer using the general_multiplexer function
elements.two_to_one_multiplexer_circuit = {
	cc_stableTick: general_multiplexer(2)
};

// Define a 4-input multiplexer using the general_multiplexer function
elements.four_to_one_multiplexer_circuit = {
	cc_stableTick: general_multiplexer(4)
};

// Define an 8-input multiplexer using the general_multiplexer function
elements.eight_to_one_multiplexer_circuit = {
	cc_stableTick: general_multiplexer(8)
};

// Define an 8-input multiplexer using the general_multiplexer function
elements.sixteen_to_one_multiplexer_circuit = {
	cc_stableTick: general_multiplexer(16)
};

elements.four_bit_PISO_shift_register_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			// Data inputs (D0-D3)
			[3, -3, true],   // D3
			[1, -3, true],   // D2
			[-1, -3, true],  // D1
			[-3, -3, true],  // D0

			// Control input (Load/Shift Enable)
			[-5, -1, true],  // Load/Shift Enable

			// Clock input
			[-5, 1, true],   // Clock

			// Serial output
			[5, -1, false],  // Serial Out (Q)
			[5, 1, false]	// Transmission Flag
		];

		initializeCircuit(pixel, pins, 9, 5);

		// Read data inputs
		var D = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3)
		];

		// Read control and clock inputs
		var loadShiftEnable = checkPin(pixel, pins, 4);
		var clock = checkPin(pixel, pins, 5);

		// Initialize the state if not already done
		if (pixel._state === undefined) {
			pixel._state = [false, false, false, false];
			pixel.bitIndex = 0;
			pixel.prevLoadShiftEnable = false;
			pixel.prevClock = false;
		}

		// Detect the positive edge on the control pin
		if (loadShiftEnable && !pixel.prevLoadShiftEnable) {
			// Load the data into the register on the first positive edge
			pixel._state = [D[0], D[1], D[2], D[3]];
			pixel.bitIndex = 0;
		}

		// Detect the positive edge on the clock pin
		if (clock && !pixel.prevClock) {
			if (pixel.bitIndex < 4) {
				// Shift the register and output the next bit
				var serialOut = pixel._state[0];
				for (var i = 0; i < 3; i++) {
					pixel._state[i] = pixel._state[i + 1];
				}
				pixel._state[3] = false;  // Clear the last bit after shifting

				// Output the serial value
				setPin(pixel, pins, 6, serialOut);

				// Update bit index
				pixel.bitIndex++;
			}
		}

		// Set the transmission flag
		var transmitting = pixel.bitIndex < 4 && loadShiftEnable;
		setPin(pixel, pins, 7, transmitting);

		// Update previous state of control and clock inputs
		pixel.prevLoadShiftEnable = loadShiftEnable;
		pixel.prevClock = clock;
	}
};

elements.four_bit_SIPO_shift_register_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			// Serial input (Data In)
			[-2, -3, true],  // Data In

			// Clock input
			[-2, -1, true],   // Clock

			// Parallel outputs (Q0-Q3)
			[2, 3, false],	// Q3
			[2, 1, false],   // Q2
			[2, -1, false],  // Q1
			[2, -3, false]  // Q0
		];

		initializeCircuit(pixel, pins, 3, 9);

		// Read serial and clock input
		var serialIn = checkPin(pixel, pins, 0);
		var clock = checkPin(pixel, pins, 1);

		// Initialize the state if not already done
		if (pixel._state === undefined) {
			pixel._state = [false, false, false, false];
			pixel.prevClock = false;
		}

		// Detect the positive edge on the clock pin
		if (clock && !pixel.prevClock) {
			pixel._state = [serialIn, pixel._state[0], pixel._state[1], pixel._state[2]];
		}

		// Output the parallel values
		for (var i = 0; i < 4; i++) {
			setPin(pixel, pins, 2 + i, pixel._state[i]);
		}

		// Update previous state of control and clock inputs
		pixel.prevClock = clock;
	}
};

elements.four_bit_program_counter_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			// Data inputs (D0-D3)
			[-3, -3, true],  // D0
			[-1, -3, true],  // D1
			[1, -3, true],   // D2
			[3, -3, true],   // D3

			// Control inputs (Increment, Write Enable)
			[5, -1, true],   // Increment
			[5, 1, true],	// Write Enable

			// Outputs (Q0-Q3)
			[-3, 3, false],  // Q0
			[-1, 3, false],  // Q1
			[1, 3, false],   // Q2
			[3, 3, false],   // Q3
		];

		initializeCircuit(pixel, pins, 9, 5);

		// Read data inputs
		var D = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3)
		];

		// Read control inputs
		var Increment = checkPin(pixel, pins, 4);
		var WriteEnable = checkPin(pixel, pins, 5);

		// Initialize the state if not already done
		if (pixel._state === undefined) {
			pixel._state = [false, false, false, false];
			pixel.prevIncrement = false; // Previous state of Increment pin
		}

		// Convert the state to a 4-bit binary number
		var stateValue = binaryArrayToNumber(pixel._state);

		// Detect the positive edge on the Increment pin
		if (Increment && !pixel.prevIncrement) {
			stateValue = (stateValue + 1) % 16;  // Ensure the value wraps around at 4 bits
		}

		// Update the register state if WriteEnable is active
		if (WriteEnable) {
			stateValue = binaryArrayToNumber(D); // Load data inputs into state
		}

		// Update the state
		pixel._state = [
			(stateValue & 8) !== 0,
			(stateValue & 4) !== 0,
			(stateValue & 2) !== 0,
			(stateValue & 1) !== 0
		];

		// Output the register state
		setPin(pixel, pins, 6, pixel._state[0]); // Q0
		setPin(pixel, pins, 7, pixel._state[1]); // Q1
		setPin(pixel, pins, 8, pixel._state[2]); // Q2
		setPin(pixel, pins, 9, pixel._state[3]); // Q3

		// Update previous state of Increment pin
		pixel.prevIncrement = Increment;
	}
};

elements.four_bit_register_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			// Data inputs (D0-D3)
			[-3, -3, true],  // D0
			[-1, -3, true],  // D1
			[1, -3, true],  // D2
			[3, -3, true],  // D3

			// Control inputs (Enable, Write Enable)
			[5, -1, true],   // Enable
			[5, 1, true],   // Write Enable

			// Outputs (Q0-Q3)
			[-3, 3, false],  // Q0
			[-1, 3, false],  // Q1
			[1, 3, false],  // Q2
			[3, 3, false],  // Q3
		];

		initializeCircuit(pixel, pins, 9, 5);

		// Read data inputs
		var D = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3)
		];

		// Read control inputs
		var Enable = checkPin(pixel, pins, 4);
		var WriteEnable = checkPin(pixel, pins, 5);

		// Initialize the state if not already done
		if (pixel._state === undefined) {
			pixel._state = [false, false, false, false];
		}

		// Update the register state if WriteEnable is active
		if (WriteEnable && Enable) {
			pixel._state = [D[0], D[1], D[2], D[3]];
		}

		// Output the register state if Enable is active
		if (Enable) {
			setPin(pixel, pins, 6, pixel._state[0]); // Q0
			setPin(pixel, pins, 7, pixel._state[1]); // Q1
			setPin(pixel, pins, 8, pixel._state[2]); // Q2
			setPin(pixel, pins, 9, pixel._state[3]); // Q3
		} else {
			// Disable outputs if Enable is not active
			setPin(pixel, pins, 6, false); // Q0
			setPin(pixel, pins, 7, false); // Q1
			setPin(pixel, pins, 8, false); // Q2
			setPin(pixel, pins, 9, false); // Q3
		}
	}
};

elements.SR_latch_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			[0, -2, true], // Input: Set
			[0, 2, true],  // Input: Reset
			[2, 0, false], // Output
			[-2, 0, false] // Output
		];
		initializeCircuit(pixel, pins, 3, 3);

		if (checkPin(pixel, pins, 0)) {pixel._state = true;} // Set
		if (checkPin(pixel, pins, 1)) {pixel._state = false;} // Reset

		setPin(pixel, pins, 2, pixel._state);
		setPin(pixel, pins, 3, pixel._state);
	}
};

elements.T_flip_flop_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			[0, -2, true], // Input: Toggle (T)
			[2, 0, false], // Output (Q)
			[-2, 0, false] // Output (not Q) - Optional
		];

		initializeCircuit(pixel, pins, 3, 3);

		// Check the current state of the Toggle (T) input
		var T = checkPin(pixel, pins, 0);

		// Initialize the previous state of T if not already done
		if (pixel.prevT === undefined) {
			pixel.prevT = false;
		}

		// Detect the positive edge
		if (T && !pixel.prevT) {
			pixel._state = !pixel._state; // Toggle state on positive edge
		}

		// Update the previous state of T
		pixel.prevT = T;

		setPin(pixel, pins, 1, pixel._state);
		setPin(pixel, pins, 2, pixel._state);
	}
};

elements.D_latch_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			[0, -2, true], // Input: Data
			[2, 0, true],  // Input: Enable
			[0, 2, false], // Output
			[-2, 0, false] // Output
		];
		initializeCircuit(pixel, pins, 3, 3);

		var D = checkPin(pixel, pins, 0); // Data input
		var E = checkPin(pixel, pins, 1); // Enable input

		if (E) {
			pixel._state = D; // Q follows D when E is active
		}

		setPin(pixel, pins, 2, pixel._state);
		setPin(pixel, pins, 3, pixel._state);
	}
};

elements.D_flip_flop_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			[0, -2, true], // Input: Data
			[2, 0, true],  // Input: Enable
			[0, 2, false], // Output
			[-2, 0, false] // Output
		];

		initializeCircuit(pixel, pins, 3, 3);

		// Read inputs
		var D = checkPin(pixel, pins, 0); // Data input
		var C = checkPin(pixel, pins, 1); // Control input

		// Initialize previous state of control input if not already done
		if (pixel.prevC === undefined) {
			pixel.prevC = false;
		}

		// Previous state initialization
		if (pixel._state === undefined) {
			pixel._state = false;
		}

		// Update flip-flop state on positive edge of control input
		if (C && !pixel.prevC) {
			pixel._state = D; // Q follows D on positive edge of C
		}

		// Update the previous state of control input
		pixel.prevC = C;

		// Output the flip-flop state
		setPin(pixel, pins, 2, pixel._state);
		setPin(pixel, pins, 3, pixel._state);
	}
};

elements.four_bit_D_latch_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			// Data inputs (D0-D3)
			[-3, -2, true],  // D0
			[-1, -2, true],  // D1
			[1, -2, true],  // D2
			[3, -2, true],   // D3

			// Control input (C)
			[5, 0, true],   // Control (C)

			// Outputs (Q0-Q3)
			[-3, 2, false],  // Q0
			[-1, 2, false],  // Q1
			[1, 2, false],  // Q2
			[3, 2, false]	// Q3
		];

		initializeCircuit(pixel, pins, 9, 3);

		// Read inputs
		var D = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3)
		];

		var C = checkPin(pixel, pins, 4); // Control input

		// Previous state initialization
		if (pixel._state === undefined) {
			pixel._state = [false, false, false, false];
		}

		// Update latch state based on control input
		if (C) {
			pixel._state = [D[0], D[1], D[2], D[3]]; // Update latch state with data inputs
		}

		// Output the latch state
		setPin(pixel, pins, 5, pixel._state[0]); // Q0
		setPin(pixel, pins, 6, pixel._state[1]); // Q1
		setPin(pixel, pins, 7, pixel._state[2]); // Q2
		setPin(pixel, pins, 8, pixel._state[3]); // Q3
	}
};

elements.four_bit_D_flip_flop_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			// Data inputs (D0-D3)
			[-3, -2, true],  // D0
			[-1, -2, true],  // D1
			[1, -2, true],   // D2
			[3, -2, true],   // D3

			// Control input (C)
			[5, 0, true],   // Control (C)

			// Outputs (Q0-Q3)
			[-3, 2, false],  // Q0
			[-1, 2, false],  // Q1
			[1, 2, false],   // Q2
			[3, 2, false]	// Q3
		];

		initializeCircuit(pixel, pins, 9, 3);

		// Read inputs
		var D = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3)
		];

		var C = checkPin(pixel, pins, 4); // Control input

		// Initialize previous state of control input if not already done
		if (pixel.prevC === undefined) {
			pixel.prevC = false;
		}

		// Previous state initialization
		if (pixel._state === undefined) {
			pixel._state = [false, false, false, false];
		}

		// Update flip-flop state on positive edge of control input
		if (C && !pixel.prevC) {
			pixel._state = [D[0], D[1], D[2], D[3]]; // Update flip-flop state with data inputs
		}

		// Update the previous state of control input
		pixel.prevC = C;

		// Output the flip-flop state
		setPin(pixel, pins, 5, pixel._state[0]); // Q0
		setPin(pixel, pins, 6, pixel._state[1]); // Q1
		setPin(pixel, pins, 7, pixel._state[2]); // Q2
		setPin(pixel, pins, 8, pixel._state[3]); // Q3
	}
};

elements.four_bit_incrementer_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			// 4-bit number inputs (N0-N3)
			[3, -2, true],   // N3
			[1, -2, true],   // N2
			[-1, -2, true],  // N1
			[-3, -2, true],  // N0

			// Increment control input (INC)
			[-5, 0, true],   // Increment (INC)

			// Outputs (Q0-Q3)
			[3, 2, false],   // Q3
			[1, 2, false],   // Q2
			[-1, 2, false],  // Q1
			[-3, 2, false],  // Q0

			// Carry out
			[5, 0, false]	// Carry out (COUT)
		];

		initializeCircuit(pixel, pins, 9, 3);

		// Read inputs
		var N = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3)
		];

		var INC = checkPin(pixel, pins, 4); // Increment control input

		// Calculate the incremented value when control is active
		var carry = 0;
		var result = [];

		if (INC) {
			carry = 1; // Start with a carry of 1 to increment by 1
		}

		for (var i = 0; i < 4; i++) {
			var sum = N[i] + carry;
			result[i] = sum % 2; // Current bit sum
			carry = Math.floor(sum / 2); // Carry for next bit
		}

		// Output the incremented value and carry out
		setPin(pixel, pins, 5, result[0]); // Q0
		setPin(pixel, pins, 6, result[1]); // Q1
		setPin(pixel, pins, 7, result[2]); // Q2
		setPin(pixel, pins, 8, result[3]); // Q3
		setPin(pixel, pins, 9, carry);	 // Carry out (COUT)
	}
};

elements.four_bit_adder_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			// First 4-bit number (A)
			[-1, -2, true],  // A3
			[-3, -2, true],  // A2
			[-5, -2, true],  // A1
			[-7, -2, true],  // A0

			// Second 4-bit number (B)
			[7, -2, true],   // B3
			[5, -2, true],   // B2
			[3, -2, true],   // B1
			[1, -2, true],   // B0

			// Carry-in (C_in)
			[9, 0, true],   // Carry-in (C_in)

			// Output sum (S)
			[-1, 2, false],  // S3
			[-3, 2, false],  // S2
			[-5, 2, false],  // S1
			[-7, 2, false],  // S0
			[1, 2, false],   // Carry Out (C4)
		];

		initializeCircuit(pixel, pins, 17, 3);

		// Read inputs
		var A = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3)
		];

		var B = [
			checkPin(pixel, pins, 4),
			checkPin(pixel, pins, 5),
			checkPin(pixel, pins, 6),
			checkPin(pixel, pins, 7)
		];

		var C_in = checkPin(pixel, pins, 8); // Carry-in

		// Calculate the sum and carry
		var sum = [];
		var carry = C_in;

		for (var i = 0; i < 4; i++) {
			var bitSum = A[i] + B[i] + carry;
			sum[i] = bitSum % 2; // Current bit sum
			carry = Math.floor(bitSum / 2); // Carry for next bit
		}

		// Output the sum
		setPin(pixel, pins, 9, sum[0]);   // S0
		setPin(pixel, pins, 10, sum[1]);  // S1
		setPin(pixel, pins, 11, sum[2]);  // S2
		setPin(pixel, pins, 12, sum[3]);  // S3
		setPin(pixel, pins, 13, carry);   // Carry Out (C4)
	}
};

elements.four_bit_subtractor_circuit = {
	cc_stableTick: function(pixel) {
		var pins = [
			// First 4-bit number (A)
			[-1, -2, true],  // A3
			[-3, -2, true],  // A2
			[-5, -2, true],  // A1
			[-7, -2, true],  // A0

			// Second 4-bit number (B)
			[7, -2, true],   // B3
			[5, -2, true],   // B2
			[3, -2, true],   // B1
			[1, -2, true],   // B0

			// Borrow-in (B_in)
			[9, 0, true],   // Borrow-in (B_in)

			// Output difference (D)
			[-1, 2, false],  // D3
			[-3, 2, false],  // D2
			[-5, 2, false],  // D1
			[-7, 2, false],  // D0
			[1, 2, false],   // Borrow Out (B4)
		];

		initializeCircuit(pixel, pins, 17, 3);

		// Read inputs
		var A = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3)
		];

		var B = [
			checkPin(pixel, pins, 4),
			checkPin(pixel, pins, 5),
			checkPin(pixel, pins, 6),
			checkPin(pixel, pins, 7)
		];

		var B_in = checkPin(pixel, pins, 8); // Borrow-in

		// Calculate the difference and borrow
		var difference = [];
		var borrow = B_in;

		for (var i = 0; i < 4; i++) {
			var bitDifference = A[i] - B[i] - borrow;
			difference[i] = (bitDifference + 2) % 2; // Current bit difference
			borrow = bitDifference < 0 ? 1 : 0; // Borrow for next bit
		}

		// Output the difference
		setPin(pixel, pins, 9, difference[0]);   // D0
		setPin(pixel, pins, 10, difference[1]);  // D1
		setPin(pixel, pins, 11, difference[2]);  // D2
		setPin(pixel, pins, 12, difference[3]);  // D3
		setPin(pixel, pins, 13, borrow);		 // Borrow Out (B4)
	}
};

function general_clock(speed, s2) {
	return function(pixel){
		for (var i = 0; i < adjacentCoords.length; i++) {
			var coord = adjacentCoords[i];
			var x = pixel.x+coord[0];
			var y = pixel.y+coord[1];
			if (!isEmpty(x,y,true)) {
				if (pixelMap[x][y].element == "logic_wire"){
					if (pixelTicks % speed < s2){
						pixelMap[x][y].lstate = 2
						pixelMap[x][y].color = pixelColorPick(pixelMap[x][y], "#ffe49c")
					} else {
						pixelMap[x][y].lstate = -2
						pixelMap[x][y].color = pixelColorPick(pixelMap[x][y], "#3d4d2c")
					}
				}
			}
		}
	};
}

elements.slow_clock = {
	color: "#BB66BB",
	cc_stableTick: general_clock(64, 32),
}

elements.medium_clock = {
	color: "#DD88DD",
	cc_stableTick: general_clock(32, 16),
}

elements.fast_clock = {
	color: "#FFAAFF",
	cc_stableTick: general_clock(16, 8),
}

elements.very_fast_clock = {
	color: "#FFCCFF",
	cc_stableTick: general_clock(8, 4),
}

elements.custom_RGB_led = {
	cc_stableTick: function(pixel) {
		var pins = [
			// RGB values
			[-2, -1, true],  // R0
			[-2, 1, true],  // R1
			[1, -2, true],  // G0
			[-1, -2, true],  // G1
			[2, -1, true],   // B0
			[2, 1, true],   // B1
		];

		initializeCircuit(pixel, pins, 3, 3);

		// Read inputs
		var l = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3),
			checkPin(pixel, pins, 4),
			checkPin(pixel, pins, 5)
		];

		var color = { color: cc_scaleList([(l[0] * 2) + l[1], (l[2] * 2) + l[3], (l[4] * 2) + l[5]], (255 / 3) * 10) };
		if (color.color.some(value => isNaN(value))) {return;}

		if (lightmapEnabled && color.color[0] && color.color[1], color.color[2]) {
			lightmap[Math.floor(pixel.y / lightmapScale)][Math.floor(pixel.x / lightmapScale)] = color;
		}
		var scaledColor = cc_scaleList(color.color, 0.1);

//		pixelMap[pixel.x][pixel.y].color = scaledColor;
		for (let dx = -1; dx <= 1; dx++) {
			for (let dy = -1; dy <= 1; dy++) {
				var nx = pixel.x + dx;
				var ny = pixel.y + dy;

				if (pixelMap[nx] && pixelMap[nx][ny]) {
					var n = ((2 - (Math.abs(dx) + Math.abs(dy))) + 4) / 6;
					pixelMap[nx][ny].color = cc_arrayToRgbString(cc_scaleList(scaledColor, n));
				}
			}
		}
	}
}

var addDisplayCallback = function(pixel, pins, w, h) {
	for (var y = 1; y < h - 1; y++) {
		for (var x = 1; x < w - 1; x++) {
			var px = pixel.x + x;
			var py = pixel.y + y;
			if (!(0 <= px && px < width && 0 <= py && py < height)) {continue;}

			deletePixel(px, py);
			createPixel("displayPixel", px, py);
			pixelMap[px][py].color = "rgb(16, 24, 32)";
		}
	}
}

elements.simple_seven_segment_display = {
	cc_stableTick: function(pixel) {
		var pins = [
			// Data inputs (D0-D3)
			[-1, 7, true],
			[-1, 5, true],
			[-1, 3, true],
			[-1, 1, true],
		];

		initializeCircuit(pixel, pins, 5, 9, false, pixel.circuitRotation, addDisplayCallback);

		// Read inputs
		var D = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3)
		];

		var hexNumber = (D[3] * 8) + (D[2] * 4) + (D[1] * 2) + (D[0] * 1);
		if (isNaN(hexNumber)) {return;}

		// Draw the number
		var hexGrid = hexToPixelGrid(hexNumber);
		for (var y = 2; y <= 6; y++) {
			for (var x = 1; x <= 3; x++) {
				var px = pixel.x + x;
				var py = pixel.y + y;

				if (pixelMap[px][py] && pixelMap[px][py].element == "displayPixel") {
					if (hexGrid[y - 2][x - 1]) {
						pixelMap[px][py].color = "rgb(16, 230, 120)";
					} else {
						pixelMap[px][py].color = "rgb(16, 24, 32)";
					}
				}
			}
		}
	}
};

elements.simple_double_seven_segment_display = {
	cc_stableTick: function(pixel) {
		var pins = [
			// Data inputs (D0-D3)
			[-1, 7, true],
			[-1, 5, true],
			[-1, 3, true],
			[-1, 1, true],

			[7, -1, true],
			[5, -1, true],
			[3, -1, true],
			[1, -1, true],
		];

		initializeCircuit(pixel, pins, 9, 9, false, pixel.circuitRotation, addDisplayCallback);

		// Read inputs
		var D = [
			checkPin(pixel, pins, 0),
			checkPin(pixel, pins, 1),
			checkPin(pixel, pins, 2),
			checkPin(pixel, pins, 3),
			checkPin(pixel, pins, 4),
			checkPin(pixel, pins, 5),
			checkPin(pixel, pins, 6),
			checkPin(pixel, pins, 7)
		];

		var hexNumber = (D[3] * 8) + (D[2] * 4) + (D[1] * 2) + (D[0] * 1);
		var hexNumber2 = (D[7] * 8) + (D[6] * 4) + (D[5] * 2) + (D[4] * 1);
		if (isNaN(hexNumber) || isNaN(hexNumber2)) {return;}

		// Draw the number
		var hexGrid = hexToPixelGrid(hexNumber);
		for (var y = 2; y <= 6; y++) {
			for (var x = 1; x <= 3; x++) {
				var px = pixel.x + x;
				var py = pixel.y + y;

				if (pixelMap[px][py] && pixelMap[px][py].element == "displayPixel") {
					if (hexGrid[y - 2][x - 1]) {
						pixelMap[px][py].color = "rgb(16, 230, 120)";
					} else {
						pixelMap[px][py].color = "rgb(16, 24, 32)";
					}
				}
			}
		}

		var hexGrid2 = hexToPixelGrid(hexNumber2);
		for (var y = 2; y <= 6; y++) {
			for (var x = 5; x <= 7; x++) {
				var px = pixel.x + x;
				var py = pixel.y + y;

				if (pixelMap[px][py] && pixelMap[px][py].element == "displayPixel") {
					if (hexGrid2[y - 2][x - 5]) {
						pixelMap[px][py].color = "rgb(16, 230, 120)";
					} else {
						pixelMap[px][py].color = "rgb(16, 24, 32)";
					}
				}
			}
		}
	}
};

function malfunction_chip(pixel) {
	var emptySpaces = [];

	// Search in a 5x5 neighborhood for empty spaces
	for (var dy = -2; dy <= 2; dy++) {
		for (var dx = -2; dx <= 2; dx++) {
			var neighborX = pixel.x + dx;
			var neighborY = pixel.y + dy;
			if (pixelMap[neighborX] && pixelMap[neighborX][neighborY] === undefined) {
				emptySpaces.push({ x: neighborX, y: neighborY });
			}
		}
	}

	if (emptySpaces.length > 0) {
		// Randomly select one of the empty spaces
		var randomSpace = emptySpaces[Math.floor(Math.random() * emptySpaces.length)];

		// Determine what to spawn based on probability
		var rand = Math.random();
		if (rand < 0.7) {
			createPixel("electric", randomSpace.x, randomSpace.y);
		} else if (rand < 0.99) {
			createPixel("fire", randomSpace.x, randomSpace.y);
		} else {
			createPixel("explosion", randomSpace.x, randomSpace.y);
		}
	}
}

elements.displayPixel = {
	color: "#000000",
	category: "logic",
	state: "solid",
	behavior: behaviors.WALL,
	tick: function(pixel) {
		if (pixel.start == pixelTicks) {
			pixel.color = "rgb(16, 24, 32)";
		}

		if (lightmapEnabled && pixel.color) {
			var x = Math.floor(pixel.x / lightmapScale);
			var y = Math.floor(pixel.y / lightmapScale);
			lightmap[y][x] = { color: scaleList(rgbToArray(pixel.color), 0.2) };
		}
	}
};

elements.circuit_material = {
	color: "#444444",
	category: "logic",
	state: "solid",
	behavior: behaviors.WALL,
	hoverStat: function(pixel) {
		return `Circuit: ${pixel.corePosition}`;
	},
	cc_stableTick: function(pixel) {
		// Make it that extreme temperatures can stop the chip from working (for realism)
		if (Math.random() < 0.003 && cc_setting1.value) {  // Chance to check for temperature or nearby particles
			// Check temperature
			if (pixel.temp > 120) {
				// Replace the circuit core with lead if overheating
				if (pixel.corePosition && Math.random() < (0.00015) * (pixel.temp - 120)) {
					var corePos = pixel.corePosition;
					if (pixelMap[corePos.x] && pixelMap[corePos.x][corePos.y]) {
						deletePixel(corePos.x, corePos.y);
						createPixel("lead", corePos.x, corePos.y);
					}
				}

				// Randomly trigger malfunction if overheating
				if (Math.random() < 0.001 * (pixel.temp - 120)) {
					malfunction_chip(pixel);
				}

				// Break the circuit material itself if overheating
				if (Math.random() < 0.001 * (pixel.temp - 120)) {
					var px = pixel.x;
					var py = pixel.y;
					deletePixel(px, py);
					if (Math.random() < 0.5) {createPixel("lead", px, py);}
				}
			}
		}
	}
};


elements.input_pin = {
	color: "#DDAA33",
	category: "logic",
	state: "solid",
	active: false,
	stateHigh: "lead",
	tempHigh: 570,
	behavior: behaviors.WALL,
	cc_stableTick: function(pixel) {
		pixel.active = false;
		var neighbors = getNeighbors(pixel);
		for (var i = 0;i < neighbors.length;i++) {
			var neighbor = neighbors[i];

			if (neighbor.charge > 0 || neighbor.lstate == 2 || neighbor.active) {
				pixel.active = true;
			}
		}
	}
};

elements.output_pin = {
	color: "#AAAAAA",
	category: "logic",
	state: "solid",
	active: false,
	stateHigh: "lead",
	tempHigh: 570,
	behavior: behaviors.WALL,
	cc_stableTick: function(pixel) {
		var neighbors = getNeighbors(pixel);
		for (var i = 0;i < neighbors.length;i++) {
			var neighbor = neighbors[i];

			// Check if it's a wire
			if (elements[neighbor.element].conduct > 0 && pixel.active) {
				neighbor.charge = 1;
			}

			// Check if it's a logic wire (logicgates.js)
			if (neighbor.lstate != undefined) {
				if (pixel.active) {
					neighbor.lstate = 2;
					neighbor.color = pixelColorPick(neighbor, "#ffe49c");
				} else {
					neighbor.lstate = -2;
					neighbor.color = pixelColorPick(neighbor, "#3d4d2c");
				}
			}
		}
	}
};

elements.logic_corrupt = {
	color: "#DD33DD",
	category: "logic",
	tool: function(pixel) {
		if (pixel.element == "logic_wire") {
			if (Math.random() < 0.01) {
				if (Math.random() < 0.5) {
					pixel.lstate = 2;
					pixel.color = pixelColorPick(pixel, "#ffe49c");
				} else {
					pixel.lstate = -2;
					pixel.color = pixelColorPick(pixel, "#3d4d2c");
				}
			}
		}
	},
	excludeRandom: true,
}

elements.logic_corrupter_machine = {
	color: "#DD33DD",
	category: "logic",
	cc_stableTick: function(pixel) {
		var radius = 10
		for (var y = pixel.y - radius; y < pixel.y + radius; y++) {
			for (var x = pixel.x - radius; x < pixel.x + radius; x++) {
				if (!isEmpty(x, y, true)) {
					if (pixelMap[x][y].element == "logic_wire" && Math.random() < Math.min(Math.max((pixel.temp + 273) / 473, 0), 1) * 0.005) {
						if (Math.random() < 0.5) {
							pixelMap[x][y].lstate = 2
							pixelMap[x][y].color = pixelColorPick(pixelMap[x][y], "#ffe49c")
						} else {
							pixelMap[x][y].lstate = -2
							pixelMap[x][y].color = pixelColorPick(pixelMap[x][y], "#3d4d2c")
						}
					}
				}
			}
		}
	},
}

// Create a new anchor element
var tutorialLink = document.createElement("a");

// Set the link's text content
tutorialLink.textContent = "CircuitCore Tutorial";

// Set the link's href attribute to point to the tutorial
tutorialLink.href = "https://redbirdly.github.io/circuitcore_tutorial.html";

// Set the link to open in a new tab
tutorialLink.target = "_blank";

// Style the link (optional)
tutorialLink.style.color = "#33FF66"; // Set the color of the link
tutorialLink.style.fontSize = "14px"; // Set the font size

// Append the link to the body of the webpage
document.body.appendChild(tutorialLink);

// cc_ is circuit core prefix
const cc_BROWN = "#773317";
const cc_RED = "#DD3322";
const cc_ORANGE = "#DD8833";
const cc_YELLOW = "#DDCC44";
const cc_LIME = "#77DD44";
const cc_GREEN = "#33BB44";
const cc_BLUE = "#224499";
const cc_LIGHT_BLUE = "#77CCFF";
const cc_LAVENDER = "#AA88EE";
//const cc_PINK = "#DD88DD";
const cc_WHITE = "#DDDDDD";

var circuits = [
	// Misc and I/O: brown
	{ circuit: elements.four_bit_selector_circuit, color: cc_BROWN, size: [17, 3, true] },
	{ circuit: elements.four_bit_enabler_circuit, color: cc_BROWN, size: [9, 3, true] },
	{ circuit: elements.randomizer, color: cc_BROWN },
	{ circuit: elements.four_bit_randomizer_circuit, color: cc_BROWN, size: [9, 3, true] },
	{ circuit: elements.temperature_sensor, color: cc_BROWN },
	// ROM/RAM: red
//	{ circuit: elements.ROM_circuit, color: cc_RED, size: [18, 18, false] },
	// Encoders and de-multiplexers: orange
	{ circuit: elements.two_to_one_encoder_circuit, color: cc_ORANGE, size: [5, 3, true] },
	{ circuit: elements.four_to_two_encoder_circuit, color: cc_ORANGE, size: [9, 5, true] },
	{ circuit: elements.eight_to_three_encoder_circuit, color: cc_ORANGE, size: [17, 7, true] },
	{ circuit: elements.sixteen_to_four_encoder_circuit, color: cc_ORANGE, size: [33, 9, true] },

	{ circuit: elements.one_to_two_demultiplexer_circuit, color: cc_ORANGE, size: [3, 5, true] },
	{ circuit: elements.one_to_four_demultiplexer_circuit, color: cc_ORANGE, size: [3, 9, true] },
	{ circuit: elements.one_to_eight_demultiplexer_circuit, color: cc_ORANGE, size: [3, 17, true] },
	{ circuit: elements.one_to_sixteen_demultiplexer_circuit, color: cc_ORANGE, size: [3, 33, true] },
	// Decoders and multiplexers: yellow
	{ circuit: elements.one_to_two_decoder_circuit, color: cc_YELLOW, size: [3, 5, true] },
	{ circuit: elements.two_to_four_decoder_circuit, color: cc_YELLOW, size: [5, 9, true] },
	{ circuit: elements.three_to_eight_decoder_circuit, color: cc_YELLOW, size: [7, 17, true] },
	{ circuit: elements.four_to_sixteen_decoder_circuit, color: cc_YELLOW, size: [9, 33, true] },

	{ circuit: elements.two_to_one_multiplexer_circuit, color: cc_YELLOW, size: [3, 5, true] },
	{ circuit: elements.four_to_one_multiplexer_circuit, color: cc_YELLOW, size: [5, 9, true] },
	{ circuit: elements.eight_to_one_multiplexer_circuit, color: cc_YELLOW, size: [7, 17, true] },
	{ circuit: elements.sixteen_to_one_multiplexer_circuit, color: cc_YELLOW, size: [9, 33, true] },
	// Program counter and shift registers: lime
	{ circuit: elements.four_bit_PISO_shift_register_circuit, color: cc_LIME, size: [9, 5, true] },
	{ circuit: elements.four_bit_SIPO_shift_register_circuit, color: cc_LIME, size: [3, 9, true] },
	{ circuit: elements.four_bit_program_counter_circuit, color: cc_LIME, size: [9, 5, true] },
	// Registers: green
	{ circuit: elements.four_bit_register_circuit, color: cc_GREEN, size: [9, 5, true] },
	// Latches and flip flops: light blue
	{ circuit: elements.SR_latch_circuit, color: cc_LIGHT_BLUE, size: [3, 3, true] },
	{ circuit: elements.T_flip_flop_circuit, color: cc_LIGHT_BLUE, size: [3, 3, true] },
	{ circuit: elements.D_latch_circuit, color: cc_LIGHT_BLUE, size: [3, 3, true] },
	{ circuit: elements.D_flip_flop_circuit, color: cc_LIGHT_BLUE, size: [3, 3, true] },
	{ circuit: elements.four_bit_D_latch_circuit, color: cc_LIGHT_BLUE, size: [9, 3, true] },
	{ circuit: elements.four_bit_D_flip_flop_circuit, color: cc_LIGHT_BLUE, size: [9, 3, true] },
	// Addition/subtraction arithmetic: blue
	{ circuit: elements.four_bit_adder_circuit, color: cc_BLUE, size: [17, 3, true] },
	{ circuit: elements.four_bit_subtractor_circuit, color: cc_BLUE, size: [17, 3, true] },
	{ circuit: elements.four_bit_incrementer_circuit, color: cc_BLUE, size: [9, 3, true] },
	// Complex circuits: lavender
	// Clocks: pink
	{ circuit: elements.slow_clock },
	{ circuit: elements.medium_clock },
	{ circuit: elements.fast_clock },
	{ circuit: elements.very_fast_clock },
	// Displays/visual circuits: white
	{ circuit: elements.simple_seven_segment_display, color: cc_WHITE, size: [5, 9, false] },
	{ circuit: elements.simple_double_seven_segment_display, color: cc_WHITE, size: [9, 9, false] },
	{ circuit: elements.custom_RGB_led, color: cc_WHITE, size: [3, 3, true] },
];

circuits.forEach(circuitInfo => {
	if (circuitInfo.color) {circuitInfo.circuit.color = circuitInfo.color;}
	circuitInfo.circuit.category = "logic";
	circuitInfo.circuit.maxSize = 1;
	circuitInfo.circuit.behavior = behaviors.WALL;
	circuitInfo.circuit.state = "solid";
	circuitInfo.circuit.isCircuitCore = true;
	circuitInfo.circuit.previewSize = circuitInfo.size;

	// Exclude circuits without a frame
	if (circuitInfo.size) {
		var previousCircuitTick = circuitInfo.circuit.cc_stableTick;
		circuitInfo.circuit.cc_stableTick = function(pixel) {
			previousCircuitTick(pixel);

			// Don't constantly check
			if (Math.random() < 0.1) {
				// If there aren't 4 neighboring circuit_material elements then remove the circuit's core
				var neighbors = getNeighbors(pixel);
				var circuitMaterialCount = 0;
				for (var i = 0;i < neighbors.length;i++) {
					if (neighbors[i].element == "circuit_material") {
						circuitMaterialCount++;
					}
				}

				if (circuitMaterialCount < 2) {
					deletePixel(pixel.x, pixel.y);
				}

				// Check if circuit overheating is enabled
				if (cc_setting1.value) {
					pixel.temp += Math.random(0.5);
				}
			}
		}
	}
});

var circuitRotation = 0;
document.addEventListener('keydown', function(event) {
	if (event.key === 'ArrowUp') {
		circuitRotation = (circuitRotation + 90) % 360;
		logMessage('CircuitRotation changed to ' + circuitRotation);
	}
});

function drawCircuitExtras(ctx) {
	if (elements[currentElement].isCircuitCore && elements[currentElement].previewSize) {
		var circuitWidth = elements[currentElement].previewSize[0];
		var circuitHeight = elements[currentElement].previewSize[1];
		var centered = elements[currentElement].previewSize[2];
		var rotation = circuitRotation;

		var startX = 0;
		var startY = 0;
		var endX = circuitWidth - 1;
		var endY = circuitHeight - 1;

		if (centered) {
			startX = -Math.floor(circuitWidth / 2);
			startY = -Math.floor(circuitHeight / 2);
			endX = Math.floor(circuitWidth / 2);
			endY = Math.floor(circuitHeight / 2);
		}

		for (var y = startY; y <= endY; y++) {
			for (var x = startX; x <= endX; x++) {
//				if (!(0 <= x && x < width && 0 <= y && y < height)) {continue;}

				var [rx, ry] = rotateCoordinate(x, y, rotation);
				var px = mousePos.x + rx;
				var py = mousePos.y + ry;

				ctx.fillStyle = "rgba(255, 255, 255, 0.1)";
				if ((rotation != 0 && !centered) || (0 <= px && px < width && 0 <= py && py < height) && pixelMap[px][py]) {
					ctx.fillStyle = "rgba(255, 0, 0, 0.3)";
				}

				ctx.fillRect(px * pixelSize, py * pixelSize, pixelSize, pixelSize);
			}
		}
	}
}

function runLogicTick() {
	if (paused) {return;}
	for (var j = 0;j < 1;j++) {
		for (var i = 0;i < currentPixels.length;i++) {
			var pixel = currentPixels[i];
			if (elements[pixel.element].category == "logic") {
				if (elements[pixel.element].cc_stableTick) {
					elements[pixel.element].cc_stableTick(pixel);
				}
			}
		}
	}
}

function stabilizeLogicGates() {
	var logicgatesElements = ["output","logic_wire","not_gate","and_gate","xor_gate","or_gate","nand_gate","nor_gate","nxor_gate","E2L_lever","E2L_button","L2E_constant","logic_shock","logic_unshock"]

	for (var i = 0;i < logicgatesElements.length;i++) {
		elements[logicgatesElements[i]].cc_stableTick = elements[logicgatesElements[i]].tick;
		elements[logicgatesElements[i]].tick = null;
	}
}

renderPostPixel(drawCircuitExtras);
runEveryTick(runLogicTick);
runAfterLoad(stabilizeLogicGates);







































































































//3




















































































































//cutInto: "apple_slice",



elements.iron_powder = {
    conduct: 0.87,
  
    density: 7860,
    
        
        color: "#a3a2a2",
      
        behavior: behaviors.POWDER,
      
        category: "powders",
      
        state: "powder",
  
        stateHigh: "molten_iron",
   
        tempHigh: 1538,
      
        reactions: {
          "salt_water": { elem1: "rust", elem2: "salt_water" },
        }
  
      
  
    };
    elements.iron.breakInto = "iron_powder";
  
  
  
  
    elements.copper_powder = {
      conduct: 0.87,
  
      density: 8960,
        
      color: "#DA8A67",
    
      behavior: behaviors.POWDER,
    
      category: "powders",
    
      state: "powder",
  
      stateHigh: "molten_copper",
  
      tempHigh: 1085,
    
  
  };
  elements.copper.breakInto = "copper_powder";
  
  
  
  
  
  elements.gold_powder = {
    conduct: 0.87,
  
    density: 19300,
        
    color: ["#ffb300","#ffe96e"],
  
    behavior: behaviors.POWDER,
  
    category: "powders",
  
    state: "powder",
  
    stateHigh: "molten_gold",
  
    tempHigh: 1640,
  
    
  
  };
  elements.gold_coin.breakInto = "gold_powder";
  
  
  
  
  elements.silver_powder = {
    conduct: 0.87,
  
    density: 10497,
      
    color: "#d4d4d4",
  
    behavior: behaviors.POWDER,
  
    category: "powders",
  
    state: "powder",
  
    stateHigh: "molten_silver",
  
    tempHigh: 962,
  
  
  };
  elements.silver.breakInto = "silver_powder";
  
  
  
  elements.tungsten_powder = {
    conduct: 0.87,
  
    density: 19300,
      
    color: ["#adadac","#dedede","#595959"],
  
    behavior: behaviors.POWDER,
  
    category: "powders",
  
    state: "powder",
  
    stateHigh: "molten_tungsten",
  
    tempHigh: 3422,
  
    
  
  };
  elements.tungsten.breakInto = "tungsten_powder";
  
  
  elements.tin_powder = {
    conduct: 0.87,
  
    density: 7260,
      
    color: ["#9c9c9c","#a8a8a8"],
  
    behavior: behaviors.POWDER,
  
    category: "powders",
  
    state: "powder",
  
    stateHigh: "molten_tin",
  
    tempHigh: 232,
  
    
  
  };
  elements.tin.breakInto = "tin_powder";
  
  
  
  elements.lead_powder = {
    conduct: 0.87,
  
    density: 11343,
      
    color: ["#707070","#636363"],
  
    behavior: behaviors.POWDER,
  
    category: "powders",
  
    state: "powder",
  
    stateHigh: "molten_lead",
  
    tempHigh: 328,
  
    
  
  };
  elements.lead.breakInto = "lead_powder";
  
  
  
  
  
  
  
  elements.nickel_powder = {
    conduct: 0.87,
  
    density: 8900,
      
    color: ["#5e5e5e","#6b6b6b"],
  
    behavior: behaviors.POWDER,
  
    category: "powders",
  
    state: "powder",
  
    stateHigh: "molten_nickel",
  
    tempHigh: 1455,
  
    
  
  };
  elements.nickel.breakInto = "nickel_powder";
  
  
  


  //------------------------------------------------------------------------------------------------------------------------------------------
  
  







































  
  
  
  
  
  
  function interpolateRgb(rgb1, rgb2, ratio) {
    const interpolatedRgb = {
      r: Math.round(rgb1.r + (rgb2.r - rgb1.r) * ratio),
      g: Math.round(rgb1.g + (rgb2.g - rgb1.g) * ratio),
      b: Math.round(rgb1.b + (rgb2.b - rgb1.b) * ratio),
    };
    return interpolatedRgb;
}
function getRGB(rgb){
    let rgb2 = rgb.replace(")", "").replace("rgb(", "").replace(/,/g, "r").split("r")
    return { r: parseInt(rgb2[0]), g: parseInt(rgb2[1]), b: parseInt(rgb2[2]) };
}
function findMostFrequent(arr) {
    let freqMap = {};
    
    
    if (arr) {
        if (arr.length === 0) {
            return "water";
        } else if (arr.length === 1) {
            return arr[0]
        } else {
            arr.forEach(item => {
            if(!freqMap[item]) {
                freqMap[item] = 0;
            }
            freqMap[item]++;
            });
        
            let max = 0;
            let mostFrequent = [];
        
            for (let item in freqMap) {
            if (freqMap[item] > max) {
                max = freqMap[item];
                mostFrequent = [item];
            } else if (freqMap[item] === max) {
                mostFrequent.push(item);
            }
            }
            return mostFrequent.join(', '); 
        }  
    }
}
behaviors.STURDYPOWDER2 = [
    "XX|XX|XX",
    "XX|XX|XX",
    "M2%30|M1|M2%30",
],

elements.knife = {
    color: "#adb5bd",
    // other needed properties
    tool: (pixel) => {
        //store cutInto as a variable for legibility
        var cutInto = elements[pixel.element].cutInto;
        //if there’s no cutInto, it should equal undefined, which is falsey and !undefined = true
        if (!cutInto) { return };
        //if cutInto is an array, randomly pick one of its elements
        if(cutInto instanceof Array) { cutInto = cutInto[Math.floor(Math.random() * cutInto.length)] };
        //change pixel into the (chosen) element      
        //changePixel(pixel, cutInto)
        if (shiftDown) {
            if (Math.random() < 0.5) {
                var thiselement = pixel.element;
                changePixel(pixel, cutInto)
                pixelTempCheck(pixel);
                if (elements[thiselement].cutIntoColor) {
                    pixel.color = pixelColorPick(pixel, elements[thiselement].cutIntoColor);
                }
            }
        }
        else if (!shiftDown) {
            if (Math.random() < 0.1) {
                var thiselement = pixel.element;
                changePixel(pixel, cutInto)
                pixelTempCheck(pixel);
                if (elements[thiselement].cutIntoColor) {
                    pixel.color = pixelColorPick(pixel, elements[thiselement].cutIntoColor);
                }
            }
        }
    },
    category:"tools",
    canPlace: false,
    desc: "Use on pixels to cut them, if possible."
}
elements.whisk = {
    color: ["#a4a7b0","#a4a7b0","#a4a7b0","#bfc2c9","#e9eaf0","#bfc2c9","#a4a7b0"],
    // other needed properties
    tool: (pixel) => {
        //store whiskInto as a variable for legibility
        var whiskInto = elements[pixel.element].whiskInto;
        //if there’s no whiskInto, it should equal undefined, which is falsey and !undefined = true
        if (!whiskInto) { return };
        //if whiskInto is an array, randomly pick one of its elements
        if(whiskInto instanceof Array) {whiskInto = whiskInto[Math.floor(Math.random() * whiskInto.length)] };
        //change pixel into the (chosen) element      
        //changePixel(pixel, whiskInto)
        if (shiftDown) {
            if (Math.random() < 0.5) {
                changePixel(pixel, whiskInto)
            }
        }
        else if (!shiftDown) {
            if (Math.random() < 0.1) {
                changePixel(pixel, whiskInto)
            }
        }
    },
    category:"tools",
    canPlace: false,
    desc: "Use on pixels to whisk them, if possible."
}
elements.freeze_dry = {
    color: "#3a65b5",
    tool: function(pixel) {
        if (elements[pixel.element].freezeDryInto !== undefined) {
            if (Math.random() < 0.2) {
                var freezeDryInto = elements[pixel.element].freezeDryInto;
                if (Array.isArray(freezeDryInto)) {
                    freezeDryInto = freezeDryInto[Math.floor(Math.random() * freezeDryInto.length)];
                }
                if (freezeDryInto === null) {
                    deletePixel(pixel.x,pixel.y);
                    return;
                }
                var previouselement = pixel.element;
                changePixel(pixel,freezeDryInto);
                pixelTempCheck(pixel);
                if (elements[previouselement].freezeDryIntoColor) {
                    pixel.color = pixelColorPick(pixel, elements[previouselement].freezeDryIntoColor);
                }
            }
        }
    },
    category: "tools",
    excludeRandom: true,
    desc: "Use on pixels to freeze dry them, if possible."
}

elements.food_paint = {
    color: ["#c27070","#c29c70","#c2c270","#70c270","#70c2c2","#7070c2","#c270c2"],
    tool: function(pixel) {
        if (elements[pixel.element].isFood == true) {
            if (!shiftDown) {
                pixel.color = pixelColorPick(pixel,currentColor)
            }
            else {
                var rgb = currentColor.replace("#","").match(/.{1,2}/g);
                for (var i = 0; i < rgb.length; i++) {
                    rgb[i] = parseInt(rgb[i],16);
                }
                pixel.color = "rgb(" + rgb.join(",") + ")"
            }
            delete pixel.origColor;
        }
    },
    customColor: true,
    category: "tools",
    canPlace: false,
    desc: "Use on edible pixels to change color."
}

elements.eat = {
    color: ["#ffba79","#efff79"],
    tool: function(pixel) {
        if (elements[pixel.element].isFood || elements[pixel.element].category === "food" || eLists.JUICEMIXABLE.includes(pixel.element) || elements[pixel.element].id === elements.uranium.id || elements[pixel.element].id === elements.mercury.id) {
            deletePixel(pixel.x, pixel.y);
        }
    },
    category: "tools",
    desc: "Eats pixels."
}
elements.drink = {
    color: ["#03c6fc","#03a1fc"],
    tool: function(pixel) {
        if (elements[pixel.element].state === "liquid") {
            deletePixel(pixel.x, pixel.y);
        }
    },
    category: "tools",
    desc: "Drinks pixels."
}

eLists.JUICEMIXABLE = ["juice"];

elements.chicken = {
    color: ["#c29046", "#f5d271", "#d4bd7d"],
    behavior: [
        "M2%1|M2%2|M2%1",
        "M2%10|XX|M2%10",
        "XX|M1%33|XX",
    ],
    category:"life",
	state: "solid",
    reactions: {
        "meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "chicken_nugget": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "grass": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "worm": { elem2: "crushed_worm", chance:0.3},
        "cooked_meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "fish": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "rat": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "snail": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "frog": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "grape": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "wheat_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "flower_seed": { elem2:null, chance:0.32, func:behaviors.FEEDPIXEL },
        "corn_seed": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "corn": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "potato_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "grass_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "nut": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "dead_bug": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "bee": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "ant": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "flea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "termite": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.3 },
        "mercury": { elem1:"rotten_meat", chance:0.1 },
        "bleach": { elem1:"rotten_meat", chance:0.1 },
        "infection": { elem1:"rotten_meat", chance:0.025 },
        "uranium": { elem1:"rotten_meat", chance:0.1 },
        "cyanide": { elem1:"rotten_meat", chance:0.1 },
        "chlorine": { elem1:"meat", chance:0.1 },
        "dirty_water": { elem1:"rotten_meat", chance:0.0001 },
    },
    egg: "chicken_egg",
    foodNeed: 10,
    temp: 40,
    tempHigh: 75,
    stateHigh: "cooked_chicken",
    tempLow: -18,
    stateLow: "frozen_meat",
    breakInto: "raw_chicken",
    burn:85,
    burnTime:450,
    state: "solid",
    density: 1117,
    conduct: 0.3,
    cutInto: "raw_chicken",
};

elements.chicken_egg = {
    color: ["#e0d3ab","#d9cdb5"],
    behavior: behaviors.STURDYPOWDER2,
    tick: function(pixel) {
        if (Math.random() < 0.1 && pixel.temp > 20 && pixel.temp < 35) {
            changePixel(pixel,"chick")
        }
    doDefaults(pixel);
    },
    category: "food",
    state: "solid",
    temp: 20,
    tempLow: -18,
    stateLow: "frozen_chicken_egg",
    breakInto: ["yolk"],
    tempHigh: 400,
    stateHigh: ["calcium", "ash"],
    burn:50,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    reactions: {
        "water": { elem2:null, elem1:"hard_boiled_egg", chance:10, tempMin:80 }
    }
};
elements.water.reactions.egg = { elem1:null, elem2:"hard_boiled_egg", chance:10, tempMin:80 }
elements.frozen_chicken_egg = {
    color: ["#e0d3cf","#d9cdd3"],
    behavior: behaviors.POWDER,
    category: "food",
    state: "solid",
    temp: -20,
    tempHigh: 10,
    stateHigh: "chicken_egg",
    breakInto: ["calcium", "hard_yolk"],
    burn:50,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    hidden: true,
};

elements.hard_boiled_egg = {
	color: ["#e0d3ab","#d9cdb5","#e4d4b4","#f3f3ef"],
	behavior: behaviors.POWDER,
	category: "food",
	state: "solid",
	hidden: "TRUE",
    tempHigh: 1000,
    stateHigh: ["ash", "smoke"],
    density: 820.33,
    isFood: true,
    hidden: true,
};

elements.chick = {
    color: ["#ffdf85", "#ffef5c"],
    behavior: [
        "M2%1|M2%2|M2%1",
        "M2%10|FX%5 AND CH:chicken%0.1|M2%10",
        "XX|M1%33|XX",
    ],
    category: "life",
    state: "solid",
    egg: "chicken_egg",
    foodNeed: 20,
    temp: 40,
    tempHigh: 75,
    stateHigh: "cooked_meat",
    tempLow: -18,
    stateLow: "frozen_meat",
    breakInto: "blood",
    burn:85,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    reactions: {
        "crushed_worm": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL},
        "meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "chicken_nugget": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "grass": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "worm": { elem2: "crushed_worm", chance:0.3},
        "cooked_meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "fish": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "rat": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "snail": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "frog": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "grape": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "wheat_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "flower_seed": { elem2:null, chance:0.32, func:behaviors.FEEDPIXEL },
        "corn_seed": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "corn": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "potato_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "grass_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "nut": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "dead_bug": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "bee": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "ant": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "flea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "termite": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.3 },
        "mercury": { elem1:"rotten_meat", chance:0.1 },
        "bleach": { elem1:"rotten_meat", chance:0.1 },
        "infection": { elem1:"rotten_meat", chance:0.025 },
        "uranium": { elem1:"rotten_meat", chance:0.1 },
        "cyanide": { elem1:"rotten_meat", chance:0.1 },
        "chlorine": { elem1:"meat", chance:0.1 },
        "dirty_water": { elem1:"rotten_meat", chance:0.0001 },
    }
};

elements.barbecued_chicken = {
    color:["#bf743b", "#b57026","#8f5e29","#a87b11"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}
elements.barbecue_sauce = {
    color: "#571e1A",
    behavior: behaviors.LIQUID,
    viscosity: 50000,
    tempHigh: 260,
    stateHigh: ["carbon_dioxide","methane","steam","salt","sugar"],
    category:"food",
    state: "liquid",
    density: 1235,
    stain: 0.05,
    isFood: true,
}
if (!elements.ketchup.reactions) { elements.ketchup.reactions = {}; }
elements.ketchup.reactions.molasses = { elem1:"barbecue_sauce", elem2:"barbecue_sauce" }

elements.mustard = {
    color: "#e1ad01",
    behavior: behaviors.LIQUID,
    viscosity: 50000,
    tempHigh: 260,
    stateHigh: ["carbon_dioxide","methane","steam","sugar"],
    category:"food",
    state: "liquid",
    density: 1235,
    stain: 0.05,
    isFood: true
}

elements.soup = {
    color: "#fbd189",
    behavior: behaviors.LIQUID,
    tempHigh: 130,
    stateHigh: ["steam","steam","steam","fragrance"],
    tempLow: 0,
    category: "food",
    state: "liquid",
    density: 1052,
    conduct: 0.03,
    stain: -0.01,
    isFood: true,
    //thanks to nouser
    onMix: function(soup,ingredient) {
        if (elements[ingredient.element].id !== elements.soup.id && elements[ingredient.element].id !== elements.broth.id && ingredient.temp > 40) {
            if (elements[ingredient.element].isFood || elements[ingredient.element].category === "food" || elements[ingredient.element].category === "liquids") {
                var rgb1 = soup.color.match(/\d+/g);
                var rgb2 = ingredient.color.match(/\d+/g);
                // average the colors
                var rgb = [
                    Math.round((parseInt(rgb1[0])+parseInt(rgb2[0]))/2),
                    Math.round((parseInt(rgb1[1])+parseInt(rgb2[1]))/2),
                    Math.round((parseInt(rgb1[2])+parseInt(rgb2[2]))/2)
                ];
				if (!soup.elemlist){
				    soup.elemlist = [];
				}
				    soup.decidedHigh = soup.elemlist[Math.floor(Math.random()*soup.elemlist.length)];
				    soup.elemlist.push(ingredient.element)
				    soup.stateHigh = soup.elemlist;
                changePixel(ingredient, "soup");
                var hex = RGBToHex(rgb);
                soup.color = pixelColorPick(soup, hex);
                if (Math.random() < 0.5) { deletePixel(ingredient.x, ingredient.y); }
                else {
                    ingredient.color = pixelColorPick(ingredient, hex);
                    if (!ingredient.elemlist){
                        ingredient.elemlist = [];
                    }
                    ingredient.elemlist.push(soup.elemlist[Math.floor(Math.random() * soup.elemlist.length)])
                }
            }
		}
	},
    tick: function(pixel) {
		if (!pixel.decidedHigh){
			pixel.decidedHigh = "steam";
		}
		if (pixel.temp > 100){
			if (Math.random() < 0.5) {
				changePixel(pixel, "steam");
		    }
            else {
			    changePixel(pixel, pixel.decidedHigh)
		    }
		}
	},
    hoverStat: function(soup, ingredient) {
        if (findMostFrequent(soup.elemlist) == undefined) {
            return "Ingredients:None"
        } else {
            return "Ingredients:"+findMostFrequent(soup.elemlist)
        }
    },
}

if (!elements.broth.reactions) elements.broth.reactions = {};
elements.broth.reactions.water = { elem1: "soup", elem2: "soup", tempMin: 70 }

elements.noodles = {
    desc: "whatever noodles",
    color: ["#F3BA4F", "#F7D161"],
    behavior: behaviors.POWDER,
    category: "food",
    state: "solid",
    temp: 30,
    breakInto: ["crumb"],
    tempHigh: 130,
    stateHigh: ["toast"],
    burn:50,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    hidden: true,
};

if (!elements.batter.reactions) elements.batter.reactions = {};
elements.batter.reactions.water = {elem1: "noodles", tempMin: 70}

elements.battered_raw_chicken = {
    color: ["#eacfa9", "#ecd2af"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:25,
    tempHigh: 125,
    stateHigh: "cooked_chicken",
    reactions: {
        "crumb": { elem1: "raw_chicken_nugget", elem2: null },
    },
    hidden: true,
};

elements.steamed_chicken = {
    color:["#cfba8f", "#d2b788"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:50,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}

elements.smoked_chicken = {
    color:["#AF4523", "#AC481F"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}

elements.crushed_worm = {
    color: ["#e56932", "#c0714e"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp: 20,
    tempHigh: 50,
    stateHigh: ["ash", "smoke"],
    tempLow: -4,
    stateLow: "frozen_crushed_worm",
    density: 200.33,
    isFood: true,
    hidden: true,
};

elements.worm.reactions.rock = { elem1: "crushed_worm" }
elements.worm.breakInto = "crushed_worm"

elements.frozen_crushed_worm = {
    color: ["#2fcbae", "#3edabd", "#b2d5d9"],  
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp: -4,
    tempHigh: 20,
    stateHigh: "crushed_worm",
    density: 200.33,
    isFood: false,
    hidden: true,
};

elements.cooked_chicken = {
    color: ["#c17c20", "#ebad2b", "#f7b846"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp: 40,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
};

elements.raw_chicken = {
    color: ["#dfc8bd", "#e2cdc0", "#b9a195"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    burnInto: "cooked_chicken",
    temp:25,
    tempHigh: 600,
    stateHigh: ["cooked_chicken"],
    reactions: {
        "batter": { elem1: "battered_raw_chicken", elem2: null },
        "smoke": {elem1: "smoked_chicken"},
        "steam": {elem1: "steamed_chicken"},
        "water": {elem1: "boiled_chicken", tempMin: 70},
        "nut_oil": {elem1: "fried_chicken", tempMin: 70},
        "charcoal": {elem1: "barbecued_chicken", tempMin: 70},
        "fire": {elem1: "barbecued_chicken"}
    }
};

elements.boiled_chicken = {
    color: ["#F9CC84", "#EDCE89", "#F8CB78"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    isFood: true,
    temp: 65,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
}

elements.fried_chicken = {
    color: ["#E87D1A", "#E77106", "#E77106"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    isFood: true,
    temp: 90,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
}

elements.raw_chicken_nugget = {
    color: ["#d6bc7e", "#d2b47a", "#c7a969"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    burnInto: "chicken_nugget",
    temp:25,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
    reactions: {
        "nut_oil": {elem1: "chicken_nugget", tempMin: 70}
    }
};

elements.chicken_nugget = {
    color: ["#D77105", "#D77105", "#EB8C2C", "#EB8C2C"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp: 40,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    tempLow: -20,
    stateLow: "frozen_chicken_nugget",
    isFood: true,
    density: 100,
    hidden: true,
};

elements.frozen_chicken_nugget = {
    color: ["#45a69c", "#73d9cd", "#3f9f95", "#389d8e"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp: -20,
    tempHigh: 40,
    stateHigh: "chicken_nugget",
    isFood: false,
    density: 100,
    hidden: true,
};

elements.olive_wood = {
    color: "#632e1f",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
}
elements.olive_branch = {
    color: "#632e1f",
    behavior: [
        "CR:olive_leaves,olive_branch%2|CR:olive_leaves,olive_leaves,olive_leaves,olive_branch%2|CR:olive_leaves,olive_branch%2",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tempHigh: 100,
    stateHigh: "olive_wood",
    tempLow: -30,
    stateLow: "olive_wood",
    category: "life",
    burn: 40,
    burnTime: 50,
    burnInto: ["sap","ember","charcoal"],
    hidden: true,
    state: "solid",
    density: 1500,
    hardness: 0.15,
    breakInto: ["sap","sawdust"],
    hidden: true,
}
elements.olive_leaves = {
    color: ["#407603","#376502","#2e5502"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|CR:olive%0.15|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035}
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    seed: "olive_seed",
    hidden: true
}
elements.olive = {
    color: ["#6e8b3d","#7c9d45"],
    behavior: behaviors.POWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "rock": { elem1:"nut_oil", elem2:"rock", chance:0.035, color1: "#ffc844" },
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "nut_oil",
    breakIntoColor: "#ffc844",
    density: 1050,
    isFood: false
}

elements.olive_seed = {
    color: "#854610",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "olive_wood" : "olive_branch",pixel.x,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"olive_wood");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};
/*
elements.cooking_oil = {
    color: "#ffc844",
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 400,
    stateHigh: "fire",
    burn: 70,
    burnTime: 300,
    burnInto: ["carbon_dioxide","fire"],
    viscosity: 250,
    state: "liquid",
    density: 825,
    temp: 30,
    reactions: {
        "peeled_potato": {elem2: "fried_potato", tempMin: 70}
    }
},
*/
elements.pepper = {
    color: ["#1f190a", "#2b200d", "#362712", "#3b2211"],
    behavior: behaviors.POWDER,
    category: "food",
    state: "solid",
    isFood: true,
    temp: 20,
    hidden: true,
    tempHigh: 250,
    stateHigh: ["ash", "smoke"],
}

elements.potato.cutInto = ["peeled_potato","peeled_potato","peeled_potato","potato_skin"]//{elem1: ["potato_skin","peeled_potato"] }

elements.potato_skin = {
    color: ["#DC8A5A", "#A86C36", "#DC9A59", "#A76B35"],
    behavior: behaviors.POWDER,
    category: "food",
    state: "solid",
    isFood: true,
    temp: 20,
    hidden: true,
    density: 1100,
    tempHigh: 250,
    stateHigh: ["ash", "smoke"],
}

elements.peeled_potato = {
    color: ["#D6C39F", "#D1C09D", "#D1C09D", "#CDBF9E"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    isFood: true,
    temp: 20,
    hidden: true,
    breakInto: "mashed_potato",
    tempHigh: 176,
    stateHigh: "baked_potato",
    density: 1100,
    reactions: {
        "nut_oil": { elem1: "fried_potato", tempMin: 70 }
    }
}

elements.fried_potato = {
    color: ["#DD7908", "#D57206", "#CA6801", "#D68001"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp: 35,
    hidden: true,
    tempHigh: 600,
    density: 1110,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.applewood = {
    color: "#632e1f",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
}
elements.apple_branch = {
    color: "#632e1f",
    behavior: [
        "CR:apple_leaves,apple_branch%2|CR:apple_leaves,apple_branch%2|CR:apple_leaves,apple_branch%2",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tempHigh: 100,
    stateHigh: "applewood",
    tempLow: -30,
    stateLow: "applewood",
    category: "life",
    burn: 40,
    burnTime: 50,
    burnInto: ["sap","ember","charcoal"],
    hidden: true,
    state: "solid",
    density: 1500,
    hardness: 0.15,
    breakInto: ["sap","sawdust"],
}
elements.apple_leaves = {
    color: ["#00d404","#0ec911","#109e12"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|CR:apple%0.15|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
}
elements.apple = {
    color: ["#eb1a1a","#f22c2c","#d62020"],
    behavior: behaviors.POWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "apple_juice",
    cutInto: "apple_slice",
    state: "solid",
    density: 1050,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#cfc540",
}

elements.apple_slice = {
    color: "#f0af37",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "apple_juice",
    state: "solid",
    density: 1050,
    hidden: true,
}

elements.apple_seed = {
    color: "#854610",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "applewood" : "apple_branch",pixel.x,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"applewood");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};

elements.apple_juice = {
    color: "#ffde55",
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#ffde55")
            }
        }
    },
    reactions: {
        "sugar": { elem1:"apple_jam", elem2:null, chance:0.35 },
        "yeast": { elem1:"apple_cider_vinegar", elem2:null, chance:0.35 }
    },
    tempLow: 0
};
//---------------------------------------------------"apple_juice");

elements.apple_jam = {
    color: "#ebc034",
    behavior: behaviors.LIQUID,
    category: "food",
    tempHigh: 400,
    stateHigh: ["sugar","smoke"],
    burn: 70,
    burnTime: 300,
    viscosity: 750,
    state: "liquid",
    density: 825,
    hidden: true
};

elements.cake = {
    color: ["#f2e5bf","#e8daba"],
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 550,
    stateHigh: "ash",
    category: "food",
    burn: 10,
    burnTime: 400,
    burnInto: ["smoke","smoke","smoke","ash"],
    breakInto: "crumb",
    state: "solid",
    density: 233.96,
    hidden: true,
    isFood: true
};

elements.icing_sugar = {
    color: "#f8f8f1",
    behavior: behaviors.POWDER,
    onMix: function(icing_sugar1, icing_sugar2) {
        if (shiftDown && Math.random() < 0.2) {
            changePixel(icing_sugar1,"icing")
        }
    },
    tempHigh: 186,
    stateHigh: "caramel",
    viscosity: 1.5,
    category: "food",
    state: "solid",
    density: 1036.86,
    isFood: true
};

elements.icing = {
    color: "#fefefb",
    behavior: behaviors.LIQUID,
    onMix: function(icing_sugar1, icing_sugar2) {
        if ((shiftDown && Math.random() < 0.2) || (elements[icing_sugar2.element].id === elements.icing_sugar.id && Math.random() < 0.25)) {
            changePixel(icing_sugar1,"icing")
        }
    },
    tempHigh: 45,
    stateHigh: ["dry_icing"],
    stateLowColorMultiplier: 0.97,
    category: "food",
    isFood: true,
    state: "solid",
    density: 959.97,
    viscosity: 9000,
    hidden: true
};

elements.dry_icing = {
    color: "#fffefa",
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 1000,
    stateHigh: ["smoke","smoke","smoke","steam","steam","calcium"],
    stateLowColorMultiplier: 0.97,
    category: "food",
    isFood: true,
    state: "solid",
    density: 959.97,
    viscosity: 9000,
    hidden: true
};

elements.cream.reactions.baked_batter = {elem2: "cake" }

elements.sugar.breakInto = {elem1: "icing_sugar"}

elements.boiler = {
	color: "#73fff8",
	behavior: behaviors.WALL,
	tick: function(pixel) {
		for (var i = 0; i < squareCoords.length; i++) {
                var coord = squareCoords[i];
                var x = pixel.x+coord[0];
                var y = pixel.y+coord[1];
                if (!isEmpty(x,y, true)) {
					if(pixelMap[x][y].temp < -230) {
                    pixelMap[x][y].temp = (pixelMap[x][y].temp + 7)
					} else if(pixelMap[x][y].temp > 270) {
						pixelMap[x][y].temp = (pixelMap[x][y].temp - 7)
					} else if (pixelMap[x][y].temp < 95) {
						pixelMap[x][y].temp = (pixelMap[x][y].temp + 2)
					} else if (pixelMap[x][y].temp > 95) {
						pixelMap[x][y].temp = (pixelMap[x][y].temp - 2)
					}
                }
            }
	},
	category:"machines",
	state:"solid",
	insulate: true,
	noMix: true,
	movable: false,
    temp: 110
};

elements.steamer = {
	color: "#45daff",
	behavior: [
        "CR:steam%90|CR:steam%90|CR:steam%90",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
	category:"machines",
	state:"solid",
	insulate: true,
	noMix: true,
	movable: false,
    temp: 110
};

elements.smoker = {
	color: "#bfa797",
	behavior: [
        "CR:smoke%90|CR:smoke%90|CR:smoke%90",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
	category:"machines",
	state:"solid",
	insulate: true,
	noMix: true,
	movable: false,
    temp: 110
};

elements.orange_wood = {
    color: "#a88c4a",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
}
elements.orange_branch = {
    color: "#a88c4a",
    behavior: [
        "CR:orange_leaves,orange_branch%2|CR:orange_leaves,orange_branch%2|CR:orange_leaves,orange_branch%2",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tempHigh: 100,
    stateHigh: "orange_wood",
    tempLow: -30,
    stateLow: "orange_wood",
    category: "life",
    burn: 40,
    burnTime: 50,
    burnInto: ["sap","ember","charcoal"],
    hidden: true,
    state: "solid",
    density: 1500,
    hardness: 0.15,
    breakInto: ["sap","sawdust"],
}
elements.orange_leaves = {
    color: ["#61c43d","#5ddb3d","#51d44c"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|CR:orange%0.1|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
}
elements.orange = {
    color: ["#eda137","#e39230","#d1882e"],
    behavior: behaviors.POWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "orange_juice",
    cutInto: ["orange_slice","orange_slice","orange_slice","orange_slice","orange_peels"],
    state: "solid",
    density: 1050,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#cf9f40",
}

elements.orange_slice = {
    color: "#f5b133",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "orange_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    reactions: {
        "sugar": { elem1:"marmalade", elem2:null, chance:0.35 }
    },
}

elements.orange_seed = {
    color: "#695531",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "orange_wood" : "orange_branch",pixel.x,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"orange_wood");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};

elements.orange_juice = {
    color: "#ffb326",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#ffde55")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    tempLow: 0
};
//---------------------------------------------------"orange_juice");

elements.orange_peels = {
    color: "#d69c31",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "orange_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    reactions: {
        "sugar": { elem1:"marmalade", elem2:null, chance:0.35 }
    },
}

elements.marmalade = {
    color: "#fc9a38",
    behavior: behaviors.LIQUID,
    category: "food",
    tempHigh: 400,
    stateHigh: ["sugar","smoke"],
    burn: 70,
    burnTime: 300,
    viscosity: 750,
    state: "liquid",
    density: 825,
    hidden: true
};

elements.tuna = {
    color: ["#3D74BA", "#4A6FB1", "#4A6FB1"],
    behavior: [
        "XX|M2%5|SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%14",
        "XX|FX%0.5|BO",
        "M2|M1|M2 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%5",
    ],
    category: "life",
    state: "solid",
    cutInto: "raw_tuna",
    conduct: 0.2,
    eggColor: ["#211316","#2C1A1D","#503734"],
    breakInto: "blood",
    burn:20,
    burnTime:200,
    temp: 20,
    tempHigh: 120,
    stateHigh: "cooked_tuna",
    tempLow: -20,
    stateLow: "frozen_fish",
    reactions: {
        "algae": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "plant": { elem2:null, chance:0.125, func:behaviors.FEEDPIXEL },
        "fly": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "firefly": { elem2:null, chance:0.6, func:behaviors.FEEDPIXEL },
        "worm": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "tadpole": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "dead_bug": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "broth": { elem2:"water", chance:0.2, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "herb": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "lettuce": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "dead_plant": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "yeast": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "yogurt": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "tea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "rotten_meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "cooked_meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "yolk": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "cell": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
    },
}

elements.salmon = {
    color: ["#C0C3CF", "#B7BAC3", "#ADB0B8"],
    behavior: [
        "XX|M2%5|SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%14",
        "XX|FX%0.5|BO",
        "M2|M1|M2 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%5",
    ],
    category: "life",
    state: "solid",
    conduct: 0.2,
    eggColor: ["#e8961c","#faa82d"],
    breakInto: "blood",
    burn:20,
    burnTime:200,
    temp: 20,
    tempHigh: 120,
    stateHigh: "cooked_salmon",
    tempLow: -20,
    stateLow: "frozen_fish",
    reactions: {
        "algae": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "plant": { elem2:null, chance:0.125, func:behaviors.FEEDPIXEL },
        "fly": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "firefly": { elem2:null, chance:0.6, func:behaviors.FEEDPIXEL },
        "worm": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "tadpole": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "dead_bug": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "broth": { elem2:"water", chance:0.2, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "herb": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "lettuce": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "dead_plant": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "yeast": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "yogurt": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "tea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "rotten_meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "cooked_meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "yolk": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "cell": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
    },
    cutInto: "raw_salmon"
}

elements.raw_salmon = {
    color: ["#FD7E19", "#FE842F", "#FD8F45"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    burnInto: "cooked_salmon",
    temp:25,
    tempHigh: 80,
    stateHigh: "cooked_salmon",
    isFood: true,
    reactions: {
        "smoke": {elem1: "smoked_salmon"},
        "steam": {elem1: "steamed_salmon"},
        "water": {elem1: "boiled_salmon", tempMin: 70},
        "nut_oil": {elem1: "fried_salmon", tempMin: 70}
    }
}

elements.cooked_salmon = {
    color: ["#CB6132", "#D05D18", "#CC5926"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:25,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    isFood: true,
    hidden: true,
}

elements.smoked_salmon = {
    color: ["#B64431", "#B24932"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
    isFood: true,
}

elements.steamed_salmon = {
    color: ["#BB7B4B", "#B07B54"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:60,
    tempHigh: 600,
    hidden: true,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.boiled_salmon = {
    color: ["#F9B080", "#FFB78D"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:70,
    tempHigh: 600,
    hidden: true,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.fried_salmon = {
    color: ["#E06643", "#ED774B"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:70,
    tempHigh: 600,
    hidden: true,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.raw_tuna = {
    color: ["#EF4A5C", "#F74F65", "#E83A53"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:25,
    burnInto: "cooked_tuna",
    tempHigh: 80,
    stateHigh: "cooked_tuna",
    isFood: true,
    reactions: {
        "smoke": {elem1: "smoked_tuna"},
        "steam": {elem1: "steamed_tuna"},
        "water": {elem1: "boiled_tuna", tempMin: 70},
        "nut_oil": {elem1: "fried_tuna", tempMin: 70}
    }
}

elements.cooked_tuna = {
    color: ["#B76C71", "#C2787C", "#A86265"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    hidden: true,
    temp:50,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.smoked_tuna = {
    color: ["#9D5C24", "#A4632A"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    hidden: true,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.steamed_tuna = {
    color: ["#CFA578", "#D4AC82"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:60,
    tempHigh: 600,
    hidden: true,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.boiled_tuna = {
    color: ["#C79F65", "#D9B075"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    hidden: true,
    temp:70,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.fried_tuna = {
    color: ["#BF8251", "#9F6031"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    hidden: true,
    temp:70,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    isFood: true,
}

elements.watermelon_seed = {
    color: "#2b2118",
    tick: function(pixel) {
            if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x+1,pixel.y) && Math.random() > 0.7) {
                    movePixel(pixel,pixel.x+1,pixel.y);
                    createPixel(Math.random() > 0.5 ? "watermelon_stem" : "watermelon_stem",pixel.x-1,pixel.y);
                }
                if (isEmpty(pixel.x-1,pixel.y) && Math.random() > 0.7) {
                    movePixel(pixel,pixel.x-1,pixel.y);
                    createPixel(Math.random() > 0.5 ? "watermelon_stem" : "watermelon_stem",pixel.x+1,pixel.y);
                }
                if (!isEmpty(pixel.x+1,pixel.y) && !isEmpty(pixel.x-1,pixel.y) &&isEmpty(pixel.x+1,pixel.y-1) && Math.random() > 0.7) {
                    movePixel(pixel,pixel.x+1,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "watermelon_stem" : "watermelon_stem",pixel.x-1,pixel.y+1);
                }
                if (!isEmpty(pixel.x-1,pixel.y) && !isEmpty(pixel.x+1,pixel.y) &&isEmpty(pixel.x-1,pixel.y-1) && Math.random() > 0.7) {
                    movePixel(pixel,pixel.x-1,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "watermelon_stem" : "watermelon_stem",pixel.x+1,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"watermelon_stem");
            }
            pixel.age++;
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%20|XX",
        "XX|M1|XX",
    ],
};

elements.watermelon_stem = {
    color: "#6ec938",
    behavior: [
        "ST:watermelon_stem|ST:watermelon_stem AND CR:watermelon%0.1|ST:watermelon_stem",
        "ST:watermelon_stem|XX|ST:watermelon_stem",
        "XX|XX|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050
};

elements.watermelon = {
    color: ["#28b02d","#36bf3a"],
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "watermelon_juice",
    cutInto: "watermelon_flesh",
    state: "solid",
    density: 1050,
}

elements.watermelon_flesh = {
    color: "#f53527",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "watermelon_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#c43f33",
}

elements.watermelon_juice = {
    color: "#eb4034",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#eb4034")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    tempLow: 0
};
//---------------------------------------------------"watermelon_juice");

elements.grape.breakInto = "grape_juice",

elements.grape_juice = {
    color: "#291824",
    behavior: behaviors.LIQUID,
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel, "#291824")
            }
        }
    },
    reactions: {
        "dirt": { elem1: null, elem2: "mud" },
        "sand": { elem1: null, elem2: "wet_sand" },
        "clay_soil": { elem1: null, elem2: "clay" },
        "seltzer": { elem1: "soda", elem2: "foam" },
        "carbon_dioxide": { elem1: "soda", elem2: "foam" },
        "milk": { elem1: "fruit_milk", elem2: "fruit_milk" },
        "alcohol": { elem1: "wine", elem2: "wine" },
        "yeast": { elem1: ["wine","wine","wine","wine","wine","wine","wine","wine","wine","wine","wine","wine","wine","wine","wine","wine","wine","wine","wine","cream_of_tartar"], elem2: null, chance:80 },
    },
    tempHigh: 160,
    stateHigh: ["steam","sugar"],
    tempLow: -10,
    stateLowColorMultiplier: 1.1,
    category: "liquids",
    state: "liquid",
    density: 1054,
    hidden: true,
    isFood: true
};
//---------------------------------------------------"grape_juice");

elements.cream_of_tartar = {
    color: ["#EFEFEF", "#EBEBEB", "#D8D8D6"],
    behavior: behaviors.POWDER,
    category: "food",
    state: "solid",
    density: 1500,
    isFood: true,
    hidden: true,
    reactions: {
        "sugar_water": {elem2: "corn_syrup", elem1: null, tempMin: 80},
        "carbonic_acid": {elem1: null, elem2: "carbon_dioxide"}
    }
}

elements.corn_syrup = {
    color: ["#FFCD0C", "#E47F00", "#FEB003"],
    behavior: behaviors.LIQUID,
    category: "food",
    state: "liquid",
    tempHigh: 100,
    stateHigh: "caramel",
    isFood: true,
    hidden: true,
    viscosity: 10000
}

if (!elements.baking_soda.reactions) elements.baking_soda.reactions = {};
elements.baking_soda.reactions.water = { elem1: "carbonic_acid", elem2: "carbonic_acid" }

elements.carbonic_acid = {
    color: ["#E0DEA5", "#DFDB9C", "#EBE8BC"],
    behavior: behaviors.LIQUID,
    category: "liquids",
    state: "liquid",
    hidden: true,
}

elements.wine = {
    color: ["#6F0013", "#6D0112"],
    behavior: behaviors.LIQUID,
    category: "liquids",
    state: "liquid",
    /*onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel, "#6D0112")
            }
        }
    },*/
    tempHigh: 100,
    stateHigh: "steam",
    isFood: true,
    density: 1000,
    hidden: true,
    tempLow: 0
}
////---------------------------------------------------"wine");

elements.shrimp = {
    color: ["#EE5422", "#E9683C", "#F3583F", "#EDA270"],
    behavior: [
        "SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%14|M2%7.5|SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%14",
        "SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%14|FX%20|SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%14",
        "M2 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%14|M1|M2 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%14",
    ],
    category: "life",
    state: "solid",
    cutInto: "raw_shrimp",
    conduct: 0.2,
    breakInto: "raw_shrimp",
    burn:20,
    burnTime:200,
    temp: 20,
    tempHigh: 120,
    stateHigh: "cooked_shrimp",
    tempLow: -20,
    stateLow: "frozen_meat",
    reactions: {
        "algae": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "plant": { elem2:null, chance:0.125, func:behaviors.FEEDPIXEL },
        "fly": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "firefly": { elem2:null, chance:0.6, func:behaviors.FEEDPIXEL },
        "worm": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "tadpole": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "dead_bug": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "broth": { elem2:"water", chance:0.2, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "herb": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "lettuce": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "dead_plant": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "yeast": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "yogurt": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "tea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "rotten_meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "cooked_meat": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "yolk": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "cell": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
    },
}


elements.coconut_seed = {
    color: "#7a603d",
    tick: function(pixel) {
            if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1) && pixel.height < 7) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "coconut_stem" : "coconut_stem",pixel.x,pixel.y+1);
                    
                    pixel.height++
                }
            }
            else if (pixel.age > 150 && pixel.height > 6 && Math.random() < 0.1) {
                changePixel(pixel,"coconut_tree_top");
            }
            pixel.age++;
        doDefaults(pixel);
    },
    properties: {
        "age":0,
        "height": 0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};

elements.coconut_stem = {
    color: "#8f6c3f",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
}
elements.coconut_tree_top = {
    color: "#8f6c3f",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    properties:{
        "leftleaves": 0,
        "rightleaves": 0,
    },
    hidden: true,
    tick: function(pixel) {
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rightleaves == 0) {
            if (isEmpty(pixel.x+1,pixel.y)) {
                createPixel(Math.random() > 0.5 ? "coconut_leaves" : "coconut_leaves",pixel.x+1,pixel.y);

                pixel.rightleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rightleaves == 1) {
            if (isEmpty(pixel.x+2,pixel.y)) {
                createPixel(Math.random() > 0.5 ? "coconut_leaves" : "coconut_leaves",pixel.x+2,pixel.y);

                pixel.rightleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rightleaves == 2) {
            if (isEmpty(pixel.x+3,pixel.y)) {
                createPixel(Math.random() > 0.5 ? "coconut_leaves" : "coconut_leaves",pixel.x+3,pixel.y);

                pixel.rightleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rightleaves == 3) {
            if (isEmpty(pixel.x+4,pixel.y+1)) {
                createPixel(Math.random() > 0.5 ? "coconut_leaves" : "coconut_leaves",pixel.x+4,pixel.y+1);

                pixel.rightleaves++
            }
        }


        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.leftleaves == 0) {
            if (isEmpty(pixel.x-1,pixel.y)) {
                createPixel(Math.random() > 0.5 ? "coconut_leaves" : "coconut_leaves",pixel.x-1,pixel.y);

                pixel.leftleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.leftleaves == 1) {
            if (isEmpty(pixel.x-2,pixel.y)) {
                createPixel(Math.random() > 0.5 ? "coconut_leaves" : "coconut_leaves",pixel.x-2,pixel.y);

                pixel.leftleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.leftleaves == 2) {
            if (isEmpty(pixel.x-3,pixel.y)) {
                createPixel(Math.random() > 0.5 ? "coconut_leaves" : "coconut_leaves",pixel.x-3,pixel.y);

                pixel.leftleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.leftleaves == 3) {
            if (isEmpty(pixel.x-4,pixel.y+1)) {
                createPixel(Math.random() > 0.5 ? "coconut_leaves" : "coconut_leaves",pixel.x-4,pixel.y+1);

                pixel.leftleaves++
            }
        }


        if (Math.random() < 0.1 && pixel.age > 70 && pixel.temp < 100 && pixel.leftleaves > 0 && pixel.rightleaves > 0) {
            if (isEmpty(pixel.x+1,pixel.y+1)) {
                createPixel(Math.random() > 0.5 ? "coconut" : "coconut",pixel.x+1,pixel.y+1);
            }
        }
        if (Math.random() < 0.1 && pixel.age > 70 && pixel.temp < 100 && pixel.leftleaves > 0 && pixel.rightleaves > 0) {
            if (isEmpty(pixel.x-1,pixel.y+1)) {
                createPixel(Math.random() > 0.5 ? "coconut" : "coconut",pixel.x-1,pixel.y+1);
            }
        }
        pixel.age++;
    doDefaults(pixel);
},
}
elements.coconut_leaves = {
    color: ["#569923","#5ea12b"],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
}
elements.coconut = {
    color: "#6e4621",
    behavior: [
        "ST:coconut_tree_top|ST:coconut_leaves|ST:coconut_tree_top",
        "ST:coconut_stem|XX|ST:coconut_stem",
        "M2|M1|M2",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "coconut_milk",
    cutInto: ["cut_coconut"],
    state: "solid",
    density: 1050,
}

elements.coconut_milk = {
    color: "#fffcf2",
    behavior: behaviors.LIQUID,
    reactions: {
        "melted_chocolate": { elem1:"chocolate_milk", elem2:null },
        "chocolate": { elem1:"chocolate_milk", elem2:"melted_chocolate", chance:0.05 },
        "juice": { elem1:"fruit_milk", elem2:null, chance:0.05 },
        "soda": { elem1:"pilk", elem2:null, chance:0.1 },
        "yolk": { elem1:"eggnog", elem2:null, chance:0.1 },
        "dirt": { elem1: null, elem2: "mud" },
        "sand": { elem1: null, elem2: "wet_sand" },
        "clay_soil": { elem1: null, elem2: "clay" },
        "caramel": { color1:"#C8B39A", elem2:null, chance:0.05 },
        "sugar": { elem2:null, chance:0.005},
    },
    tempLow: 0,
    stateLow: "ice_cream",
    stateLowColorMultiplier: [0.97,0.93,0.87],
    tempHigh: 93,
    stateHigh: "yogurt",
    viscosity: 1.5,
    category: "liquids",
    state: "liquid",
    density: 825,
    isFood: true
}

elements.tea.reactions.coconut_milk = { elem2:null, color1:"#ad8955", chance:0.005}
elements.coffee.reactions.coconut_milk = { elem2:"foam", color1:"#856545", chance:0.005}

elements.cut_coconut = {
    color: "#fff2cf",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "coconut_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#ede9b9",
}

elements.coconut_juice = {
    color: "#e9ebe4",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#e9ebe4")
            }
        }
    },
    behavior: behaviors.LIQUID,
    reactions: {
        "dirt": { elem1: null, elem2: "mud" },
        "sand": { elem1: null, elem2: "wet_sand" },
        "clay_soil": { elem1: null, elem2: "clay" },
        "caramel": { color1:"#C8B39A", elem2:null, chance:0.05 },
    },
    tempLow: 0,
    tempHigh: 93,
    stateHigh: ["sugar","steam"],
    viscosity: 1.5,
    category: "liquids",
    state: "liquid",
    density: 1036.86,
    hidden: true,
    isFood: true
}
//---------------------------------------------------"coconut_juice");

elements.lemon_wood = {
    color: "#786531",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
}
elements.lemon_branch = {
    color: "#786531",
    behavior: [
        "CR:lemon_leaves,lemon_branch%2|CR:lemon_leaves,lemon_leaves,lemon_leaves,lemon_branch%2|CR:lemon_leaves,lemon_branch%2",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tempHigh: 100,
    stateHigh: "lemon_wood",
    tempLow: -30,
    stateLow: "lemon_wood",
    category: "life",
    burn: 40,
    burnTime: 50,
    burnInto: ["sap","ember","charcoal"],
    hidden: true,
    state: "solid",
    density: 1500,
    hardness: 0.15,
    breakInto: ["sap","sawdust"],
    hidden: true,
}
elements.lemon_leaves = {
    color: ["#42b336","#46a83b"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|CR:lemon%0.15|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035}
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    seed: "lemon_seed",
    hidden: true
}
elements.lemon = {
    color: ["#dbd937","#e0dd28"],
    behavior: behaviors.POWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "sugar": { elem1:"marmalade", elem2:null, color1:"#e0bf2b", chance:0.35 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "lemon_juice",
    state: "solid",
    density: 1050,
    isFood: true,
    cutInto: ["lemon_zest","lemon_slice","lemon_slice","lemon_slice","lemon_slice"],
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#b8af4b",
}

elements.lemon_juice = {
    color: "#e0d358",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#e0d358")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    hidden: true,
    tempLow: 0,
    reactions: {
        "sugar": {elem1:"lemonade", elem2: "null", chance:0.35}
    }
};
//---------------------------------------------------"lemon_juice");

elements.lemonade = {
    color: "#fff378",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#fff378")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    hidden: true,
    tempLow: 0
};

//---------------------------------------------------"lemonade");

elements.lemon_zest = {
    color: "#dbc535",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true,
    reactions: {
        "sugar": { elem1:"marmalade", elem2:null, color1:"#e0bf2b", chance:0.35 }
    },
}

elements.lemon_slice = {
    color: "#ebe431",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "lemon_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    reactions: {
        "sugar": { elem1:"marmalade", elem2:null, color1:"#e0bf2b", chance:0.35 }
    },
}

elements.lemon_seed = {
    color: "#854610",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "lemon_wood" : "lemon_branch",pixel.x,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"lemon_wood");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};


elements.carrot_seed = {
    color: "#b08d35",
    tick: function (pixel) {
        if (isEmpty(pixel.x, pixel.y + 1)) {
            movePixel(pixel, pixel.x, pixel.y + 1);
        }
        else {
            if (Math.random() < 0.1 && pixel.age > 100 && pixel.temp < 100 && pixel.leafgrown == true && pixel.growthpixel == 0) {
                if (!outOfBounds(pixel.x, pixel.y + 1)) {
                    var randomNumber1 = Math.round(Math.random());
                    pixel.growthpixel = pixel.growthpixel + randomNumber1;
                    var dirtPixel = pixelMap[pixel.x][pixel.y + 1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        deletePixel(pixel.x, pixel.y + 1);
                        movePixel(pixel, pixel.x, pixel.y + 1);
                        createPixel("carrot_leaves", pixel.x, pixel.y - 1);
                        pixel.growthpixel++;
                    }
                }
            }
            if (Math.random() < 0.1 && pixel.age > 100 && pixel.temp < 100 && pixel.leafgrown == true && pixel.growthpixel > 0 && pixel.growthpixel < 4) {
                if (!outOfBounds(pixel.x, pixel.y + 1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y + 1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        deletePixel(pixel.x, pixel.y + 1);
                        movePixel(pixel, pixel.x, pixel.y + 1);
                        createPixel("carrot", pixel.x, pixel.y - 1);
                        pixel.growthpixel++;
                    }
                }
            }
            if (!isEmpty(pixel.x, pixel.y + 1) && Math.random() > 0.95 && isEmpty(pixel.x - 1, pixel.y - 1) && isEmpty(pixel.x + 1, pixel.y - 1) && pixel.leafgrown == false) {
                var dirtPixel = pixelMap[pixel.x][pixel.y + 1];
                if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                    createPixel("carrot_leaves", pixel.x - 1, pixel.y - 1);
                    createPixel("carrot_leaves", pixel.x + 1, pixel.y - 1);
                    pixel.leafgrown = true;
                }
            }
            else if (pixel.age > 150 && pixel.growthpixel == 4 && Math.random() < 0.1) {
                changePixel(pixel, "carrot");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age": 0,
        "growthpixel": 0,
        "leafgrown": false
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};

elements.carrot_leaves = {
    color: ["#61cc3d","#58c234"],
    behavior: behaviors.WALL,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035}
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    seed: "carrot_seed",
    hidden: true
}
elements.carrot = {
    color: "#e39919",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "carrot_juice",
    state: "solid",
    density: 1050,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#ba8125",
}

elements.carrot_juice = {
    color: "#f5a742",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#f5a742")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    tempLow: 0,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
};
//---------------------------------------------------"carrot_juice");

elements.apple_cider_vinegar = {
    color: "#fffe75",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#fffe75")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    tempLow: 0
};
//---------------------------------------------------"apple_cider_vinegar");

elements.turnip_seed = {
    color: "#994828",
    tick: function(pixel) {
            if (Math.random() < 0.1 && pixel.age > 100 && pixel.temp < 100 && pixel.leafgrown == true && pixel.growthpixel == 0) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        deletePixel(pixel.x,pixel.y+1);
                        movePixel(pixel,pixel.x,pixel.y+1);
                        createPixel("turnip_leaves",pixel.x,pixel.y-1);
                        pixel.growthpixel++;
                    }
                }
                
            }
            if (pixel.age > 100 && pixel.temp < 100 && pixel.leafgrown == true && pixel.growthpixel > 0 && pixel.growthpixel < 3) {
                if (!outOfBounds(pixel.x-1,pixel.y)) {
                    var pixelleft = pixelMap[pixel.x-1][pixel.y];
                    if (pixelleft.element === "dirt" || pixelleft.element === "mud" || pixelleft.element === "sand" || pixelleft.element === "wet_sand" || pixelleft.element === "clay_soil" || pixelleft.element === "mycelium") {
                        deletePixel(pixel.x-1,pixel.y);
                        createPixel("turnip",pixel.x-1,pixel.y);
                    }
                }
                if (!outOfBounds(pixel.x+1,pixel.y)) {
                    var pixelright = pixelMap[pixel.x+1][pixel.y];
                    if (pixelright.element === "dirt" || pixelright.element === "mud" || pixelright.element === "sand" || pixelright.element === "wet_sand" || pixelright.element === "clay_soil" || pixelright.element === "mycelium") {
                        deletePixel(pixel.x+1,pixel.y);
                        createPixel("turnip",pixel.x+1,pixel.y);
                    }
                }
            }
            if (Math.random() < 0.1 && pixel.age > 100 && pixel.temp < 100 && pixel.leafgrown == true && pixel.growthpixel > 0 && pixel.growthpixel < 3) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        deletePixel(pixel.x,pixel.y+1);
                        movePixel(pixel,pixel.x,pixel.y+1);
                        createPixel("turnip",pixel.x,pixel.y-1);
                        pixel.growthpixel++;
                    }
                }
                
            }
            if (!isEmpty(pixel.x,pixel.y+1) && Math.random() > 0.95 && isEmpty(pixel.x-1,pixel.y-1) && isEmpty(pixel.x+1,pixel.y-1) && pixel.leafgrown == false) {
                var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                    createPixel("turnip_leaves",pixel.x-1,pixel.y-1);
                    createPixel("turnip_leaves",pixel.x+1,pixel.y-1);
                    pixel.leafgrown++
                }
            }
            else if (pixel.age > 150 && pixel.growthpixel == 3 && Math.random() < 0.1) {
                changePixel(pixel,"turnip");
            }
            pixel.age++;
        doDefaults(pixel);
    },
    properties: {
        "age":0,
        "growthpixel": 0,
        "leafgrown": false
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};
elements.turnip_leaves = {
    color: ["#399431","#3b8c34"],
    behavior: behaviors.WALL,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035}
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    seed: "turnip_seed",
    hidden: true
}
elements.turnip = {
    color: ["#945bb3","#a05cbd","#a053b8","#b364c4"],
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "turnip_juice",
    state: "solid",
    density: 1050,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#79097d",
}

elements.turnip_juice = {
    color: "#700f5d",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#700f5d")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    tempLow: 0,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
};
//---------------------------------------------------"turnip_juice");

elements.corn.breakInto ="corn_starch"

elements.corn_starch = {
    color: ["#fcf2e1","#f2e7d3","#fcf3de"],
    behavior: behaviors.POWDER,
    name: "starch",
    reactions: {
        "water": { elem1: "dough", elem2: null },
        "salt_water": { elem1: "dough", elem2: null },
        "sugar_water": { elem1: "dough", elem2: null },
        "seltzer": { elem1: "dough", elem2: null },
        "pool_water": { elem1: "dough", elem2: null },
        "juice": { elem1: "dough", elem2: null },
        "yolk": { elem1: "cracker_dough", elem2: null, color1:"#dbd19a" },
        "yogurt": { elem1: "cracker_dough", elem2: null, color1:"#dbd19a" },
        "broth": { elem1:"dough", elem2:null },
        "soda": { elem1:"dough", elem2:null },
        "tea": { elem1:"dough", elem2:null },
        "blood": { elem1:"dough", elem2:null },
        "infection": { elem1:"dough", elem2:null },
        "antibody": { elem1:"dough", elem2:null },
        "milk": { elem1:"dough", elem2:null },
        "cream": { elem1:"dough", elem2:null },
        "melted_butter": { elem1:"sauce", elem2:null, color1:"#DF8D32" },
    },
    category: "food",
    tempHigh: 400,
    stateHigh: "fire",
    burn:40,
    burnTime:25,
    state: "solid",
    density: 600,
    isFood: true,
    alias:"starch"
}

elements.baking_powder = {
	color: "#fffaf0",
	behavior: behaviors.POWDER,
	category: "food",
	state: "solid",
    burn: 40,
    tempHigh: 400,
    stateHigh: ["salt","carbon_dioxide"],
    burnTime: 25,
    density: 600,
    isFood: true,
	reactions: {
        "flour": { elem1: "pancake_mix", elem2: null, color1: "#e8b77b"},
    },
};

if (!elements.baking_soda.reactions) elements.baking_soda.reactions = {};
elements.baking_soda.reactions.neutral_acid = { elem1: "baking_powder", elem2: null }

elements.pancake_mix = {
    color: ["#f2e9c7","#f7ebbe"],
    behavior: behaviors.POWDER,
    reactions: {
        "water": { elem1: "pancake_batter", elem2: null },
    },
    category: "food",
    tempHigh: 400,
    stateHigh: "fire",
    burn:40,
    burnTime:25,
    state: "solid",
    density: 600,
    isFood: true
},

elements.pancake_batter = {
    color: "#e6da9e",
    behavior: behaviors.LIQUID,
    category: "food",
    tempHigh: 70,
    stateHigh: "pancake",
    stateHighColorMultiplier: 0.9,
    burn:40,
    burnTime:25,
    burnInto:"ash",
    state: "liquid",
    viscosity: 10000,
    density: 1001,
    hidden: true,
    isFood: true
}
elements.sap.tempHigh = 104,
elements.sap.stateHigh = ["maple_syrup","maple_syrup","maple_syrup","sap"],
elements.maple_syrup = {
    color: ["#fabb34","#facc34","#fabb34"],
    behavior: behaviors.LIQUID,
    tempHigh: 170,
    stateHigh: ["sugar","smoke","smoke"],
    tempLow: -15,
    category:"liquids",
    state: "liquid",
    viscosity: 15,
    hidden: true,
    density: 1400
}
elements.pancake = {
    color: "#e0d080",
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 95,
    stateHigh: "crispy_pancake",
    category: "food",
    burn: 10,
    burnTime: 400,
    burnInto: ["smoke","smoke","smoke","ash"],
    breakInto: "crumb",
    state: "solid",
    density: 233.96,
    hidden: true,
    isFood: true
}
elements.crispy_pancake = {
    color: "#c7a34a",
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 150,
    stateHigh: "burnt_pancake",
    category: "food",
    burn: 10,
    burnTime: 400,
    burnInto: ["smoke","smoke","smoke","ash"],
    breakInto: "crumb",
    state: "solid",
    density: 233.96,
    hidden: true,
    isFood: true
}
elements.burnt_pancake = {
    color: "#332709",
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 550,
    stateHigh: "ash",
    category: "food",
    burn: 10,
    burnTime: 400,
    burnInto: ["smoke","smoke","smoke","ash"],
    breakInto: "crumb",
    state: "solid",
    density: 233.96,
    hidden: true,
    isFood: true
}
elements.strawberry_seed = {
    color: "#7a7133",
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(pixel,"strawberry_stem");
                    }
                }
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    cooldown: defaultCooldown
}
elements.strawberry_stem = {
    color: "#419c2f",
    behavior: [
        "CR:strawberry_stem,strawberry_leaves,strawberry_leaves,strawberry_leaves,strawberry_leaves%3|CR:strawberry_stem,strawberry_leaves,strawberry_leaves,strawberry_leaves,strawberry_leaves%3|CR:strawberry_stem,strawberry_leaves,strawberry_leaves,strawberry_leaves,strawberry_leaves%3",
        "CR:strawberry_stem,strawberry_leaves,strawberry_leaves,strawberry_leaves,strawberry_leaves%3|XX|CR:strawberry_stem,strawberry_leaves,strawberry_leaves,strawberry_leaves,strawberry_leaves%3",
        "XX|M1|XX",
    ],
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    properties: {
        "age":0
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
}
elements.strawberry_leaves = {
    color: "#4bad37",
    behavior: [
        "XX|CR:strawberry%2|XX",
        "CR:strawberry%2|XX|CR:strawberry%2",
        "M2|M1|M2",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050
}
elements.strawberry = {
    color: "#f04b3c",
    behavior: [
        "XX|ST:strawberry_stem,strawberry_leaves|XX",
        "ST:strawberry_stem,strawberry_leaves|XX|ST:strawberry_stem,strawberry_leaves",
        "M2|M1|M2",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "strawberry_juice",
    state: "solid",
    density: 1050,
    freezeDryInto: "freeze_dried_fruits",
}
elements.strawberry_juice = {
    color: "#e03a3a",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#e03a3a")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    tempLow: 0,
    reactions: {
        "sugar": { elem1:"strawberry_jam", elem2:null, chance:0.35 },
        "milk": { elem1:"fruit_milk", elem2:null, chance:0.35, color1:"#f78888"},
    },
};
//---------------------------------------------------"strawberry_juice");

elements.cream.onMix = function(cream1, cream2) {
        if ((shiftDown && Math.random() < 0.01) || (elements[cream2.element].id === elements.cream.id && Math.random() < 0.1)) {
            changePixel(cream1,"whipped_cream")
        }
    }
elements.whipped_cream = {
    color: "#fafafa",
    behavior: behaviors.LIQUID,
    reactions: {
        "dirt": { elem1: null, elem2: "mud" },
        "sand": { elem1: null, elem2: "wet_sand" },
        "clay_soil": { elem1: null, elem2: "clay" },
        "melted_chocolate": { color1:"#664934", elem2:null },
        "chocolate": { color1:"#664934", elem2:"melted_chocolate", chance:0.05 },
        "juice": { elem1:"fruit_milk", elem2:null, chance:0.05 },
        "soda": { elem1:"pilk", elem2:null, chance:0.1 },
        "yolk": { elem1:"#eggnog", elem2:null, chance:0.1 },
        "caramel": { color1:"#C8B39A", chance:0.05 },
        "sugar": { elem2:null, chance:0.005},
    },
    viscosity: 1.5,
    tempHigh: 1000,
    stateHigh: ["smoke","smoke","smoke","steam","steam","calcium"],
    tempLow: 0,
    stateLow: "ice_cream",
    stateLowColorMultiplier: 0.97,
    category: "food",
    hidden: true,
    isFood: true,
    state: "liquid",
    density: 959.97,
    viscosity: 2500000
}

elements.ginger = {
    color: ["#b88f30","#d6a73a"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2 AND CH:dirt,mud,sand,wet_sand,clay_soil,clay,mycelium,grass,color_sand>ginger,fiber%0.5|M1 AND CH:dirt,mud,sand,wet_sand,clay_soil,clay,mycelium,grass,color_sand>ginger,fiber,fiber%0.5|M2 AND CH:dirt,mud,sand,wet_sand,clay_soil,clay,mycelium,grass,color_sand>ginger,fiber%0.5",
    ],
    reactions: {
        "flour": { elem1:"gingerbread", elem2:null },
        "bread": { elem1:"gingerbread", elem2:null },
    },
    tempHigh: 275,
    stateHigh: "dirt",
    tempLow: -50,
    stateLow: "fiber",
    burn: 20,
    burnTime: 60,
    burnInto: "dirt",
    breakInto: "ginger_juice",
    cutInto: "cut_ginger",
    category: "food",
    state: "solid",
    density: 1250,
    conduct: 0.1,
    hidden: true
}
elements.cut_ginger = {
    color: "#ffdd80",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2",
    ],
    category:"food",
    tempHigh: 100,
    stateHigh: "steam",
    burn:15,
    burnTime:60,
    burnInto: "steam",
    breakInto: "juice",
    breakIntoColor:"#ffe396",
    state: "solid",
    density: 1050,
    hidden: true
}

elements.ginger_rhizome = {
    color: "#c7ad58",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"ginger");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel("ginger_pseudostem",pixel.x,pixel.y+1);
                }
                if (isEmpty(pixel.x+1,pixel.y) && Math.random() < 0.2) {
                    createPixel("ginger_leaves",pixel.x+1,pixel.y);
                }
                if (isEmpty(pixel.x-1,pixel.y) && Math.random() < 0.2) {
                    createPixel("ginger_leaves",pixel.x-1,pixel.y);
                }
            }
            else if (pixel.age > 250) {
                changePixel(pixel,"ginger_leaves");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    breakInto: "ginger_juice",
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
    reactions: {
        "flour": { elem1:"gingerbread", elem2:null },
        "bread": { elem1:"gingerbread", elem2:null },
    },
};

elements.ginger_pseudostem = {
    color: "#69a82d",
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050
}
elements.ginger_leaves = {
    color: "#52bd31",
    behavior: behaviors.WALL,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
        "carbon_dioxide": { elem2:"oxygen", chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050
}
elements.ginger_juice = {
    color: "#ccc056",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#ccc056")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    tempLow: 0,
    reactions: {
        "flour": { elem1:"gingerbread", elem2:null },
        "bread": { elem1:"gingerbread", elem2:null },
    },
};
//---------------------------------------------------"ginger_juice");


elements.blueberry_seed = {
    color: "#7a7133",
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(pixel,"blueberry_stem");
                    }
                }
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    cooldown: defaultCooldown
}
elements.blueberry_stem = {
    color: "#419c2f",
    behavior: [
        "CR:blueberry_stem,blueberry_leaves,blueberry_leaves,blueberry_leaves,blueberry_leaves%3|CR:blueberry_stem,blueberry_leaves,blueberry_leaves,blueberry_leaves,blueberry_leaves%3|CR:blueberry_stem,blueberry_leaves,blueberry_leaves,blueberry_leaves,blueberry_leaves%3",
        "CR:blueberry_stem,blueberry_leaves,blueberry_leaves,blueberry_leaves,blueberry_leaves%3|XX|CR:blueberry_stem,blueberry_leaves,blueberry_leaves,blueberry_leaves,blueberry_leaves%3",
        "XX|M1|XX",
    ],
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    properties: {
        "age":0
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
}
elements.blueberry_leaves = {
    color: "#4bad37",
    behavior: [
        "XX|CR:blueberry%2|XX",
        "CR:blueberry%2|XX|CR:blueberry%2",
        "M2|M1|M2",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050
}
elements.blueberry = {
    color: "#5d4bc4",
    behavior: [
        "XX|ST:blueberry_stem,blueberry_leaves|XX",
        "ST:blueberry_stem,blueberry_leaves|XX|ST:blueberry_stem,blueberry_leaves",
        "M2|M1|M2",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "blueberry_juice",
    state: "solid",
    density: 1050,
    cutInto: "cut_blueberry",
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#33146e",
}
elements.blueberry_juice = {
    color: "#5030a1",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#5030a1")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    tempLow: 0,
    reactions: {
        "sugar": { elem1:"blueberry_jam", elem2:null, chance:0.35 },
        "milk": { elem1:"fruit_milk", elem2:null, chance:0.35, color1: "#995fb3" },
    },
};

//---------------------------------------------------"blueberry_juice");
/*
elements.fruit_slushie = {
    color: "#ffcc54",
    behavior: behaviors.LIQUID,
    reactions: {
        "dirt": { elem1: null, elem2: "mud" },
        "sand": { elem1: null, elem2: "wet_sand" }
    },
    temp: -5,
    tempHigh: 18,
    tempLow: -20,
    stateLow: "ice",
    stateHigh: "water",
    category: "food",
    state: "liquid",
    density: 95,
    viscosity: 100,
    hidden: true
}
*/

elements.strawberry_jam = {
    color: "#c73c3e",
    behavior: behaviors.LIQUID,
    category: "food",
    tempHigh: 400,
    stateHigh: ["sugar","smoke"],
    burn: 70,
    burnTime: 300,
    viscosity: 750,
    state: "liquid",
    density: 825,
    hidden: true
};
elements.blueberry_jam = {
    color: "#281C4B",
    behavior: behaviors.LIQUID,
    category: "food",
    tempHigh: 400,
    stateHigh: ["sugar","smoke"],
    burn: 70,
    burnTime: 300,
    viscosity: 750,
    state: "liquid",
    density: 825,
    hidden: true
};
elements.cut_blueberry = {
    color: "#d4ed8a",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "juice",
    breakIntoColor:"#add69a",
    state: "solid",
    density: 1050,
    hidden: true
}

if (!elements.yeast.reactions) elements.yeast.reactions = {};
elements.yeast.reactions.flour = { elem1: "advanced_dough", elem2: null }

elements.advanced_dough = {
    color: "#c49f58",
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "milk": { elem2:"broth", color2:"#ECC891", tempMin:70 },
        "cream": { elem2:"broth", color2:"#ECC891", tempMin:70 },
    },
    category: "food",
    tempHigh: 94,
    stateHigh: "bread",
    stateHighColorMultiplier: 0.9,
    burn:40,
    burnTime:25,
    burnInto:"ash",
    state: "solid",
    density: 526.9,
    isFood: true,
    hidden: true
}

if (!elements.melted_chocolate.reactions) elements.melted_chocolate.reactions = {};
elements.melted_chocolate.reactions.flour = { elem1: "cookie_dough", elem2: null }

elements.cookie_dough = {
    color: ["#946826","#9e783f","#8a6d41","#614925"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    tempHigh: 94,
    stateHigh: "cookie",
    stateHighColorMultiplier: 1.1,
    burn:40,
    burnTime:25,
    burnInto:"ash",
    state: "solid",
    density: 526.9,
    isFood: true,
    hidden: true
}

elements.cookie = {
    color: "#7d5f2e",
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 605,
    stateHigh: "ash",
    category: "food",
    burn: 30,
    burnTime: 200,
    burnInto: ["smoke","smoke","smoke","ash"],
    breakInto: "crumb",
    breakIntoColor: "#7d6216",
    state: "solid",
    density: 233.96,
    isFood: true
}

elements.nut_oil.name = "cooking_oil"

elements.bread.behavior = behaviors.SUPPORT

elements.toast.behavior = behaviors.SUPPORT

if (!elements.caramel.reactions) elements.caramel.reactions = {};
elements.caramel.reactions.corn_starch = { elem1: "boba_dough", elem2: null, chance: 0.35, tempMin: 70}

elements.boba_dough = {
    color: ["#4a2007","#2b1304"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    tempHigh: 400,
    stateHigh: "ash",
    stateHighColorMultiplier: 0.8,
    burn:40,
    burnTime:25,
    burnInto:"ash",
    state: "solid",
    density: 526.9,
    reactions: {
        "water": { elem1:"boba", tempMin:60},
    },
    isFood: true,
    hidden: true
}

elements.boba = {
    color: "#59290c",
    behavior: behaviors.POWDER,
    tempHigh: 300,
    stateHigh: "fire",
    category: "food",
    burn: 30,
    burnTime: 200,
    burnInto: ["smoke","smoke","smoke","ash"],
    breakIntoColor: "#7d6216",
    state: "solid",
    density: 1500,
    isFood: true
}
elements.caramel.density = 1500
elements.freeze = {
    color: ["#42cbf5", "#42cbf5", "#42cbf5", "#75d3f0", "#42cbf5"],
    tool: function (pixel) {
        if (!shiftDown) {
            pixel.temp -= 0.2;
            pixelTempCheck(pixel);
        } else {
            pixel.temp -= 200;
            pixelTempCheck(pixel);
        }
    },
    category: "energy",
    canPlace: false,
    excludeRandom: true,
    desc: "Use on pixels to freeze them."
};
elements.warm = {
    color: ["#c7634a", "#c7634a", "#c7634a", "#e38f7b", "#c7634a"],
    tool: function (pixel) {
        if (!shiftDown) {
            pixel.temp += 0.2;
            pixelTempCheck(pixel);
        } else {
            pixel.temp += 200;
            pixelTempCheck(pixel);
        }
    },
    category: "energy",
    canPlace: false,
    excludeRandom: true,
    desc: "Use on pixels to warm them."
};
/*
elements.pineapple_seed = {
    color: "#695531",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (pixel.temp < 100 && pixel.temp > 20) {
                if (Math.random() < 0.02 && pixel.age > 50) {
                    if (!outOfBounds(pixel.x,pixel.y+1)) {
                        var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                        if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                            changePixel(dirtPixel,"root");
                            pixel.leaflength = pixel.leaflength+Math.round(Math.random())
                        }
                    }
                    if (isEmpty(pixel.x,pixel.y-1) && pixel.leafgrown==false) {
                        movePixel(pixel,pixel.x,pixel.y-1);
                        createPixel("pineapple_leaves",pixel.x,pixel.y+1);
                        if (isEmpty(pixel.x,pixel.y-1)) {
                            createPixel("pineapple",pixel.x,pixel.y-1);
                        }
                        if (isEmpty(pixel.x+1,pixel.y) && Math.random() < 0.5) {
                            createPixel("pineapple_leaves",pixel.x+1,pixel.y);
                            if (isEmpty(pixel.x+2,pixel.y-1) && Math.random() < 0.5) {
                                createPixel("pineapple_leaves",pixel.x+2,pixel.y-1);
                                if (pixel.leaflength == 4 && isEmpty(pixel.x+3,pixel.y-2) && Math.random() < 0.5) {
                                    createPixel("pineapple_leaves",pixel.x+3,pixel.y-2);
                                    pixel.leafgrown = true
                                }
                            }
                        }
                        if (isEmpty(pixel.x-1,pixel.y) && Math.random() < 0.5) {
                            createPixel("pineapple_leaves",pixel.x-1,pixel.y);
                            if (isEmpty(pixel.x-2,pixel.y-1) && Math.random() < 0.5) {
                                createPixel("pineapple_leaves",pixel.x-2,pixel.y-1);
                                if (pixel.leaflength = 3) {
                                    pixel.leafgrown = true
                                }
                                if (pixel.leaflength = 4 && isEmpty(pixel.x-3,pixel.y-2) && isEmpty(pixel.x+3,pixel.y-2) && Math.random() < 0.5) {
                                    createPixel("pineapple_leaves",pixel.x-3,pixel.y-2);
                                    createPixel("pineapple_leaves",pixel.x+3,pixel.y-2);
                                    pixel.leafgrown = true
                                }
                            }
                        }
                    }
                }
                else if (pixel.age > 500 && leafgrown == true && Math.random() < 0.1) {
                    changePixel(pixel,"pineapple_leaves");
                }
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0,
        "leaflength":3,
        "leafgrown":false,
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    temp:25,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};
*//*
function averageHexColor(color1, color2) {
    const rgb1 = hexToRgb(color1);
    const rgb2 = hexToRgb(color2);
    const avgRed = Math.floor((rgb1[0] + rgb2[0]) / 2);
    const avgGreen = Math.floor((rgb1[1] + rgb2[1]) / 2);
    const avgBlue = Math.floor((rgb1[2] + rgb2[2]) / 2);
    const avgHex = rgbToHex(avgRed, avgGreen, avgBlue);
    return avgHex;
}

function hexToRgb(hex) {
    hex = hex.replace(/^#/, '');
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    return [r, g, b];
}

function rgbToHex(r, g, b) {
    const rHex = r.toString(16).padStart(2, '0');
    const gHex = g.toString(16).padStart(2, '0');
    const bHex = b.toString(16).padStart(2, '0');
    return `${rHex}${gHex}${bHex}`;
}
*/
// test
//var color1 = "#FF0000";
//var color2 = "#0000FF";
//var averageColor = averageHexColor(color1, color2);
//console.log(averageColor)
/*
eLists.JUICEMIXABLE.forEach(function(element){
    elements[element].onMix = function(pixel1,pixel2) {
    if (shiftDown && eLists.JUICEMIXABLE.indexOf(pixel2.element) !== -1) {
        if (Math.random() < 0.2) {
            var hex1 = pixel1.color
            var hex2 = pixel2.color
            let rgb = pixel.color.replace("rgb(", "").replace(")", "").split(",");
            let rgbObj = { r: parseInt(rgb[0]), g: parseInt(rgb[1]), b: parseInt(rgb[2]) } //use this as one of the rgb objects
            var finalJuiceColor = interpolatedRgb(hex1,hex2,0.5)
            changePixel(pixel1,"juice")
            //pixel1.color = pixelColorPick(pixel,finalJuiceColor)
            pixel1.color = rgb(rgbObj)
        }
    }
}
})*/
elements.juice.onMix = function(pixel){
    let num = Math.floor(Math.random() * 4);
    let x = pixel.x + adjacentCoords[num][0];
    let y = pixel.y + adjacentCoords[num][1];
    if(!isEmpty(x,y) && !outOfBounds(x,y)){
      let pixel2 = pixelMap[x][y];
      if(pixel.color != pixel2.color && pixel2.element == "juice"){
        let condition;
        if(shiftDown == 0){
          condition = (Math.floor(Math.random() * 2) == 1); 
        } else {
          condition = true; 
        }
        if(condition){
          let newrgb = interpolateRgb(getRGB(pixel.color), getRGB(pixel2.color), 0.5);
          pixel.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
          pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        }
      }
    }
  }

elements.juice.stain = 0

elements.banana_seed = {
    color: "#594129",
    tick: function(pixel) {
            if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1) && pixel.height < 7) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel("banana_stem",pixel.x,pixel.y+1);
                    
                    pixel.height++
                }
            }
            else if (pixel.age > 150 && pixel.height > 6 && Math.random() < 0.1) {
                changePixel(pixel,"banana_tree_top");
            }
            pixel.age++;
        doDefaults(pixel);
    },
    properties: {
        "age":0,
        "height": 0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};
elements.banana_stem = {
    color: "#698215",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "life",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
}
elements.banana_tree_top = {
    color: "#718a21",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "life",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    properties:{
        "leftleaves": 0,
        "rightleaves": 0,
    },
    hidden: true,
    tick: function(pixel) {
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rightleaves == 0) {
            if (isEmpty(pixel.x+1,pixel.y)) {
                createPixel("banana_leaves",pixel.x+1,pixel.y);

                pixel.rightleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rightleaves == 1) {
            if (isEmpty(pixel.x+2,pixel.y)) {
                createPixel("banana_leaves",pixel.x+2,pixel.y);

                pixel.rightleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rightleaves == 2) {
            if (isEmpty(pixel.x+3,pixel.y)) {
                createPixel("banana_leaves",pixel.x+3,pixel.y);

                pixel.rightleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rightleaves == 3) {
            if (isEmpty(pixel.x+4,pixel.y+1)) {
                createPixel("banana_leaves",pixel.x+4,pixel.y+1);

                pixel.rightleaves++
            }
        }


        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.leftleaves == 0) {
            if (isEmpty(pixel.x-1,pixel.y)) {
                createPixel("banana_leaves",pixel.x-1,pixel.y);

                pixel.leftleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.leftleaves == 1) {
            if (isEmpty(pixel.x-2,pixel.y)) {
                createPixel("banana_leaves",pixel.x-2,pixel.y);

                pixel.leftleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.leftleaves == 2) {
            if (isEmpty(pixel.x-3,pixel.y)) {
                createPixel("banana_leaves",pixel.x-3,pixel.y);

                pixel.leftleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.leftleaves == 3) {
            if (isEmpty(pixel.x-4,pixel.y+1)) {
                createPixel("banana_leaves",pixel.x-4,pixel.y+1);

                pixel.leftleaves++
            }
        }


        if (Math.random() < 0.1 && pixel.age > 70 && pixel.temp < 100 && pixel.leftleaves > 0 && pixel.rightleaves > 0) {
            if (isEmpty(pixel.x+1,pixel.y+2)) {
                createPixel("banana_peduncle",pixel.x+1,pixel.y+2);
            }
        }
        if (Math.random() < 0.1 && pixel.age > 70 && pixel.temp < 100 && pixel.leftleaves > 0 && pixel.rightleaves > 0) {
            if (isEmpty(pixel.x-1,pixel.y+2)) {
                createPixel("banana_peduncle",pixel.x-1,pixel.y+2);
            }
        }
        pixel.age++;
    doDefaults(pixel);
    },
}
elements.banana_leaves = {
    color: ["#3da324","#3cbd1c"],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
}
elements.banana_peduncle = {
    color: "#8bb81a",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "life",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    hidden: true,
    tick: function(pixel) {
        if (Math.random() < 0.1 && pixel.temp < 100) {
            if (isEmpty(pixel.x+1,pixel.y+1)) {
                createPixel("hanging_banana_peduncle",pixel.x+1,pixel.y+1);
            }
            if (isEmpty(pixel.x-1,pixel.y+1)) {
                createPixel("hanging_banana_peduncle",pixel.x-1,pixel.y+1);
            }
            if (isEmpty(pixel.x+1,pixel.y+2)) {
                createPixel("hanging_banana_peduncle",pixel.x+1,pixel.y+2);
            }
            if (isEmpty(pixel.x-1,pixel.y+2)) {
                createPixel("hanging_banana_peduncle",pixel.x-1,pixel.y+2);
            }
        }
        pixel.age++;
    doDefaults(pixel);
    },
}
elements.hanging_banana_peduncle = {
    color: "#8bb81a",
    behavior: [
        "XX|XX|XX",
        "CR:banana%0.2|XX|CR:banana%0.2",
        "XX|XX|XX",
    ],
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "life",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    hidden: true,
}
elements.banana = {
    color: "#ebd834",
    behavior: [
        "XX|XX|XX",
        "ST:hanging_banana_peduncle|XX|ST:hanging_banana_peduncle",
        "XX|M1|XX",
    ],
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "banana_juice",
    state: "solid",
    density: 1050,
    cutInto: "cut_banana",
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#c4b939",
}
elements.cut_banana = {
    color: "#f2e56b",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1|M2",
    ],
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "banana_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#c4b939",
}
elements.banana_juice = {
    color: "#dbc440",
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#dbc440")
            }
        }
    },
    reactions: {
        "bread": { elem1:"banana_bread", elem2:null, chance:0.35 },
        "milk": { elem1: "fruit_milk", elem2: "fruit_milk", chance: 0.35, color1:"#ede59a", color2:"#ede59a"},
        "coconut_milk": { elem1: "fruit_milk", elem2: "fruit_milk", chance: 0.35, color1:"#ede59a", color2:"#ede59a"},
        "nut_milk": { elem1: "fruit_milk", elem2: "fruit_milk", chance: 0.35, color1:"#ede59a", color2:"#ede59a"}
    },
    tempLow: 0
};
//---------------------------------------------------"banana_juice");

elements.banana_bread = {
    color: "#c2782f",
    desc: "delicious banana bread",
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 176,
    stateHigh: "toast",
    category: "food",
    burn: 30,
    burnTime: 200,
    burnInto: ["smoke","smoke","smoke","ash"],
    breakInto: "crumb",
    state: "solid",
    density: 233.96,
    isFood: true
}
elements.sprinkles = {
    color: ["#eb726a", "#ebca6a", "#88eb6a", "#6aaceb", "#eb6ade"],
    behavior: behaviors.POWDER,
    category: "food",
    state: "solid",
    desc: "colorful edible sand",
    hidden: false,
    isFood: true,
    burn: 30,
    burnTime: 200,
    burnInto: ["smoke","smoke","smoke","ash"],
    breakInto: "sugar",
    breakIntoColor: ["#fb827a", "#fbda7a", "#98fb7a", "#7abcfb", "#fb7aee"],
    tempHigh: 176,
    stateHigh: "caramel",
    density: 277,
    cooldown: 2
}
elements.chocolate_chips = {
    color: "#6e4c1d",
    behavior: behaviors.POWDER,
    tempHigh: 31,
    stateHigh: "melted_chocolate",
    category: "food",
    state: "solid",
    density: 1325,
    isFood: true,
    desc: "chocolate chips yum",
    cooldown: 2
}
elements.chocolate.breakInto = "chocolate_chips"
//elements.fruit_milk.stateLowColorMultiplier = 0.9

elements.passion_fruit_vine = {
    color: "#00df00",
    behavior: [
        "ST:wood|ST:wood|ST:wood",
        "ST:wood AND CR:passion_fruit%0.02|XX|ST:wood AND CR:passion_fruit%0.02",
        "ST:wood|ST:wood AND M1|ST:wood",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
        "carbon_dioxide": { elem2:"oxygen", chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    breakInto: "dead_plant"
}
elements.passion_fruit_seed = {
    color: "#6b4f36",
    tick: function(pixel) {
            if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    if (!isEmpty(pixel.x+1,pixel.y-1) || !isEmpty(pixel.x-1,pixel.y-1)) {
                        movePixel(pixel,pixel.x,pixel.y-1);
                        createPixel("passion_fruit_vine",pixel.x,pixel.y+1);
                    }
                }
                if (!isEmpty(pixel.x+2,pixel.y-1) && isEmpty(pixel.x+1,pixel.y-1)) {
                    movePixel(pixel,pixel.x+1,pixel.y-1);
                    createPixel("passion_fruit_vine",pixel.x-1,pixel.y+1);
                }
                if (!isEmpty(pixel.x-2,pixel.y-1) && isEmpty(pixel.x-1,pixel.y-1)) {
                    movePixel(pixel,pixel.x-1,pixel.y-1);
                    createPixel("passion_fruit_vine",pixel.x+1,pixel.y+1);
                }
                if (!isEmpty(pixel.x,pixel.y-1) && !isEmpty(pixel.x+1,pixel.y) && isEmpty(pixel.x+1,pixel.y-1)) {
                    movePixel(pixel,pixel.x+1,pixel.y-1);
                    createPixel("passion_fruit_vine",pixel.x-1,pixel.y+1);
                }
                if (!isEmpty(pixel.x,pixel.y-1) && !isEmpty(pixel.x-1,pixel.y) && isEmpty(pixel.x-1,pixel.y-1)) {
                    movePixel(pixel,pixel.x-1,pixel.y-1);
                    createPixel("passion_fruit_vine",pixel.x+1,pixel.y+1);
                }
                /*if (pixelMap[pixel.x+1][pixel.y-1].element !== "wood" && pixelMap[pixel.x-1][pixel.y-1].element !== "wood") {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel("passion_fruit_vine",pixel.x,pixel.y+1);
                    if (isEmpty(pixel.x+1,pixel.y-1) && pixelMap[pixel.x+2][pixel.y-1].element === "wood") {
                        movePixel(pixel,pixel.x+1,pixel.y-1);
                        createPixel("passion_fruit_vine",pixel.x-1,pixel.y+1);
                    }
                    if (isEmpty(pixel.x-1,pixel.y-1) && pixelMap[pixel.x-2][pixel.y-1].element === "wood") {
                        movePixel(pixel,pixel.x-1,pixel.y-1);
                        createPixel("passion_fruit_vine",pixel.x+1,pixel.y+1);
                    }
                }*/
            }
            else if (pixel.age > 400 && Math.random() < 0.1) {
                changePixel(pixel,"passion_fruit_vine");
            }
            pixel.age++;
        doDefaults(pixel);
    },
    properties: {
        "age":0,
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "ST:wood,passion_fruit_vine|ST:wood,passion_fruit_vine|ST:wood,passion_fruit_vine",
        "ST:wood,passion_fruit_vine|XX|ST:wood,passion_fruit_vine",
        "ST:wood,passion_fruit_vine|M1|ST:wood,passion_fruit_vine",
    ],
};

elements.passion_fruit = {
    color: "#78236f",
    behavior: [
        "ST:passion_fruit_vine%95|ST:passion_fruit_vine%95|ST:passion_fruit_vine%95",
        "ST:passion_fruit_vine%95|XX|ST:passion_fruit_vine%95",
        "ST:passion_fruit_vine%95|M1|ST:passion_fruit_vine%95",
    ],
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: ["passion_fruit_juice","passion_fruit_juice",/*"passion_fruit_seed"*/],
    state: "solid",
    density: 1050,
    cutInto: "passion_fruit_flesh",
    temp:20,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#412e6b"
}
elements.passion_fruit_flesh = {
    color: "#ffe205",
    behavior: behaviors.LIQUID,
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    viscosity: 999,
    burnInto: "dead_plant",
    breakInto: ["passion_fruit_juice","passion_fruit_juice",/*"passion_fruit_seed"*/],
    state: "solid",
    density: 1050,
    hidden: true,
    temp: 20
}
elements.passion_fruit_juice = {
    color: "#d6bf2b",
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 20,
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#d6bf2b")
            }
        }
    },
    tempLow: 0
};
//---------------------------------------------------"passion_fruit_juice");

elements.mango_wood = {
    color: "#966435",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
}
elements.mango_branch = {
    color: "#966435",
    behavior: [
        "CR:mango_leaves,mango_branch%2|CR:mango_leaves,mango_branch%2|CR:mango_leaves,mango_branch%2",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tempHigh: 100,
    stateHigh: "mango_wood",
    tempLow: -30,
    stateLow: "mango_wood",
    category: "life",
    burn: 40,
    burnTime: 50,
    burnInto: ["sap","ember","charcoal"],
    hidden: true,
    state: "solid",
    density: 1500,
    hardness: 0.15,
    breakInto: ["sap","sawdust"],
}
elements.mango_leaves = {
    color: ["#61b535","#5fba2f"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|CR:mango%0.1|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
}
elements.mango = {
    color: ["#cc5b3f","#cc8a3f","#ccb93f","#abcc3f"],
    behavior: behaviors.POWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "mango_juice",
    cutInto: "cut_mango",
    state: "solid",
    density: 1050,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#ccb50a",
}

elements.cut_mango = {
    color: "#ebcb2d",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "mango_juice",
    state: "solid",
    density: 1050,
    hidden: true,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#ccb50a",
}

elements.mango_seed = {
    color: "#9e8951",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "mango_wood" : "mango_branch",pixel.x,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"mango_wood");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};

elements.mango_juice = {
    color: "#f0c348",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#f0c348")
            }
        }
    },
    reactions: {
        "milk": { elem1: "fruit_milk", elem2: "fruit_milk", chance: 0.35, color1:"#fada70", color2:"#fada70"},
        "coconut_milk": { elem1: "fruit_milk", elem2: "fruit_milk", chance: 0.35, color1:"#fada70", color2:"#fada70"},
        "nut_milk": { elem1: "fruit_milk", elem2: "fruit_milk", chance: 0.35, color1:"#fada70", color2:"#fada70"}
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    tempLow: 0
};
//---------------------------------------------------"mango_juice");

elements.pineapple_leaves = {
    color: "#3aab11",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
}
elements.pineapple = {
    color: "#e8bc38",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "pineapple_juice",
    state: "solid",
    density: 1050,
    temp:20,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#ccb90a",
}
elements.pineapple_seed = {
    color: "#695531",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (pixel.temp < 100 && pixel.temp > 20) {
                if (Math.random() < 0.02 && pixel.age > 50) {
                    if (!outOfBounds(pixel.x,pixel.y+1)) {
                        var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                        if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                            changePixel(dirtPixel,"root");
                            if (isEmpty(pixel.x,pixel.y-1) && pixel.leafgrown==false) {
                                movePixel(pixel,pixel.x,pixel.y-1);
                                createPixel("pineapple_leaves",pixel.x,pixel.y+1);
                                if (isEmpty(pixel.x+1,pixel.y) && isEmpty(pixel.x-1,pixel.y)) {
                                    createPixel("pineapple_leaves",pixel.x+1,pixel.y);
                                    createPixel("pineapple_leaves",pixel.x-1,pixel.y);
                                    if (isEmpty(pixel.x-2,pixel.y-1) && isEmpty(pixel.x+2,pixel.y-1)) {
                                        createPixel("pineapple_leaves",pixel.x+2,pixel.y-1);
                                        createPixel("pineapple_leaves",pixel.x-2,pixel.y-1);
                                        if (isEmpty(pixel.x,pixel.y-1) && isEmpty(pixel.x+1,pixel.y-1) && isEmpty(pixel.x-1,pixel.y-1)) {
                                            createPixel("pineapple",pixel.x,pixel.y-1);
                                            createPixel("pineapple",pixel.x+1,pixel.y-1);
                                            createPixel("pineapple",pixel.x-1,pixel.y-1);
                                            if (isEmpty(pixel.x,pixel.y-2) && isEmpty(pixel.x+1,pixel.y-2) && isEmpty(pixel.x-1,pixel.y-2)) {
                                                createPixel("pineapple",pixel.x,pixel.y-2);
                                                createPixel("pineapple",pixel.x+1,pixel.y-2);
                                                createPixel("pineapple",pixel.x-1,pixel.y-2);
                                                if (isEmpty(pixel.x,pixel.y-3) && isEmpty(pixel.x+1,pixel.y-3) && isEmpty(pixel.x-1,pixel.y-3)) {
                                                    createPixel("pineapple",pixel.x,pixel.y-3);
                                                    createPixel("pineapple",pixel.x+1,pixel.y-3);
                                                    createPixel("pineapple",pixel.x-1,pixel.y-3);
                                                    if (isEmpty(pixel.x,pixel.y-4) && isEmpty(pixel.x+1,pixel.y-4) && isEmpty(pixel.x-1,pixel.y-4)) {
                                                        createPixel("pineapple",pixel.x,pixel.y-4);
                                                        createPixel("pineapple",pixel.x+1,pixel.y-4);
                                                        createPixel("pineapple",pixel.x-1,pixel.y-4);
                                                        if (isEmpty(pixel.x,pixel.y-5) && isEmpty(pixel.x+1,pixel.y-6) && isEmpty(pixel.x-1,pixel.y-6)) {
                                                            createPixel("pineapple_leaves",pixel.x,pixel.y-5);
                                                            createPixel("pineapple_leaves",pixel.x+1,pixel.y-6);
                                                            createPixel("pineapple_leaves",pixel.x-1,pixel.y-6);
                                                            pixel.leafgrown = true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (pixel.age > 500 && pixel.leafgrown == true && Math.random() < 0.1) {
                    changePixel(pixel,"pineapple_leaves");
                }
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0,
        "leafgrown":false,
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    temp:25,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};
elements.pineapple_juice = {
    color: "#d9ba32",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#d9ba32")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    tempLow: 0
};
//---------------------------------------------------"pineapple_juice");

elements.lime = {
    color: ["#549c2d","#4d9c22"],
    behavior: behaviors.POWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
    },
    category:"food",
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#5eab24",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "lime_juice",
    state: "solid",
    density: 1050,
    isFood: true,
    cutInto: ["lime_zest","lime_slice","lime_slice","lime_slice","lime_slice"],
}

elements.lime_juice = {
    color: "#85d14b",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#85d14b")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    hidden: true,
    tempLow: 0,
};
//---------------------------------------------------"lime_juice");

elements.lime_zest = {
    color: "#4f9e13",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true,
}

elements.lime_slice = {
    color: "#8acc33",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "lime_juice",
    state: "solid",
    density: 1050,
    hidden: true,
}

elements.snail.reactions.nut_oil = { elem1: "escargot", chance:30, tempMin:50 }

elements.escargot = {
    color: "#ab924d",
    behavior: behaviors.STURDYPOWDER2,
    tempHigh: 120,
    stateHigh: "steam",
    breakInto: "quicklime",
    category: "food",
    state: "solid",
    density: 1500,
    conduct: 0.16
}

elements.broccoli = {
    color: ["#49a82f","#429929"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "ST:broccoli_stem AND M2|ST:broccoli_stem AND M1|ST:broccoli_stem AND M2",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    isFood: true,
    density: 1050,
    cutInto: "cut_broccoli",
}
elements.broccoli_stem = {
    color: ["#51c431","#45ba25"],
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    cutInto: "cut_broccoli",
    state: "solid",
    density: 1050,
    hidden: true,
}

elements.cut_broccoli = {
    color: "#75d65a",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: "steam",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true,
}

elements.broccoli_seed = {
    color: "#9e8951",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.2 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1) && isEmpty(pixel.x+1,pixel.y-1) && isEmpty(pixel.x-1,pixel.y-1)) {
                    changePixel(pixel,"broccoli_stem");
                    createPixel("broccoli",pixel.x,pixel.y-1);
                    createPixel("broccoli",pixel.x+1,pixel.y-1);
                    createPixel("broccoli",pixel.x-1,pixel.y-1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"broccoli");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};
elements.freeze_dried_fruits = {
    color: "#ab1f31",
    behavior: behaviors.POWDER,
    tempHigh: 550,
    stateHigh: "ash",
    category: "food",
    burn: 15,
    burnTime: 200,
    burnInto: ["smoke","smoke","smoke","ash"],
    state: "solid",
    density: 233.96,
    isFood: true,
}

elements.grape.freezeDryInto = "freeze_dried_fruits"
elements.grape.freezeDryIntoColor = "#5d156b"

elements.soapy_water = {
    color: "#72b8f2",
    behavior: [
        "XX|CR:bubble%0.25|XX",
        "M2%50|XX|M2%50",
        "M2%50|M1|M2%50",
    ],
    tempHigh: 100,
    stateHigh: "steam",
    tempLow: 0,
    category: "liquids",
    heatCapacity: 4.184,
    reactions: {
        "dirt": {elem1: null,elem2: "mud"},
        "sand": { elem1: null, elem2: "wet_sand" },
        "clay_soil": { elem1: null, elem2: "clay" },
        "salt": { elem1: "salt_water", elem2: null, temp1:-20 },
        "dust": { elem2: null, elem2: null },
        "plague": { elem2: null, elem2: null },
        "rust": { elem1: "iron", chance:0.005 },
        "fallout": {elem2: null, chance:0.25 },
        "radiation": { elem2: null, chance:0.25 },
        "uranium": { elem2: null, chance:0.25 },
        "rotten_meat": { elem2: "meat", chance:0.25 },
        "rotten_cheese": { elem2: "cheese", chance:0.25 },
        "cancer": { elem2: null, chance:0.25 },
        "oil": { elem2: null, chance:0.005 },
        "dioxin": { elem1: "dirty_water", chance:0.1 },
        "quicklime": { elem1: "slaked_lime", elem2: "slaked_lime", temp2:100, temp1:100, chance:0.05 },
        "rock": { elem2: "wet_sand", chance: 0.00035 },
        "limestone": { elem2: "wet_sand", chance: 0.00035 },
        "tuff": { elem2: "wet_sand", color2:"#7a6b5c", chance: 0.00035 },
        "mudstone": { elem2: "mud", chance: 0.00035 },
        "fly": { elem2:"dead_bug", chance:0.1, oneway:true },
        "firefly": { elem2:"dead_bug", chance:0.1, oneway:true },
        "bee": { elem2:"dead_bug", chance:0.05, oneway:true },
        "stink_bug": { elem2:"dead_bug", chance:0.1, oneway:true },
        "cured_meat": {elem2:"meat" },
    },
    state: "liquid",
    density: 997,
    conduct: 0.02,
    stain: -1,
    extinguish: true
}

elements.soap.behavior = behaviors.STURDYPOWDER
elements.soap.state = "solid"
elements.soap.category = "powders"

elements.soap.reactions.water = {elem2: "soapy_water", elem1: null, chance: 10}
/*
if ([pixel.element].stain < 0 && [pixel.element] != "soap" && [pixel.element] != "soapy_water") {
    [pixel.element].stain = [pixel.element].stain/10
}
*/
elements.onion = {
    color: "#731066",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: "steam",
    burn:65,
    burnTime:60,
    burnInto: "steam",
    state: "solid",
    density: 1050,
    cutInto: "cut_onion",
    breakInto:"onion_powder",
    cutIntoEmit: "stench",
}
elements.cut_onion = {
    color: "#dcc5ed",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: "steam",
    burn:65,
    burnTime:60,
    burnInto: "steam",
    state: "solid",
    density: 1050,
    breakInto:"onion_powder",
    hidden: true,
    reactions:{ "nut_oil": {elem1:"fried_onion", tempMin: 70, chance:10}}
}
elements.fried_onion = {
    color: "#cf9344",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 500,
    stateHigh: "ash",
    burn:65,
    burnTime:60,
    burnInto: "ash",
    state: "solid",
    density: 1050,
    hidden: true,
}

elements.onion_seed = {
    color: "#1a0e02",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.2 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-2) && isEmpty(pixel.x,pixel.y-1) && isEmpty(pixel.x+1,pixel.y-1) && isEmpty(pixel.x-1,pixel.y-1) && isEmpty(pixel.x+1,pixel.y) && isEmpty(pixel.x-1,pixel.y)) {
                    createPixel("onion",pixel.x,pixel.y-1);
                    createPixel("onion",pixel.x+1,pixel.y-1);
                    createPixel("onion",pixel.x-1,pixel.y-1);
                    createPixel("onion",pixel.x,pixel.y-2);
                    createPixel("onion",pixel.x+1,pixel.y);
                    createPixel("onion",pixel.x-1,pixel.y);
                    if (isEmpty(pixel.x+1,pixel.y-3) && isEmpty(pixel.x-1,pixel.y-3)) {
                        createPixel("spring_onion_leaves",pixel.x+1,pixel.y-3);
                        createPixel("spring_onion_leaves",pixel.x-1,pixel.y-3);
                        changePixel(pixel,"onion");
                    }
                }
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
}
elements.onion_powder = {
    color: "#e6d8b8",
    reactions: {
        "stench": { elem2:null, chance:0.25 },
        "steam": { elem2:"fragrance", chance:0.1 },
        "flea": { elem2:null, chance:0.01 },
        "termite": { elem2:null, chance:0.01 },
        "fly": { elem2:null, chance:0.01 },
        "ant": { elem2:null, chance:0.01 },
        "stink_bug": { elem2:null, chance:0.01 },
    },
    behavior: behaviors.POWDER,
    tempHigh: 300,
    stateHigh: ["fire","smoke","smoke","smoke","ash"],
    burn:10,
    burnTime:300,
    burnInto: ["fire","smoke","smoke","smoke","smoke","smoke","smoke","fragrance"],
    category:"food",
    state: "solid",
    density: 1400,
    isFood: true,
}
elements.unhusked_rice = {
    color: ["#c99a42","#b08638","#deb15d"],
    behavior: [
        "XX|XX|XX",
        "ST:rice_panicle|XX|ST:rice_panicle",
        "ST:rice_plant AND M2|ST:rice_panicle AND M1|ST:rice_plant AND M2",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 65,
    stateHigh: "cooked_rice",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "flour",
    breakIntoColor: "#f7f1df",
    state: "solid",
    isFood: true,
    density: 1050,
    cutInto: "rice",
}
elements.rice = {
    color: "#eeeed2",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 65,
    stateHigh: "cooked_rice",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "rice_flour",
    state: "solid",
    isFood: true,
    density: 1050,
    reactions:{
        "water":{elem1:"porridge",elem2:"porridge",chance:3,tempMin:70},
        "nut_oil":{elem1:"fried_rice",elem2:null,chance:3,tempMin:60}
    }
}
elements.cooked_rice = {
    color: "#eddfb9",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 200,
    stateHigh: "burnt_rice",
    burn:65,
    breakInto: "rice_flour",
    state: "solid",
    isFood: true,
    density: 1050,reactions:{
        "water":{elem1:"porridge",elem2:"porridge",chance:3,tempMin:70},
        "nut_oil":{elem1:"fried_rice",elem2:null,chance:3,tempMin:60}
    },
    hidden:true
}
elements.porridge = {
    color: "#f2ecdc",
    behavior: behaviors.LIQUID,
    category:"food",
    tempHigh: 200,
    stateHigh: "steam",
    viscosity: 999,
    burn:65,
    state: "solid",
    isFood: true,
    density: 1050,
}
elements.fried_rice = {
    color: "#e8dda0",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 200,
    stateHigh: "burnt_rice",
    burn:65,
    burnTime:60,
    state: "solid",
    isFood: true,
    density: 1050,reactions:{
        "salt":{color1:"#ede5b9",elem2:null,chance:3},
        "monosodium_glutamate":{color1:"#ede5b9",elem2:null,chance:3}
    },
    hidden:true
}
elements.burnt_rice = {
    color: "#262217",
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 500,
    stateHigh: "ash",
    burn:65,
    burnTime:60,
    state: "solid",
    isFood: true,
    density: 1050,
    hidden: true
}
elements.rice_plant = {
    color: "#37a825",
    behavior: behaviors.WALL,
    category:"life",
    tempHigh: 100,
    stateHigh: "steam",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true,
    
}
elements.rice_seed = {
    color: "#997a23",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.2 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if(!isEmpty(pixel.x-1,pixel.y) && !isEmpty(pixel.x+1,pixel.y)){
                    if(pixelMap[pixel.x+1][pixel.y].element === "water" && pixelMap[pixel.x-1][pixel.y].element === "water"){
                        if (isEmpty(pixel.x,pixel.y-1)){
                            movePixel(pixel,pixel.x,pixel.y-1)
                            createPixel("rice_plant",pixel.x,pixel.y+1)
                            pixel.notinwater=true
                        }
                        else if (!isEmpty(pixel.x,pixel.y-1)){
                            if (pixelMap[pixel.x][pixel.y-1].element === "water") {
                                deletePixel(pixel.x,pixel.y-1)
                                movePixel(pixel,pixel.x,pixel.y-1)
                                createPixel("rice_plant",pixel.x,pixel.y+1)
                            }
                        }
                    }
                }
                if (Math.random() < 0.2 && pixel.age > 50 && pixel.temp < 100 && pixel.notinwater == true) {
                    if (isEmpty(pixel.x+1,pixel.y-1) && isEmpty(pixel.x-1,pixel.y-1)&&isEmpty(pixel.x+2,pixel.y-2) && isEmpty(pixel.x-2,pixel.y-2)) {
                        createPixel("rice_plant",pixel.x+1,pixel.y-1);
                        createPixel("rice_plant",pixel.x-1,pixel.y-1);
                        createPixel("rice_plant",pixel.x+2,pixel.y-2);
                        createPixel("rice_plant",pixel.x-2,pixel.y-2);
                        pixel.leafgrown = true
                    }
                }
                if (Math.random() < 0.2 && pixel.age > 50 && pixel.temp < 100 && pixel.leafgrown == true) {
                    if (isEmpty(pixel.x,pixel.y-1) && isEmpty(pixel.x,pixel.y-2)&&isEmpty(pixel.x,pixel.y-3) && isEmpty(pixel.x,pixel.y-4)) {
                        movePixel(pixel,pixel.x,pixel.y-4)
                        createPixel("rice_plant",pixel.x,pixel.y+1);
                        createPixel("rice_plant",pixel.x,pixel.y+2);
                        createPixel("rice_plant",pixel.x,pixel.y+3);
                        createPixel("rice_plant",pixel.x,pixel.y+4);
                        changePixel(pixel,"rice_panicle")
                        pixel.grower = true
                    }
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"unhusked_rice");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0,
        "leafgrown":false,
        "notinwater":false,
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 2500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};
elements.rice_panicle = {
    color: "#37a825",
    behavior: behaviors.WALL,
    category:"life",
    tempHigh: 100,
    stateHigh: "steam",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    tick: function(pixel) {
        if (Math.random() < 0.1) {
            if (isEmpty(pixel.x+1,pixel.y) && isEmpty(pixel.x-1,pixel.y)) {
                createPixel("unhusked_rice",pixel.x+1,pixel.y);
                createPixel("unhusked_rice",pixel.x-1,pixel.y);
            }
            if (isEmpty(pixel.x+1,pixel.y+1) && isEmpty(pixel.x-1,pixel.y+1)) {
                createPixel("unhusked_rice",pixel.x+1,pixel.y+1);
                createPixel("unhusked_rice",pixel.x-1,pixel.y+1);
            }
            if (isEmpty(pixel.x,pixel.y-1)) {
                createPixel("unhusked_rice",pixel.x,pixel.y-1);
            }
        }
    },
    state: "solid",
    density: 1050,
    hidden: true,
    
}

elements.rice_flour = {
    color: "#f7f1df",
    behavior: behaviors.POWDER,
    reactions: {
        "water": { elem1: "mochi_dough", elem2: null },
        "salt_water": { elem1: "mochi_dough", elem2: null },
        "sugar_water": { elem1: "mochi_dough", elem2: null },
        "seltzer": { elem1: "mochi_dough", elem2: null },
        "yolk": { elem1: "batter", elem2: null },
        "yogurt": { elem1: "batter", elem2: null },
        "milk": { elem1:"dough", elem2:null },
        "cream": { elem1:"dough", elem2:null },
    },
    category: "food",
    tempHigh: 400,
    stateHigh: "fire",
    burn:40,
    burnTime:25,
    state: "solid",
    density: 600,
    isFood: true
},
elements.mochi_dough = {
    color: "#ebddae",
    behavior: behaviors.STURDYPOWDER,
    onMix: function(dough,ingredient) {
        if (elements[ingredient.element].isFood && elements[ingredient.element].id !== elements.dough.id && elements[ingredient.element].id !== elements.flour.id && elements[ingredient.element].id !== elements.batter.id && elements[ingredient.element].id !== elements.bread.id) {
            var rgb1 = dough.color.match(/\d+/g);
            var rgb2 = ingredient.color.match(/\d+/g);
            // average the colors
            var rgb = [
                Math.round((parseInt(rgb1[0])*10+parseInt(rgb2[0]))/11),
                Math.round((parseInt(rgb1[1])*10+parseInt(rgb2[1]))/11),
                Math.round((parseInt(rgb1[2])*10+parseInt(rgb2[2]))/11)
            ];
            // convert rgb to hex
            var hex = RGBToHex(rgb);
            dough.color = pixelColorPick(dough, hex);
        }
    },
    category: "food",
    tempHigh: 94,
    stateHigh: "mochi",
    //stateHighColorMultiplier: 0.9,
    burn:40,
    burnTime:25,
    burnInto:"ash",
    state: "solid",
    density: 526.9,
    isFood: true,
    hidden:true
},
elements.mochi = {
    color: "#f2e2a7",
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 400,
    stateHigh: ["ash","steam"],
    category: "food",
    burn: 30,
    burnTime: 200,
    burnInto: ["smoke","smoke","smoke","ash"],
    state: "solid",
    density: 233.96,
    isFood: true
},
elements.monosodium_glutamate = {
    color: "#eeeeee",
    behavior: behaviors.POWDER,
    reactions: {
        "ice": { elem1:null, elem2:"salt_water", chance:0.1 },
        "rime": { elem1:null, elem2:"salt_water", chance:0.075 },
        "snow": { elem1:null, elem2:"salt_water", chance:0.25 },
        "packed_snow": { elem1:null, elem2:"salt_water", chance:0.05 },
        "packed_ice": { elem1:null, elem2:"salt_water", chance:0.01 },
        "water": { elem2: "salt_water", elem1: null, temp2:-20 },
    },
    category: "food",
    tempHigh: 801,
    state: "solid",
    density: 2160,
    alias: "msg",
}
elements.seaweed_spore = {
    color: "#291f13",
    tick: function(pixel) {
        pixel.age++;
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else if (!isEmpty(pixel.x,pixel.y+1)){
            if (!outOfBounds(pixel.x,pixel.y+1)) {
                if (pixelMap[pixel.x][pixel.y+1].element === "water"){
                    swapPixels(pixel,pixelMap[pixel.x][pixel.y+1])
                }
            }
        }
        if (!outOfBounds(pixel.x,pixel.y+1)) {
            if (!isEmpty(pixel.x,pixel.y+1)){
                var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                    changePixel(dirtPixel,"root");
                    pixel.rooted = true
                }
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rooted == true) {
            if(!isEmpty(pixel.x,pixel.y-1)){
                if(pixelMap[pixel.x][pixel.y-1].element === "water"){
                    //swapPixels(pixel,pixelMap[pixel.x][pixel.y-1])
                    //changePixel("seaweed_stem",pixel.x,pixel.y+1)
                    deletePixel(pixel.x,pixel.y-1)
                    movePixel(pixel,pixel.x,pixel.y-1)
                    createPixel("seaweed_stem",pixel.x,pixel.y+1)
                    if (!isEmpty(pixel.x-1,pixel.y+1) && !isEmpty(pixel.x-1,pixel.y) && !isEmpty(pixel.x+1,pixel.y) && Math.random() < 0.5){
                        if (pixelMap[pixel.x-1][pixel.y].element === "water" && pixelMap[pixel.x+1][pixel.y].element === "water" && pixelMap[pixel.x-1][pixel.y+1].element != "seaweed") {
                            deletePixel(pixel.x-1,pixel.y)
                            createPixel("seaweed",pixel.x-1,pixel.y)
                            deletePixel(pixel.x+1,pixel.y)
                            createPixel("seaweed",pixel.x+1,pixel.y)
                        }
                    }
                }
            }
            if (pixel.age > 500 || isEmpty(pixel.x,pixel.y-1)) {
                changePixel(pixel,"seaweed");
            }
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0,
        "rooted":false,
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 2500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};
elements.seaweed_stem = {
    color: "#35702c",
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
        "alcohol": { elem1:"agar", elem2:null, chance:0.035 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dried_seaweed",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
}
elements.seaweed = {
    color: ["#2e8021","#3e9031","#4ea041"],
    behavior: [
        "XX|XX|XX",
        "ST:seaweed_stem|XX|ST:seaweed_stem",
        "XX|M1|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
        "alcohol": { elem1:"agar", elem2:null, chance:0.035 },
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dried_seaweed",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 997,
}
elements.dried_seaweed = {
    color: ["#142e13","#041e03"],
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 400,
    stateHigh: "fire",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
}
elements.grape_vine = {
    color: "#427a33",
    behavior: [
        "ST:wood|ST:wood|ST:wood",
        "ST:wood AND CR:grape%0.02|XX|ST:wood AND CR:grape%0.02",
        "ST:wood|ST:wood AND M1|ST:wood",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
        "carbon_dioxide": { elem2:"oxygen", chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    breakInto: "dead_plant"
}
elements.grape_seed = {
    color: "#7a6033",
    tick: function(pixel) {
            if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    if (!isEmpty(pixel.x+1,pixel.y-1) || !isEmpty(pixel.x-1,pixel.y-1)) {
                        movePixel(pixel,pixel.x,pixel.y-1);
                        createPixel("grape_vine",pixel.x,pixel.y+1);
                    }
                }
                if (!isEmpty(pixel.x+2,pixel.y-1) && isEmpty(pixel.x+1,pixel.y-1)) {
                    movePixel(pixel,pixel.x+1,pixel.y-1);
                    createPixel("grape_vine",pixel.x-1,pixel.y+1);
                }
                if (!isEmpty(pixel.x-2,pixel.y-1) && isEmpty(pixel.x-1,pixel.y-1)) {
                    movePixel(pixel,pixel.x-1,pixel.y-1);
                    createPixel("grape_vine",pixel.x+1,pixel.y+1);
                }
                if (!isEmpty(pixel.x,pixel.y-1) && !isEmpty(pixel.x+1,pixel.y) && isEmpty(pixel.x+1,pixel.y-1)) {
                    movePixel(pixel,pixel.x+1,pixel.y-1);
                    createPixel("grape_vine",pixel.x-1,pixel.y+1);
                }
                if (!isEmpty(pixel.x,pixel.y-1) && !isEmpty(pixel.x-1,pixel.y) && isEmpty(pixel.x-1,pixel.y-1)) {
                    movePixel(pixel,pixel.x-1,pixel.y-1);
                    createPixel("grape_vine",pixel.x+1,pixel.y+1);
                }
            }
            else if (pixel.age > 400 && Math.random() < 0.1) {
                changePixel(pixel,"grape_vine");
            }
            pixel.age++;
        doDefaults(pixel);
    },
    properties: {
        "age":0,
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "ST:wood,grape_vine|ST:wood,grape_vine|ST:wood,grape_vine",
        "ST:wood,grape_vine|XX|ST:wood,grape_vine",
        "ST:wood,grape_vine|M1|ST:wood,grape_vine",
    ],
};
elements.grape.behavior = [
    "ST:grape_vine%95|ST:grape_vine%95|ST:grape_vine%95",
    "ST:grape_vine%95|XX|ST:grape_vine%95",
    "M2 AND ST:grape_vine%95|M1|M2 AND ST:grape_vine%95",
]
elements.tomato_vine = {
    color: "#2e7d1d",
    behavior: [
        "ST:wood|ST:wood|ST:wood",
        "ST:wood AND CR:tomato%0.02|XX|ST:wood AND CR:tomato%0.02",
        "ST:wood|ST:wood AND M1|ST:wood",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
        "carbon_dioxide": { elem2:"oxygen", chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    breakInto: "dead_plant"
}
elements.tomato_seed = {
    color: "#945d26",
    tick: function(pixel) {
            if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    if (!isEmpty(pixel.x+1,pixel.y-1) || !isEmpty(pixel.x-1,pixel.y-1)) {
                        movePixel(pixel,pixel.x,pixel.y-1);
                        createPixel("tomato_vine",pixel.x,pixel.y+1);
                    }
                }
                if (!isEmpty(pixel.x+2,pixel.y-1) && isEmpty(pixel.x+1,pixel.y-1)) {
                    movePixel(pixel,pixel.x+1,pixel.y-1);
                    createPixel("tomato_vine",pixel.x-1,pixel.y+1);
                }
                if (!isEmpty(pixel.x-2,pixel.y-1) && isEmpty(pixel.x-1,pixel.y-1)) {
                    movePixel(pixel,pixel.x-1,pixel.y-1);
                    createPixel("tomato_vine",pixel.x+1,pixel.y+1);
                }
                if (!isEmpty(pixel.x,pixel.y-1) && !isEmpty(pixel.x+1,pixel.y) && isEmpty(pixel.x+1,pixel.y-1)) {
                    movePixel(pixel,pixel.x+1,pixel.y-1);
                    createPixel("tomato_vine",pixel.x-1,pixel.y+1);
                }
                if (!isEmpty(pixel.x,pixel.y-1) && !isEmpty(pixel.x-1,pixel.y) && isEmpty(pixel.x-1,pixel.y-1)) {
                    movePixel(pixel,pixel.x-1,pixel.y-1);
                    createPixel("tomato_vine",pixel.x+1,pixel.y+1);
                }
            }
            else if (pixel.age > 400 && Math.random() < 0.1) {
                changePixel(pixel,"tomato_vine");
            }
            pixel.age++;
        doDefaults(pixel);
    },
    properties: {
        "age":0,
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "ST:wood,tomato_vine|ST:wood,tomato_vine|ST:wood,tomato_vine",
        "ST:wood,tomato_vine|XX|ST:wood,tomato_vine",
        "ST:wood,tomato_vine|M1|ST:wood,tomato_vine",
    ],
};
elements.tomato.behavior = [
    "ST:tomato_vine%95|ST:tomato_vine%95|ST:tomato_vine%95",
    "ST:tomato_vine%95|XX|ST:tomato_vine%95",
    "ST:tomato_vine%95|M1|ST:tomato_vine%95",
]
elements.peppermint_stem = {
    color: "#2c9c3a",
    behavior: behaviors.WALL,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
        "carbon_dioxide": { elem2:"oxygen", chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    cutInto:"peppermint",
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    breakInto: "dead_plant",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1) && pixel.grower == false && pixel.leafgrower == false) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        if (pixel.grower == true) {
            // set limit to 3 + rounded math.random inside the function
            // check if left side has stem if no set direction to right
            if (!isEmpty(pixel.x-1,pixel.y) && pixel.direction == "undefined") {
                if (pixelMap[pixel.x-1][pixel.y].element == "peppermint_stem") {
                    pixel.direction = "right";
                    pixel.limit = 3+Math.round(Math.random());
                }
            }
            // same thing to set direction the left
            else if (!isEmpty(pixel.x+1,pixel.y) && pixel.direction == "undefined") {
                if (pixelMap[pixel.x+1][pixel.y].element == "peppermint_stem") {
                    pixel.direction = "left";
                    pixel.limit = 3+Math.round(Math.random());
                }
            }
        }
        if (pixel.grower == true && pixel.limit > 0) {
            // left
            if (pixel.direction == "left") {
                if (isEmpty(pixel.x-1,pixel.y-1) && Math.random() < 0.1) {
                    createPixel("peppermint_leaves",pixel.x-1,pixel.y-1);
                    if (isEmpty(pixel.x-2,pixel.y-2) && Math.random() < 0.2) {
                        createPixel("peppermint_leaves",pixel.x-2,pixel.y-2);
                        if (isEmpty(pixel.x-3,pixel.y-3) && Math.random() < 0.4) {
                            createPixel("peppermint_leaves",pixel.x-3,pixel.y-3);
                            if (isEmpty(pixel.x-4,pixel.y-4) && Math.random() < 0.75 && pixel.limit == 4) {
                                createPixel("peppermint_leaves",pixel.x-4,pixel.y-4);
                            }
                        }
                    }
                }
            }
            // right
            else if (pixel.direction == "right") {
                if (isEmpty(pixel.x+1,pixel.y-1) && Math.random() < 0.1) {
                    createPixel("peppermint_leaves",pixel.x+1,pixel.y-1);
                    if (isEmpty(pixel.x+2,pixel.y-2) && Math.random() < 0.2) {
                        createPixel("peppermint_leaves",pixel.x+2,pixel.y-2);
                        if (isEmpty(pixel.x+3,pixel.y-3) && Math.random() < 0.4) {
                            createPixel("peppermint_leaves",pixel.x+3,pixel.y-3);
                            if (isEmpty(pixel.x+4,pixel.y-4) && Math.random() < 0.75 && pixel.limit == 4) {
                                createPixel("peppermint_leaves",pixel.x+4,pixel.y-4);
                            }
                        }
                    }
                }
            }
        }
        pixel.age++;
        doDefaults(pixel);
    },
    properties: {
        "grower":false,
        "age":0,
        "direction":"undefined",
        "limit":0
    }
}
elements.peppermint_leaves = {
    color: "#36a845",
    reactions: {
        "water": { elem2:"peppermint_tea", tempMin:80 },
        "salt_water": { elem2:"peppermint_tea", tempMin:80 },
        "sugar_water": { elem2:"peppermint_tea", tempMin:80 },
        "seltzer": { elem2:"peppermint_tea", tempMin:80 },
        "stench": { elem2:null, chance:0.25 },
        "steam": { elem2:"fragrance", chance:0.1 },
        "flea": { elem2:null, chance:0.01 },
        "termite": { elem2:null, chance:0.01 },
        "fly": { elem2:null, chance:0.01 },
        "ant": { elem2:null, chance:0.01 },
        "stink_bug": { elem2:null, chance:0.01 },
        "yeast": {elem1:"tea", chance:0.01},
        "ice_cream": {elem1:null,color2:"#94e067",chance:0.3}
    },
    behavior: behaviors.WALL,
    tempHigh: 300,
    stateHigh: ["fire","smoke","smoke","smoke","ash"],
    tempLow: -2,
    stateLow: "frozen_plant",
    burn:10,
    burnTime:300,
    burnInto: ["fire","smoke","smoke","smoke","smoke","smoke","smoke","fragrance"],
    category:"food",
    state: "solid",
    density: 1400,
    isFood: true,
    cutInto: "peppermint"
},
elements.peppermint_seed = {
    color: "#6b5f4c",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel("peppermint_stem",pixel.x,pixel.y+1);
                    pixel.height++;
                }
                if (pixel.height < 12 && pixel.height > 2 && pixel.height == 3) {
                    if (isEmpty(pixel.x+1,pixel.y)) {
                        createPixel("peppermint_stem",pixel.x+1,pixel.y);
                        pixelMap[pixel.x+1][pixel.y].grower = true;
                    }
                }
                if (pixel.height < 12 && pixel.height > 2 && pixel.height == 9) {
                    if (isEmpty(pixel.x+1,pixel.y)) {
                        createPixel("peppermint_stem",pixel.x+1,pixel.y);
                        pixelMap[pixel.x+1][pixel.y].grower = true;
                    }
                }
                if (pixel.height < 12 && pixel.height > 2 && pixel.height == 6) {
                    if (isEmpty(pixel.x-1,pixel.y)) {
                        createPixel("peppermint_stem",pixel.x-1,pixel.y);
                        pixelMap[pixel.x-1][pixel.y].grower = true;
                    }
                }
                if (pixel.height > 11) {
                    if (isEmpty(pixel.x-1,pixel.y) && isEmpty(pixel.x+1,pixel.y)) {
                        createPixel("peppermint_stem",pixel.x-1,pixel.y);
                        pixelMap[pixel.x-1][pixel.y].grower = true;
                        createPixel("peppermint_stem",pixel.x+1,pixel.y);
                        pixelMap[pixel.x+1][pixel.y].grower = true;
                        deletePixel(pixel.x,pixel.y);
                    }
                }
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0,
        "height":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};
elements.peppermint_tea = {
    color: "#687d1d",
    behavior: behaviors.LIQUID,
    reactions: {
        "stench": { elem2:null },
        "flea": { elem2:null, chance:0.01 },
        "oxygen": { elem2:"fragrance", chance:0.01 },
        "infection": { elem2:"blood", chance:0.005 },
        "plague": { elem2:null, chance:0.004 },
        "sugar": { elem2:null, color1:"#8f5a21", chance:0.005},
        "honey": { elem2:null, color1:"#8f5a21", chance:0.005},
        "milk": { elem2:null, color1:"#9c6c38", chance:0.005},
        "cream": { elem2:null, color1:"#9c6c38", chance:0.005},
        "ice_cream": { elem2:null, color1:"#9c6c38", chance:0.005},
        "honey": {color1:"#8d8f27",elem2:null,chance:0.3},
        "lemon_juice": {color1:"#8d8f27",elem2:null,chance:0.3},
        "lemonade": {color1:"#8d8f27",elem2:null,chance:0.3},
        "sugar": {color1:"#83963e",elem2:null,chance:0.3}
    },
    tempHigh: 125,
    stateHigh: ["steam","fragrance",null],
    temp: 50,
    tempLow: 0,
    category:"liquids",
    state: "liquid",
    density: 1001,
    stain: -0.1,
    hidden: true,
    isFood: true
}
elements.peppermint = {
    color: ["#64a135","#559425"],
    reactions: {
        "water": { elem2:"peppermint_tea", tempMin:80 },
        "salt_water": { elem2:"peppermint_tea", tempMin:80 },
        "sugar_water": { elem2:"peppermint_tea", tempMin:80 },
        "seltzer": { elem2:"peppermint_tea", tempMin:80 },
        "stench": { elem2:null, chance:0.25 },
        "steam": { elem2:"fragrance", chance:0.1 },
        "flea": { elem2:null, chance:0.01 },
        "termite": { elem2:null, chance:0.01 },
        "fly": { elem2:null, chance:0.01 },
        "ant": { elem2:null, chance:0.01 },
        "stink_bug": { elem2:null, chance:0.01 },
        "ice_cream": {elem1:null,color2:"#94e067",chance:0.3},
    },
    behavior: behaviors.POWDER,
    tempHigh: 300,
    stateHigh: ["fire","smoke","smoke","smoke","ash"],
    burn:10,
    burnTime:300,
    burnInto: ["fire","smoke","smoke","smoke","smoke","smoke","smoke","fragrance"],
    category:"food",
    state: "solid",
    density: 1400,
    isFood: true,
}
//elements.candy.reactions.peppermint = {color1:["eeeddc","f5f267"],elem2:null,chance:3}
elements.vanilla_stem = {
    color: "#5d9c48",
    behavior: behaviors.WALL,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
        "carbon_dioxide": { elem2:"oxygen", chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true,
    breakInto: "dead_plant",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1) && pixel.grower == false && pixel.leafgrower == false) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        if (pixel.grower == true) {
            // check if left side has stem if no set direction to right
            if (!isEmpty(pixel.x-1,pixel.y) && pixel.direction == "undefined") {
                if (pixelMap[pixel.x-1][pixel.y].element == "vanilla_stem") {
                    pixel.direction = "right";
                }
            }
            // same thing to set direction the left
            else if (!isEmpty(pixel.x+1,pixel.y) && pixel.direction == "undefined") {
                if (pixelMap[pixel.x+1][pixel.y].element == "vanilla_stem") {
                    pixel.direction = "left";
                }
            }
        }
        if (pixel.grower == true) {
            // left
            if (pixel.direction == "left") {
                if (isEmpty(pixel.x-1,pixel.y-1) && Math.random() < 0.1) {
                    createPixel("vanilla_leaves",pixel.x-1,pixel.y-1);
                    if (isEmpty(pixel.x-2,pixel.y-2) && Math.random() < 0.2) {
                        createPixel("vanilla_leaves",pixel.x-2,pixel.y-2);
                        if (isEmpty(pixel.x-3,pixel.y-3) && Math.random() < 0.4) {
                            createPixel("vanilla_leaves",pixel.x-3,pixel.y-3);
                        }
                    }
                }
            }
            // right
            else if (pixel.direction == "right") {
                if (isEmpty(pixel.x+1,pixel.y-1) && Math.random() < 0.1) {
                    createPixel("vanilla_leaves",pixel.x+1,pixel.y-1);
                    if (isEmpty(pixel.x+2,pixel.y-2) && Math.random() < 0.2) {
                        createPixel("vanilla_leaves",pixel.x+2,pixel.y-2);
                        if (isEmpty(pixel.x+3,pixel.y-3) && Math.random() < 0.4) {
                            createPixel("vanilla_leaves",pixel.x+3,pixel.y-3);
                        }
                    }
                }
            }
        }
        pixel.age++;
        doDefaults(pixel);
    },
    properties: {
        "grower":false,
        "age":0,
        "direction":"undefined",
    }
}
elements.vanilla_leaves = {
    color: "#5d9c48",
    reactions: {
        "stench": { elem2:null, chance:0.25 },
        "steam": { elem2:"fragrance", chance:0.1 },
        "flea": { elem2:null, chance:0.01 },
        "termite": { elem2:null, chance:0.01 },
        "fly": { elem2:null, chance:0.01 },
        "ant": { elem2:null, chance:0.01 },
        "stink_bug": { elem2:null, chance:0.01 },
        "yeast": {elem1:"tea", chance:0.01},
    },
    tick: function(pixel) {
        if (isEmpty(pixel.x-1,pixel.y-1) && !isEmpty(pixel.x+1,pixel.y+1) && Math.random() < 0.03) {
            createPixel("vanilla_flower",pixel.x-1,pixel.y-1);
        }
        if (isEmpty(pixel.x+1,pixel.y-1) && !isEmpty(pixel.x-1,pixel.y+1) && Math.random() < 0.03) {
            createPixel("vanilla_flower",pixel.x+1,pixel.y-1);
        }
        pixel.age++;
        doDefaults(pixel);
    },
    behavior: behaviors.WALL,
    tempHigh: 300,
    stateHigh: ["fire","smoke","smoke","smoke","ash"],
    tempLow: -2,
    stateLow: "frozen_plant",
    burn:10,
    burnTime:300,
    burnInto: ["fire","smoke","smoke","smoke","smoke","smoke","smoke","fragrance"],
    category:"life",
    state: "solid",
    density: 1400,
    isFood: true,
    hidden:true
},
elements.vanilla_seed = {
    color: "#806d3b",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel("vanilla_stem",pixel.x,pixel.y+1);
                    pixel.height++;
                }
                if (pixel.height < 12 && pixel.height > 2 && pixel.height == 3) {
                    if (isEmpty(pixel.x+1,pixel.y)) {
                        createPixel("vanilla_stem",pixel.x+1,pixel.y);
                        pixelMap[pixel.x+1][pixel.y].grower = true;
                    }
                }
                if (pixel.height < 12 && pixel.height > 2 && pixel.height == 9) {
                    if (isEmpty(pixel.x+1,pixel.y)) {
                        createPixel("vanilla_stem",pixel.x+1,pixel.y);
                        pixelMap[pixel.x+1][pixel.y].grower = true;
                    }
                }
                if (pixel.height < 12 && pixel.height > 2 && pixel.height == 6) {
                    if (isEmpty(pixel.x-1,pixel.y)) {
                        createPixel("vanilla_stem",pixel.x-1,pixel.y);
                        pixelMap[pixel.x-1][pixel.y].grower = true;
                    }
                }
                if (pixel.height > 11) {
                    if (isEmpty(pixel.x-1,pixel.y) && isEmpty(pixel.x+1,pixel.y)) {
                        createPixel("vanilla_stem",pixel.x-1,pixel.y);
                        pixelMap[pixel.x-1][pixel.y].grower = true;
                        createPixel("vanilla_stem",pixel.x+1,pixel.y);
                        pixelMap[pixel.x+1][pixel.y].grower = true;
                        deletePixel(pixel.x,pixel.y);
                    }
                }
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0,
        "height":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};
elements.vanilla_flower = {
    color: "#f7f4e1",
    behavior: behaviors.WALL,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    tick: function(pixel) {
        if (pixel.age > 175 && pixel.pod == true) {
            changePixel(pixel,"vanilla_pod")
        }
        if (isEmpty(pixel.x,pixel.y+1) && Math.random() < 0.03 && pixel.pod == false && pixel.harvested == false) {
            createPixel("vanilla_flower",pixel.x,pixel.y+1);
            pixelMap[pixel.x][pixel.y+1].pod = true;
            if (Math.random < 0.5) {
                pixel.harvested = true;
            }
        }
        pixel.age++
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    properties: {
        "age":0,
        "pod":false,
        "harvested":false,
    }
}

elements.vanilla_pod = {
    color: "#36281d",
    behavior: [
        "XX|ST:vanilla_flower|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
    reactions: {
        "alcohol": { elem1:"vanilla_essence", elem2:null, chance:0.035 },
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
}
elements.ice_cream.reactions = {}
elements.ice_cream.reactions.vanilla_essence = {color1:"#fff7b6", elem2:null, chance:0.35}
elements.vanilla_essence = {
    color: "#9c7211",
    behavior: behaviors.LIQUID,
    tempHigh: 170,
    stateHigh: ["sugar","smoke","smoke"],
    tempLow: 0,
    category:"liquids",
    state: "liquid",
    density: 1400,
}

elements.candy.reactions = {}
elements.candy.reactions.peppermint = {elem1:"peppermint_candy", elem2:null, chance:0.35}
elements.peppermint_candy = {
    color: ["#fa5e3e","#fff5f5"],
    behavior: behaviors.WALL,
    tempHigh: 204.44,
    stateHigh: "smoke",
    category: "food",
    state: "solid",
    density: 850,
    isFood: true
}
elements.tapioca = {
    color: "#ded58e",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2 AND CH:dirt,mud,sand,wet_sand,clay_soil,clay,mycelium,grass,color_sand>tapioca,fiber%0.5|M1 AND CH:dirt,mud,sand,wet_sand,clay_soil,clay,mycelium,grass,color_sand>tapioca,fiber,fiber%0.5|M2 AND CH:dirt,mud,sand,wet_sand,clay_soil,clay,mycelium,grass,color_sand>tapioca,fiber%0.5",
    ],
    tempHigh: 275,
    stateHigh: "dirt",
    tempLow: -50,
    stateLow: "fiber",
    burn: 20,
    burnTime: 60,
    burnInto: "dirt",
    breakInto: "corn_starch",
    category: "food",
    state: "solid",
    density: 1250,
    conduct: 0.1,
    hidden: true,
    darkText: true,
    desc:'a wise icyking once said: \'state:"burn 100"\'',
    alias:["element that i made before icyking","burn 100 element"]
}

elements.tapioca_seed = {
    color: "#a78d38",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"tapioca");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel("tapioca_stem",pixel.x,pixel.y+1);
                }
                if (isEmpty(pixel.x+1,pixel.y) && Math.random() < 0.2) {
                    createPixel("tapioca_leaves",pixel.x+1,pixel.y);
                }
                if (isEmpty(pixel.x-1,pixel.y) && Math.random() < 0.2) {
                    createPixel("tapioca_leaves",pixel.x-1,pixel.y);
                }
            }
            else if (pixel.age > 250) {
                changePixel(pixel,"tapioca_leaves");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};

elements.tapioca_stem = {
    color: "#358f35",
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050
}
elements.tapioca_leaves = {
    color: "#3e823e",
    behavior: behaviors.WALL,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
        "carbon_dioxide": { elem2:"oxygen", chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050
}
elements.sprinkle_bomb = {
    color: ["#eb726a", "#ebca6a", "#88eb6a", "#6aaceb", "#eb6ade"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1 AND EX:10>sprinkles|XX",
    ],
    category: "food",
    state: "solid",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
}

elements.chilli_stem = {
    color: "#5d9c48",
    behavior: behaviors.WALL,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
        "carbon_dioxide": { elem2:"oxygen", chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true,
    breakInto: "herb",
    breakIntoColor:"#245c1b",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1) && pixel.grower == false && pixel.leafgrower == false) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        if (pixel.grower == true) {
            // check if left side has stem if no set direction to right
            if (!isEmpty(pixel.x-1,pixel.y) && pixel.direction == "undefined") {
                if (pixelMap[pixel.x-1][pixel.y].element == "chilli_stem") {
                    pixel.direction = "right";
                }
            }
            // same thing to set direction the left
            else if (!isEmpty(pixel.x+1,pixel.y) && pixel.direction == "undefined") {
                if (pixelMap[pixel.x+1][pixel.y].element == "chilli_stem") {
                    pixel.direction = "left";
                }
            }
        }
        if (pixel.grower == true) {
            // left
            if (pixel.direction == "left") {
                if (isEmpty(pixel.x-1,pixel.y-1) && Math.random() < 0.1) {
                    createPixel("chilli_leaves",pixel.x-1,pixel.y-1);
                    if (isEmpty(pixel.x-2,pixel.y-2) && Math.random() < 0.2) {
                        createPixel("chilli_leaves",pixel.x-2,pixel.y-2);
                        if (isEmpty(pixel.x-3,pixel.y-3) && Math.random() < 0.4) {
                            createPixel("chilli_leaves",pixel.x-3,pixel.y-3);
                        }
                    }
                }
            }
            // right
            else if (pixel.direction == "right") {
                if (isEmpty(pixel.x+1,pixel.y-1) && Math.random() < 0.1) {
                    createPixel("chilli_leaves",pixel.x+1,pixel.y-1);
                    if (isEmpty(pixel.x+2,pixel.y-2) && Math.random() < 0.2) {
                        createPixel("chilli_leaves",pixel.x+2,pixel.y-2);
                        if (isEmpty(pixel.x+3,pixel.y-3) && Math.random() < 0.4) {
                            createPixel("chilli_leaves",pixel.x+3,pixel.y-3);
                        }
                    }
                }
            }
        }
        pixel.age++;
        doDefaults(pixel);
    },
    properties: {
        "grower":false,
        "age":0,
        "direction":"undefined",
    }
}
elements.chilli_leaves = {
    color: "#5d9c48",
    reactions: {
        "water": { elem2:"chilli_tea", tempMin:80 },
        "salt_water": { elem2:"chilli_tea", tempMin:80 },
        "sugar_water": { elem2:"chilli_tea", tempMin:80 },
        "seltzer": { elem2:"chilli_tea", tempMin:80 },
        "stench": { elem2:null, chance:0.25 },
        "steam": { elem2:"fragrance", chance:0.1 },
        "flea": { elem2:null, chance:0.01 },
        "termite": { elem2:null, chance:0.01 },
        "fly": { elem2:null, chance:0.01 },
        "ant": { elem2:null, chance:0.01 },
        "stink_bug": { elem2:null, chance:0.01 },
        "yeast": {elem1:"tea", chance:0.01},
    },
    tick: function(pixel) {
        if (isEmpty(pixel.x-1,pixel.y-1) && !isEmpty(pixel.x+1,pixel.y+1) && Math.random() < 0.03) {
            createPixel("chilli",pixel.x-1,pixel.y-1);
        }
        if (isEmpty(pixel.x+1,pixel.y-1) && !isEmpty(pixel.x-1,pixel.y+1) && Math.random() < 0.03) {
            createPixel("chilli",pixel.x+1,pixel.y-1);
        }
        pixel.age++;
        doDefaults(pixel);
    },
    behavior: behaviors.WALL,
    tempHigh: 300,
    stateHigh: ["fire","smoke","smoke","smoke","ash"],
    tempLow: -2,
    stateLow: "frozen_plant",
    burn:10,
    burnTime:300,
    burnInto: ["fire","smoke","smoke","smoke","smoke","smoke","smoke","fragrance"],
    category:"life",
    state: "solid",
    density: 1400,
    isFood: true,
    hidden:true,
    breakInto: "herb",
    breakIntoColor:"#245c1b",
},
elements.chilli_seed = {
    color: "#806d3b",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel("chilli_stem",pixel.x,pixel.y+1);
                    pixel.height++;
                }
                if (pixel.height < 12 && pixel.height > 2 && pixel.height == 3) {
                    if (isEmpty(pixel.x+1,pixel.y)) {
                        createPixel("chilli_stem",pixel.x+1,pixel.y);
                        pixelMap[pixel.x+1][pixel.y].grower = true;
                    }
                }
                if (pixel.height < 12 && pixel.height > 2 && pixel.height == 9) {
                    if (isEmpty(pixel.x+1,pixel.y)) {
                        createPixel("chilli_stem",pixel.x+1,pixel.y);
                        pixelMap[pixel.x+1][pixel.y].grower = true;
                    }
                }
                if (pixel.height < 12 && pixel.height > 2 && pixel.height == 6) {
                    if (isEmpty(pixel.x-1,pixel.y)) {
                        createPixel("chilli_stem",pixel.x-1,pixel.y);
                        pixelMap[pixel.x-1][pixel.y].grower = true;
                    }
                }
                if (pixel.height > 11) {
                    if (isEmpty(pixel.x-1,pixel.y) && isEmpty(pixel.x+1,pixel.y)) {
                        createPixel("chilli_stem",pixel.x-1,pixel.y);
                        pixelMap[pixel.x-1][pixel.y].grower = true;
                        createPixel("chilli_stem",pixel.x+1,pixel.y);
                        pixelMap[pixel.x+1][pixel.y].grower = true;
                        deletePixel(pixel.x,pixel.y);
                    }
                }
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0,
        "height":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};
elements.chilli = {
    color: "#ba3030",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "ST:chilli_leaves|M1|ST:chilli_leaves",
    ],
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    breakInto: "chilli_powder",
    reactions: {
	"sauce": {elem1:null, elem2:"hot_sauce", chance:2}
    },
}
elements.chilli_powder = {
    color: "#a32121",
    reactions: {
        "stench": { elem2:null, chance:0.25 },
        "steam": { elem2:"fragrance", chance:0.1 },
        "flea": { elem2:null, chance:0.01 },
        "termite": { elem2:null, chance:0.01 },
        "fly": { elem2:null, chance:0.01 },
        "ant": { elem2:null, chance:0.01 },
        "stink_bug": { elem2:null, chance:0.01 },
	"sauce": {elem1:null, elem2:"hot_sauce", chance:2}
    },
    behavior: behaviors.POWDER,
    tempHigh: 300,
    stateHigh: ["fire","smoke","smoke","smoke","ash"],
    burn:10,
    burnTime:300,
    burnInto: ["fire","smoke","smoke","smoke","smoke","smoke","smoke","fragrance"],
    category:"food",
    state: "solid",
    density: 1400,
    isFood: true,
}
elements.hot_sauce = {
    color: "#a31414",
    behavior: behaviors.LIQUID,
    reactions: {
        "stench": { elem2:null },
    },
    viscosity: 2600,
    tempHigh: 260,
    stateHigh: ["steam","salt","fragrance"],
    tempLow: -2,
    category:"food",
    state: "liquid",
    density: 1031.33,
    stain: 0.01,
    isFood: true
}
elements.head.reactions.hot_sauce = {elem2:["smoke","fire",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null], chance:3}


elements.durian_wood = {
    color: "#5e4b23",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
}
elements.durian_branch = {
    color: "#5e4b23",
    behavior: [
        "CR:durian_leaves,durian_branch%2|CR:durian_leaves,durian_branch%2|CR:durian_leaves,durian_branch%2",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tempHigh: 100,
    stateHigh: "durian_wood",
    tempLow: -30,
    stateLow: "durian_wood",
    category: "life",
    burn: 40,
    burnTime: 50,
    burnInto: ["sap","ember","charcoal"],
    hidden: true,
    state: "solid",
    density: 1500,
    hardness: 0.15,
    breakInto: ["sap","sawdust"],
}
elements.durian_leaves = {
    color: ["#326b25","#2e751e"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|CR:durian%0.1|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
}
elements.durian = {
    color: ["#578524","#5b8f1f"],
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    cutInto: "cut_durian",
    state: "solid",
    density: 1050,
    breakInto: "durian_juice"
}

elements.cut_durian = {
    color: ["#e3e04b","#d1cf36"],
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    state: "solid",
    density: 1050,
    hidden: true,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#a19f3b",
    breakInto: "durian_juice"
}

elements.durian_seed = {
    color: "#a17d3b",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "durian_wood" : "durian_branch",pixel.x,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"durian_wood");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};

elements.durian_juice = {
    color: "#ebe06e",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#ebe06e")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    hidden: true,
    tempLow: 0,
};
//---------------------------------------------------"durian_juice");
elements.egg_white = {
    color: "#edece8",
    behavior: behaviors.LIQUID,
    tempHigh: 100,
    stateHigh: "hard_egg_white",
    tempLow: 0,
    stateLow: "hard_egg_white",
    category: "food",
    state: "liquid",
    density: 1027.5,
    viscosity: 270,
    isFood: true,
    whiskInto: "whisked_egg_white",
}
elements.hard_egg_white = {
    color: "#dedddc",
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 400,
    stateHigh: "smoke",
    category: "food",
    hidden: true,
    isFood: true,
    state: "solid",
    density: 1031
}
elements.milk.whiskInto = "cream";
elements.cream.whiskInto = "whipped_cream";
elements.egg.breakInto = ["egg_white","egg_white","yolk"]

elements.whisked_egg_white ={
    color: "#fefefe",
    behavior: behaviors.LIQUID,
    reactions: {
        "corn_syrup": { elem1: "marshmallow", elem2: null, chance: 2 },
        "sugar": { elem1: "marshmallow", elem2: null, chance: 2 },
    },
    viscosity: 1.5,
    tempHigh: 1000,
    stateHigh: ["smoke","steam"],
    category: "food",
    hidden: true,
    isFood: true,
    state: "liquid",
    density: 959.97,
}
elements.marshmallow = {
    color: "#fafafa",
    behavior: [
        "XX|XX|XX",
        "ST:wood|XX|ST:wood",
        "XX|M1|XX",
    ],
    viscosity: 1.5,
    tempHigh: 70,
    stateHigh: "cooked_marshmallow",
    category: "food",
    isFood: true,
    state: "solid",
    density: 959.97,
}
elements.cooked_marshmallow = {
    color: "#f0dbb6",
    behavior: [
        "XX|XX|XX",
        "ST:wood|XX|ST:wood",
        "XX|M1|XX",
    ],
    viscosity: 1.5,
    tempHigh: 150,
    stateHigh: "burnt_marshmallow",
    category: "food",
    isFood: true,
    state: "solid",
    density: 959.97,
    hidden:true
}
elements.burnt_marshmallow = {
    color: "#29231a",
    behavior: [
        "XX|XX|XX",
        "ST:wood|XX|ST:wood",
        "XX|M1|XX",
    ],
    viscosity: 1.5,
    tempHigh: 1000,
    stateHigh: ["steam","caramel"],
    category: "food",
    isFood: true,
    state: "solid",
    density: 959.97,
    hidden:true
}
eLists.FOODCOLORINGIGNORE = ["glass", "porcelain", "wall","iron","steel","copper","silver","aluminum","tungsten","gold","plastic"];
elements.food_coloring = {
    color: ["#ff0000", "#ff8800", "#ffff00", "#00ff00", "#00ffff", "#0000ff", "#ff00ff"],
    behavior: behaviors.LIQUID,
    customColor: true,
    stain: 0.5,
    tempHigh: 100,
    stateHigh: "steam",
    category: "food",
    state: "liquid",
    density: 998,
    stainSelf: true,
    ignore: ["glass", "porcelain", "wall","iron","steel","copper","silver","aluminum","tungsten","gold","plastic"],
    desc: "coloring for food. color may fade when diluting with water.",
    onMix: function (pixel) {
        for (var i = 0; i < squareCoords.length; i++) {
            var coord = squareCoords[i];
            var x = pixel.x + coord[0];
            var y = pixel.y + coord[1];
            if (!isEmpty(x, y, true)) {
                if (pixelMap[x][y].element === "water" || pixelMap[x][y].element === "salt_water" || pixelMap[x][y].element === "sugar_water" || pixelMap[x][y].element === "seltzer" || pixelMap[x][y].element === "dirty_water" || pixelMap[x][y].element === "pool_water") {
                    changePixel(pixelMap[x][y], "food_coloring");
                    let newrgb = interpolateRgb(getRGB(pixel.color), getRGB(pixelMap[x][y].color), 0.5);
                    pixel.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
                    pixelMap[x][y].color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
                }
		    	else {
                    if (!outOfBounds(pixelMap[x][y])) {
                        if (!eLists.FOODCOLORINGIGNORE.includes(pixelMap[x][y].element) && pixelMap[x][y].element !== "glass" && pixelMap[x][y].element !== "porcelain" && pixelMap[x][y].element !== "wall" && pixelMap[x][y].element !== "plastic") {
                            let newrgb2 = interpolateRgb(getRGB(pixel.color), getRGB(pixelMap[x][y].color), 0.9);
                            pixelMap[x][y].color = `rgb(${parseInt(newrgb2.r)},${parseInt(newrgb2.g)},${parseInt(newrgb2.b)})`;
                            if (Math.random() < 0.002) {
                                deletePixel(pixel.x,pixel.y)
                            }
                        }
                    }
                }
            }
        }
    },
    onSelect: function () {
        logMessage("Tip: You can spread food coloring using water.");
    },
}

elements.cooked_meat.behavior = behaviors.SUPPORT;

elements.cake_batter = {
    color: "#d4bc85",
    behavior: behaviors.LIQUID,
    onMix: function(batter,ingredient) {
        if (elements[ingredient.element].isFood && elements[ingredient.element].id !== elements.batter.id && elements[ingredient.element].id !== elements.flour.id && elements[ingredient.element].id !== elements.yolk.id && elements[ingredient.element].id !== elements.dough.id && elements[ingredient.element].id !== elements.baked_batter.id && elements[ingredient.element].id !== elements.cake.id && elements[ingredient.element].id !== elements.cake_batter.id) {
            var rgb1 = batter.color.match(/\d+/g);
            var rgb2 = ingredient.color.match(/\d+/g);
            // average the colors
            var rgb = [
                Math.round((parseInt(rgb1[0])*10+parseInt(rgb2[0]))/11),
                Math.round((parseInt(rgb1[1])*10+parseInt(rgb2[1]))/11),
                Math.round((parseInt(rgb1[2])*10+parseInt(rgb2[2]))/11)
            ];
            // convert rgb to hex
            var hex = RGBToHex(rgb);
            batter.color = pixelColorPick(batter, hex);
            if ((elements[ingredient.element].density > elements.batter.density || shiftDown) && Math.random() < 0.05) {
                // 50% change to delete ingredient
                if (Math.random() < 0.5) { deletePixel(ingredient.x, ingredient.y); }
                else {
                    ingredient.color = pixelColorPick(ingredient, hex);
                }
            }
        }
    },
    reactions: {
        "cream": { elem2:"cake_batter", tempMin:40, chance:0.01 },
    },
    category: "food",
    tempHigh: 94,
    stateHigh: "cake",
    stateHighColorMultiplier: 0.9,
    burn:40,
    burnTime:25,
    burnInto:"ash",
    state: "liquid",
    viscosity: 10000,
    density: 1001,
    hidden: true,
    isFood: true
}
elements.batter.whiskInto = "cake_batter";
elements.milk.stateHigh = ["steam","steam","condensed_milk"];
elements.condensed_milk = {
    color: "#f2f0df",
    behavior: behaviors.LIQUID,
    reactions: {
        "cell": { elem1:"yogurt", chance:0.1 },
        "dirt": { elem1: null, elem2: "mud" },
        "sand": { elem1: null, elem2: "wet_sand" },
        "clay_soil": { elem1: null, elem2: "clay" },
        "caramel": { color1:"#C8B39A", elem2:null, chance:0.05 },
        "sugar": { color1:"#fffbf0", elem2:null, chance:0.5},
    },
    tempLow: 0,
    stateLow: "ice_cream",
    stateLowColorMultiplier: [0.97,0.93,0.87],
    tempHigh: 500,
    stateHigh: ["smoke","smoke","smoke","quicklime"],
    viscosity: 1500,
    category: "food",
    state: "liquid",
    density: 1036.86,
    isFood: true,
    alias: "evaporated_milk"
}
elements.wasabi = {
    color: ["#82b55b","#6cad50","#7dcc5c"],
    behavior: behaviors.STURDYPOWDER2,
    reactions: {
        "dirt": { elem1: null, elem2: "mud" },
        "sand": { elem1: null, elem2: "wet_sand" },
        "clay_soil": { elem1: null, elem2: "clay" },
        "melted_chocolate": { color1:"#664934", elem2:null },
        "chocolate": { color1:"#664934", elem2:"melted_chocolate", chance:0.05 },
        "juice": { elem1:"fruit_milk", elem2:null, chance:0.05 },
        "soda": { elem1:"pilk", elem2:null, chance:0.1 },
        "yolk": { elem1:"#eggnog", elem2:null, chance:0.1 },
        "caramel": { color1:"#C8B39A", chance:0.05 },
        "sugar": { elem2:null, chance:0.005},
    },
    viscosity: 1.5,
    tempHigh: 1000,
    stateHigh: ["smoke","smoke","smoke","steam","steam"],
    category: "food",
    isFood: true,
    state: "solid",
    density: 959.97,
}
// extremely confused part
elements.beans.name = "baked_beans";
elements.real_beans = {
    name: "beans",
    color: ["#e8dfc5","#d1c7ab"],
    behavior: behaviors.POWDER,
    category: "food",
    tempHigh: 350,
    stateHigh: ["fire","fire","ash"],
    burn:3,
    burnTime:500,
    burnInto: ["fire","smoke","smoke","steam","ash"],
    reactions: {
        "sauce": { elem1: "beans", elem2: "beans" },
        "yeast": { elem1: "fermented_beans", elem2: null, chance:0.5 }
    },
    state: "solid",
    density: 721,
    isFood: true,
    alias: "soy_beans"
}
elements.fermented_beans = {
    color:"#ada386",
    behavior: behaviors.POWDER,
    category: "food",
    tempHigh: 350,
    stateHigh: ["fire","fire","ash"],
    burn:3,
    burnTime:500,
    burnInto: ["fire","smoke","smoke","steam","ash"],
    state: "solid",
    density: 721,
    breakInto: "soy_sauce",
    isFood: true,
    alias: "natto"
}
elements.soy_sauce = {
    color: "#480601",
    behavior: behaviors.LIQUID,
    tempLow: -5,
    tempHigh: 105,
    stateHigh: ["steam","steam","salt"],
    state: "liquid",
    category:"food",
    density: 1200,
};
// end of confused part

elements.ice.breakInto = "slush";

elements.cracker_dough = {
    color: "#dbd19a",
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    tempHigh: 94,
    stateHigh: "cracker",
    stateHighColorMultiplier: 1.1,
    burn:40,
    burnTime:25,
    burnInto:"ash",
    state: "solid",
    density: 526.9,
    isFood: true,
    hidden: true
}

elements.cracker = {
    color: "#e0ddb8",
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 605,
    stateHigh: "ash",
    category: "food",
    burn: 30,
    burnTime: 200,
    burnInto: ["smoke","smoke","smoke","ash"],
    breakInto: "crumb",
    state: "solid",
    density: 233.96,
    isFood: true
}

elements.agar = {
    color: "#e0e0e0",
    behavior: behaviors.POWDER,
    reactions: {
        "ice": { elem1:null, elem2:"salt_water", chance:0.1 },
        "rime": { elem1:null, elem2:"salt_water", chance:0.075 },
        "snow": { elem1:null, elem2:"salt_water", chance:0.25 },
        "packed_snow": { elem1:null, elem2:"salt_water", chance:0.05 },
        "packed_ice": { elem1:null, elem2:"salt_water", chance:0.01 }
    },
    category: "food",
    tempHigh: 801,
    state: "solid",
    density: 2160,
    alias: "gelatin"
}
// thanks to adora
elements.agar.reactions.juice = { elem1:"jelly", elem2:null, chance:0.05, func: function(pixel1, pixel2){
    let newrgb = interpolateRgb(getRGB('rgb(250,250,250)'), getRGB(pixel2.color), 0.7);
    pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
}}
elements.agar.reactions.water = {elem1:"jelly",elem2:null,color1:"#e0e0e0",chance:0.05}

elements.duck = {
    color: ["#826c4e", "#2b5927", "#d6d6d6", "#7d4a2c"],
    behavior: [
        "M2%1 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%1|M2%2 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%50|M2%1 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%1",
        "M2%10|XX|M2%10",
        "XX|M1%33|XX",
    ],
    category:"life",
	state: "solid",
    reactions: {
        "meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "chicken_nugget": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "grass": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "worm": { elem2: "crushed_worm", chance:0.3},
        "cooked_meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "fish": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "rat": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "snail": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "frog": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "grape": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "wheat_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "flower_seed": { elem2:null, chance:0.32, func:behaviors.FEEDPIXEL },
        "corn_seed": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "corn": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "potato_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "grass_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "nut": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "dead_bug": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "bee": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "ant": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "flea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "termite": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.3 },
        "mercury": { elem1:"rotten_meat", chance:0.1 },
        "bleach": { elem1:"rotten_meat", chance:0.1 },
        "infection": { elem1:"rotten_meat", chance:0.025 },
        "uranium": { elem1:"rotten_meat", chance:0.1 },
        "cyanide": { elem1:"rotten_meat", chance:0.1 },
        "chlorine": { elem1:"meat", chance:0.1 },
        "dirty_water": { elem1:"rotten_meat", chance:0.0001 },
    },
    egg: "duck_egg",
    foodNeed: 10,
    temp: 40,
    tempHigh: 75,
    stateHigh: "cooked_duck",
    tempLow: -18,
    stateLow: "frozen_meat",
    breakInto: "raw_duck",
    burn:85,
    burnTime:450,
    state: "solid",
    density: 1117,
    conduct: 0.3,
    cutInto: "raw_duck",
};

elements.duck_egg = {
    color: "#e0d3ab",
    behavior: behaviors.STURDYPOWDER2,
    tick: function(pixel) {
        if (Math.random() < 0.1 && pixel.temp > 20 && pixel.temp < 35) {
            changePixel(pixel,"duckling")
        }
    doDefaults(pixel);
    },
    category: "food",
    state: "solid",
    temp: 20,
    tempLow: -18,
    stateLow: "frozen_duck_egg",
    breakInto: ["yolk"],
    tempHigh: 400,
    stateHigh: ["calcium", "ash"],
    burn:50,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    reactions: {
        "water": { elem2:null, elem1:"hard_boiled_egg", chance:10, tempMin:80 }
    }
};
elements.frozen_duck_egg = {
    color: "#e0d3cf",
    behavior: behaviors.POWDER,
    category: "food",
    state: "solid",
    temp: -20,
    tempHigh: 10,
    stateHigh: "duck_egg",
    breakInto: ["calcium", "hard_yolk"],
    burn:50,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    hidden: true,
};
elements.duckling = {
    color: ["#f0eba8", "#f0eba8"],
    behavior: [
        "M2%1|M2%2|M2%1",
        "M2%10|FX%5 AND CH:duck%0.1|M2%10",
        "XX|M1%33|XX",
    ],
    category: "life",
    state: "solid",
    egg: "duck_egg",
    foodNeed: 20,
    temp: 40,
    tempHigh: 75,
    stateHigh: "cooked_meat",
    tempLow: -18,
    stateLow: "frozen_meat",
    breakInto: "blood",
    burn:85,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    reactions: {
        "crushed_worm": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL},
        "meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "chicken_nugget": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "grass": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "worm": { elem2: "crushed_worm", chance:0.3},
        "cooked_meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "fish": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "rat": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "snail": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "frog": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "slug": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "grape": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "wheat_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "flower_seed": { elem2:null, chance:0.32, func:behaviors.FEEDPIXEL },
        "corn_seed": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "corn": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "crumb": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
        "potato_seed": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
        "grass_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "nut": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "dead_bug": { elem2:null, chance:0.35, func:behaviors.FEEDPIXEL },
        "bee": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "ant": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "flea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "termite": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.3 },
        "mercury": { elem1:"rotten_meat", chance:0.1 },
        "bleach": { elem1:"rotten_meat", chance:0.1 },
        "infection": { elem1:"rotten_meat", chance:0.025 },
        "uranium": { elem1:"rotten_meat", chance:0.1 },
        "cyanide": { elem1:"rotten_meat", chance:0.1 },
        "chlorine": { elem1:"meat", chance:0.1 },
        "dirty_water": { elem1:"rotten_meat", chance:0.0001 },
    }
};

elements.barbecued_duck = {
    color:["#a67d2d","#9c721f"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}
elements.steamed_duck = {
    color:["#e8cb7b", "#d6bf7e"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:50,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}

elements.smoked_duck = {
    color:["#6b470e", "#8f5b09"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}
elements.cooked_duck = {
    color: ["#a38046", "#b39652"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp: 40,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
};

elements.raw_duck = {
    color: ["#d6a587", "#c99873"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    burnInto: "cooked_duck",
    temp:25,
    tempHigh: 600,
    stateHigh: ["cooked_duck"],
    reactions: {
        "smoke": {elem1: "smoked_duck"},
        "steam": {elem1: "steamed_duck"},
        "water": {elem1: "boiled_duck", tempMin: 70},
        "nut_oil": {elem1: "fried_duck", tempMin: 70},
        "charcoal": {elem1: "barbecued_duck", tempMin: 70},
        "fire": {elem1: "barbecued_duck"}
    }
};

elements.boiled_duck = {
    color: ["#e0d4a4", "#e0d4a4"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    isFood: true,
    temp: 65,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
}

elements.fried_duck = {
    color: ["#c49543", "#b88835", "#b07b20", "#996e23"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    isFood: true,
    temp: 90,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
}
// side note: i don't eat beef
elements.cow = {
    color: ["#292928", "#332b23", "#e0dfde", "#f0edeb"],
    behavior: [
        "M2%1|XX|M2%1",
        "M2%10|XX|M2%10",
        "XX|M1|XX",
    ],
    category:"life",
	state: "solid",
    reactions: {
        "petal": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "grass": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "grape": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "nut": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.3 },
        "mercury": { elem1:"rotten_meat", chance:0.1 },
        "bleach": { elem1:"rotten_meat", chance:0.1 },
        "infection": { elem1:"rotten_meat", chance:0.025 },
        "uranium": { elem1:"rotten_meat", chance:0.1 },
        "cyanide": { elem1:"rotten_meat", chance:0.1 },
        "chlorine": { elem1:"meat", chance:0.1 },
        "dirty_water": { elem1:"rotten_meat", chance:0.0001 },
    },
    egg: "calf",
    foodNeed: 10,
    temp: 40,
    tempHigh: 75,
    stateHigh: "steak",
    tempLow: -18,
    stateLow: "frozen_meat",
    breakInto: "raw_beef",
    burn:85,
    burnTime:450,
    state: "solid",
    density: 1117,
    conduct: 0.3,
    cutInto: "raw_beef",
};
elements.calf = {
    color: ["#363535", "#bdbdbd"],
    behavior: [
        "M2%1|XX|M2%1",
        "M2%10|FX%5 AND CH:cow%0.1|M2%10",
        "XX|M1|XX",
    ],
    category: "life",
    state: "solid",
    foodNeed: 20,
    temp: 40,
    tempHigh: 75,
    stateHigh: "steak",
    tempLow: -18,
    stateLow: "frozen_meat",
    breakInto: "blood",
    burn:85,
    burnTime:450,
    state: "solid",
    density: 900,
    conduct: 0.1,
    reactions: {
        "petal": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "grass": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "grape": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin_seed": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "pumpkin": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
        "nut": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "lichen": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.3 },
        "mercury": { elem1:"rotten_meat", chance:0.1 },
        "bleach": { elem1:"rotten_meat", chance:0.1 },
        "infection": { elem1:"rotten_meat", chance:0.025 },
        "uranium": { elem1:"rotten_meat", chance:0.1 },
        "cyanide": { elem1:"rotten_meat", chance:0.1 },
        "chlorine": { elem1:"meat", chance:0.1 },
        "dirty_water": { elem1:"rotten_meat", chance:0.0001 },
    },
};

elements.barbecued_steak = {
    color:["#3b271a","#29180d"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}

elements.smoked_beef = {
    color:["#3b1911", "#3b2719"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}
elements.steak = {
    color: ["#a38046", "#b39652"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp: 40,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
    alias: "cooked_beef"
};

elements.raw_beef = {
    color: ["#ab5841", "#ab322e"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    burnInto: "steak",
    temp:25,
    tempHigh: 200,
    stateHigh: "steak",
    reactions: {
        "smoke": {elem1: "smoked_beef"},
        "charcoal": {elem1: "barbecued_beef", tempMin: 70},
        "fire": {elem1: "barbecued_beef"}
    }
};

elements.juice.reactions.milk = { elem1:"fruit_milk", elem2:null, chance:0.05, func: function(pixel1, pixel2){
    let newrgb = interpolateRgb(getRGB('rgb(250,250,250)'), getRGB(pixel2.color), 0.25);
    pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
}}
elements.juice.reactions.cream = { elem1:"fruit_milk", elem2:null, chance:0.05, func: function(pixel1, pixel2){
    let newrgb = interpolateRgb(getRGB('rgb(250,250,250)'), getRGB(pixel2.color), 0.25);
    pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
}}
elements.soda.reactions.soda = {
    func: function(pixel1, pixel2){
      if(pixel1.color != pixel2.color){
        if(Math.floor(Math.random() * 1000) == 1){
        let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.5);
        pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        }
      }
    }
  }
elements.juice.reactions.soda = {
    chance:70,
    func: function(pixel1, pixel2){
        if(pixel1.color != pixel2.color){
            if(Math.floor(Math.random() * 1000) == 1){
                let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.5);
                changePixel(pixelMap[pixel1.x][pixel1.y],"soda")
                pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
                pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
            }
        }
    }
}
if (!elements.orange_juice.reactions) { elements.orange_juice.reactions = {} }
elements.orange_juice.reactions.seltzer = { elem1:"soda", elem2:"foam", color1:"#ffb319"}
elements.orange_juice.reactions.carbon_dioxide = { elem1:"soda", elem2:"foam", color1:"#ffb319"}
elements.agar.reactions.soda = { elem1:"jelly", elem2:null, chance:0.05, func: function(pixel1, pixel2){
    let newrgb = interpolateRgb(getRGB('rgb(250,250,250)'), getRGB(pixel2.color), 0.7);
    pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
}}
elements.hard_jelly = {
    color: "#c372b8",
    behavior: behaviors.STURDYPOWDER,
    tempHigh: 200,
    stateHigh: ["smoke","sugar"],
    category: "food",
    state: "solid",
    density: 1245,
    isFood: true,
    hidden: true,
    temp: 0
}
elements.jelly.stateLow = "hard_jelly"
elements.jelly.stateLowColorMultiplier = 1.2
elements.jelly.temp = 0

elements.nut.name = "peanut";
elements.nut_meat.name = "peanut_meat";
elements.nut_butter.name = "peanut_butter";

elements.spring_onion_leaves = {
    color: "#519c2f",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "ST:onion|M1|ST:onion",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "herb",
    state: "solid",
    density: 1050,
    cutInto: "chopped_spring_onion",
}
elements.chopped_spring_onion = {
    color: ["#0f9912","#227d23"],
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: "dead_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    breakInto:"herb",
}


elements.spring_onion_seed = {
    color: "#1a0e02",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.2 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-2) && isEmpty(pixel.x,pixel.y-1) && isEmpty(pixel.x+1,pixel.y-1) && isEmpty(pixel.x-1,pixel.y-1) && isEmpty(pixel.x+1,pixel.y) && isEmpty(pixel.x-1,pixel.y)) {
                    createPixel("onion",pixel.x,pixel.y-1);
                    createPixel("onion",pixel.x+1,pixel.y-1);
                    createPixel("onion",pixel.x-1,pixel.y-1);
                    createPixel("onion",pixel.x,pixel.y-2);
                    createPixel("onion",pixel.x+1,pixel.y);
                    createPixel("onion",pixel.x-1,pixel.y);
                    if (isEmpty(pixel.x+1,pixel.y-3) && isEmpty(pixel.x-1,pixel.y-3)) {
                        createPixel("spring_onion_leaves",pixel.x+1,pixel.y-3);
                        createPixel("spring_onion_leaves",pixel.x-1,pixel.y-3);
                        if (isEmpty(pixel.x+1,pixel.y-4) && isEmpty(pixel.x-1,pixel.y-4)) {
                            createPixel("spring_onion_leaves",pixel.x+1,pixel.y-4);
                            createPixel("spring_onion_leaves",pixel.x-1,pixel.y-4);
                            if (isEmpty(pixel.x+1,pixel.y-5) && isEmpty(pixel.x-1,pixel.y-5)) {
                                createPixel("spring_onion_leaves",pixel.x+1,pixel.y-5);
                                createPixel("spring_onion_leaves",pixel.x-1,pixel.y-5);
                            }
                        }
                        changePixel(pixel,"onion");
                    }
                }
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
}

elements.stainless_steel ={
    color: "#91999e",
    behavior: behaviors.WALL,
    tempHigh: 1455.5,
    category: "solids",
    density: 7850,
    conduct: 0.42,
    hardness: 0.8
} 

elements.rambutan_wood = {
    color: "#635418",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
}
elements.rambutan_branch = {
    color: "#635418",
    behavior: [
        "CR:rambutan_leaves,rambutan_branch%2|CR:rambutan_leaves,rambutan_branch%2|CR:rambutan_leaves,rambutan_branch%2",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tempHigh: 100,
    stateHigh: "rambutan_wood",
    tempLow: -30,
    stateLow: "rambutan_wood",
    category: "life",
    burn: 40,
    burnTime: 50,
    burnInto: ["sap","ember","charcoal"],
    hidden: true,
    state: "solid",
    density: 1500,
    hardness: 0.15,
    breakInto: ["sap","sawdust"],
}
elements.rambutan_leaves = {
    color: "#6fa611",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|CR:unripe_rambutan%0.1|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
}
elements.unripe_rambutan = {
    color: ["#87c718","#8ac91c","#94de1d"],
    behavior: [
        "XX|ST:rambutan_leaves|XX",
        "XX|CH:rambutan%1|XX",
        "M2|M1|M2",
    ],
    category:"food",
    tempHigh: 100,
    stateHigh: ["dead_plant","steam"],
    burn:65,
    burnTime:60,
    cutInto: "cut_rambutan",
    state: "solid",
    density: 1050,
    breakInto: "rambutan_juice"
}

elements.rambutan = {
    color: ["#d64242","#f23333","#cc3737","#b1db69"],
    behavior: behaviors.POWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    state: "solid",
    density: 1050,
    cutInto: "cut_rambutan",
    breakInto: "rambutan_juice"
}

elements.cut_rambutan = {
    color: "#f5f1bf",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["sugar","steam"],
    burn:65,
    burnTime:60,
    state: "solid",
    density: 1050,
    hidden: true,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#a19f3b",
    breakInto: "rambutan_juice"
}

elements.rambutan_seed = {
    color: "#2b1807",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "rambutan_wood" : "rambutan_branch",pixel.x,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"rambutan_wood");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};

elements.rambutan_juice = {
    color: "#f7f4cb",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#f7f4cb")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
    hidden: true,
    tempLow: 0,
};
//---------------------------------------------------"rambutan_juice");

elements.barbecued_shrimp = {
    color:["#bf743b", "#b57026","#8f5e29","#a87b11"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}
elements.steamed_shrimp = {
    color:["#e8dab2", "#e2cea6"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:50,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}
elements.smoked_shrimp = {
    color:["#78542e", "#6b4b26"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:55,
    tempHigh: 600,
    stateHigh: ["ash","smoke"],
    isFood: true,
    hidden: true,
}
elements.cooked_shrimp = {
    color:["#ff7f50", "#ffa07a", "#ffb3a7"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp: 40,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
};

elements.raw_shrimp = {
    color: ["#f0e0d6", "#e8d9ce", "#cdb7b5"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    burnInto: "cooked_shrimp",
    temp:25,
    tempHigh: 600,
    stateHigh: "cooked_shrimp",
    reactions: {
        "batter": { elem1: "battered_shrimp", elem2: null },
        "smoke": {elem1: "smoked_shrimp"},
        "steam": {elem1: "steamed_shrimp"},
        "water": {elem1: "boiled_shrimp", tempMin: 70},
        "nut_oil": {elem1: "fried_shrimp", tempMin: 70},
        "charcoal": {elem1: "barbecued_shrimp", tempMin: 70},
        "fire": {elem1: "barbecued_shrimp"}
    }
};

elements.boiled_shrimp = {
    color: ["#ffd180", "#ffc978", "#ffbe70"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    isFood: true,
    temp: 65,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    hidden: true,
}
elements.battered_shrimp = {
    color: ["#f2e7d5", "#eae0cd"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp:25,
    tempHigh: 125,
    stateHigh: "cooked_shrimp",
    reactions: {
        "crumb": { color1: "#123456", elem2: null },
        "nut_oil": {elem1: "tempura", tempMin: 60}
    },
    hidden: true,
};
elements.tempura = {
    color: ["#ff8c00", "#ff8c00", "#ffab00", "#ffab00"],
    behavior: behaviors.STURDYPOWDER,
    category: "food",
    state: "solid",
    temp: 40,
    tempHigh: 600,
    stateHigh: ["ash", "smoke"],
    breakInto: "crumb",
    isFood: true,
    density: 100,
    hidden: true,
};

elements.grape.stateHigh = "raisin"
elements.grape.tempHigh = 65

elements.raisin = {
    color: ["#522D68","#3B194D","#381845","2B194D"],
    behavior: [
        "XX|ST:vine|XX",
        "ST:vine|XX|ST:vine",
        "M2|M1|M2",
    ],
    reactions: {
        "radiation": { elem1:"explosion", chance:0.1, color1:"#291824" },
        "rock": { elem1:"juice", chance:0.1, color1:"#291824" },
        "concrete": { elem1:"juice", chance:0.1, color1:"#291824" },
        "basalt": { elem1:"juice", chance:0.1, color1:"#291824" },
        "limestone": { elem1:"juice", chance:0.1, color1:"#291824" },
        "tuff": { elem1:"juice", chance:0.1, color1:"#291824" },
        "water": { elem2:"juice", chance:0.005, color2:"#291824" },
        "sugar_water": { elem2:"juice", chance:0.025, color2:"#291824" },
        "acid": { elem1:"juice", color1:"#291824" },
        "acid_gas": { elem1:"juice", color1:"#291824" },
    },
    innerColor: "#cc7492",
    tempHigh: 256,
    stateHigh: ["steam","sugar"],
    category: "food",
    state: "solid",
    density: 1154,
    breakInto: "juice",
    breakIntoColor: "#291824",
    ignoreAir: true,
    isFood: true
}

elements.fruit_slush = {
    color: "#ed93a4",
    behavior: behaviors.LIQUID,
    reactions: {
        "dirt": { elem1: null, elem2: "mud" },
        "sand": { elem1: null, elem2: "wet_sand" },
        "uranium": { elem1:"dirty_water", chance:0.25 },
    },
    temp: -5,
    tempHigh: 18,
    tempLow: -20,
    stateLow: "juice_ice",
    stateHigh: "juice",
    category: "food",
    state: "liquid",
    density: 95,
    viscosity: 100,
    hidden: true
}

// things to mix: juice, water, seltzer, sugar water, soda, juice, milk, cream,
// juice, milk, chocolate milk, fruit milk, eggnog, nut milk, alcohol, wine, tea,
// tea, coffee, honey, caramel, vanilla essence, peppermint tea, sugar, yogurt, 
// whipped cream, chocolate, jam

// juice mixing
for (let juicei = 0; juicei < eLists.JUICEMIXABLE.length; juicei++) {
    elem = eLists.JUICEMIXABLE[juicei];
    // juice with juice
    for (let juicej = 0; juicej < eLists.JUICEMIXABLE.length; juicej++) {
        elem2 = eLists.JUICEMIXABLE[juicej];
        if (elem != elem2) {
            if (!elements[elem].reactions) { chance:1, elements[elem].reactions = {} }
            elements[elem].reactions[elem2] = { func: function(pixel1, pixel2){
                let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.5);
                changePixel(pixel1,"juice")
                pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
                pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
                // console.log("juice mixed")
            }}
        }
    }
    // juice with water
    if (!elements[elem].reactions) { elements[elem].reactions = {} }
    elements[elem].reactions.water = { chance:1, func: function(pixel1, pixel2){
        let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB("rgb(255,255,255)"), 0.2);
        if (((newrgb.r + newrgb.g + newrgb.b) / 3) > 215) {
            newrgb = getRGB(pixel1.color);
        }
        changePixel(pixel1,"juice")
        changePixel(pixel2,"juice")
        pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
    }}
    // juice with milk
    if (!elements[elem].reactions) { elements[elem].reactions = {} }
    elements[elem].reactions.milk = { chance:1, func: function(pixel1, pixel2){
        let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.2);
        changePixel(pixel1,"fruit_milk")
        changePixel(pixel2,"fruit_milk")
        pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
    }}
    // juice with coconut milk
    if (!elements[elem].reactions) { elements[elem].reactions = {} }
    elements[elem].reactions.coconut_milk = { chance:1, func: function(pixel1, pixel2){
        let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.2);
        changePixel(pixel1,"fruit_milk")
        changePixel(pixel2,"fruit_milk")
        pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
    }}
    // juice with nut milk
    if (!elements[elem].reactions) { elements[elem].reactions = {} }
    elements[elem].reactions.nut_milk = { chance:1, func: function(pixel1, pixel2){
        let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.2);
        changePixel(pixel1,"fruit_milk")
        changePixel(pixel2,"fruit_milk")
        pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
    }}
    // juice with cream
    if (!elements[elem].reactions) { elements[elem].reactions = {} }
    elements[elem].reactions.cream = { chance:1, func: function(pixel1, pixel2){
        let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.2);
        changePixel(pixel1,"fruit_milk")
        changePixel(pixel2,"fruit_milk")
        pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
    }}
    // juice with fruit milk
    if (!elements[elem].reactions) { elements[elem].reactions = {} }
    elements[elem].reactions.fruit_milk = { chance:1, func: function(pixel1, pixel2){
        let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.2);
        changePixel(pixel1,"fruit_milk")
        changePixel(pixel2,"fruit_milk")
        pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
    }}
}

iceelem = elem+"_ice"
// ice slush
elements[elem].stateLowColorMultiplier = 1.2;
elements[elem].tempLow = 10;
elements.fruit_slush.stateHighColorMultiplier = 0.83333333333;
elements.fruit_slush.stateLowColorMultiplier = 1.2;
elements.juice_ice.stateHighColorMultiplier = 0.83333333333;
elements.juice_ice.stateHigh = "fruit_slush"
elements.juice_ice.tempHigh = -20
if(elements[iceelem]) {
	elements[iceelem].stateHigh = "fruit_slush"
	elements[iceelem].tempHigh = -20
}

// fruit milk with milk
elements.fruit_milk.reactions ??= {}; elements.fruit_milk.reactions.milk = { chance:1, func: function(pixel1, pixel2){
    let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.2);
        if (((newrgb.r + newrgb.g + newrgb.b) / 3) < 230) {
            changePixel(pixel1,"fruit_milk")
            changePixel(pixel2,"fruit_milk")
            pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
            pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        } else if (Math.random() < 0.05) {
            changePixel(pixel1,"fruit_milk")
            changePixel(pixel2,"fruit_milk")
            pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
            pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        }
    }
}
// fruit milk with nut milk
elements.fruit_milk.reactions.nut_milk = { chance:1, func: function(pixel1, pixel2){
    let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.2);
        if (((newrgb.r + newrgb.g + newrgb.b) / 3) < 230) {
            changePixel(pixel1,"fruit_milk")
            changePixel(pixel2,"fruit_milk")
            pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
            pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        } else if (Math.random() < 0.05) {
            changePixel(pixel1,"fruit_milk")
            changePixel(pixel2,"fruit_milk")
            pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
            pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        }
    }
}
// fruit milk with coconut milk
elements.fruit_milk.reactions.coconut_milk = { chance:1, func: function(pixel1, pixel2){
    let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.2);
        if (((newrgb.r + newrgb.g + newrgb.b) / 3) < 230) {
            changePixel(pixel1,"fruit_milk")
            changePixel(pixel2,"fruit_milk")
            pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
            pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        } else if (Math.random() < 0.05) {
            changePixel(pixel1,"fruit_milk")
            changePixel(pixel2,"fruit_milk")
            pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
            pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        }
    }
}
// fruit milk with cream
elements.fruit_milk.reactions.cream = { chance:1, func: function(pixel1, pixel2){
    let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.2);
        if (((newrgb.r + newrgb.g + newrgb.b) / 3) < 230) {
            changePixel(pixel1,"fruit_milk")
            changePixel(pixel2,"fruit_milk")
            pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
            pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        } else if (Math.random() < 0.05) {
            changePixel(pixel1,"fruit_milk")
            changePixel(pixel2,"fruit_milk")
            pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
            pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        }
    }
}
// fruit milk with fruit milk
elements.fruit_milk.reactions.fruit_milk = { chance:1, func: function(pixel1, pixel2){
    let newrgb = interpolateRgb(getRGB(pixel1.color), getRGB(pixel2.color), 0.2);
        changePixel(pixel1,"fruit_milk")
        changePixel(pixel2,"fruit_milk")
        pixel1.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
    }
}
// fruit milk onMix
elements.fruit_milk.onMix = function(pixel){
    let num = Math.floor(Math.random() * 4);
    let x = pixel.x + adjacentCoords[num][0];
    let y = pixel.y + adjacentCoords[num][1];
    if(!isEmpty(x,y) && !outOfBounds(x,y)){
      let pixel2 = pixelMap[x][y];
      if(pixel.color != pixel2.color && pixel2.element == "fruit_milk"){
        let condition;
        if(shiftDown == 0){
          condition = (Math.floor(Math.random() * 2) == 1); 
        } else {
          condition = true; 
        }
        if(condition){
          let newrgb = interpolateRgb(getRGB(pixel.color), getRGB(pixel2.color), 0.5);
          pixel.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
          pixel2.color = `rgb(${parseInt(newrgb.r)},${parseInt(newrgb.g)},${parseInt(newrgb.b)})`;
        }
      }
    }
  }







































  //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------














































  elements.led_w = {
    behavior: behaviors.WALL,
    reactions: {
        "light": { "charge1": 1 }
    },
    color: "#c0c0c0",
    colorOn: "#ffffff",
    category: "machines",
    tempHigh: 1500,
    stateHigh: "molten_glass",
    conduct: 1
};
elements.ledO = {
    behavior: behaviors.WALL,
    reactions: {
        "light": { "charge1": 1 }
    },
    color: "#b06000",
    colorOn: "#ff8c00",
    category: "machines",
    tempHigh: 1500,
    stateHigh: "molten_glass",
    conduct: 1
};
elements.ledY = {
    behavior: behaviors.WALL,
    reactions: {
        "light": { "charge1": 1 }
    },
    color: "#b0b000",
    colorOn: "#ffff00",
    category: "machines",
    tempHigh: 1500,
    stateHigh: "molten_glass",
    conduct: 1
};
elements.ledP = {
    behavior: behaviors.WALL,
    reactions: {
        "light": { "charge1": 1 }
    },
    color: "#551a8b",
    colorOn: "#800080",
    category: "machines",
    tempHigh: 1500,
    stateHigh: "molten_glass",
    conduct: 1
};
elements.esuperheater = {
    color: "#ff69b4",
	behavior: behaviors.WALL,
    behaviorOn: elements.superheater.behavior,
    category: "machines",
    insulate: elements.wire.insulate,
    conduct: elements.wire.conduct,
    noMix: elements.wire.noMix
};
elements.eheater = {
    color: "#FA8072",
	behavior: behaviors.WALL,
    behaviorOn: elements.heater.behavior,
    category: "machines",
    insulate: elements.wire.insulate,
    conduct: elements.wire.conduct,
    noMix: elements.wire.noMix
};
elements.ecooler = {
    color: "#AFEEEE",
	behavior: behaviors.WALL,
    behaviorON: elements.cooler.behavior,
    category: "machines",
    insulate: elements.wire.insulate,
    conduct: elements.wire.conduct,
    noMix: elements.wire.noMix
};
elements.efreezer = {
    color: "#E0FFFF",
	behavior: behaviors.WALL,
    behaviorOn: elements.freezer.behavior,
    category: "machines",
    insulate: elements.wire.insulate,
    conduct: elements.wire.conduct,
    noMix: elements.wire.noMix
};
elements.fire_sensor = {
    behavior: behaviors.WALL,
    reactions: {
		"fire": {"charge1":1},
		"plasma": {"charge1":1},
		"cold_fire": {"charge1":1},
		"fireball": {"charge1":1},
		"antifire": {"charge1":1},
		},
    color: "#FFA500",
    colorOn: "#FFBF00",
    category: "machines",
    conduct: 1
};
elements.light_sensor = {
    behavior: behaviors.WALL,
    reactions: {
		"light": {"charge1":1},
		"liquid_light": {"charge1":1},
		"flash": {"charge1":1},
		"radiation": {"charge1":1},
		"laser": {"charge1":1},
		},
    color: "#FFFFFF",
    category: "machines",
    conduct: 1
};
elements.water_sensor = {
    behavior: behaviors.WALL,
    reactions: {
		"water": {"charge1":1},
		"salt_water": {"charge1":1},
		"sugar_water": {"charge1":1},
		"seltzer": {"charge1":1},
		"dirty_water": {"charge1":1},
		"pool_water": {"charge1":1},
		"slush": {"charge1":1},
		"hail": {"charge1":1},
		"ice": {"charge1":1},
		"salt_ice": {"charge1":1},
		"sugar_ice": {"charge1":1},
		"seltzer_ice": {"charge1":1},
		"dirty_ice": {"charge1":1},
		"pool_ice": {"charge1":1},
		"steam": {"charge1":1},
		"cloud": {"charge1":1},
		"rain_cloud": {"charge1":1},
		"snow_cloud": {"charge1":1},
		"hail_cloud": {"charge1":1},
		"thunder_cloud": {"charge1":1},
		"pool_ice": {"charge1":1},
		},
    color: "#89CFF0",
    category: "machines",
    conduct: 1
};
elements.mega_shocker = {
    behavior: behaviors.WALL,
	behaviorOn:	[
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|CR:lightning AND SH|XX",
    ],
    color: "#C3B1E1",
    category: "machines",
    conduct: 1
};
elements.exploder = {
    behavior: behaviors.WALL,
	behaviorOn:	[
        "XX|CR:explosion AND SH|XX",
        "CR:explosion AND SH|XX|CR:explosion AND SH",
        "XX|CR:explosion AND SH|XX",
    ],
    color: "#ff8c00",
    category: "machines",
    conduct: 1,
	hardness: 1
};
elements.evoid = {
    behavior: behaviors.WALL,
	behaviorOn:	[
        "XX|DL|XX",
        "DL|XX|DL",
        "XX|DL|XX",
    ],
    color: "#434854",
    category: "machines",
    conduct: 1,
	hardness: 1,
	ignore: ["wire","battery"]
};
elements.eburner = {
    behavior: behaviors.WALL,
	behaviorOn: [
        "CR:propane|CR:propane|CR:propane",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    color: "#fadecd",
    category: "machines",
    conduct: 1
};
elements.mega_led = {
    behavior: behaviors.WALL,
    reactions: {
        "light": { "charge1": 1 }
    },
    color: ["#660000","#b06000","#b0b000","#006600","#000066","#551a8b"],
    colorOn: ["#ff0000","#ff8c00","#ffff00","#00ff00","#0000ff","#800080"],
    category: "machines",
    tempHigh: 15000,
    stateHigh: "molten_stained_glass",
    conduct: 1,
	state: "gas"
};
elements.estatic = {
    behavior: behaviors.WALL,
    color: "#3d3d3d",
    colorOn: ["#ffffff","#888888","#000000"],
    category: "machines",
    conduct: 1
};
elements.elattice = {
    behavior: behaviors.WALL,
	behaviorOn: [
        "CL|XX|CL",
        "XX|XX|XX",
        "CL|XX|CL",
    ],
    color: "#e795f0",
    colorOn: ["#7110e8","#2c00b0","#000cb0"],
    category: "machines",
    conduct: 1
};
elements.esnake = {
    behavior: behaviors.WALL,
	behaviorOn: [
        "XX|XX|XX",
        "XX|LB:plant AND RT%5|M1 AND BO:1,2,3",
        "XX|XX|XX",
    ],
    color: "#00bf00",
    category: "machines",
    conduct: 1,
	rotatable: true
};
elements.evertical = {
    behavior: behaviors.WALL,
	behaviorOn: [
        "XX|M1|XX",
        "CR:wall|XX|CR:wall",
        "XX|XX|XX",
    ],
    color: "#e8e6e6",
    category: "machines",
    conduct: 1
};
elements.ehorizontal = {
    behavior: behaviors.WALL,
	behaviorOn: [
        "XX|CR:wall|XX",
        "XX|XX|M1",
        "XX|CR:wall|XX",
    ],
    color: "#e8e6e6",
    category: "machines",
    conduct: 1
};
elements.ultrasuper_exploder = {
    behavior: behaviors.WALL,
	behaviorOn:	[
        "XX|CR:supernova AND SH|XX",
        "CR:supernova AND SH|XX|CR:supernova AND SH",
        "XX|CR:supernova AND SH|XX",
    ],
    color: "#4103fc",
    category: "machines",
    conduct: 1,
	hardness: 1
};
elements.tiny_exploder = {
    behavior: behaviors.WALL,
	behaviorOn:	[
        "XX|CR:pop AND SH|XX",
        "CR:pop AND SH|XX|CR:pop AND SH",
        "XX|CR:pop AND SH|XX",
    ],
    color: ["#ffb48f","#ffd991","#ffad91"],
    category: "machines",
    conduct: 1,
	hardness: 1
};
elements.poop = {
    color: "#8B4513",
    behavior: behaviors.POWDER,
    category: "life",
    state: "solid",
	tempHigh: 100,
    stateHigh: "stench"
};



















































//------------------------------------------------------------------------------------------------------------------------------------------------































































var ct = 100

elements.customtemp = {
    color: ["#FF0000", "#FF6600", "#FFCC00", "#FFFF00", "#CCFF00", "#66FF00", "#00FF00", "#00FF66", "#00FFCC", "#00FFFF"],
    onSelect: function() {
        var answer4 = parseInt(prompt("Please input the desired temperature to reach.",(ct||undefined)));
        if (!answer4) { return }
        ct = answer4;
        if (isNaN(answer4)) {
            ct = 100
        }
    },
    tool: function(pixel) {
        pixel.temp = ct,
		pixelTempCheck(pixel)
    },
    category: "tools",
};
elements.customheat = {
    color: ["#FF0000", "#FFFFFF", "#FF0000"],
    onSelect: function() {
        var answer4 = parseInt(prompt("Please input the desired temperature increase per tick. (In celsius)",(ct||undefined)));
        if (!answer4) { return }
        ct = answer4;
        if (isNaN(answer4)) {
            ct = 100
        }
    },
    tool: function(pixel) {
        pixel.temp = pixel.temp + ct,
		pixelTempCheck(pixel)
    },
    category: "tools",
};
elements.customcool = {
    color: ["#0000FF", "#FFFFFF", "#0000FF"],
    onSelect: function() {
        var answer4 = parseInt(prompt("Please input the desired temperature decrease per tick. (In celsius)",(ct||undefined)));
        if (!answer4) { return }
        ct = answer4;
        if (isNaN(answer4)) {
            ct = 100
        }
    },
    tool: function(pixel) {
        pixel.temp = pixel.temp - ct,
		pixelTempCheck(pixel)
    },
    category: "tools",
};




































//-------------------------------------------------------------------------------------------------------------------------------------------------------









































// CreateTree function made by nousernamefound.
function createTree(treeName, leafColor, woodName){
    let woodColor = elements[woodName].color
    elements[treeName + "_sapling"] = {
        color: leafColor,
        tick: function(pixel) {
            if (!tryMove(pixel,pixel.x,pixel.y+1)) {
                if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                    if (!outOfBounds(pixel.x,pixel.y+1)) {
                        var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                        if (dirtPixel && (eLists.SOIL.indexOf(dirtPixel.element) !== -1 || dirtPixel.element === "grass")) {
                            changePixel(dirtPixel,"root");
                        }
                    }
                    if (isEmpty(pixel.x,pixel.y-1)) {
                        if (!pixel.wc) {
                            pixel.wc = woodColor;
                            pixel.lc = leafColor;
                        }
                        movePixel(pixel,pixel.x,pixel.y-1);
                        createPixel(Math.random() > 0.5 ? woodName : (treeName + "_branch"),pixel.x,pixel.y+1);
                        pixelMap[pixel.x][pixel.y+1].wc = pixel.wc;
                        pixelMap[pixel.x][pixel.y+1].lc = pixel.lc;
                        pixelMap[pixel.x][pixel.y+1].color = pixelColorPick(pixelMap[pixel.x][pixel.y+1], pixel.wc);
                    }
                }
                else if (pixel.age > 1000 && Math.random() < 0.05) {
                    changePixel(pixel,woodName);
                    pixel.color = pixelColorPick(pixel, pixel.wc);
                }
                pixel.age++;
            }
            doDefaults(pixel);
        },
        properties: {
            "age":0
        },
        tempHigh: 100,
        stateHigh: "dead_plant",
        tempLow: -2,
        stateLow: "frozen_plant",
        burn: 65,
        burnTime: 15,
        category: "life",
        state: "solid",
        density: 1500,
        cooldown: defaultCooldown,
    }
    elements[treeName + "_branch"] = {
      color: woodColor,
      tick: function(pixel) {
          if (!pixel.burning) {
              if (!pixel.lc) { pixel.lc = leafColor }
              if (!pixel.wc) { pixel.wc = woodColor }
              if (isEmpty(pixel.x-1,pixel.y-1) && Math.random() < 0.02) {
                  if (Math.random() < 0.5) {
                      createPixel("plant",pixel.x-1,pixel.y-1);
                      pixelMap[pixel.x-1][pixel.y-1].color = pixelColorPick(pixelMap[pixel.x-1][pixel.y-1], pixel.lc);
                  }
                  else {
                      createPixel(treeName + "_branch",pixel.x-1,pixel.y-1);
                      pixelMap[pixel.x-1][pixel.y-1].color = pixelColorPick(pixelMap[pixel.x-1][pixel.y-1], pixel.wc);
                      pixelMap[pixel.x-1][pixel.y-1].wc = pixel.wc;
                      pixelMap[pixel.x-1][pixel.y-1].lc = pixel.lc;
                  }
              }
              if (isEmpty(pixel.x+1,pixel.y-1) && Math.random() < 0.02) {
                  if (Math.random() < 0.5) {
                      createPixel("plant",pixel.x+1,pixel.y-1);
                      pixelMap[pixel.x+1][pixel.y-1].color = pixelColorPick(pixelMap[pixel.x+1][pixel.y-1], pixel.lc);
                  }
                  else {
                      createPixel(treeName + "_branch",pixel.x+1,pixel.y-1);
                      pixelMap[pixel.x+1][pixel.y-1].color = pixelColorPick(pixelMap[pixel.x+1][pixel.y-1], pixel.wc);
                      pixelMap[pixel.x+1][pixel.y-1].wc = pixel.wc;
                      pixelMap[pixel.x+1][pixel.y-1].lc = pixel.lc;
                  }
              }
              if (isEmpty(pixel.x,pixel.y-1) && Math.random() < 0.02) {
                  if (Math.random() < 0.75) {
                      createPixel("plant",pixel.x,pixel.y-1);
                      pixelMap[pixel.x][pixel.y-1].color = pixelColorPick(pixelMap[pixel.x][pixel.y-1], pixel.lc);
                  }
                  else {
                      createPixel(treeName + "_branch",pixel.x,pixel.y-1);
                      pixelMap[pixel.x][pixel.y-1].color = pixelColorPick(pixelMap[pixel.x][pixel.y-1], pixel.wc);
                      pixelMap[pixel.x][pixel.y-1].wc = pixel.wc;
                      pixelMap[pixel.x][pixel.y-1].lc = pixel.lc;
                  }
              }
          }
          doDefaults(pixel);
      },
      movable: false,
      tempHigh: 100,
      stateHigh: woodName,
      tempLow: -30,
      stateLow: woodName,
      category: "life",
      burn: 2,
      burnTime: 300,
      burnInto: ["sap","ember","charcoal","smoke"],
      hidden: true,
      state: "solid",
      density: 1500,
      hardness: 0.15,
      breakInto: ["sap","sawdust"],
      seed: treeName + "_sapling",
      forceSaveColor: true
    }
  }

elements.red_wood = {
    density: 450,
    burnTime: 100,
    burn: 15,
    color: "#D4381E",
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.7, // A highly durable wood
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.pine_wood = {
    density: 550,
    burnTime: 125,
    burn: 20,
    color: ["#D59F71", "#BC7852", "B46F4C", "#D59F71"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.4, // Medium hardness
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.oak = {
    density: 700,
    burnTime: 150,
    burn: 30,
    color: ["#ECCCAC", "C2965F", "D29A67", "B07C4F", "CAA06E"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.8, // Exceptionally hard and durable
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.birch = {
    density: 670,
    burnTime: 175,
    burn: 25,
    color: ["#FFFFFF", "#000000", "#FFFFFF"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.6, // Relatively hard
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.cherry_wood = {
    density: 400,
    burnTime: 100,
    burn: 10,
    color: ["#8E3D27", "#A44B2B", "#883B29"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.3, // Relatively soft
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.maple_wood = {
    density: 600,
    burnTime: 175,
    burn: 25,
    color: ["#DAA520", "#C68E17", "#FFD700"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.7, // Durable and dense
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.walnut_wood = {
    density: 750,
    burnTime: 225,
    burn: 30,
    color: ["#5A4522", "#3E2E1F", "#8B5A2B"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.9, // Extremely hard and dense
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.mahogany = {
    density: 800,
    burnTime: 250,
    burn: 35,
    color: ["#C04000", "#7B3F00", "#88441C"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.85, // Very hard and resistant to decay
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.cedar = {
    density: 480,
    burnTime: 150,
    burn: 20,
    color: ["#B8860B", "#CD853F", "#8B4513"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.5, // Moderately hard and lightweight
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.ash_wood = {
    density: 620,
    burnTime: 100,
    burn: 25,
    color: ["#A52A2A", "#D2691E", "#8B4513"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.6, // Hardwood with good shock resistance
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.poplar_wood = {
    density: 420,
    burnTime: 120,
    burn: 15,
    color: ["#9E8040", "#BEBD7F", "#D7D4BB"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.4, // Softwood with low density
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.fir_wood = {
    density: 560,
    burnTime: 130,
    burn: 20,
    color: ["#B4CDCD", "#8B9CA9", "#CED1D9"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.5, // Medium hardness and lightweight
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.teak = {
    density: 660,
    burnTime: 180,
    burn: 30,
    color: ["#B5651D", "#704214", "#8B4513"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.7, // High natural oil content and durability
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.spruce = {
    density: 480,
    burnTime: 110,
    burn: 15,
    color: ["#8B4513", "#B8860B", "#CD853F"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.5, // Moderately hard and lightweight
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.cypress_wood = {
    density: 520,
    burnTime: 140,
    burn: 20,
    color: ["#827A68", "#6B4226", "#A0522D"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.6, // Medium hardness with good decay resistance
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.beech_wood = {
    density: 670,
    burnTime: 160,
    burn: 25,
    color: ["#F0DC82", "#C0C0C0", "#9C661F"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.7, // Hardwood with good strength and wear resistance
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.sapele = {
    density: 670,
    burnTime: 150,
    burn: 25,
    color: ["#8B4513", "#FF4500", "#CD853F"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.8, // Hardwood with good stability and workability
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.pear_wood = {
    density: 670,
    burnTime: 160,
    burn: 20,
    color: ["#FFD700", "#CD853F", "#FF6347"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.6, // Hardwood with fine grain and smooth texture
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.hickory = {
    density: 800,
    burnTime: 200,
    burn: 30,
    color: ["#664C28", "#8B6914", "#8B4513"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.9, // Extremely hard and dense
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.sycamore = {
    density: 530,
    burnTime: 140,
    burn: 20,
    color: ["#F4A460", "#F0E68C", "#A0522D"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.5, // Medium hardness and lightweight
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.willow_wood = {
    density: 380,
    burnTime: 100,
    burn: 10,
    color: ["#C19A6B", "#8B4513", "#CD853F"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.3, // Softwood with low density
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.zebra_wood = {
    density: 800,
    burnTime: 220,
    burn: 30,
    color: ["#F0DC82", "#8B4513", "#FFD700"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.9, // Extremely hard and dense
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.basswood = {
    density: 410,
    burnTime: 110,
    burn: 15,
    color: ["#D2B48C", "#DEB887", "#F5F5DC"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.4, // Softwood with low density
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.larch_wood = {
    density: 590,
    burnTime: 130,
    burn: 20,
    color: ["#C9AE5D", "#E0C49D", "#9C661F"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.6, // Medium hardness with good durability
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.silver_maple = {
    density: 560,
    burnTime: 140,
    burn: 25,
    color: ["#C0C0C0", "#D3D3D3", "#BEBEBE"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.5, // Moderate hardness and lightweight
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.balsam_fir = {
    density: 460,
    burnTime: 120,
    burn: 15,
    color: ["#B4CDCD", "#8B9CA9", "#CED1D9"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.4, // Softwood with moderate hardness
    breakInto: "sawdust",
    burnInto: "ash"
};

elements.elm_wood = {
    density: 560,
    burnTime: 140,
    burn: 20,
    color: ["#8B4513", "#228B22", "#CD5C5C"],
    category: "solids",
    behavior: behaviors.WALL,
    state: "solid",
    hardness: 0.6, // Medium hardness and lightweight
    breakInto: "sawdust",
    burnInto: "ash",
};

createTree("red_wood", "#2E6E4E", "red_wood");
createTree("pine", "#D59F71", "pine_wood");
createTree("oak", "#ECCCAC", "oak");
createTree("birch", "#FFFFFF", "birch");
createTree("cherry_blossom", "#8E3D27", "cherry_wood");
createTree("maple", "#DAA520", "maple_wood");
createTree("walnut", "#5A4522", "walnut_wood");
createTree("mahogany", "#C04000", "mahogany");
createTree("cedar", "#B8860B", "cedar");
createTree("ash_wood", "#A52A2A", "ash_wood");
createTree("poplar_wood", "#9E8040", "poplar_wood");
createTree("fir_wood", "#B4CDCD", "fir_wood");
createTree("teak", "#B5651D", "teak");
createTree("spruce", "#8B4513", "spruce");
createTree("cypress", "#827A68", "cypress_wood");
createTree("beech", "#F0DC82", "beech_wood");
createTree("sapele", "#8B4513", "sapele");
createTree("pear", "#FFD700", "pear_wood");
createTree("hickory", "#664C28", "hickory");
createTree("sycamore", "#F4A460", "sycamore");
createTree("willow", "#C19A6B", "willow_wood");
createTree("zebra_wood", "#F0DC82", "zebra_wood");
createTree("basswood", "#D2B48C", "basswood");
createTree("larch", "#C9AE5D", "larch_wood");
createTree("silver_maple", "#C0C0C0", "silver_maple");
createTree("balsam_fir", "#B4CDCD", "balsam_fir");
createTree("elm", "#8B4513", "elm_wood");














































//-------------------------------------------------------------------------------------------------------------------------------------------------------





















































































  //----------------------------------------------------------------------------------------------------------------------------------------------------------------























































  worldgentypes.prehistory = {
    layers: [
        [1.00, "grass"],
        [0.10, "dirt"],
        [0.02, "rock"],
        [0, "basalt"],
    ],
    decor: [
        ["dinosaur", 0.1, 10],
        ["pinecone", 0.075],
        ["bird", 0.025, 5],
    ],
    baseHeight: 0.5
},

elements.fossil = {
color: ["#bbb3ae","#b4b4b4","#c0c0c0"],
behavior: [
"XX|XX|XX",
"XX|XX|XX",
"M2%75|M1|M2%75",
],
reactions: {
"water": {elem1: ["wet_sand","fossil_sand"], chance: 0.00035},
"salt_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0005},
"sugar_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"seltzer": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"dirty_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"soda": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"lichen": {elem1: "dirt", chance: 0.0025},
"bone": {elem2: "fossil", chance: 0.000025},
"bone_marrow": {elem2: "marrow_fossil", chance: 0.00002},
"skull": {elem2: ["human_fossil","human_fossil","fossil"], chance: 0.000025},
"wood": {elem2: "petrified_wood", chance: 0.000015},
"tree_branch": {elem2: "petrified_wood", chance: 0.000015},
"grape": {elem2: "juice", chance: 0.1, color2: "#291824"},
"wheat": {elem2: "flour"},
"primordial_soup": {elem1: ["wet_sand","fossil_sand"], chance: 0.001}
},
tempHigh: 950,
stateHigh: "magma",
category: "life",
state: "solid",
density: 2600,
hardness: 0.55,
breakInto: ["rock","gravel","gravel","gravel","sand"],
};

elements.fossil_sand = {
color: ["#bbb3ae","#b4b4b4","#c0c0c0"],
behavior: behaviors.POWDER,
reactions: {
"water": {elem1: "wet_sand", chance: 0.00035},
"salt_water": {elem1: "wet_sand", chance: 0.0005},
"sugar_water": {elem1: "wet_sand", chance: 0.0004},
"seltzer": {elem1: "wet_sand", chance: 0.0004},
"dirty_water": {elem1: "wet_sand", chance: 0.0004},
"soda": {elem1: "wet_sand", chance: 0.0004},
"bone": {elem2: "fossil", chance: 0.0000025},
"bone_marrow": {elem2: "marrow_fossil", chance: 0.000002},
"skull": {elem2: ["human_fossil","human_fossil","fossil"], chance: 0.0000025},
"wood": {elem2: "petrified_wood", chance: 0.0000015},
"tree_branch": {elem2: "petrified_wood", chance: 0.0000015},
"primordial_soup": {elem1: "wet_sand", chance: 0.001}
},
tempHigh: 1700,
stateHigh: "molten_glass",
category: "land",
state: "solid",
density: 2000,
breakInto: ["gravel","gravel","sand"],
};

elements.marrow_fossil = {
color: ["#cbb2b3","#c1a8a8","#d0b0b0"],
hidden:true,
behavior: behaviors.SUPPORTPOWDER,
reactions: {
"water": {elem1: ["wet_sand","fossil_sand"], chance: 0.00035},
"salt_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0005},
"sugar_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"seltzer": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"dirty_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"soda": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"lichen": {elem1: "dirt", chance: 0.0025},
"bone": {elem2: "fossil", chance: 0.000025},
"bone_marrow": {elem2: "marrow_fossil", chance: 0.00002},
"skull": {elem2: ["human_fossil","human_fossil","fossil"], chance: 0.000025},
"wood": {elem2: "petrified_wood", chance: 0.000015},
"tree_branch": {elem2: "petrified_wood", chance: 0.000015},
"grape": {elem2: "juice", chance: 0.1, color2: "#291824"},
"wheat": {elem2: "flour"},
"primordial_soup": {elem1: "wet_sand", chance: 0.001}
},
tempHigh: 950,
stateHigh: "magma",
category: "life",
state: "solid",
density: 2550,
hardness: 0.55,
breakInto: ["rock","gravel","gravel","gravel","sand"],
};

elements.human_fossil = {
properties: {
dna: "human",
},
name: "fossil",
color: ["#bbb3ae","#b4b4b4","#c0c0c0"],
hidden:true,
behavior: [
"XX|XX|XX",
"XX|XX|XX",
"M2%50|M1|M2%50",
],
reactions: {
"water": {elem1: ["wet_sand","fossil_sand"], chance: 0.00035},
"salt_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0005},
"sugar_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"seltzer": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"dirty_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"soda": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"lichen": {elem1: "dirt", chance: 0.0025},
"bone": {elem2: "fossil", chance: 0.000025},
"bone_marrow": {elem2: "marrow_fossil", chance: 0.00002},
"skull": {elem2: ["human_fossil","human_fossil","fossil"], chance: 0.000025},
"wood": {elem2: "petrified_wood", chance: 0.000015},
"tree_branch": {elem2: "petrified_wood", chance: 0.000015},
"grape": {elem2: "juice", chance: 0.1, color2: "#291824"},
"wheat": {elem2: "flour"},
"primordial_soup": {elem1: "wet_sand", chance: 0.001}
},
tempHigh: 950,
stateHigh: "magma",
category: "life",
state: "solid",
density: 2600,
hardness: 0.55,
breakInto: ["rock","gravel","gravel","gravel","sand"],
};

elements.dino_fossil = {
properties: {
dna: "dinosaur",
},
name: "fossil",
color: ["#bbb3ae","#b4b4b4","#c0c0c0"],
behavior: [
"XX|XX|XX",
"XX|XX|XX",
"M2%75|M1|M2%75",
],
reactions: {
"water": {elem1: ["wet_sand","fossil_sand"], chance: 0.00035},
"salt_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0005},
"sugar_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"seltzer": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"dirty_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"soda": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"lichen": {elem1: "dirt", chance: 0.0025},
"bone": {elem2: "fossil", chance: 0.000025},
"bone_marrow": {elem2: "marrow_fossil", chance: 0.00002},
"skull": {elem2: ["human_fossil","human_fossil","fossil"], chance: 0.000025},
"wood": {elem2: "petrified_wood", chance: 0.000015},
"tree_branch": {elem2: "petrified_wood", chance: 0.000015},
"grape": {elem2: "juice", chance: 0.1, color2: "#291824"},
"wheat": {elem2: "flour"},
"primordial_soup": {elem1: "wet_sand", chance: 0.001}
},
tempHigh: 950,
stateHigh: "magma",
category: "life",
state: "solid",
density: 2600,
hardness: 0.55,
breakInto: ["rock","gravel","gravel","gravel","sand"],
};

elements.petrified_wood = {
properties: {
dna: "sapling",
},
color: ["#4e4e3e","#464646","#52533a"],
hidden:true,
behavior: behaviors.STURDYPOWDER,
reactions: {
"water": {elem1: ["wet_sand","fossil_sand"], chance: 0.00035},
"salt_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0005},
"sugar_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"seltzer": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"dirty_water": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"soda": {elem1: ["wet_sand","fossil_sand"], chance: 0.0004},
"lichen": {elem1: "dirt", chance: 0.0025},
"bone": {elem2: "fossil", chance: 0.000025},
"bone_marrow": {elem2: "marrow_fossil", chance: 0.00002},
"skull": {elem2: ["human_fossil","human_fossil","fossil"], chance: 0.000025},
"wood": {elem2: "petrified_wood", chance: 0.000015},
"tree_branch": {elem2: "petrified_wood", chance: 0.000015},
"grape": {elem2: "juice", chance: 0.1, color2: "#291824"},
"wheat": {elem2: "flour"},
"primordial_soup": {elem1: "wet_sand", chance: 0.001}
},
tempHigh: 950,
stateHigh: "magma",
category: "life",
state: "solid",
density: 2600,
breakInto: ["rock","rock","gravel","gravel","gravel","gravel","gravel","sawdust"],
};

elements.skull = {
properties: {
dna: "human",
},
color: "#d9d9d9",
hidden:true,
behavior: behaviors.POWDER,
reactions: {
"water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
"salt_water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
"sugar_water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
"seltzer": { elem2:"broth", tempMin:70, color2:"#d7db69" },
"rock": { "elem1": "human_fossil", chance:0.00005 },
"sand": { "elem1": "human_fossil", chance:0.000035 },
"dirt": { "elem1": "human_fossil", chance:0.00003 },
"tuff": { "elem1": "human_fossil", chance:0.00005 },
"basalt": { "elem1": "human_fossil", chance:0.00004 },
"mudstone": { "elem1": "human_fossil", chance:0.00004 },
"packed_sand": { "elem1": "human_fossil", chance:0.00004 },
"gravel": { "elem1": "human_fossil", chance:0.000035 },
"clay": { "elem1": "human_fossil", chance:0.00003 },
"clay_soil": { "elem1": "human_fossil", chance:0.00003 },
"permafrost": { "elem1": "human_fossil", chance:0.000035 },
"mulch": { "elem1": "human_fossil", chance:0.00003 },
"ant_wall": { "elem1": "human_fossil", chance:0.00002 },
"limestone": { "elem1": "human_fossil", chance:0.00005 },
"quicklime": { "elem1": "human_fossil", chance:0.000045 },
"slaked_lime": { "elem1": "human_fossil", chance:0.000035 },
},
category:"life",
tempHigh: 760,
stateHigh: "quicklime",
state: "solid",
density: 1000,
hardness: 0.5,
breakInto: ["quicklime","bone","human_bones","bone_marrow"]
},

elements.human_bones = {
properties: {
dna: "human",
},
name: "bone",
color: "#d9d9d9",
hidden:true,
behavior: behaviors.SUPPORT,
reactions: {
"water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
"salt_water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
"sugar_water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
"seltzer": { elem2:"broth", tempMin:70, color2:"#d7db69" },
"rock": { "elem1": "human_fossil", chance:0.00005 },
"sand": { "elem1": "human_fossil", chance:0.000035 },
"dirt": { "elem1": "human_fossil", chance:0.00003 },
"tuff": { "elem1": "human_fossil", chance:0.00005 },
"basalt": { "elem1": "human_fossil", chance:0.00004 },
"mudstone": { "elem1": "human_fossil", chance:0.00004 },
"packed_sand": { "elem1": "human_fossil", chance:0.00004 },
"gravel": { "elem1": "human_fossil", chance:0.000035 },
"clay": { "elem1": "human_fossil", chance:0.00003 },
"clay_soil": { "elem1": "human_fossil", chance:0.00003 },
"permafrost": { "elem1": "human_fossil", chance:0.000035 },
"mulch": { "elem1": "human_fossil", chance:0.00003 },
"ant_wall": { "elem1": "human_fossil", chance:0.00002 },
"limestone": { "elem1": "human_fossil", chance:0.00005 },
"quicklime": { "elem1": "human_fossil", chance:0.000045 },
"slaked_lime": { "elem1": "human_fossil", chance:0.000035 },
},
category:"life",
tempHigh: 760,
stateHigh: "quicklime",
state: "solid",
density: 1000,
hardness: 0.5,
breakInto: ["quicklime","bone","bone","bone_marrow"]
},

elements.dino_bones = {
properties: {
dna: "dinosaur",
},
name: "bone",
color: "#d9d9d9",
hidden:true,
behavior: behaviors.SUPPORT,
reactions: {
"water": { elem2:"broth", tempMin:70 },
"salt_water": { elem2:"broth", tempMin:70 },
"sugar_water": { elem2:"broth", tempMin:70 },
"seltzer": { elem2:"broth", tempMin:70 },
"rock": { "elem1": "dino_fossil", chance:0.00005 },
"sand": { "elem1": "dino_fossil", chance:0.000035 },
"dirt": { "elem1": "dino_fossil", chance:0.00003 },
"tuff": { "elem1": "dino_fossil", chance:0.00005 },
"basalt": { "elem1": "dino_fossil", chance:0.00004 },
"mudstone": { "elem1": "dino_fossil", chance:0.00004 },
"packed_sand": { "elem1": "dino_fossil", chance:0.00004 },
"gravel": { "elem1": "dino_fossil", chance:0.000035 },
"clay": { "elem1": "dino_fossil", chance:0.00003 },
"clay_soil": { "elem1": "dino_fossil", chance:0.00003 },
"permafrost": { "elem1": "dino_fossil", chance:0.000035 },
"mulch": { "elem1": "dino_fossil", chance:0.00003 },
"ant_wall": { "elem1": "dino_fossil", chance:0.00002 },
"limestone": { "elem1": "dino_fossil", chance:0.00005 },
"quicklime": { "elem1": "dino_fossil", chance:0.000045 },
"slaked_lime": { "elem1": "dino_fossil", chance:0.000035 },
},
category:"life",
tempHigh: 760,
stateHigh: "quicklime",
state: "solid",
density: 1500,
hardness: 0.5,
breakInto: ["quicklime","bone","bone","bone_marrow"]
},

elements.coal = {
color: "#2b2b2b",
behavior: behaviors.STURDYPOWDER,
reactions: {
"water": { elem2:"dirty_water", chance:0.02 },
"salt_water": { elem2:"dirty_water", chance:0.02 },
"sugar_water": { elem2:"dirty_water", chance:0.02 },
"seltzer": { elem2:"dirty_water", chance:0.02 },
"dead_plant": { elem2:"coal", tempMin:200, chance:0.005, oneway:true },
"wood": { elem2:["coal","coal","charcoal"], tempMin:280, chance:0.005, oneway:true },
"tree_branch": { elem2:["coal","coal","charcoal"], tempMin:280, chance:0.005, oneway:true },
"charcoal": { elem2:"coal", tempMin:200, chance:0.005, oneway:true },
},
burn: 28,
burnTime: 1000,
burnInto: ["fire","fire","fire","fire","dust","carbon_dioxide"],
tempHigh: 6000,
stateHigh: "fire",
category: "powders",
state: "solid",
density: 250,
breakInto: ["dust","ash","carbon_dioxide"],
hardness: 0.5,
},

elements.bug_amber = {
hidden:true,
name: "amber",
color: ["#ffc000","#b67f18","#c86305","#cf7a19","#e4ae3a"],
temp: 20,
tempHigh: 345,
stateHigh: ["smoke","sap","sap","dead_bug","sap"],
breakInto: [null,null,null,"dna","dna","sap","sap","sap","sap","sap","dead_bug"],
category: "solids"
},

elements.hive_amber = {
hidden:true,
properties: {
dna: "bee",
},
name: "amber",
color: "#ffc000",
temp: 20,
tempHigh: 345,
stateHigh: ["smoke","smoke","honey","honey","honey","dead_bug","dead_bug","sap"],
breakInto: [null,"dna","dna","honey","honey","honey","honey","honey","sap","dead_bug",null,"dna","dna","honey","honey","honey","honey","honey","sap","dead_bug","bee"],
category: "solids"
},

elements.dinosaur = {
hidden:true,
properties: {
dna: "dinosaur",
},
color: ["#7F2B0A","#808080","#006400"],
behavior: [
"XX|M2%5|XX",
"M2%10|XX|M2%20 AND BO",
"M2%5|M1|M2%15",
],
tempHigh: 225,
stateHigh: ["cooked_meat","cooked_meat","ash","dino_bones"],
tempLow: -35,
stateLow: ["frozen_meat","frozen_meat","dino_bones","dino_bones"],
breakInto: ["blood","blood","meat","meat","dino_bones","blood","blood","meat","meat","dino_bones","feather"],
category: "life",
burn: 75,
burnTime: 30,
burnInto: ["cooked_meat","cooked_meat","ash","dino_bones"],
state: "solid",
density: 1500,
conduct: 0.25,
reactions: {
"bird": { elem2: [null,null,null,null,null,null,"blood","feather"], chance: 0.3, func: behaviors.FEEDPIXEL },
"head": { elem2: [null,null,null,null,null,null,null,"blood","blood","skull"], chance: 0.5, func: behaviors.FEEDPIXEL },
"body": { elem2: [null,null,null,null,null,null,"blood","blood","bone"], chance: 0.5, func: behaviors.FEEDPIXEL },
"plant": { elem2: null, chance: 0.5, func: behaviors.FEEDPIXEL },
"bone": { elem2: ["bone_marrow","blood","quicklime",null,null,null], chance: 0.3, },
"skull": { elem2: ["bone_marrow","blood","quicklime",null,null,null], chance: 0.1, },
"bone_marrow": { elem2: ["blood","blood",null], chance: 0.3, func: behaviors.FEEDPIXEL },attr1:{"dna":"snail"},
"blood": { elem2: null, chance: 0.01, func: behaviors.FEEDPIXEL },
"meat": { elem2: null, chance: 0.5, func: behaviors.FEEDPIXEL },
"cooked_meat": { elem2: null, chance: 0.4, func: behaviors.FEEDPIXEL },
"cured_meat": { elem2: null, chance: 0.1, func: behaviors.FEEDPIXEL },
"fly": { elem2: null, chance: 0.05, func: behaviors.FEEDPIXEL },
"ant": { elem2: [null,null,null,null,null,null,"dead_bug"], chance: 0.05, func: behaviors.FEEDPIXEL },
"worm": { elem2: [null,null,null,null,null,null,"slime"], chance: 0.05, func: behaviors.FEEDPIXEL },
"glass": { elem2: "glass_shard", chance: 0.05 },
"concrete": { elem2: "dust", chance: 0.03 },
},
},

elements.trilobite = {
hidden:true,
properties: {
dna: "trilobite",
},
color: "#808080",
behavior: [
"XX|M2%5|SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%05",
"XX|FX%0.5|M2%50 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%10 AND BO",
"M2%50|M1|M2%50 AND SW:water,salt_water,sugar_water,dirty_water,seltzer,pool_water,primordial_soup%10",
],
reactions: {
"algae": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
"kelp": { elem2:"water", chance:0.25 },
"plant": { elem2:null, chance:0.125, func:behaviors.FEEDPIXEL },
"fly": { elem2:null, chance:0.4, func:behaviors.FEEDPIXEL },
"firefly": { elem2:null, chance:0.6, func:behaviors.FEEDPIXEL },
"worm": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
"tadpole": { elem2:null, chance:0.25, func:behaviors.FEEDPIXEL },
"oxygen": { elem2:"carbon_dioxide", chance:0.5 },
"broth": { elem2:"water", chance:0.2, func:behaviors.FEEDPIXEL },
"slug": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
"herb": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
"lettuce": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
"dead_plant": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
"lichen": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
"yeast": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
"yogurt": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
"tea": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
"yolk": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
"cell": { elem2:null, chance:0.15, func:behaviors.FEEDPIXEL },
"crumb": { elem2:null, chance:0.1, func:behaviors.FEEDPIXEL },
"alcohol": { elem1:"dead_bug", attr1:{"dna":"trilobite"}, chance:0.001 },
"water": { elem2:"bubble", attr2:{"clone":"water"}, chance:0.002, oneway:true },
"salt_water": { elem2:"bubble", attr2:{"clone":"salt_water"}, chance:0.002, oneway:true },
"pool_water": { elem1:"dead_bug", chance:0.001 },
"chlorine": { elem1:"dead_bug", chance:0.1 },
"vinegar": { elem1:"dead_bug", chance:0.001 },
},
foodNeed: 10,
temp: 20,
tempHigh: 150,
stateHigh: "meat",
tempLow: -20,
stateLow: ["dead_bug","frozen_meat"],
category:"life",
breakInto: ["dead_bug","blood"],
burn:25,
burnTime:250,
state: "solid",
density: 1080,
conduct: 0.2,
eggColor: ["#211316","#2C1A1D","#503734"]
},

elements.extracted_dna = {
hidden:true,
name: "artificial_egg",
color: ["#211316","#2C1A1D","#503734","#e0d3ab"],
behavior: behaviors.POWDER,
tick: function(pixel) {
if (Math.random() < 0.00025 || (pixel.dna && pixel.temp > 40 && pixel.temp < 150)) {
if (pixel.dna) {
    changePixel(pixel,pixel.dna);
}
else changePixel(pixel,"cell")
}
},
innerColor: "#ffffff",
tempHigh: 1200,
stateHigh: ["steam","dna","calcium","carbon_dioxide","sulfur_gas"],
breakInto: ["yolk","yolk","dna","cell"],
category:"life",
conduct: 1,
};

elements.extractor = {
name: "dna-extractor",
color: ["#d1c6be","#b5c0ad","#b9b8bc"],
behavior: behaviors.STURDYPOWDER,
reactions: {
"fossil": { elem2:"extracted_dna", chance:0.05 },
"marrow_fossil": { elem2:"extracted_dna", chance:0.06 },
"petrified_wood": { elem2:"extracted_dna", attr2:{"dna":"sapling"}, chance:0.01 },
"wood": { elem2:"extracted_dna", attr2:{"dna":"sapling"}, chance:0.05 },
"bone_marrow": { elem2:"extracted_dna", chance:0.1 },
"bone": { elem2:"extracted_dna", chance:0.1 },
"meat": { elem2:"extracted_dna", chance:0.1 },
"frozen_meat": { elem2:"extracted_dna", chance:0.1 },
"cooked_meat": { elem2:"extracted_dna", chance:0.1 },
"rotten_meat": { elem2:"extracted_dna", chance:0.05 },
"blood": { elem2:"extracted_dna", chance:0.1 },
"slime": { elem2:"extracted_dna", chance:0.05 },
"dead_bug": { elem2:"extracted_dna", chance:0.2 },
"hive_amber": { elem2:"extracted_dna", chance:0.2 },
"bug_amber": { elem2:"extracted_dna", chance:0.2 },
"dino_bones": { elem2:"extracted_dna", attr2:{"dna":"dinosaur"}, chance:0.2 },
"skull": { elem2:"extracted_dna", attr2:{"dna":"human"}, chance:0.2 },
"dino_fossil": { elem2:"extracted_dna", attr2:{"dna":"dinosaur"}, chance:0.02 },
"human_fossil": { elem2:"extracted_dna", attr2:{"dna":"human"}, chance:0.02 },
},
category:"machines",
conduct: 1,
hardness: 1,
};

elements.head.breakInto = ["blood","meat","human_bones","skull"]

elements.head.burnInto = ["ash","cooked_meat","human_bones","skull","skull"]

elements.head.stateHigh = ["cooked_meat","human_bones","skull","skull"]

elements.head.stateLow = ["frozen_meat","human_bones","skull","skull","skull"]

elements.body.breakInto = ["blood","meat","human_bones","bone"]

elements.body.burnInto = ["ash","cooked_meat","human_bones"]

elements.body.stateHigh = ["cooked_meat","human_bones"]

elements.body.stateLow = ["frozen_meat","human_bones","human_bones"]

elements.dead_bug.breakInto = ["calcium","calcium","calcium","quicklime"]

if (!elements.sap.reactions) { elements.sap.reactions = {} }
elements.sap.reactions.dead_bug = { elem1:"bug_amber", elem2:null, chance:0.1 };
elements.sap.reactions.hive = { elem1:null, elem2:"hive_amber", attr2:{"dna":"bee"}, chance:0.01 };
elements.sap.reactions.ant = { elem1:"bug_amber", attr1:{"dna":"ant"}, elem2:null, chance:0.1 };
elements.sap.reactions.fly = { elem1:"bug_amber", attr1:{"dna":"fly"}, elem2:null, chance:0.1 };
elements.sap.reactions.flea = { elem1:"bug_amber", attr1:{"dna":"flea"}, elem2:null, chance:0.1 };
elements.sap.reactions.termite = { elem1:"bug_amber", attr1:{"dna":"termite"}, elem2:null, chance:0.1 };
elements.sap.reactions.worm = { elem1:"bug_amber", attr1:{"dna":"worm"}, elem2:null, chance:0.1 };
elements.sap.reactions.bee = { elem1:"bug_amber", attr1:{"dna":"bee"}, elem2:null, chance:0.1 };
elements.sap.reactions.firefly = { elem1:"bug_amber", attr1:{"dna":"firefly"}, elem2:null, chance:0.1 };
elements.sap.reactions.stinkbug = { elem1:"bug_amber", attr1:{"dna":"stinkbug"}, elem2:null, chance:0.1 };
elements.sap.reactions.slug = { elem1:"bug_amber", attr1:{"dna":"slug"}, elem2:null, chance:0.08 };
elements.sap.reactions.snail = { elem1:"bug_amber", attr1:{"dna":"snail"}, elem2:null, chance:0.05 };
elements.sap.reactions.trilobite = { elem1:"bug_amber", attr1:{"dna":"trilobite"}, elem2:null, chance:0.1 };


if (!elements.bone.reactions) { elements.bone.reactions = {} }
elements.bone.reactions.rock = { "elem1": "fossil", tempMin:60, chance:0.00005 };
elements.bone.reactions.sand = { "elem1": "fossil", tempMin:60, chance:0.000035 };
elements.bone.reactions.dirt = { "elem1": "fossil", tempMin:60, chance:0.00003 };
elements.bone.reactions.tuff = { "elem1": "fossil", tempMin:60, chance:0.00005 };
elements.bone.reactions.basalt = { "elem1": "fossil", tempMin:60, chance:0.00004 };
elements.bone.reactions.mudstone = { "elem1": "fossil", tempMin:60, chance:0.00004 };
elements.bone.reactions.packed_sand = { "elem1": "fossil", tempMin:60, chance:0.00004 };
elements.bone.reactions.gravel = { "elem1": "fossil", tempMin:60, chance:0.000035 };
elements.bone.reactions.clay = { "elem1": "fossil", tempMin:60, chance:0.00003 };
elements.bone.reactions.clay_soil = { "elem1": "fossil", tempMin:60, chance:0.00003 };
elements.bone.reactions.mulch = { "elem1": "fossil", tempMin:60, chance:0.00003 };
elements.bone.reactions.ant_wall = { "elem1": "fossil", tempMin:60, chance:0.00002 };
elements.bone.reactions.limestone = { "elem1": "fossil", tempMin:60, chance:0.00005 };
elements.bone.reactions.quicklime = { "elem1": "fossil", tempMin:60, chance:0.000045 };
elements.bone.reactions.slaked_lime = { "elem1": "fossil", tempMin:60, chance:0.000035 };


if (!elements.bone_marrow.reactions) { elements.bone_marrow.reactions = {} }
elements.bone_marrow.reactions.rock = { "elem1": "marrow_fossil", tempMin:70, chance:0.00005 };
elements.bone_marrow.reactions.sand = { "elem1": "marrow_fossil", tempMin:70, chance:0.000035 };
elements.bone_marrow.reactions.dirt = { "elem1": "marrow_fossil", tempMin:70, chance:0.0003 };
elements.bone_marrow.reactions.tuff = { "elem1": "marrow_fossil", tempMin:70, chance:0.00005 };
elements.bone_marrow.reactions.basalt = { "elem1": "marrow_fossil", tempMin:70, chance:0.00004 };
elements.bone_marrow.reactions.mudstone = { "elem1": "marrow_fossil", tempMin:70, chance:0.00004 };
elements.bone_marrow.reactions.packed_sand = { "elem1": "marrow_fossil", tempMin:70, chance:0.00004 };
elements.bone_marrow.reactions.gravel = { "elem1": "marrow_fossil", tempMin:70, chance:0.000035 };
elements.bone_marrow.reactions.clay = { "elem1": "marrow_fossil", tempMin:70, chance:0.00003 };
elements.bone_marrow.reactions.clay_soil = { "elem1": "marrow_fossil", tempMin:70, chance:0.00003 }
elements.bone_marrow.reactions.mulch = { "elem1": "marrow_fossil", tempMin:70, chance:0.00003 };
elements.bone_marrow.reactions.ant_wall = { "elem1": "marrow_fossil", tempMin:70, chance:0.00002 };
elements.bone_marrow.reactions.limestone = { "elem1": "marrow_fossil", tempMin:70, chance:0.00005 };
elements.bone_marrow.reactions.quicklime = { "elem1": "marrow_fossil", tempMin:70, chance:0.000045 };
elements.bone_marrow.reactions.slaked_lime = { "elem1": "marrow_fossil", tempMin:70, chance:0.000035 };


if (!elements.wood.reactions) { elements.wood.reactions = {} }
elements.wood.reactions.rock = { "elem1": "petrified_wood", tempMin:50, tempMax:279, chance:0.000045 };
elements.wood.reactions.rock = { "elem1": ["methane","coal","coal","coal","coal"], tempMin:280, chance:0.000045 };
elements.wood.reactions.sand = { "elem1": ["methane","coal","coal","coal","coal"], tempMin:280, chance:0.000035 };
elements.wood.reactions.dirt = { "elem1": ["methane","coal","coal","coal","coal"], tempMin:280, chance:0.00003 };
elements.wood.reactions.tuff = { "elem1": "petrified_wood", tempMin:50, tempMax:279, chance:0.000045 };
elements.wood.reactions.tuff = { "elem1": ["methane","coal","coal","coal","coal"], tempMin:280, chance:0.000045 };
elements.wood.reactions.basalt = { "elem1": "petrified_wood", tempMin:50, tempMax:279, chance:0.000035 };
elements.wood.reactions.basalt = { "elem1": ["methane","coal","coal","coal","coal"], tempMin:280, chance:0.000035 };
elements.wood.reactions.mudstone = { "elem1": "petrified_wood", tempMin:50, tempMax:279, chance:0.000035 };
elements.wood.reactions.mudstone = { "elem1": ["methane","coal","coal","coal","coal"], tempMin:280, chance:0.000035 };
elements.wood.reactions.packed_sand = { "elem1": "petrified_wood", tempMin:50, chance:0.000035 };
elements.wood.reactions.gravel = { "elem1": "petrified_wood", tempMin:50, chance:0.00003 };
elements.wood.reactions.clay = { "elem1": "petrified_wood", tempMin:50, chance:0.000025 };
elements.wood.reactions.clay_soil = { "elem1": "petrified_wood", tempMin:50, chance:0.000025 }
elements.wood.reactions.mulch = { "elem1": "petrified_wood", tempMin:50, chance:0.000025 };
elements.wood.reactions.ant_wall = { "elem1": "petrified_wood", tempMin:50, chance:0.000015 };
elements.wood.reactions.limestone = { "elem1": "petrified_wood", tempMin:50, chance:0.000045 };
elements.wood.reactions.quicklime = { "elem1": "petrified_wood", tempMin:50, chance:0.00004 };
elements.wood.reactions.slaked_lime = { "elem1": "petrified_wood", tempMin:50, chance:0.00003 };


if (!elements.tree_branch.reactions) { elements.tree_branch.reactions = {} }
elements.tree_branch.reactions.rock = { "elem1": "petrified_wood", tempMin:50, tempMax:279, chance:0.00005 };
elements.tree_branch.reactions.rock = { "elem1": ["methane","coal","coal","coal","coal"], tempMin:280, chance:0.00005 };
elements.tree_branch.reactions.sand = { "elem1": ["methane","coal","coal","coal","coal"], tempMin:280, chance:0.00003 };
elements.tree_branch.reactions.dirt = { "elem1": ["methane","coal","coal","coal","coal"], tempMin:280, chance:0.000025 };
elements.tree_branch.reactions.tuff = { "elem1": "petrified_wood", tempMin:50, tempMax:279, chance:0.00005 };
elements.tree_branch.reactions.tuff = { "elem1": ["methane","coal","coal","coal","coal"], tempMin:280, chance:0.00005 };
elements.tree_branch.reactions.basalt = { "elem1": "petrified_wood", tempMin:50, tempMax:279, chance:0.00004 };
elements.tree_branch.reactions.basalt = { "elem1": ["methane","coal","coal","coal","coal"], tempMin:280, chance:0.00004 };
elements.tree_branch.reactions.mudstone = { "elem1": "petrified_wood", tempMin:50, tempMax:279, chance:0.00004 };
elements.tree_branch.reactions.mudstone = { "elem1": ["methane","coal","coal","coal","coal"], tempMin:280, chance:0.00004 };
elements.tree_branch.reactions.packed_sand = { "elem1": "petrified_wood", tempMin:50, chance:0.00004 };
elements.tree_branch.reactions.gravel = { "elem1": "petrified_wood", tempMin:50, chance:0.000035 };
elements.tree_branch.reactions.clay = { "elem1": "petrified_wood", tempMin:50, chance:0.00003 };
elements.tree_branch.reactions.clay_soil = { "elem1": "petrified_wood", tempMin:50, chance:0.00003 }
elements.tree_branch.reactions.mulch = { "elem1": "petrified_wood", tempMin:50, chance:0.00003 };
elements.tree_branch.reactions.ant_wall = { "elem1": "petrified_wood", tempMin:50, chance:0.00002 };
elements.tree_branch.reactions.limestone = { "elem1": "petrified_wood", tempMin:50, chance:0.00005 };
elements.tree_branch.reactions.quicklime = { "elem1": "petrified_wood", tempMin:50, chance:0.000045 };
elements.tree_branch.reactions.slaked_lime = { "elem1": "petrified_wood", tempMin:50, chance:0.000035 };

if (!elements.dead_plant.reactions) { elements.dead_plant.reactions = {} }
elements.dead_plant.reactions.rock = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.00005 };
elements.dead_plant.reactions.sand = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.000025 };
elements.dead_plant.reactions.dirt = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.000025 };
elements.dead_plant.reactions.tuff = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.000025 };
elements.dead_plant.reactions.basalt = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.00005 };
elements.dead_plant.reactions.mudstone = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.000025 };
elements.dead_plant.reactions.packed_sand = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.00003 };
elements.dead_plant.reactions.gravel = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.000025 };
elements.dead_plant.reactions.clay = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.000025 };
elements.dead_plant.reactions.clay_soil = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.000025 };
elements.dead_plant.reactions.mulch = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.000025 };
elements.dead_plant.reactions.ant_wall = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.000025 };
elements.dead_plant.reactions.limestone = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.000035 };
elements.dead_plant.reactions.quicklime = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.000025 };
elements.dead_plant.reactions.slaked_lime = { "elem1": ["oil","methane","methane","coal","coal"], tempMin:280, chance:0.000025 };

if (!elements.algae.reactions) { elements.algae.reactions = {} }
elements.algae.reactions.rock = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.00005 };
elements.algae.reactions.sand = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.000025 };
elements.algae.reactions.dirt = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.000025 };
elements.algae.reactions.tuff = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.000025 };
elements.algae.reactions.basalt = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.00005 };
elements.algae.reactions.mudstone = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.000025 };
elements.algae.reactions.packed_sand = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.00003 };
elements.algae.reactions.gravel = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.000025 };
elements.algae.reactions.clay = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.000025 };
elements.algae.reactions.clay_soil = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.000025 };
elements.algae.reactions.mulch = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.000025 };
elements.algae.reactions.ant_wall = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.000025 };
elements.algae.reactions.limestone = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.000035 };
elements.algae.reactions.quicklime = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.000025 };
elements.algae.reactions.slaked_lime = { "elem1": ["oil","methane","methane","coal"], tempMin:280, chance:0.000025 };

delete elements.dirt.reactions.bone
delete elements.rock.reactions.dead_plant
























































//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------















































elements.lemonade = {
    color: "#FFEA00",
    behavior: behaviors.LIQUID,
    category: "liquids",
    isFood: true,
    state: "solid",
    }
    
    elements.head.reactions["lemonade"] = {elem2: null}
    elements.head.reactions["lemons"] = {elem2: null}
    elements.head.reactions["lemon_juice"] = {elem2: null}
    elements.head.reactions["false_lemons"] = {elem2: "armageddon"}
    
    elements.lemon_juice = {
    color: "#FFFF00",
    behavior: behaviors.LIQUID,
    category: "liquids",
    state: "solid",
    reactions: {
            "sugar_water": { elem1: null, elem2: "lemonade" },
        }
    };
    
    elements.lemons = {
        
        color: "#8B8000",
        behavior: behaviors.POWDER,
        category: "food",
        state: "solid",
    breakInto: "lemon_juice"
    
    };
    elements.false_lemons = {
        color: "#8B8000",
        behavior: behaviors.POWDER,
        category: "special",
        state: "solid",
        breakInto: "armageddon"
    };
    elements.lemon_tree = {
        category: "life",
        color: "#a0522d",
        tick: function(tick) {
            if (!pixel.burning) {
                if (!pixel.lc) { pixel.lc = "#8B8000" }
                if (!pixel.wc) { pixel.wc = "#a0522d" }
                if (isEmpty(pixel.x-1,pixel.y-1) && Math.random() < 0.02) {
                    if (Math.random() < 0.5) {
                        createPixel("lemons",pixel.x-1,pixel.y-1);
                        pixelMap[pixel.x-1][pixel.y-1].color = pixelColorPick(pixelMap[pixel.x-1][pixel.y-1], pixel.lc);
                    }
                }
            }
        }
    }
    elements.false_lemon_tree = {
        category: "life",
        color: "#a0522d",
        tick: function(tick) {
            if (!pixel.burning) {
                if (!pixel.lc) { pixel.lc = "#8B8000" }
                if (!pixel.wc) { pixel.wc = "#a0522d" }
                if (isEmpty(pixel.x-1,pixel.y-1) && Math.random() < 0.02) {
                    if (Math.random() < 0.5) {
                        createPixel("false_lemons",pixel.x-1,pixel.y-1);
                        pixelMap[pixel.x-1][pixel.y-1].color = pixelColorPick(pixelMap[pixel.x-1][pixel.y-1], pixel.lc);
                    }
                }
            }
        }
    }
    








   
    


















































    















































































    






























































//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------














































elements.obsidian = {
	color: ["#343434", "#313639"],
	behavior: behaviors.SOLID,
	category: "solids",
	state: "solid",
    density: 2380,
    reactions: {
        "sand": { elem1: "obsidian_shard" },
        "dirt": { elem1: "obsidian_shard" },
        "rock": { elem1: "obsidian_shard" },
        "mudstone": { elem1: "obsidian_shard" },
        "packed_snow": { elem1: "obsidian_shard" },
        "gravel": { elem1: "obsidian_shard" },
        "clay": { elem1: "obsidian_shard" },
        "clay_soil": { elem1: "obsidian_shard" },
        "permafrost": { elem1: "obsidian_shard" },
        "mulch": { elem1: "obsidian_shard" },
        "basalt": { elem1: "obsidian_shard" },
        "tuff": { elem1: "mud" },
        "limestone": { elem1: "obsidian_shard" },
        "quicklime": { elem1: "obsidian_shard" },
        "slaked_lime": { elem1: "obsidian_shard" },
        }
    },
    elements.obsidian_shard = {
	color: ["#343434", "#313639"],
	behavior: behaviors.POWDER,
	category: "powders",
	state: "solid",
    density: 2380,
    reactions: {
            "glue": { elem1: "obsidian" },
            }
    },
elements.magma = {
    color: ["#ff6f00","#ff8c00","#ff4d00"],
    behavior: behaviors.MOLTEN,
    reactions: {
        "ice": { elem1: "basalt" },
        "ash": { elem1: "molten_tuff", "elem2":null },
        "molten_ash": { elem1: "molten_tuff", "elem2":null },
        "charcoal": { elem2:"diamond", tempMin:800, chance:0.005, oneway:true },
    },
    temp: 1200,
    tempLow: 800,
    stateLow: ["basalt","basalt","basalt","rock","obsidian_shard","obsidian"],
    viscosity: 10000,
    category: "liquids",
    state: "liquid",
    density: 2725
    }





















































//--------------------------------------------------------------------------------------------------------------------------------------------------------
































































elements.potato_chip = {
    behavior: behaviors.STURDYPOWDER,
    state: "solid",
    density: 1350,
    color: ["#F7DD93", "#D8A44B"],
    category: "food",
    desc: "Potato chip. Turns potato next to it into potato chip if temp is >= 104 - 180.",

    tick: function(pixel) {
        if(pixelTicks - pixel.start >= 10) {
    if (!isEmpty(pixel.x, pixel.y - 1, true)) {
        if (pixel.temp >= 104 && pixelMap[pixel.x][pixel.y - 1].element === "potato") {
            changePixel(pixelMap[pixel.x][pixel.y - 1], "potato_chip");  
        }
    }
    if (!isEmpty(pixel.x, pixel.y + 1, true)) {
        if (pixel.temp >= 104 && pixelMap[pixel.x][pixel.y + 1].element === "potato") {
            changePixel(pixelMap[pixel.x][pixel.y + 1], "potato_chip");  
        }
    }
    if (!isEmpty(pixel.x - 1, pixel.y, true)) {
        if (pixel.temp >= 104 && pixelMap[pixel.x - 1][pixel.y].element === "potato") {
            changePixel(pixelMap[pixel.x - 1][pixel.y], "potato_chip");  
        }
    }
    if (!isEmpty(pixel.x + 1,pixel.y, true)) {
        if (pixel.temp >= 104 && pixelMap[pixel.x + 1][pixel.y].element === "potato") {
            changePixel(pixelMap[pixel.x + 1][pixel.y], "potato_chip");  
        }
    }
    }
    }
}

elements.sunflower_oil = {
    behavior: behaviors.LIQUID,
    color: ["#FFFFCC", "#FFFF99", "#FFFF66", "#FFFF33", "#FFFF00", "#FFCC00"],
    viscosity: 63,
    category: "food",
    state: "liquid",
    reactions: {
        "potato": {elem2: "potato_chip", tempMin: 140},
    }
}









































































//---------------------------------------------------------------------------------------------------------------------------------------------------


































































// elements.mud_brick = {
//     color: "#8a6249",
//     colorPattern: textures.BRICK,
//     colorKey: {
//         "l": "#986c51",
//         "r": "#8a6249",
//         "d": "#7f5943",
//         "w": "#634933"},
//     behavior: behaviors.WALL,
//     category: "solids",
//     state: "solid",
//     tempHigh: 1200,
//     stateHigh: "molten_dirt",
//     hardness: 0.33,
//     breakInto: "dirt"
// }

var materials = ["brick","concrete","wood","glass","steel","tungsten","gold","titanium","blue_gold","purple_gold","rose_gold","copper"];

elements.tower = {
    color: [],
    behavior: [
        "XX|XX|XX",
        "XX|CH:"+materials.join("_tower,")+"_tower|XX",
        "XX|XX|XX",
    ],
    category: "spawners",
    maxSize: 1,
    cooldown: defaultCooldown,
}

materials.forEach((elem) => {
    if (Array.isArray(elements[elem].color)) {
        elements.tower.color.push(elements[elem].color[0]);
    }
    else {
        elements.tower.color.push(elements[elem].color);
    }
    elements[elem+"_tower"] = {
        color: elements[elem].color,
        behavior: [
            `XX|M2|XX`,
            `XX|C2:${elem}_room|XX`,
            `XX|M1|XX`,
        ],
        maxSize: 1,
        cooldown: defaultCooldown,
        category: "spawners"
    }
    elements[elem+"_room"] = {
        color: elements[elem].color,
        behavior: [
            `XX|XX|CR:${elem}_room,${elem}_room,${elem}_room,${elem}_room,tower_antenna,wood_roof%80|XX|XX`,
            `XX|XX|XX|XX|XX`,
            `CR:${elem}|CR:${elem}|CR:${elem}|CR:${elem}|CR:${elem}`,
            `CR:glass|XX|XX|CR:human%25|CR:glass`,
            `CR:glass|CR:human%25|DL|CR:human%25|CR:glass`,
            `CR:${elem}|XX|XX|XX|CR:${elem}`,
            `CR:${elem}|CR:${elem}|CR:${elem}|CR:${elem}|CR:${elem}`,
            `XX|XX|XX|XX|XX`,
            `XX|XX|XX|XX|XX`
        ],
        maxSize: 1,
        cooldown: defaultCooldown,
        category: "spawners",
        hidden: true
    }
})
elements.tower.color = elements.tower.color.sort();

elements.tower_antenna = {
    color: "#bababa",
    behavior: [
        "CR:steel%30",
        "CR:steel",
        "CR:steel",
        "CR:steel",
        "CH:steel",
        "CR:steel",
        "XX",
        "XX",
        "XX",
        "XX",
    ],
    maxSize: 1,
    cooldown: defaultCooldown,
    category: "spawners",
    hidden: true
}
elements.wood_roof = {
    color: "#965829",
    behavior: [
        "XX|XX|XX|XX|XX|XX|XX",
        "XX|XX|XX|CR:wood|XX|XX|XX",
        "XX|XX|CR:wood|CH:wood|CR:wood|XX|XX",
        "XX|CR:wood|XX|XX|XX|CR:wood|XX",
        "CR:wood|XX|XX|XX|XX|XX|CR:wood",
    ],
    maxSize: 1,
    cooldown: defaultCooldown,
    category: "spawners",
    hidden: true
}



worldgentypes.city = {
    layers: [
        [0.95, "grass"],
        [0.50, "dirt"],
        [0.05, "rock"],
        [0, "basalt"],
    ],
    decor: [ // [element, chance, distance from top]
        ["tower", 0.08],
        // ["bird", 0.025, 10],
    ],
    baseHeight: 0.25
}





















































//----------------------------------------------------------------------------------------------------------------------------------------------------


















































elements.tsar_bomba = {
    color: "#524C41",
    behavior: [
        "XX|EX:150>plasma|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:150>plasma|M2",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
},
elements.little_boy = {
    color: "#F5F5DC",
    behavior: [
        "XX|EX:20>plasma|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:70>plasma,plasma,plasma,plasma,radiation,fallout|M2",
    ],
    category: "weapons",
    state: "solid",
    density: 500,
    excludeRandom: true,
    cooldown: defaultCooldown
},
elements.fat_man = {
    color: ["#ffff00","#333333"],
    behavior: [
        "XX|EX:28>plasma|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:98>plasma,plasma,plasma,plasma,radiation,fallout|M2",
    ],
    category: "weapons",
    state: "solid",
    density: 1000,
    excludeRandom: true,
    cooldown: defaultCooldown
},
elements.self_propelled_bomb = {
    color: "#71797E",
    tick: function(pixel) {
        if ((pixel.temp > 1000 || pixel.charge) && !pixel.burning) {
            pixel.burning = true;
            pixel.burnStart = pixelTicks;
        }
        if (pixel.burning) {
            if (!tryMove(pixel, pixel.x, pixel.y-1)) {
                // tryMove again to the top left or top right
                tryMove(pixel, pixel.x+(Math.random() < 0.5 ? -1 : 1), pixel.y-1);
            }
            if (pixelTicks-pixel.burnStart > 50 && Math.random() < 0.1) {
                explodeAt(pixel.x, pixel.y, 10, "bomb");
            }
        }
        else {
            if (!tryMove(pixel, pixel.x, pixel.y+1)) {
                // tryMove again to the bottom left or bottom right
                tryMove(pixel, pixel.x+(Math.random() < 0.5 ? -1 : 1), pixel.y+1);
            }
        }
        doDefaults(pixel);
    },
    burn: 90,
    burnTime: 100,
    density: 2000,
    conduct: 1,
    state: "solid",
    category: "weapons"
},
elements.left_missile = {
    color: "#4c4e42",
    behavior: [
        "M2|EX:10|XX",
        "M1 AND EX:10|XX|EX:10",
        "M2|EX:10|XX",
    ],
    state: "solid",
    category:"ammunition",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
},
elements.right_missile = {
    color: "#4c4e42",
    behavior: [
        "XX|EX:10|M2",
       "EX:10|XX|M1 AND EX:10",
        "XX|EX:10|M2",
    ],
    state: "solid",
    category:"ammunition",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
},
elements.up_missile = {
    color: "#4c4e42",
    behavior: [
        "M2|M1 AND EX:10|M2",
       "EX:10|XX|EX:10",
        "XX|EX:10|XX",
    ],
    state: "solid",
    category:"ammunition",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
},
    elements.cluster_munition = {
    color: "#444444",
    behavior: [
        "XX|EX:10>smoke,smoke,smoke,smoke,bomb,bomb|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:10>smoke,smoke,smoke,smoke,bomb,cluster_munition|M2",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
},
    elements.RL_cluster_munition = {
    color: "#444444",
    behavior: [
        "XX|XX|XX",
        "CRcluster%20|XX|CR:cluster%20",
        "M2|M1|M2",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
},
    elements.cluster = {
    color: "#444444",
    behavior: [
        "XX|EX:10%10|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:10%10|M2",
    ],
    category: "ammunition",
    state: "solid",
    density: 1300,
    hidden: true,
},
    elements.machine_gun_left = {
    color: "#C0C0C0",
    behavior: [
        "XX|XX|XX",
        "CR:left_bullet|XX|XX",
        "XX|XX|XX",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
},
    elements.machine_gun_right = {
    color: "#C0C0C0",
    behavior: [
        "XX|XX|XX",
        "XX|XX|CR:right_bullet",
        "XX|XX|XX",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
},
elements.left_bullet = {
    color: "#4c4e42",
    behavior: [
        "M2|XX|XX",
        "M1 AND DB|XX|XX",
        "M2|XX|XX",
    ],
    state: "solid",
    category:"ammunition",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
},
    elements.right_bullet = {
    color: "#4c4e42",
    behavior: [
        "XX|XX|M2",
        "XX|XX|M1 AND DB",
        "XX|XX|M2",
    ],
    state: "solid",
    category:"ammunition",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
},
    elements.e_gun_left = {
    color: "#C0C0C0",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|XX|XX",
        "CR:left_bullet|XX|XX",
        "XX|XX|XX",
    ],
    category: "weapons",
    state: "solid",
    conduct: 1,
    density: 1300,
},
    elements.e_gun_right = {
    color: "#C0C0C0",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|XX|XX",
        "XX|XX|CR:right_bullet",
        "XX|XX|XX",
    ],
    category: "weapons",
    state: "solid",
    conduct: 1,
    density: 1300,
},
    elements.auto_rocket_launcher_left = {
    color: "#C0C0C0",
    behavior: [
        "XX|XX|XX",
        "CR:left_rocket|XX|XX",
        "XX|XX|XX",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
},
    elements.auto_rocket_launcher_right = {
    color: "#C0C0C0",
    behavior: [
        "XX|XX|XX",
        "XX|XX|CR:right_rocket",
        "XX|XX|XX",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
},
elements.left_rocket = {
    color: "#4c4e42",
    behavior: [
        "XX|XX|XX",
        "M1 AND EX:10|XX|XX",
        "XX|XX|XX",
    ],
    state: "solid",
    category:"ammunition",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
},
    elements.right_rocket = {
    color: "#4c4e42",
    behavior: [
        "XX|XX|XX",
        "XX|XX|M1 AND EX:10",
        "XX|XX|XX",
    ],
    state: "solid",
    category:"ammunition",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
},
    elements.e_rocket_launcher_left = {
    color: "#C0C0C0",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|XX|XX",
        "CR:left_rocket|XX|XX",
        "XX|XX|XX",
    ],
    category: "weapons",
    state: "solid",
    conduct: 1,
    density: 1300,
},
    elements.e_rocket_launcher_right = {
    color: "#C0C0C0",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|XX|XX",
        "XX|XX|CR:right_rocket",
        "XX|XX|XX",
    ],
    category: "weapons",
    state: "solid",
    conduct: 1,
    density: 1300,
},
elements.gaster_blast_left = {
    color: "#c5e9f0",
    behavior: [
        "DL|DL|XX",
        "DL AND CR:gaster_blast_left%5|XX|XX",
        "DL|DL|XX",
    ],
    tick: function(pixel) {
        for (var i=0; i<3; i++) {
            if (!tryMove(pixel, pixel.x-2, pixel.y)) {
                if (!isEmpty(pixel.x-2, pixel.y,true)) {
                    var newPixel = pixelMap[pixel.x-2][pixel.y];
                    if (newPixel.element === "gaster_blast_left") { break; }
                    if (elements[newPixel.element].state == "gas") {
                        if (Math.random() > (elements[newPixel.element].hardness || 0)) {
                            if (elements[newPixel.element].breakInto) {
                                breakPixel(newPixel);
                            }
                            else {
                                deletePixel(newPixel.x, newPixel.y);
                            }}}}
                deletePixel(pixel.x,pixel.y);
                break;
            }}},
    category: "energy",
    state: "gas",
    insulate: true,
},
elements.gaster_blast_right = {
    color: "#c5e9f0",
    behavior: [
        "XX|DL|DL",
        "XX|XX|DL AND CR:gaster_blast_right%5",
        "XX|DL|DL",
    ],
    tick: function(pixel) {
        for (var i=0; i<3; i++) {
            if (!tryMove(pixel, pixel.x+2, pixel.y)) {
                if (!isEmpty(pixel.x+2, pixel.y,true)) {
                    var newPixel = pixelMap[pixel.x+2][pixel.y];
                    if (newPixel.element === "gaster_blast_right") { break; }
                    if (elements[newPixel.element].state == "gas") {
                        if (Math.random() > (elements[newPixel.element].hardness || 0)) {
                            if (elements[newPixel.element].breakInto) {
                                breakPixel(newPixel);
                            }
                            else {
                                deletePixel(newPixel.x, newPixel.y);
                            }}}}
                deletePixel(pixel.x,pixel.y);
                break;
            }}},
    category: "energy",
    state: "gas",
    insulate: true,
},
    elements.gaster_blaster_left = {
    color: "#ffffff",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|XX|XX",
        "CR:gaster_blast_left|XX|XX",
        "XX|XX|XX",
    ],
    category: "weapons",
    state: "solid",
    conduct: 20,
},
    elements.gaster_blaster_right = {
    color: "#ffffff",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|XX|XX",
        "XX|XX|CR:gaster_blast_right",
        "XX|XX|XX",
    ],
    category: "weapons",
    state: "solid",
    conduct: 20,
},
elements.fast_bullet_left = {
    color: "#4c4e42",
    behavior: [
        "XX|DL|XX",
        "XX|XX|XX",
        "XX|DL|XX",
    ],
tick: function(pixel) {
        for (var i=0; i<3; i++) {
            if (!tryMove(pixel, pixel.x-3, pixel.y)) {
                if (!isEmpty(pixel.x-3, pixel.y,true)) {
                    var newPixel = pixelMap[pixel.x-3][pixel.y];
                    if (newPixel.element === "fast_bullet_left") { break; }
                    if (elements[newPixel.element].state == "solid") {
                        if (Math.random() > (elements[newPixel.element].hardness || 0)) {
                            if (elements[newPixel.element].breakInto) {
                                breakPixel(newPixel);
                            }
                            else {
                                deletePixel(newPixel.x, newPixel.y);
                            }}}}
                deletePixel(pixel.x,pixel.y);
                break;
            }}},
    category: "ammunition",
    state: "solid",
    insulate: true,
},
elements.fast_bullet_right = {
    color: "#4c4e42",
    behavior: [
        "XX|DL|XX",
        "XX|XX|XX",
        "XX|DL|XX",
    ],
    tick: function(pixel) {
        for (var i=0; i<3; i++) {
            if (!tryMove(pixel, pixel.x+3, pixel.y)) {
                if (!isEmpty(pixel.x+3, pixel.y,true)) {
                    var newPixel = pixelMap[pixel.x+3][pixel.y];
                    if (newPixel.element === "fast_bullet_right") { break; }
                    if (elements[newPixel.element].state == "solid") {
                        if (Math.random() > (elements[newPixel.element].hardness || 0)) {
                            if (elements[newPixel.element].breakInto) {
                                breakPixel(newPixel);
                            }
                            else {
                                deletePixel(newPixel.x, newPixel.y);
                            }}}}
                deletePixel(pixel.x,pixel.y);
                break;
            }}},
    category: "ammunition",
    state: "solid",
    insulate: true,
},
elements.flak_cannon = {
    color: "#C0C0C0",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:flak|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
    conduct: 1,
},
    elements.flak = {
    color: "#f0f0f0",
    tick: function(pixel) {
        if ((pixel.temp > 10 || pixel.charge) && !pixel.burning) {
            pixel.burning = true;
            pixel.burnStart = pixelTicks;
        }
        if (pixel.burning) {
            if (!tryMove(pixel, pixel.x, pixel.y-1)) {
                // tryMove again to the top left or top right
                tryMove(pixel, pixel.x+(Math.random() < 0.5 ? -1 : 1), pixel.y-1);
            }
            if (pixelTicks-pixel.burnStart > 50 && Math.random() < 0.005) {
                explodeAt(pixel.x, pixel.y, 10, "flak_shrapnel");
            }
        }
        else {
            if (!tryMove(pixel, pixel.x, pixel.y+1)) {
                // tryMove again to the bottom left or bottom right
                tryMove(pixel, pixel.x+(Math.random() < 0.5 ? -1 : 1), pixel.y+1);
            }
        }
        doDefaults(pixel);
    },
    burn: 90,
    burnTime: 100,
    density: 2000,
    conduct: 1,
    state: "solid",
    category: "ammunition"
},
    elements.flak_shrapnel = {
    color: "#71797E",
       behavior: [
        "XX|XX|XX",
        "XX|EX:5 %10|XX",
        "M2|M1|M2",
    ],
    burn: 90,
    burnTime: 100,
    density: 2000,
    conduct: 1,
    state: "solid",
    category: "ammunition"
},
elements.fighter_jet_left = {
    color: "#bcc6cc",
    behavior: [
        "M1%0.2|M2%0.005 AND EX:5>metal_scrap|M2%0.005 AND EX:5>metal_scrap",
        "M1 AND CR:fast_bullet_left|XX|CR:smoke AND EX:5>metal_scrap",
        "M1%0.2|M2%0.005 AND EX:5>metal_scrap|M2%0.005 AND EX:5>metal_scrap",
    ],
tick: function(pixel) {
    for (var i=0; i<2; i++) {
            if (!tryMove(pixel, pixel.x-1, pixel.y)) {
                if (!isEmpty(pixel.x-1, pixel.y,true)) {
                    var newPixel = pixelMap[pixel.x-1][pixel.y];
                    if (newPixel.element === "fast_bullet_left") { break; }
                    if (elements[newPixel.element].state == "solid") {
                        if (Math.random() > (elements[newPixel.element].hardness || 0)) {
                            if (elements[newPixel.element].breakInto) {
                                breakPixel(newPixel);
                            }
                            else {
                                deletePixel(newPixel.x, newPixel.y);
                            }}}}
                deletePixel(pixel.x,pixel.y);
                break;
            }}},
    category: "aircrafts",
    breakInto: "metal_scrap"
 },
elements.fighter_jet_right = {
    color: "#bcc6cc",
    behavior: [
        "M2%0.005 AND EX:5>metal_scrap|M2%0.005 AND EX:5>metal_scrap|M1%0.2",
        "CR:smoke AND EX:5>metal_scrap|XX|M1 AND CR:fast_bullet_right",
        "M2%0.005 AND EX:5>metal_scrap|M2%0.005 AND EX:5>metal_scrap|M1%0.2",
    ],
tick: function(pixel) {
    for (var i=0; i<2; i++) {
            if (!tryMove(pixel, pixel.x+1, pixel.y)) {
                if (!isEmpty(pixel.x+1, pixel.y,true)) {
                    var newPixel = pixelMap[pixel.x+1][pixel.y];
                    if (newPixel.element === "fast_bullet_right") { break; }
                    if (elements[newPixel.element].state == "solid") {
                        if (Math.random() > (elements[newPixel.element].hardness || 0)) {
                            if (elements[newPixel.element].breakInto) {
                                breakPixel(newPixel);
                            }
                            else {
                                deletePixel(newPixel.x, newPixel.y);
                            }}}}
                deletePixel(pixel.x,pixel.y);
                break;
            }}},
    category: "aircrafts",
    breakInto: "metal_scrap"
 },
elements.machine_for_throwing_bombs_at_you_left = {
    color: "#524c41",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|XX|XX",
        "CR:bombs_for_throwing_at_you_left|XX|XX",
        "XXXX|XX",
    ],
    category: "weapons",
    conduct: 1
},
elements.bombs_for_throwing_at_you_left = {
    color: "#524c41",
    category: "ammunition",
    behavior: [
        "XX|EX:10>bomb|XX",
        "XX|XX|XX",
        "M1|M1%10 AND EX:10>bomb|XX",
    ],
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
}
elements.machine_for_throwing_bombs_at_right = {
    color: "#524c41",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|XX|XX",
        "XX|XX|CR:bombs_for_throwing_at_you_right",
        "XXXX|XX",
    ],
    category: "weapons",
    conduct: 1
},
elements.bombs_for_throwing_at_you_right = {
    color: "#524c41",
    category: "ammunition",
    behavior: [
        "XX|EX:10>bomb|XX",
        "XX|XX|XX",
        "XX|M1%10 AND EX:10>bomb|M1",
    ],
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
},
elements.energized_orb_left = {
    color: ["#e0e000","#f3f300"],
    category: "energy",
    behavior: [
        "XX|EX:50>electric|XX",
        "M1 AND EX:50>electric|XX|EX:50>electric",
        "XX|EX:50>electric|XX"
    ],
    state: "gas",
},
elements.energized_orb_right = {
    color: ["#e0e000","#f3f300"],
    category: "energy",
    behavior: [
        "XX|EX:50>electric|XX",
        "EX:50>electric|XX|M1 AND EX:50>electric",
        "XX|EX:50>electric|XX"
    ],
    state: "gas",
},
elements.fast_bomb = {
    color: "#524c41",
    category: "weapons",
    state: "solid",
    behavior: [
        "XX|EX:10>explosion|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:10>explosion|M2",
        ],
    tick: function(pixel) {
        for (var i=0; i<3; i++) {
            if (!tryMove(pixel, pixel.x, pixel.y+1)) {
                if (!isEmpty(pixel.x, pixel.y+1,true)) {
                    }
                }
            }
        },
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
},
elements.liquid_bomb = {
    color: "#524c41",
    tick: function(pixel) {
                if (pixel.start === pixelTicks) {return}
                if (pixel.charge && elements[pixel.element].behaviorOn) {
                    pixelTick(pixel)
                }
                if (elements[pixel.element].viscosity && (!((Math.random()*100) < 100 / Math.pow(elements[pixel.element].viscosity, 0.25)))) {
                    var move1Spots = [
                        [pixel.x, pixel.y+1]
                    ]
                }
                else {
                    var move1Spots = [
                        [pixel.x+1, pixel.y+1],
                        [pixel.x, pixel.y+1],
                        [pixel.x-1, pixel.y+1],
                    ]
                }
                var moved = false;
                for (var i = 0; i < move1Spots.length; i++) {
                    var coords = move1Spots[Math.floor(Math.random()*move1Spots.length)];
                    if (tryMove(pixel, coords[0], coords[1])) { moved = true; break; }
                    else { move1Spots.splice(move1Spots.indexOf(coords), 1); }
                }
                if (!moved) {
                    if (elements[pixel.element].viscosity===undefined || !(!((Math.random()*100) < 100 / Math.pow(elements[pixel.element].viscosity, 0.25)))) {
                        if (Math.random() < 0.5) {
                            if (!tryMove(pixel, pixel.x+1, pixel.y)) {
                                tryMove(pixel, pixel.x-1, pixel.y);
                            }
                        } else {
                            if (!tryMove(pixel, pixel.x-1, pixel.y)) {
                                tryMove(pixel, pixel.x+1, pixel.y);
                            }
                        }
                    }
                }
                doDefaults(pixel);
            },
    category: "weapons",
    state: "liquid",
    behavior: [
        "XX|EX:10>explosion|XX",
        "XX|XX|XX",
        "XX|EX:10>explosion|XX",
        ],
    density: 1300,
    excludeRandom: true,
    ignore: "gas_bomb",
    cooldown: defaultCooldown
},
elements.tank_left = {
    color: "#bcc6cc",
    category: "vehicles",
    behavior: [
        "M2 AND CR:fast_bullet_left|XX|XX",
        "M1|XX|XX",
        "M1|M1|XX",
    ],
},
elements.tank_right = {
    color: "#bcc6cc",
    category: "vehicles",
    behavior: [
        "XX|XX|M2 AND CR:fast_bullet_right",
        "XX|XX|M1",
        "XX|M1|M1",
    ],
},
elements.realistic_missile_left = {
    color: "#524c41",
    category: "weapons",
    state: "solid",
    behavior: [
        "XX|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|XX",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|M2 AND EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|M1 AND EX:20>missile_shrapnel|XX|EX:20>missile_shrapnel|CR:smoke AND EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|M2 AND EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "XX|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|XX",
    ],
    tick: function(pixel) {
        for (var i=0; i<3; i++) {
            if (!tryMove(pixel, pixel.x-1, pixel.y)) {
                if (!isEmpty(pixel.x-1, pixel.y,true)) {
                    }
                }
            }
        },
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
},
elements.realistic_missile_right = {
    color: "#524c41",
    category: "weapons",
    state: "solid",
    behavior: [
        "XX|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|XX",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|M2 AND EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "EX:20>missile_shrapnel|CR:smoke AND EX:20>missile_shrapnel|EX:20>missile_shrapnel|XX|M1|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|M2 AND EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "XX|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|XX",
    ],
    tick: function(pixel) {
        for (var i=0; i<3; i++) {
            if (!tryMove(pixel, pixel.x+1, pixel.y)) {
                if (!isEmpty(pixel.x+1, pixel.y,true)) {
                    }
                }
            }
        },
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
},
    elements.missile_shrapnel = {
    color: "#71797E",
       behavior: [
        "XX|XX|XX",
        "XX|EX:5 %20|XX",
        "M2%20|M1%20|M2%20",
    ],
    burn: 90,
    burnTime: 100,
    density: 2000,
    conduct: 1,
    state: "solid",
    category: "ammunition"
},
elements.vlms_left = {
    color: "#71797E",
    tick: function(pixel) {
        if ((pixel.temp > 1000 || pixel.charge) && !pixel.burning) {
            pixel.burning = true;
            pixel.burnStart = pixelTicks;
        }
        if (pixel.burning) {
            if (!tryMove(pixel, pixel.x, pixel.y-1)) {
                // tryMove again to the top left or top right
                tryMove(pixel, pixel.x+(Math.random() < 0.5 ? -1 : 1), pixel.y-1);
            }
            if (pixelTicks-pixel.burnStart > 50 && Math.random() < 0.1) {
                explodeAt(pixel.x, 10, 4, "realistic_missile_left");
                deletePixel(pixel.x,pixel.y)
            }
        }
        else {
            if (!tryMove(pixel, pixel.x, pixel.y+1)) {
                // tryMove again to the bottom left or bottom right
                tryMove(pixel, pixel.x+(Math.random() < 0.5 ? -1 : 1), pixel.y+1);
            }
        }
        doDefaults(pixel);
    },
    burn: 90,
    burnTime: 100,
    density: 2000,
    conduct: 1,
    state: "solid",
    category: "weapons"
},
elements.vlms_right = {
    color: "#71797E",
    tick: function(pixel) {
        if ((pixel.temp > 1000 || pixel.charge) && !pixel.burning) {
            pixel.burning = true;
            pixel.burnStart = pixelTicks;
        }
        if (pixel.burning) {
            if (!tryMove(pixel, pixel.x, pixel.y-1)) {
                // tryMove again to the top left or top right
                tryMove(pixel, pixel.x+(Math.random() < 0.5 ? -1 : 1), pixel.y-1);
            }
            if (pixelTicks-pixel.burnStart > 50 && Math.random() < 0.1) {
                explodeAt(pixel.x, 10, 4, "realistic_missile_right");
                deletePixel(pixel.x,pixel.y)
            }
        }
        else {
            if (!tryMove(pixel, pixel.x, pixel.y+1)) {
                // tryMove again to the bottom left or bottom right
                tryMove(pixel, pixel.x+(Math.random() < 0.5 ? -1 : 1), pixel.y+1);
            }
        }
        doDefaults(pixel);
    },
    burn: 90,
    burnTime: 100,
    density: 2000,
    conduct: 1,
    state: "solid",
    category: "weapons"
},
createAtXvar = 0;
createAtYvar = 0;
create1var = "";
elements.element_spawner = {
    color: "#71797E",
    onSelect: function() {
        var answer1 = prompt("Please input the x value.",(createAtXvar||undefined));
        if (!answer1) {return}
        createAtXvar = parseInt(answer1);
        var answer2 = prompt("Please input the y value.",(createAtYvar||undefined));
        if (!answer2) {return}
        createAtYvar = parseInt(answer2);
        var answer3 = prompt("Please input what element should spawn.",(create1var||undefined));
        if (!answer3) {return}
        create1var = answer3;
    },
    tick: function(pixel) {
        if (pixel.charge){
            createPixel(create1var, createAtXvar, createAtYvar);
        }
        doDefaults(pixel);
    },
    density: 1,
    conduct: 1,
    state: "solid",
    category: "machines"
},
elements.railgun_beam_left = {
    color: ["#ff0000","#ff5e00"],
    tick: function(pixel) {
        var y = pixel.y;
        for (var x = pixel.x; x < width; x--) {
            if (outOfBounds(x, y)) {
                break;
            }
            if (isEmpty(x, y)) {
                createPixel("railgun_ammo_left", x, y);
                pixelMap[x][y].temp = 3500;
            }
            else {
                if (elements[pixelMap[x][y].element].isGas) { continue }
                if (elements[pixelMap[x][y].element].id === elements.railgun_beam_left.id) { break }
                pixelMap[x][y].temp += 100;
                pixelTempCheck(pixelMap[x][y]);
                break;
            }
        }
        deletePixel(pixel.x, pixel.y);
    },
    temp: 3500,
    category: "ammunition",
    state: "gas",
    density: 1,
    excludeRandom: true,
    noMix: true
},
elements.railgun_beam_right = {
    color: ["#ff0000","#ff5e00"],
    tick: function(pixel) {
        var y = pixel.y;
        for (var x = pixel.x; x < width; x++) {
            if (outOfBounds(x, y)) {
                break;
            }
            if (isEmpty(x, y)) {
                createPixel("railgun_ammo_right", x, y);
                pixelMap[x][y].temp = 3500;
            }
            else {
                if (elements[pixelMap[x][y].element].isGas) { continue }
                if (elements[pixelMap[x][y].element].id === elements.railgun_beam_right.id) { break }
                pixelMap[x][y].temp += 100;
                pixelTempCheck(pixelMap[x][y]);
                break;
            }
        }
        deletePixel(pixel.x, pixel.y);
    },
    temp: 3500,
    category: "ammunition",
    state: "gas",
    density: 1,
    excludeRandom: true,
    noMix: true
},
elements.railgun_ammo_left = {
    color: ["#ff0000","#ff5e00"],
    category: "ammunition",
    state: "solid",
    density: 1300,
    tick: function(pixel) {
        explodeAt(pixel.x, pixel.y, 10)
        doHeat(pixel);
    },
},
elements.railgun_ammo_right = {
    color: ["#ff0000","#ff5e00"],
    category: "ammunition",
    state: "solid",
    density: 1300,
    tick: function(pixel) {
        explodeAt(pixel.x, pixel.y, 10)
        doHeat(pixel);
    },
},
elements.railgun_left = {
    category: "weapons",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|XX|XX",
        "CR:railgun_beam_left|XX|XX",
        "XX|XX|XX",
    ],
    color: "#71797E",
    conduct: 1,
    hardness: 1,
},
elements.railgun_right = {
    category: "weapons",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|XX|XX",
        "XX|XX|CR:railgun_beam_right",
        "XX|XX|XX",
    ],
    color: "#71797E",
    conduct: 1,
    hardness: 1,
},
elements.static_bomb = {
    color: "#524c41",
    behavior: [
        "XX|EX:10|XX",
        "EX:10|XX|EX:10",
        "XX|EX:10|XX",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
}
var target =[,];
var tgt = "head";
elements.tracking_missile = {
    color: "#323232",
    category: "weapons",
    behavior: [
        "XX|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|XX",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|XX|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel",
        "XX|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|EX:20>missile_shrapnel|XX",
    ],
    onSelect: function() {
        var answer1 = prompt("Please input the target element.",(tgt||undefined));
        if (!answer1) {return}
        tgt = answer1;
    },
    tick: (pixel) => {
        for (var x = 1; x < width; x++) {
            for (var y = 1; y < height; y++) {
                if (!isEmpty(x,y)) {
                    if (pixelMap[x][y].element===tgt) {
                        target = [pixelMap[x][y].x, pixelMap[x][y].y];
                    }
                }
            }
        }
        if (pixel.x != target[0] || pixel.y != target[1]) {
            let {x, y} = pixel;
            const empty = checkForEmptyPixels(x, y);
            const [tX, tY] = target;
            let bestVal = Math.sqrt(Math.pow(tX - x, 2) + Math.pow(tY - y, 2));
            let best = null;
            for (const pixelPair of empty) {
                const [x_, y_] = [x + pixelPair[0], y + pixelPair[1]];
                const c = Math.sqrt(Math.pow(tX - x_, 2) + Math.pow(tY - y_, 2));
                if (c < bestVal) {
                    bestVal = c;
                    best = pixelPair;
                }
            }
            if (best) {
                tryMove(pixel, x + best[0]*2, y + best[1]*2, undefined, true);
            }
        } 
    }
},
elements.laser_bomb = {
    category: "weapons",
    color: "#524c41",
    tick: function(pixel) {
        var x = pixel.x;
        for (var y = pixel.y; y < height+1; y++) {
            if (outOfBounds(x, y)) {
                if (isEmpty(x, y-1)) { createPixel("smoke", x, y-1); }
                break;
            }
            if (isEmpty(x, y)) {

                createPixel("flash", x, y);
                pixelMap[x][y].color = "#ff0000";
                pixelMap[x][y].temp = 35000;
                pixelMap[x][y].delay = (y + pixel.y) / 8;
            }
        }
        for (var y = pixel.y; y < height-1; y--) {
            if (outOfBounds(x, y)) {
                if (isEmpty(x, y+1)) { createPixel("smoke", x, y+1); }
                break;
            }
            if (isEmpty(x, y)) {

                createPixel("flash", x, y);
                pixelMap[x][y].color = "#ff0000";
                pixelMap[x][y].temp = 35000;
                pixelMap[x][y].delay = (y + pixel.y) / 8;
            }
        }
        var y = pixel.y;
        for (var x = pixel.x; x < width+1; x++) {
            if (outOfBounds(x, y)) {
                if (isEmpty(x-1, y)) { createPixel("smoke", x-1, y); }
                break;
            }
            if (isEmpty(x, y)) {

                createPixel("flash", x, y);
                pixelMap[x][y].color = "#ff0000";
                pixelMap[x][y].temp = 35000;
                pixelMap[x][y].delay = (x + pixel.x) / 8;
            }
        }
        for (var x = pixel.x; x < width-1; x--) {
            if (outOfBounds(x, y)) {
                if (isEmpty(x+1, y)) { createPixel("smoke", x+1, y); }
                break;
            }
            if (isEmpty(x, y)) {

                createPixel("flash", x, y);
                pixelMap[x][y].color = "#ff0000";
                pixelMap[x][y].temp = 35000;
                pixelMap[x][y].delay = (x + pixel.x) / 8;
            }
        }
        deletePixel(pixel.x, pixel.y);
    },
},
elements.cluster_nuke = {
    color: "#323232",
    category: "weapons",
    behavior: behaviors.POWDER,
    tick: (pixel) => {
        for (var y = 1; y < 50; y++) {
            if (!isEmpty(pixel.x, pixel.y + y, false)) {
                explodeAt(pixel.x,pixel.y,50,["dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","dirty_bomb","nuke",])
            }
        }
    }
}
document.onkeydown = function(ki)/*keyboard_input*/ {
    //a
    if (ki.keyCode == 65) {
        KA = true;
        //vX ++;
    }
    //d
    if (ki.keyCode == 68) {
        KD = true;
        //vX ++;
    }
    //w
    if (ki.keyCode == 87) {
        KW = true;
        //vY ++;
    }
    //s
    if (ki.keyCode == 83) {
        KS = true;
        //vY ++;
    }
}
document.onkeyup = function(i2)/*keyboard_input*/ {
    //a
    if (i2.keyCode == 65) {
        KA = false;
        //vX --;
    }
    //d
    if (i2.keyCode == 68) {
        KD = false;
       //vX --;
    }
    //w
    if (i2.keyCode == 87) {
        KW = false;
        //vY = 0;
    }
    //s
    if (i2.keyCode == 83) {
        KS = false;
        //vY = 0;
    }
}
var KA = false;
var KD = false;
var KW = false;
var KS = false;
var vX = 1;
var vY = 1;
elements.heli_bomb = {
    behavior: [
        "XX|EX:10|XX",
        "EX:10|XX|EX:10",
        "XX|EX:10|XX",
    ],
    tick: function(pixel) {
    /*if (vX === 3) {
            vX --;
        }
    if (vY === 3) {
            vY --;
        }*/
    if (KA === true) {
            tryMove (pixel,pixel.x-vX,pixel.y)
        }
    if (KD === true) {
            tryMove (pixel,pixel.x+vX,pixel.y)
        }
    if (KW === true) {
            tryMove (pixel,pixel.x,pixel.y-vY)
        }
    if (KS === true) {
            tryMove (pixel,pixel.x,pixel.y+vY)
        }
    },
    category: "weapons",
    states:"solid",
    color: "#524c41",
},
elements.mini_nuke = {
    color: "#534636",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:20>plasma,plasma,plasma,plasma,radiation,rad_steam|M2",
    ],
    category: "weapons",
    state: "solid",
    density: 1500,
    excludeRandom: true,
    cooldown: defaultCooldown
},
elements.left_uranium_bullet = {
    color: "#406040",
    behavior: [
        "M2|XX|XX",
        "M1 AND EX:4>fallout|XX|XX",
        "M2|XX|XX",
    ],
    state: "solid",
    category:"ammunition",
    density: 2100,
    excludeRandom: true,
    cooldown: defaultCooldown,
    temp: 4000,
},
elements.right_uranium_bullet = {
    color: "#406040",
    behavior: [
        "XX|XX|M2",
        "XX|XX|M1 AND EX:4>fallout",
        "XX|XX|M2",
    ],
    state: "solid",
    category:"ammunition",
    density: 2100,
    excludeRandom: true,
    cooldown: defaultCooldown,
    temp: 4000,
}


































































//------------------------------------------------------------------------------------------------------------------------------------






















































































audioContext = new AudioContext()

//Derived from marcgg's music.js

oscillatorDefaults = {
	frequency: 440,
	type: "sine",
	endType: "none",
	length: 1,
	volume: 1,
	delay: 0,
};

audioObject = {};

function oscillator(name="test",parameterObject=oscillatorDefaults){ //creates oscillator with gain node, has specifiable frequency and type, fades out over 1 second (hard-coded)
	var defaultKeys = Object.keys(oscillatorDefaults); //readability variable
	
	for(i = 0; i < defaultKeys.length; i++) {
		var key = defaultKeys[i]; //the indexed keyname
		if(typeof(parameterObject[key]) === "undefined") {
			parameterObject[key] = oscillatorDefaults[key];
		};
	};

	var oscillatorNodeName = `${name}Oscillator`;
	var gainNodeName = `${name}Gain`;

	audioObject[oscillatorNodeName] = audioContext.createOscillator()
	audioObject[gainNodeName] = audioContext.createGain()
	audioObject[gainNodeName].gain.value = parameterObject.volume;
	audioObject[oscillatorNodeName].type = parameterObject.type
	audioObject[oscillatorNodeName].connect(audioObject[gainNodeName])
	audioObject[oscillatorNodeName].frequency.value = parameterObject.frequency
	audioObject[gainNodeName].connect(audioContext.destination)
	audioObject[oscillatorNodeName].start(audioContext.currentTime + parameterObject.delay)

	//stopping handler
	if(parameterObject.endType === "exponential") { //starts fading immediately
		audioObject[gainNodeName].gain.exponentialRampToValueAtTime(
			0.00001, audioContext.currentTime + parameterObject.length
		);
	} else if(parameterObject.endType === "linear") { //starts fading immediately
		audioObject[gainNodeName].gain.linearRampToValueAtTime(
			0.00001, audioContext.currentTime + parameterObject.length
		);	
	} else { //waits to stop
		audioObject[oscillatorNodeName].stop(audioContext.currentTime + parameterObject.delay + parameterObject.length);
	};
};

elements.note_block = {
	color: "#ee33ee",
	behavior: behaviors.WALL,
	state: "solid",
	category: "machines",
	density: 1200,
	hardness: 0.2,
	breakInto: ["plastic","metal_scrap","metal_scrap","metal_scrap"],
	conduct: 1,
	properties: {
		frequency: 440,
		type: "sine",
		endType: "none",
		length: 1,
		volume: 1,
		delay: 0,
		debounce: 0,
		debounceLength: tps,
	},
	tick: function(pixel) {
		var pixelSoundName = `x${pixel.x}y${pixel.y}`; //Generate unique-enough name
		
		var pixelPropertyObject = { //Load sound properties from pixel as object;
			frequency: pixel.frequency,
			type: pixel.type,
			endType: pixel.endType,
			length: pixel.length,
			volume: pixel.volume,
			delay: pixel.delay,
		};
		
		//console.log(pixelPropertyObject);
		
		if(pixel.debounce < 1) {
			//console.log(`${pixel.debounce} not debounced, play`);
			if(pixel.charge) {
				oscillator(pixelSoundName,pixelPropertyObject);
				delete pixel.charge;
				pixel.debounce = pixel.debounceLength;
			};
		} else if(pixel.debounce > 0) {
			//console.log(`${pixel.debounce} debounced, don't play`);
			pixel.debounce--;
		};
	},
};















































































//------------------------------------------------------------------------------------------------------------------------------------------------------



































































// behaviors
behaviors.POISONED_LIQUID = [
    "XX|DL:"+eLists.ANIMAL+"|XX",
    "DL:"+eLists.ANIMAL+" AND M2|XX|DL:"+eLists.ANIMAL+" AND M2",
    "M1|DL:"+eLists.ANIMAL+" AND M1|M1",
];
behaviors.POISONED_WALL = [
    "XX|DL:"+eLists.ANIMAL+"|XX",
    "DL:"+eLists.ANIMAL+"|XX|DL:"+eLists.ANIMAL+"",
    "XX|DL:"+eLists.ANIMAL+"|XX",
];
behaviors.POISONED_POWDER = [
    "XX|DL:"+eLists.ANIMAL+"|XX",
    "DL:"+eLists.ANIMAL+"|XX|DL:"+eLists.ANIMAL+"",
    "M2|DL:"+eLists.ANIMAL+" AND M1|M2",
];
behaviors.POISONED_GAS = [
    "M2|DL:"+eLists.ANIMAL+" AND M1|M2",
    "DL:"+eLists.ANIMAL+" AND M1|XX|DL:"+eLists.ANIMAL+" AND M1",
    "M2|DL:"+eLists.ANIMAL+" AND M1|M2",
];

// changing ketchup
elements.ketchup.tempLow = -3;
elements.ketchup.stateLow = "frozen_ketchup";
elements.ketchup.tempHigh = 100;
elements.ketchup.stateHigh = "ketchup_gas";
elements.ketchup.density = 1092;
elements.ketchup.reactions ??= {};
elements.ketchup.reactions.mayonnaise = { "elem1": null, "elem2": "fry_sauce" };
elements.ketchup.reactions.plague = { "elem1": "poisoned_ketchup", "elem2": null};
elements.ketchup.reactions.infection = { "elem1": "poisoned_ketchup", "elem2": null};
elements.ketchup.reactions.fallout = { "elem1": "poisoned_ketchup", "chance":25};
elements.ketchup.reactions.gloomwind = { "elem1": "poisoned_ketchup", "elem2": null};

// making ketchup dirty
elements.dirt.reactions ??= {};
elements.dirt.reactions.ketchup = { "elem1": null, "elem2": "dirty_ketchup", "oneway":true};
elements.ash.reactions ??= {};
elements.ash.reactions.ketchup = { "elem1": null, "elem2": "dirty_ketchup", "oneway":true};
elements.dust.reactions ??= {};
elements.dust.reactions.ketchup = { "elem1": null, "elem2": "dirty_ketchup", "oneway":true};

// pyrocumulus reactions
elements.smoke.reactions.ketchup_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.smoke.reactions.poisoned_ketchup_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.smoke.reactions.ketchup_snow_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.smoke.reactions.poisoned_ketchup_snow_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.smoke.reactions.ketchup_rain_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.smoke.reactions.poisoned_ketchup_rain_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.ash.reactions.ketchup_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.ash.reactions.poisoned_ketchup_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.ash.reactions.ketchup_snow_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.ash.reactions.poisoned_ketchup_snow_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.ash.reactions.ketchup_rain_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },
elements.ash.reactions.poisoned_ketchup_rain_cloud = { "elem1": "pyrocumulus", "chance":0.08, "y":[0,15], "setting":"clouds" },

// fixing radiation reactions
elements.radiation.reactions.ketchup = { "elem1": null, "elem2": "poisoned_ketchup", "chance":25}

// elements
elements.frozen_ketchup = {
    color: "#d44737",
    behavior: behaviors.WALL,
    temp: -5,
    category:"solids",
    tempHigh: 5,
    stateHigh: "ketchup",
    state: "solid",
    density: 917,
    reactions: {
        "plague": { "elem1": "frozen_poisoned_ketchup", "elem2": null},
        "infection": { "elem1": "frozen_poisoned_ketchup", "elem2": null},
        "radiation": { "elem1": "frozen_poisoned_ketchup", "chance":25},
        "fallout": { "elem1": "frozen_poisoned_ketchup", "chance":25},
        "gloomwind": { "elem1": "frozen_poisoned_ketchup", "elem2": null},
    },
};
elements.poisoned_ketchup = {
    color: "#de0030",
    behavior: behaviors.POISONED_LIQUID,
    tempLow: -3,
    stateLow: "frozen_poisoned_ketchup",
    tempHigh: 100,
    stateHigh: "poisoned_ketchup_gas",
    viscosity: 50000,
    category:"liquids",
    state: "liquid",
    density: 1140,
    stain: 0.05,
};
elements.frozen_poisoned_ketchup = {
    color: "#d43754",
    behavior: behaviors.POISONED_WALL,
    temp: -5,
    category:"solids",
    tempHigh: 5,
    stateHigh: "poisoned_ketchup",
    state: "solid",
    density: 917,
};
elements.ketchup_spout = {
    color: "#944137",
    behavior: [
        "XX|CR:poisoned_ketchup%0.001 AND CR:ketchup|XX",
        "CR:poisoned_ketchup%0.001 AND CR:ketchup|XX|CR:poisoned_ketchup%0.001 AND CR:ketchup",
        "XX|CR:poisoned_ketchup%0.001 AND CR:ketchup|XX",
    ],
    category:"special",
};
elements.ketchup_cloud = {
    color: "#ad655c",
    behavior: [
        "XX|XX|XX",
        "XX|CO:1%5|M1%2.5 AND BO",
        "XX|XX|XX",
    ],
    category:"gases",
    temp: 110,
    tempLow: 100,
    stateLow: "ketchup_rain_cloud",
    state: "gas",
    density: 0.5,
    reactions: {
        "plague": { "elem1": "poisoned_ketchup_cloud", "elem2": null},
        "infection": { "elem1": "poisoned_ketchup_cloud"},
        "radiation": { "elem1": "poisoned_ketchup_cloud", "chance":25},
        "fallout": { "elem1": "poisoned_ketchup_cloud", "chance":25},
        "gloomwind": { "elem1": "poisoned_ketchup_cloud", "elem2": null},
        "ketchup_rain_cloud": { "elem1":"ketchup_rain_cloud", "temp1":-20 },
    },
    conduct: 0.03,
    ignoreAir: true,
};
elements.ketchup_rain_cloud = {
    color: "#6e413b",
    behavior: [
        "XX|XX|XX",
        "XX|CH:ketchup%0.05|M1%2.5 AND BO",
        "XX|XX|XX|",
    ],
    category: "gases",
    temp: 70,
    tempHigh: 100,
    stateHigh: "ketchup_cloud",
    tempLow: 0,
    stateLow: "ketchup_snow_cloud",
    state: "gas",
    density: "0.5",
    ignoreAir: true,
    conduct: 0.03,
};
elements.poisoned_ketchup_cloud = {
    color: "#a8596b",
    behavior: [
        "XX|XX|XX",
        "XX|CO:1%5|M1%2.5 AND BO",
        "XX|XX|XX",
    ],
    reactions: {
        "poisoned_ketchup_rain_cloud": { "elem1":"poisoned_ketchup_rain_cloud", "temp1": -20 },
    },
    category: "gases",
    temp: 110,
    tempLow: 100,
    stateLow: "poisoned_ketchup_rain_cloud",
    state: "gas",
    density: 0.5,
    conduct: 0.03,
    ignoreAir: true,
};
elements.poisoned_ketchup_rain_cloud = {
    color: "#633640",
    behavior: [
        "XX|XX|XX",
        "XX|CH:poisoned_ketchup%0.05|M1%2.5 AND BO",
        "XX|XX|XX",
    ],
    category: "gases",
    temp: 70,
    tempHigh: 100,
    stateHigh: "poisoned_ketchup_cloud",
    tempLow: 0,
    stateLow: "poisoned_ketchup_snow_cloud",
    state: "gas",
    density: 0.5,
    ignoreAir: true,
    conduct: 0.03,
};
elements.ketchup_snow = {
    color: "#ed7a6d",
    behavior: behaviors.POWDER,
    temp: -5,
    tempHigh: 18,
    stateHigh: "ketchup",
    category: "land",
    state: "solid",
    density: 100,
    reactions: {
        "plague": { "elem1": "poisoned_ketchup_snow", "elem2": null},
        "infection": { "elem1": "poisoned_ketchup_snow", "elem2": null},
        "radiation": { "elem1": "poisoned_ketchup_snow", chance:25},
        "fallout": { "elem1": "poisoned_ketchup_snow", chance:25},
        "gloomwind": { "elem1": "poisoned_ketchup_snow", "elem2": null},
    },
};
elements.ketchup_snow_cloud = {
    color: "#755652",
    behavior: [
        "XX|XX|XX",
        "XX|CH:ketchup_snow%0.05|M1%2.5 AND BO",
        "XX|XX|XX",
    ],
    category:"gases",
    temp: -10,
    tempHigh: 30,
    stateHigh: "ketchup_cloud",
    state: "gas",
    density: 0.55,
    reactions: {
        "plague": { "elem1": "poisoned_ketchup_snow_cloud", "elem2": null},
        "infection": { "elem1": "poisoned_ketchup_snow_cloud"},
        "radiation": { "elem1": "poisoned_ketchup_snow_cloud", chance:25},
        "fallout": { "elem1": "poisoned_ketchup_snow_cloud", chance:25},
        "gloomwind": { "elem1": "poisoned_ketchup_snow_cloud", "elem2": null},
    },
    ignoreAir: true,
};
elements.poisoned_ketchup_snow = {
    color: "#d1697f",
    behavior: behaviors.POISONED_POWDER,
    temp: -5,
    tempHigh: 18,
    stateHigh: "poisoned_ketchup",
    category: "land",
    state: "solid",
    density: 100,
};
elements.poisoned_ketchup_snow_cloud = {
    color: "#6e4e55",
    behavior: [
        "XX|XX|XX",
        "XX|CH:poisoned_ketchup_snow%0.05|M1%2.5 AND BO",
        "XX|XX|XX",
    ],
    category:"gases",
    temp: -10,
    tempHigh: 30,
    stateHigh: "poisoned_ketchup_cloud",
    state: "gas",
    density: 0.55,
    ignoreAir: true,
};
elements.mayonnaise = {
    color: "#F2EEE9",
    behavior: behaviors.LIQUID,
    viscosity: 50000,
    category:"liquids",
    state: "liquid",
    density: 1000,
    stain: 0.05,
    isFood: true,
};
elements.mustard = {
    color: "#D8AD01",
    behavior: behaviors.LIQUID,
    viscosity: 50000,
    category:"liquids",
    state: "liquid",
    density: 1052,
    stain: 0.05,
    isFood: true,
};
elements.ketchup_gas = {
    color: "#ffb5ad",
    behavior: behaviors.GAS,
    temp: 150,
    density: 0.6,
    state: "gas",
    tempLow: 95,
    stateLow: "ketchup",
    category: "gases",
    reactions: {
        "plague": { "elem1": "poisoned_ketchup_gas", "elem2": null},
        "ketchup_gas": { "elem1": null, "elem2": "ketchup_cloud", "chance":0.3, "y":[0,15], "setting":"clouds" },
        "ketchup_cloud": { "elem1": "ketchup_cloud", "chance":0.4, "y":[0, 12], "setting":"clouds" },
        "ketchup_rain_cloud": { "elem1": "ketchup_rain_cloud", "chance":0.4, "y":[0, 12], "setting":"clouds" },
        "infection": { "elem1": "poisoned_ketchup_gas"},
        "radiation": { "elem1": "poisoned_ketchup_gas", chance:25},
        "fallout": { "elem1": "poisoned_ketchup_gas", chance:25},
        "gloomwind": { "elem1": "poisoned_ketchup_gas", "elem2": null},
    },
};
elements.poisoned_ketchup_gas = {
    color: "#e096a6",
    behavior: behaviors.POISONED_GAS,
    temp: 150,
    density: 0.6,
    state: "gas",
    tempLow: 95,
    stateLow: "poisoned_ketchup",
    category: "gases",
    reactions: {
        "poisoned_ketchup_gas": { "elem1": null, "elem2": "poisoned_ketchup_cloud", "chance":0.3, "y":[0,15], "setting":"clouds" },
        "poisoned_ketchup_cloud": { "elem1": "poisoned_ketchup_cloud", "chance":0.4, "y":[0, 12], "setting":"clouds" },
        "ketchup_rain_cloud": { "elem1": "poisoned_ketchup_rain_cloud", "chance":0.4, "y":[0, 12], "setting":"clouds" },
    },
};
elements.fry_sauce = {
    color: "#E8AA7B",
    behavior: behaviors.LIQUID,
    viscosity: 50000,
    category: "liquids",
    state: "liquid",
    density: 1149,
    stain: 0.05,
    isFood: true,
};
elements.ketchup_powder = {
    color: "#E06320",
    behavior: behaviors.POWDER,
    density: 1879,
    reactions: {
        "plague": { "elem1": "poisoned_ketchup_powder", "elem2": null},
        "infection": { "elem1": "poisoned_ketchup_powder", "elem2": null},
        "radiation": { "elem1": "poisoned_ketchup_powder", chance:25},
        "fallout": { "elem1": "poisoned_ketchup_powder", chance:25},
        "gloomwind": { "elem1": "poisoned_ketchup_powder", "elem2": null},
    },
    state: "solid",
    category: "powders",
    isFood: true,
};
elements.poisoned_ketchup_powder = {
    color: "#e0204a",
    behavior: behaviors.POISONED_POWDER,
    density: 1879,
    state: "solid",
    category: "powders",
};
elements.cumin = {
    color: "#8B7778",
    behavior: behaviors.POWDER,
    category: "food",
    density: 405,
    state: "solid",
    tempHigh: 400,
    stateHigh: "ash",
    burn: 40,
    burnTime: 40,
    burnInto: "ash",
    isFood: true,
};
elements.eketchup_spout = {
    name: "E-Ketchup Spout",
    color: "#c75600",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|CR:poisoned_ketchup%0.001 AND CR:ketchup|XX",
        "CR:poisoned_ketchup%0.001 AND CR:ketchup|XX|CR:poisoned_ketchup%0.001 AND CR:ketchup",
        "XX|CR:poisoned_ketchup%0.001 AND CR:ketchup|XX",
    ],
    category: "machines",
    conduct: 1,
    insulate: true,
    colorOn: "#fff200",
};
elements.ketchup_metal = {
    color: "#ff5c5c",
    behavior: behaviors.WALL,
    category: "solids",
    conduct: 0.47,
    tempHigh: 1500,
    density: 7197,
};
elements.antiketchup = {
    color: "#00CEE6",
    behavior: behaviors.AGLIQUID,
    viscosity: 50000,
    category:"special",
    state: "liquid",
    density: 1092,
    stain: 0.05,
};
elements.dirty_ketchup = {
    color: "#851a0d",
    behavior: behaviors.LIQUID,
    viscosity: 50000,
    category: "liquids",
    state: "liquid",
    tempHigh: 100,
    stateHigh: ["ketchup_gas", "carbon_dioxide"],
    tempLow: 0,
    stateLow: "frozen_ketchup",
    density: 1140,
    hidden: true,
    stain: 0.05,
};
elements.ketchup_gold = {
    color: ["#eb8a8a", "#bf3939", "#ff6161"],
    behavior: behaviors.WALL,
    category: "solids",
    conduct: 0.64,
    tempHigh: 1025,
    density: 10598,
}
 // alloys
 elements.molten_ketchup_metal = {
    reactions: {
        "molten_gold": { "elem1": null, "elem2": "molten_ketchup_gold" },
    }
 }

 // f&m only things
runAfterLoad(function() {
    if (enabledMods.includes("mods/fey_and_more.js")) {
        // making ketchup fairies die to iron and silver
        eLists.FAIRY.push("ketchup_fairy");
        elements.iron.behavior = [
            "XX|DL:"+eLists.FAIRY+"|XX",
            "DL:"+eLists.FAIRY+"|XX|DL:"+eLists.FAIRY+"",
            "XX|DL:"+eLists.FAIRY+"|XX"
        ];
        elements.silver.behavior = [
            "XX|DL:"+eLists.FAIRY+"|XX",
            "DL:"+eLists.FAIRY+"|XX|DL:"+eLists.FAIRY+"",
            "XX|DL:"+eLists.FAIRY+"|XX"
        ];
        
        // ketchup fairy reaction
        elements.fairy.reactions ??= {};
		elements.fairy.reactions.ketchup = { "elem1": "ketchup_fairy"};

        // f&m only elements
        elements.ketchup_fairy = {
            color: ["#d4b0b0", "#e8c5c5", "#e89595"],
            state: "solid",
            behavior: [
                "XX|M1|M1",
                "XX|FX%5|XX",
                "XX|CR:ketchup%0.1 AND CR:fairy_dust%0.005 AND M1|M1",
            ],
            category: "fey",
        };
    };
 });

/*
Changelog
Mod made by Nubo318. Contributors include DeviantEquinox and An Orbit.
Version 1.3.3

Version 1.3.3 (23rd of August 2023)
+ All liquids added on this mod can now stain stuff, with the exception of molten metals
+ Certain elements can now be mixed with dough and batter
~ Fixed reactions that turned clouds into pyrocumulus when in contact with with smoke or ash
~ Optimized the way in which new reactions of vanilla elements are coded
~ Changed the initial temperature of multiple elements
~ Fixed a bug that caused Ketchup Snow and its poisoned variant to not display their info properly
~ Ketchup clouds now work more similarly to vanilla clouds

Version 1.3.2 (22nd of August 2023)
- Removed some elements due to their inclusion or some form of it in the vanilla game, including:
    - Tomato
    - Tomato Sauce
    - Sugary Tomato Sauce
- Removed a vanilla reaction which turned ketchup into sauce when exposed to radiation

Version 1.3.1 (20th of January 2022)
~ Ketchup fairies are now killed by iron and silver

Version 1.3.0 (20th of January 2022)
+ Ketchup Gold, an alloy between ketchup metal and gold
+ Dirty Ketchup
+ Ketchup clouds can now react with smoke to form pyrocumulus
+ Infection now poisons ketchup stuff
+ Tomatoes and cumin now turn into ash at high temperatures
+ Radiation can poison ketchup stuff
+ Ketchup Fairies (Needs Fey & More)
+ Gloomwind can poison ketchup stuff (Needs Fey & More)
~ Changed the density of poisoned ketchup
~ Moved the ketchup powders to the "Powders" category and tomatoes and cumin to the "Food" category

Version 1.2.1 (16th of January 2022)
+ Ketchup gases can now form ketchup clouds when high up
~ Moved ketchup clouds to gases category
~ E-Ketchup Spout now has the id eketchup_spout, though remains called E-Ketchup Spout
~ Updated to Sandboxels 0.9
~ Now used with the in-game mod manager

Version 1.2.0 (10th of January 2022)
+ Ketchup Gas + a poisoned variant
+ Fry Sauce
+ Combining mayonnaise and ketchup creates fry sauce
+ Ketchup Powder + a poisoned variant
+ Tomatos and Tomato Sauce
+ Smashing tomatos with rocks creates tomato sauce
+ Tomato sauce can be combined with sugar to make sugary tomato sauce, which can then be combined with vinegar to make ketchup
+ Cumin
+ Combining plague with ketchup stuff changes it to its poisoned variant
+ E-Ketchup Spout, a ketchup spout that works only with electricity
+ Ketchup Metal
+ Antiketchup
~ Made the density of ketchup more accurate (hopefully).
~ Updated to Sandboxels 0.8.2
~ Poisoned stuff doesn't kill diagonally anymore
~ Technical: Element properties don't use quotation marks anymore.

Version 1.1.0 (6th of January 2022)
+ Ketchup Snow (+poisoned and cloud variants)
+ Mayonnaise
+ Mustard
~ Fixed: Ketchup can now freeze again

Version 1.0.1 (6th of January 2022)
~ Updated to Sandboxels 0.8.1
~ Frozen ketchup and frozen poisoned ketchup now starth with a temperature of 0°C

Version 1.0.0 (technically not the first version, but I'm to lazy to see in which order we added these things)
+ Frozen Ketchup
+ Ketchup Spout - Water spout but ketchup, also has a 0.001% chance of spawning poisoned ketchup because why not.
+ Poisoned Ketchup - Ketchup that kills animals
+ Frozen Poisoned Ketchup
+ Ketchup Cloud - Rain cloud but ketchup
+ Poisoned Ketchup Cloud
*/


































































//-------------------------------------------------------------------------------------------------------------------------------------------------------













































































/*
TODO:
Soils
More sedimentary rocks
Metamorphic rocks
	Ersatz pressure
Merge crimson?
Proper classification of limestone within these code comments
*/

//Variables
	
	//var vitreousInterfelsicName = "obsidian";
	var vitreousInterfelsicName = "dacidian";
	var vitreousIntermediateName = "andesidian";
	var vitreousMaficName = "basalidian";
	var vitreousUltramaficName = "komatidian";

//Functions

	//Star world matter function

		var stellarPlasmaSpreadWhitelist = ["stellar_plasma","liquid_stellar_plasma","liquid_degenerate_neutronium","gaseous_degenerate_neutronium","neutron_star"];

		function starColor(pixel) {
			if (pixel.temp < 0) { pixel.color = pixelColorPick(pixel,"#615e5e"); var c=0 }
			else if (pixel.temp < 200) { pixel.color = pixelColorPick(pixel,"#6e4c4b"); var c=0 }
			else if (pixel.temp < 400) { pixel.color = pixelColorPick(pixel,"#944340"); var c=0.00003 }
			else if (pixel.temp < 650) { pixel.color = pixelColorPick(pixel,"#d14c47"); var c=0.0001 }
			else if (pixel.temp < 900) { pixel.color = pixelColorPick(pixel,"#e35b56"); var c=0.0004 }
			else if (pixel.temp < 1300) { pixel.color = pixelColorPick(pixel,"#eb6a6a"); var c=0.001 }
			else if (pixel.temp < 1500) { pixel.color = pixelColorPick(pixel,"#f27e7e"); var c=0.0025 }
			else if (pixel.temp < 1700) { pixel.color = pixelColorPick(pixel,"#f58e8e"); var c=0.004 }
			else if (pixel.temp < 2400) { pixel.color = pixelColorPick(pixel,"#f59a9a"); var c=0.007 }
			else if (pixel.temp < 3000) { pixel.color = pixelColorPick(pixel,"#faaaaa"); var c=0.01 }
			else if (pixel.temp < 3600) { pixel.color = pixelColorPick(pixel,"#ffbdbd"); var c=0.015 }
			else if (pixel.temp < 5000) { pixel.color = pixelColorPick(pixel,"#ffd5bd"); var c=0.025 }
			else if (pixel.temp < 6000) { pixel.color = pixelColorPick(pixel,"#ffe7bd"); var c=0.035 } //new in-between state because the transition is too jarring
			else if (pixel.temp < 7000) { pixel.color = pixelColorPick(pixel,"#ffffbd"); var c=0.05 } //most of these are not real because of the kid named Planckian locus, but it makes it more fun
			else if (pixel.temp < 9000) { pixel.color = pixelColorPick(pixel,"#feffd6"); var c=0.07 }
			else if (pixel.temp < 11000) { pixel.color = pixelColorPick(pixel,"#f7fff5"); var c=0.1 }
			else if (pixel.temp < 14000) { pixel.color = pixelColorPick(pixel,"#e3fcfc"); var c=0.125 }
			else if (pixel.temp < 17000) { pixel.color = pixelColorPick(pixel,"#d1f6ff"); var c=0.15 }
			else if (pixel.temp < 20000) { pixel.color = pixelColorPick(pixel,"#d1f0ff"); var c=0.175 }
			else if (pixel.temp < 27000) { pixel.color = pixelColorPick(pixel,"#bde0ff"); var c=0.2 }
			else if (pixel.temp < 34000) { pixel.color = pixelColorPick(pixel,"#bdd3ff"); var c=0.25 }
			else if (pixel.temp < 43500) { pixel.color = pixelColorPick(pixel,"#bdc7ff"); var c=0.3 }
			else if (pixel.temp < 50000) { pixel.color = pixelColorPick(pixel,"#c3bdff"); var c=0.4 }
			else if (pixel.temp < 56000) { pixel.color = pixelColorPick(pixel,"#c3bdff"); var c=0.45 }
			else if (pixel.temp < 61000) { pixel.color = pixelColorPick(pixel,"#bba9fc"); var c=0.5 }
			else if (pixel.temp < 66000) { pixel.color = pixelColorPick(pixel,"#a590f5"); var c=0.6 }
			else if (pixel.temp < 71000) { pixel.color = pixelColorPick(pixel,"#a68af2"); var c=0.7 }
			else { pixel.color = pixelColorPick(pixel,"#a26ffc"); var c=0.8 }
			return c;
		};
		
		function starLightAndConduction(pixel,c,whitelist=["sun"]) {
			for (var i = 0; i < adjacentCoords.length; i++) {
				var x = pixel.x+adjacentCoords[i][0];
				var y = pixel.y+adjacentCoords[i][1];
				if (isEmpty(x,y)) {
					if (Math.random() <= c) {
						createPixel("light", x, y);
						pixelMap[x][y].color = pixel.color;
					};
				} else if (!outOfBounds(x,y)) {
					var newPixel = pixelMap[x][y];
					//console.log(whitelist,newPixel.element,whitelist.includes(newPixel.element));
					if (pixel.temp!==newPixel.temp && whitelist.includes(newPixel.element)) {
						var avg = (pixel.temp + newPixel.temp)/2;
						pixel.temp = avg;
						newPixel.temp = avg;
						pixelTempCheck(pixel);
						pixelTempCheck(newPixel);
					}
				}
			}
		};

		ferromagneticMaterials = ["iron", "cobalt", "nickel", "steel", "hematite"];

		if(!enabledMods.includes("mods/code_library.js")) {
			//x = real number
			//L = maximum value
			//x_0 = "the x value of the sigmoid midpoint" i.e. the x center of the bendy part
			//k = steepness
			function logisticCurve(x,L,k,x0) {
				return L/(   1 + (  Math.E ** ( -k * (x - x0) )  )   );
			};

			// https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers
			// Function from August Miller
			function scale (number, inMin, inMax, outMin, outMax) {
				return (number - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
			};
		};

		function neutronStarLightAndConduction(pixel,c,whitelist=["neutron_star"]) {
			var pixelAge = pixelTicks - pixel.start;
			var coolingFactor;
			var logistic = logisticCurve(pixelAge/1000, 1, 0.6, -7.7);
			if(pixel.temp > 1000000) {
				//console.log('case 1');
				coolingFactor = logistic
			};
			if(pixel.temp <= 1000000 && pixel.temp > 100000) {
				//console.log('case 2');
				//console.log("l",logistic);
				coolingFactor = scale(pixel.temp,1000000,100000,logistic,0.99999);
				//if(pixelAge % 10 == 0 || pixel.temp < 100500) { console.log(coolingFactor) };
			};
			if(pixel.temp < 100000) {
				//console.log('case 3');
				coolingFactor = 0.99999
			};
			//console.log(coolingFactor);
			pixel.temp = ((pixel.temp + 273.15) * coolingFactor) - 273.15;
			
			for (var i = 0; i < adjacentCoords.length; i++) {
				var x = pixel.x+adjacentCoords[i][0];
				var y = pixel.y+adjacentCoords[i][1];
				if (isEmpty(x,y)) {
					if (Math.random() <= c) {
						createPixel(Math.random() < 0.995 ? "light" : "neutron", x, y);
						pixelMap[x][y].color = pixel.color;
					};
				} else if (!outOfBounds(x,y)) {
					var newPixel = pixelMap[x][y];
					//console.log(elements[newPixel.element].conduct);
					if(ferromagneticMaterials.includes(newPixel.element) && (Math.random() < 0.1)) { newPixel.charge = 20 }; //no magnetism in sb
					//console.log(whitelist,newPixel.element,whitelist.includes(newPixel.element));
					if (pixel.temp!==newPixel.temp && whitelist.includes(newPixel.element)) {
						var avg = (pixel.temp + newPixel.temp)/2;
						pixel.temp = avg;
						newPixel.temp = avg;
						pixelTempCheck(pixel);
						pixelTempCheck(newPixel);
					}
				}
			}
		};

		function almostSun(pixel,lightScale=1,whitelist=["sun"]) {
			starLightAndConduction(pixel,starColor(pixel) * lightScale,whitelist);
		};
		
		function nsTick(pixel,lightScale=1,whitelist=["sun"]) {
			neutronStarLightAndConduction(pixel,starColor(pixel) * lightScale,whitelist);
		};
		
		elements.sun.tick = function(pixel) {
			almostSun(pixel);
		};

	//Generalized sedimentation function

		function sedimentation(pixel,sedimentNeighborTable,finalRock,chance=0.0003) {
			if(Math.random() < chance) {
				var validNeighborArray = Array.apply(null, Array(adjacentCoords.length)).map(function() {return false});
				//sedimentSandstoneTries++;
				for(i = 0; i < adjacentCoords.length; i++) {
					//sedimentSandstoneTryIterations++;
					if(isEmpty(pixel.x+adjacentCoords[i][0],pixel.y+adjacentCoords[i][1],true)) {
						validNeighborArray[i] = false;
						//sedimentSandstoneNoDetects++;
					} else if(!isEmpty(pixel.x+adjacentCoords[i][0],pixel.y+adjacentCoords[i][1],true)) {
						/*if(sedimentNeighborTable.includes(pixelMap[pixel.x+adjacentCoords[i][0]][pixel.y+adjacentCoords[i][1]].element)) {
							validNeighborArray[i] = true;
							//sedimentSandstoneDetects++;
						} else {
							validNeighborArray[i] = false;
							//sedimentSandstoneNoDetects++;
						};*/
						validNeighborArray[i] = sedimentNeighborTable.includes(pixelMap[pixel.x+adjacentCoords[i][0]][pixel.y+adjacentCoords[i][1]].element);
					};
				};
				if(validNeighborArray.includes(true)) {
					//sandstoneFormations++;
					changePixel(pixel,finalRock);
				}/* else {
					sandstoneFailures++;
				}*/;
			};
		};

	//Function for mass replacement according to an object

		function transformAround(pixel,range,substitutionObject,reverse=false) {
			var radius1 = (-1 * range);
			var radius2 = (range + 1);
			for (let i = radius1; i < radius2; i++) {
				for (let j = radius1; j < radius2; j++) {
					if(reverse) {
						if (!isEmpty(pixel.x+j,pixel.y+i) && !outOfBounds(pixel.x+j,pixel.y+i)) {
							var destPixel = pixelMap[pixel.x+j][pixel.y+i];
							var elementToCheck = destPixel.element;
							if(getKeyByValue(radioactiveObject,elementToCheck)) {
								changePixel(destPixel,getKeyByValue(radioactiveObject,elementToCheck));
							};
						};
					} else {
						if (!isEmpty(pixel.x+j,pixel.y+i) && !outOfBounds(pixel.x+j,pixel.y+i)) {
							var destPixel = pixelMap[pixel.x+j][pixel.y+i];
							var elementToCheck = destPixel.element;
							if(substitutionObject[elementToCheck]) {
								changePixel(destPixel,substitutionObject[elementToCheck]);
							};
						};
					};
				};
			};
		};

	//Previous function with adjacentPixels

		function transformAdjacent(pixel,substitutionObject,reverse=false) {
			for(k = 0; k < adjacentCoords.length; k++) {
				var i = adjacentCoords[k][0]
				var j = adjacentCoords[k][1]
				if(reverse) {
					if (!isEmpty(pixel.x+j,pixel.y+i) && !outOfBounds(pixel.x+j,pixel.y+i)) {
						var destPixel = pixelMap[pixel.x+j][pixel.y+i];
						var elementToCheck = destPixel.element;
						if(getKeyByValue(radioactiveObject,elementToCheck)) {
							changePixel(destPixel,getKeyByValue(radioactiveObject,elementToCheck));
						};
					};
				} else {
					if (!isEmpty(pixel.x+j,pixel.y+i) && !outOfBounds(pixel.x+j,pixel.y+i)) {
						var destPixel = pixelMap[pixel.x+j][pixel.y+i];
						var elementToCheck = destPixel.element;
						if(substitutionObject[elementToCheck]) {
							changePixel(destPixel,substitutionObject[elementToCheck]);
						};
					};
				};
			};
		};
	
	//Cooling rate-varied magma solidification

	function magmaRateBasedCooling(pixel,freezingPoint,vitriteName,vitriteThreshold,aphaniteName,aphaniteThreshold,phaneriteName) {
		pixel.lastTemperatures ??= [];
		pixel.lastTemperatures.push(pixel.temp); //due to how it's structured, last temp will always equal pixel.temp;

		while(pixel.lastTemperatures.length > 2) {
			pixel.lastTemperatures.shift();
		};
		
		if(pixel.lastTemperatures.length > 1) {
			var overallTemperatureChangeRate = (pixel.temp - pixel.lastTemperatures[0]) / (pixel.lastTemperatures.length - 1);
			//console.log(overallTemperatureChangeRate);
			if(overallTemperatureChangeRate >= 0) {
				return;
			};
			if(pixel.temp > freezingPoint) {
				return;
			};
			//console.log(pixel.x,pixel.y,overallTemperatureChangeRate)
			if(overallTemperatureChangeRate < vitriteThreshold) { //numbers made up
				//console.log("f99fd90");
				changePixel(pixel,vitriteName,false);
			} else if(overallTemperatureChangeRate < aphaniteThreshold) {
				//console.log("aaaaaaaaaa");
				changePixel(pixel,aphaniteName,false);
			} else {
				//console.log("03");
				changePixel(pixel,phaneriteName,false);
			};
		};
	};

//Terrain

	//Soils
	
		//Dry
		//Warning: Crippling lack of online information on the properties of the various soils by texture
		
			//Clay
			
				//Clay exists
			
			//Silty clay
				
				//TODO
				
			//Silty Clay Loam
				
				//TODO
				
			//Silty Loam
				
				//TODO
				
			//Silt
			
				//TODO
				
			//Clay Loam
			
				//TODO
				//elements.clay_soil.name = "Clay Loam"
				
			//Medium Loam
				
				//TODO
				//elements.dirt.name = "Medium Loam";
				
			//Sandy Clay
			
				/*elements.sandy_clay = {
					color: "#DDCD8A",
					behavior: behaviors.POWDER,
					tempHigh: 1710,
					tempLow: -50,
					stateLow: "sandy_clay_permafrost",
					category:"land",
					state: "solid",
					density: 1220,
				};*/
				
			//Sandy Clay Loam
			
				//TODO
				
			//Sandy Loam
			
				//TODO
				
			//Loamy Sand
			
				//TODO
				
			//Sand
			
				//Sand exists
				
		//Wet
		
			//Wet Clay
			
				//TODO
			
			//Wet Silty clay
				
				//TODO
				
			//Wet Silty Clay Loam
				
				//TODO
				
			//Wet Silty Loam
				
				//TODO
				
			//Wet Silt
			
				//TODO
				
			//Wet Clay Loam
			
				//TODO
				
			//Wet Medium Loam
				
				//Mud exists
				
			//Wet Sandy Clay
			
				//TODO
				
			//Wet Sandy Clay Loam
			
				//TODO
				
			//Wet Sandy Loam
			
				//TODO
				
			//Wet Loamy Sand
			
				//TODO
				
			//Wet Sand
			
				//Wet Sand exists
				
		//Permafrost

			//Clay Permafrost
			
				//TODO
			
			//Silty clay Permafrost
				
				//TODO
				
			//Silty Clay Loam Permafrost
				
				//TODO
				
			//Silty Loam Permafrost
				
				//TODO
				
			//Silt Permafrost
			
				//TODO
				
			//Clay Loam Permafrost
			
				//TODO
				
			//Medium Loam Permafrost
				
				//Permafrost exists
				
			//Sandy Clay Permafrost
			
				//TODO
				
			//Sandy Clay Loam Permafrost
			
				//TODO
				
			//Sandy Loam Permafrost
			
				//TODO
				
			//Loamy Sand Permafrost
			
				//TODO
				
			//Sand Permafrost
			
				//TODO

		//Radioactive (unmoved/TODO)
	
			//Dry
			
				//Radioactive Clay
				
					//Clay exists
				
				//Radioactive Silty clay
					
					//TODO
					
				//Radioactive Silty Clay Loam
					
					//TODO
					
				//Radioactive Silty Loam
					
					//TODO
					
				//Radioactive Silt
				
					//TODO
					
				//Radioactive Clay Loam
				
					//Clay Soil exists
					
				//Radioactive Medium Loam
					
					//Dirt exists
					
				//Radioactive Sandy Clay
				
					//TODO
					
				//Radioactive Sandy Clay Loam
				
					//TODO
					
				//Radioactive Sandy Loam
				
					//TODO
					
				//Radioactive Loamy Sand
				
					//TODO
					
				//Radioactive Sand
				
					//Sand exists
					
			//Wet
			
				//Radioactive Wet Clay
				
					//TODO
				
				//Radioactive Wet Silty clay
					
					//TODO
					
				//Radioactive Wet Silty Clay Loam
					
					//TODO
					
				//Radioactive Wet Silty Loam
					
					//TODO
					
				//Radioactive Wet Silt
				
					//TODO
					
				//Radioactive Wet Clay Loam
				
					//TODO
					
				//Radioactive Wet Medium Loam
					
					//Mud exists
					
				//Radioactive Wet Sandy Clay
				
					//TODO
					
				//Radioactive Wet Sandy Clay Loam
				
					//TODO
					
				//Radioactive Wet Sandy Loam
				
					//TODO
					
				//Radioactive Wet Loamy Sand
				
					//TODO
					
				//Radioactive Wet Sand
				
					//Wet Sand exists

			//Permafrost
					
				//Radioactive Clay Permafrost
				
					//TODO
				
				//Radioactive Silty clay Permafrost
					
					//TODO
					
				//Radioactive Silty Clay Loam Permafrost
					
					//TODO
					
				//Radioactive Silty Loam Permafrost
					
					//TODO
					
				//Radioactive Silt Permafrost
				
					//TODO
					
				//Radioactive Clay Loam Permafrost
				
					//TODO
					
				//Radioactive Medium Loam Permafrost
					
					//Permafrost exists
					
				//Radioactive Sandy Clay Permafrost
				
					//TODO
					
				//Radioactive Sandy Clay Loam Permafrost
				
					//TODO
					
				//Radioactive Sandy Loam Permafrost
				
					//TODO
					
				//Radioactive Loamy Sand Permafrost
				
					//TODO
					
				//Radioactive Sand Permafrost
				
					//TODO

	//Rocks
	
		//Igneous

			//Phaneritic

				//Felsic: granite

					elements.granite = {
						color: ["#F3C3AD", "#F0AB75", "#DDA888", "#BD927E", "#998473", "#5C5E53", "#BD8366"],
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 1215,
						stateHigh: "felsic_magma",
						density: 2691,
						hardness: 0.75,
						breakInto: "granite_gravel",
					};

					elements.granite_gravel = {
						color: ["#E3B39D", "#E09B65", "#CD9878", "#AD826E", "#897463", "#4C4E43", "#AD7356", "#F3C3AD", "#F0AB75", "#DDA888", "#BD927E", "#998473", "#5C5E53", "#BD8366", "#FFD3BD", "#FFBB85", "#EDB898", "#CDA28E", "#A99483", "#6C6E63", "#CD9376"],
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 1215,
						stateHigh: "felsic_magma",
						density: 1320,
					};

					elements.felsic_magma = {
					  "reactions": {
						"magma": { "elem1": "intermediate_magma", "elem2": "intermediate_magma" },
						"ash": { "elem1": null, "elem2": "molten_slag" },
						"dust": { "elem1": null, "elem2": "molten_slag" },
						"foam": { "elem1": "pumice", "elem2": "pumice" },
					  },
					  tick: function(pixel) {
						  magmaRateBasedCooling(pixel,780,"obsidian",-85,"rhyolite",-20,"granite"); //to give rhyolites a chance
					  },
					  "name": "felsic magma",
					  "color": ["#FFF457", "#FF9257", "#FF9200", "#FFD63B", "#FFAB3B", "#FF8000", "#FFD244", "#FFA844", "#FF7E00", "#FFB73F", "#FF923F", "#FF6E00", "#FFA53A", "#FF843A", "#FF6300", "#B8762A", "#B85E2A", "#B84700", "#FFA433", "#FF8333", "#FF6200"],
					  "behavior": behaviors.MOLTEN,
					  "temp": 1300,
					  "tempLow": -Infinity, //cosmetic info
					  "stateLow": ["rhyolite","granite","obsidian"],
					  "viscosity": 100000000,
					  "hidden": true,
					  "state": "liquid",
					  "category": "states",
					  "density": 2421.9
					};

				//Intermediate felsic: granodiorite (such a creative name)

					elements.granodiorite = {
						color: ["#B1AB9D", "#262001", "#A6A292", "#D6C5BC", "#F2F2F2", "#DED8C2", "#978871", "#A8AAA7"], //From image: By Rudolf Pohl - Own work, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=7788350
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 1277, //made-up/interpolated from granite and diorite
						stateHigh: "intermediate_felsic_magma",
						density: 2644, //last 2 digits made up again
						hardness: 0.75,
						breakInto: "granodiorite_gravel",
					};

					elements.granodiorite_gravel = {
						color: ["#A19B8D", "#161000", "#969282", "#C6B5AC", "#E2E2E2", "#CEC8B2", "#877861", "#989A97", "#B1AB9D", "#262001", "#A6A292", "#D6C5BC", "#F2F2F2", "#DED8C2", "#978871", "#A8AAA7", "#C1BBAD", "#363011", "#B6B2A2", "#E6D5CC", "#FFFFFF", "#EEE8D2", "#A79881", "#B8BAB7"], //placeholder
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 1277,
						stateHigh: "intermediate_felsic_magma",
						density: 1296,
					};

					elements.intermediate_felsic_magma = {
					  "reactions": {
						"magma": { "elem1": "intermediate_magma", "elem2": "intermediate_magma" },
						"ash": { "elem1": null, "elem2": "molten_slag" },
						"dust": { "elem1": null, "elem2": "molten_slag" },
						"foam": { "elem1": "intermediate_pumice", "elem2": "intermediate_pumice" },
					  },
					  tick: function(pixel) {
						  magmaRateBasedCooling(pixel,1020,vitreousInterfelsicName,-95,"dacite",-23,"granodiorite");
					  },
					  "name": "intermediate felsic magma",
					  "color": ["#FFD64F", "#FFAB4F", "#FF8000", "#7C5831", "#7C5031", "#7C5830", "#FFCB49", "#FFA249", "#FF7A00", "#FFF65E", "#FFC55E", "#FF9400", "#FFFF79", "#FFF279", "#FFB600", "#FFFF61", "#FFD861", "#FFA200", "#FFAA39", "#FF8839", "#FF6600", "#FFD554", "#FFAA54", "#FF8000"],
					  "behavior": behaviors.MOLTEN,
					  "temp": 1200,
					  "tempLow": -Infinity,
					  "stateLow": ["dacite","granodiorite",vitreousInterfelsicName],
					  "viscosity": 18700000, //10^average of logarithms
					  "hidden": true,
					  "state": "liquid",
					  "category": "states",
					  "density": 2320, //averaged lower values
					};

				//Intermediate: diorite

					elements.diorite = {
						color: ["#E1E1E1","#B0A696","#707271","#434459","#242424"], //Extracted from image and blended
						//By Michael C. Rygel - Own work, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=31124755
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 1300,
						stateHigh: "intermediate_magma",
						density: 2822, //last 2 digits made up.
						hardness: 0.70, //bs'd from MH rel to granite
						breakInto: "diorite_gravel",
					};

					elements.diorite_gravel = {
						color: ["#F1F1F1","#E1E1E1","#D1D1D1","#C0B6A6","#B0A696","#A09686","#808281","#707271","#606261","#535469","#434459","#333449","#343434","#242424","#141414"],
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 1260,
						stateHigh: "intermediate_magma",
						density: 1717, //approximated from granite values
					};

					elements.intermediate_magma = {
						"reactions": {
							"ash": { "elem1": null, "elem2": "molten_slag" },
							"dust": { "elem1": null, "elem2": "molten_slag" },
							"foam": { "elem1": "scoria", "elem2": "scoria" },
						},
						"name": "intermediate magma",
						"color": ["#FFFF70", "#FFE170", "#FFA800", "#FFCF4B", "#FFA64B", "#FF7C00", "#E08E38", "#E07238", "#E05500", "#86552C", "#86442C", "#863300", "#482D12", "#482412", "#481B00"],
						"behavior": behaviors.MOLTEN,
						tick: function(pixel) {
							magmaRateBasedCooling(pixel,1065,vitreousIntermediateName,-105,"andesite",-26,"diorite");
						},
						"temp": 1215,
						"tempLow": -Infinity,
						"stateLow": ["andesite","diorite",vitreousIntermediateName],
						"viscosity": 350000,
						"hidden": true,
						"state": "liquid",
						"category": "states",
						"density": 2450,
					}

				//Mafic: gabbro

					
					elements.rock.tempHigh = 1474;
					elements.rock.density = 3300;
					elements.rock.breakInto = ["gravel"];
					elements.magma.name = "mafic magma";
					elements.magma.density = 2650;
					elements.magma.tick = function(pixel) {
						magmaRateBasedCooling(pixel,1180,vitreousMaficName,-115,"basalt",-29,"rock");
					};
					elements.magma.tempLow = -Infinity;
					elements.magma.stateLow = ["basalt","rock",vitreousMaficName]
					elements.magma.reactions ??= {};
					elements.magma.reactions.foam = { "elem1": "mafic_scoria", "elem2": "mafic_scoria" };

				//Ultramafic: peridotite

					elements.peridotite = {
						color: ["#908557","#A29E78","#7F8044","#C6BC87","#8C8656","#7C7C40","#837840","#8B8B69"],
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 1400,
						stateHigh: "ultramafic_magma",
						density: 3347, //appr from https://agupubs.onlinelibrary.wiley.com/doi/abs/10.1029/GL003i009p00509#:~:text=Abstract,and%20the%20bulk%20rock%20analyses.
						hardness: 0.76,
						breakInto: "peridotite_gravel",
					};

					elements.peridotite_gravel = {
						color: ["#807547","#928e68","#6f7034","#b6ac77","#7c7646","#6c6c30","#736830","#7b7b59","#908557","#a29e78","#7f8044","#c6bc87","#8c8656","#7c7c40","#837840","#8b8b69","#a09567","#b2ae88","#8f9054","#d6cc97","#9c9666","#8c8c50","#938850","#9b9b79"],
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 1400,
						stateHigh: "ultramafic_magma",
						density: 1681,
					};

					elements.ultramafic_magma = {
					  "reactions": {
						"ash": { "elem1": null, "elem2": "molten_slag" },
						"dust": { "elem1": null, "elem2": "molten_slag" },
					  },
					  "name": "ultramafic magma",
					  "color": ["#ffa62b","#ff852b","#ff6300","#ffc53c","#ff9e3c","#ff7600","#fea022","#fe8022","#fe6000","#ffeb43","#ffbc43","#ff8d00","#ffa72b","#ff862b","#ff6400","#f89b20","#f87c20","#f85d00","#ff9620","#ff7820","#ff5a00","#ffad34","#ff8b34","#ff6800"],
					  "behavior": behaviors.MOLTEN,
					  tick: function(pixel) {
						magmaRateBasedCooling(pixel,1280,vitreousUltramaficName,-125,"komatiite",-32,"peridotite");
					  },
					  "temp": 1500,
					  "tempLow": -Infinity,
					  "stateLow": ["komatiite","peridotite",vitreousUltramaficName],
					  "viscosity": 100,
					  "hidden": true,
					  "state": "liquid",
					  "category": "states",
					  "density": 2800
					};

			//Aphanitic

				//Felsic: rhyolite

					elements.rhyolite = {
						color: ["#A67153","#BF967E","#D9B5A0","#8C533E","#C99F86","#C5997E","#BB8A69"],
						// also from one of Michael C. Rygel's images
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 800,
						stateHigh: "felsic_magma",
						density: 2555, //very wide range
						hardness: 0.75,
						breakInto: "rhyolite_gravel",
					};

					elements.rhyolite_gravel = {
						color: ["#B68163","#A67153","#966143","#CFA68E","#BF967E","#AF866E","#E9C5B0","#D9B5A0","#C9A590","#9C634E","#8C533E","#7C432E","#D9AF96","#C99F86","#B98F76","#D5A98E","#C5997E","#B5896E","#CB9A79","#BB8A69","#DB7A59"],
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 800,
						stateHigh: "felsic_magma",
						density: 1254, //approximated from granite values
					};

				//Intermediate felsic: dacite

					elements.dacite = {
						color: ["#D9CCC5", "#F2E9E4", "#877670", "#A69B97"],
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 1050,
						stateHigh: "intermediate_felsic_magma",
						density: 2654, //https://books.google.ca/books?id=ObUPAAAAIAAJ&pg=PA181&lpg=PA181&dq=dacite+specific+gravity&source=bl&ots=qn8B4sirWi&sig=Wp_MHqPuUGPNQobcuNP5c5wqkpU&hl=en&sa=X&ei=cimtUaH8Eab7yAH8joDABQ#v=onepage&q=dacite%20specific%20gravity&f=false
						hardness: 0.75,
						breakInto: "dacite_gravel",
					};

					elements.dacite_gravel = {
						color: ["#C9BCB5", "#E2D9D4", "#776660", "#968B87", "#D9CCC5", "#F2E9E4", "#877670", "#A69B97", "#E9DCD5", "#FFF9F4", "#978680", "#B6ABA7"], //placeholder
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 1050,
						stateHigh: "intermediate_felsic_magma",
						density: 1300,
					};

				//Intermediate: andesite

					elements.andesite = {
						color: ["#6F7575", "#C5C9CB", "#818787", "#797F7F", "#B5B9BA", "#6D7371", "#909696"],
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 1215,
						stateHigh: "intermediate_magma",
						density: 2474, //it varies very widely, so I made the last 2 digits up.
						hardness: 0.75,
						breakInto: "andesite_gravel",
					};

					elements.andesite_gravel = {
						color: ['#5f6565', '#b5b9bb', '#717777', '#696f6f', '#a5a9aa', '#5d6361', '#808686', '#6f7575', '#c5c9cb', '#818787', '#797f7f', '#b5b9ba', '#6d7371', '#909696', '#7f8585', '#d5d9db', '#919797', '#898f8f', '#c5c9ca', '#7d8381', '#a0a6a6'],
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 1260,
						stateHigh: "intermediate_magma",
						density: 1214, //approximated from granite values
					};

				//Mafic: basalt

					elements.basalt.tempHigh = 1122;
					elements.basalt.density = 2949;

				//Ultramafic: komatiite

					elements.komatiite = {
						color: ["#AEB5AE","#A9B8B5","#7B8881","#858B87","#949F97","#505B55"],
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 1600,
						stateHigh: "ultramafic_magma",
						density: 3100, //approximate density extrapolated from intermediate and mafic density
						//the magma's density is more well-known but there's nothing on the solid rock (probably because it's so rare and often metamorphosed)
						hardness: 0.75,
						breakInto: "komatiite_gravel",
					};

					elements.komatiite_gravel = {
						color: ["#9ea59e","#99a8a5","#6b7871","#757b77","#848f87","#404b45","#aeb5ae","#a9b8b5","#7b8881","#858b87","#949f97","#505b55","#bec5be","#b9c8c5","#8b9891","#959b97","#a4afa7","#606b65"],
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 1600,
						stateHigh: "ultramafic_magma",
						density: 1650, //approximated from granite values
					};

			//Vesicular

				//Felsic: pumice

					elements.pumice = {
						color: ["#ebe1c3", "#ada386", "#f0bd9e", "#ab846c", "#bfbebd", "#75726f", "#f5e595", "#ab9e60", "#ad683d", "#633d25", "#6e6d6d", "#3b3a39"],
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 1350,
						stateHigh: "felsic_magma",
						density: 641,
						hardness: 0.7,
						breakInto: "pumice_gravel",
					};

					elements.pumice_gravel = {
						color: ["#f6f3e9","#e8dfc5","#d9cba0","#bfb9a6","#a9a189","#948a6b","#f3dccd","#eabfa4","#e0a27b","#baa191","#a78672","#8d6d58","#dad8d8","#c1bfbe","#a8a5a4","#908d89","#76736f","#5c5a57","#f5eec6","#eee09b","#e7d36f","#b7af85","#a49a65","#877e4f","#bd8461","#a56a45","#815336","#83563a","#603f2a","#3c271a","#575552","#3c3b39","#222120","#3c3b39","#222120","#080807"],
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 1350,
						stateHigh: "felsic_magma",
						density: 2080,
					};

				//Intermediate felsic: ???

					elements.intermediate_pumice = {
						color: ["#dbd4bd", "#b5ad94", "#e3ceb6", "#bda891", "#c2c2c2", "#a1a1a1", "#e6c8a1", "#b8a48c"],
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 1190,
						stateHigh: "intermediate_felsic_magma",
						density: 991, //110% made-up
						hardness: 0.7,
						breakInto: "intermediate_pumice_gravel",
					};

					elements.intermediate_pumice_gravel = {
						color: ["#e3ddc8", "#b0aa99", "#e6d4c1", "#c9b7a3", "#cfcccc", "#919191", "#e0ceb6", "#b0a292"],
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 1190,
						stateHigh: "intermediate_felsic_magma",
						density: 2213, //see above
					};

				//Intermediate: scoria

					elements.scoria = {
						color: ["#594545", "#573b31", "#522e28"],
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 1085,
						stateHigh: "intermediate_magma",
						density: 2550,
						hardness: 0.68,
						breakInto: "scoria_gravel",
					};

					elements.scoria_gravel = {
						color: ["#665e5e", "#454343", "#694d47", "#523731", "#57322d", "#3b221e"],
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 1085,
						stateHigh: "intermediate_magma",
						density: 2790, //https://www.astm.org/gtj12675.html#:~:text=Particle%20density%20was%20found%20to,a%2074%2D%C2%B5m%20sieve).
					};

				//Mafic: still scoria

					elements.mafic_scoria = {
						color: ["#756666", "#695751", "#737272"],
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 1298, //Density and melting point provided by ChatGPT
						stateHigh: "magma",
						density: 2717,
						hardness: 0.7,
						breakInto: "mafic_scoria_gravel",
					};

					elements.mafic_scoria_gravel = {
						color: ["#807a7a", "#665e5e", "#82716c", "#635652", "#8a8a8a", "#636161"],
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 1298,
						stateHigh: "magma",
						density: 2993, //https://www.astm.org/gtj12675.html#:~:text=Particle%20density%20was%20found%20to,a%2074%2D%C2%B5m%20sieve).
					};

				//Ultramafic: ???

					elements.ultramafic_scoria = {
						color: ["#737565", "#7a7761", "#727372"],
						behavior: behaviors.WALL,
						category: "land",
						state: "solid",
						tempHigh: 1400, //Density and melting point provided by ChatGPT
						stateHigh: "ultramafic_magma",
						density: 2924,
						hardness: 0.7,
						breakInto: "ultramafic_scoria_gravel",
					};

					elements.ultramafic_scoria_gravel = {
						color: ["#85877a", "#5b5c50", "#87846b", "#61694f", "#7e807e", "#5c5e5c"],
						behavior: behaviors.POWDER,
						category: "land",
						state: "solid",
						tempHigh: 1400,
						stateHigh: "ultramafic_magma",
						density: 3132,
					};

			//Vitreous

				//Felsic: obsidian

					elements.obsidian = {
						color: ["#252422", "#171616", "#161915", "#161018"],
						behavior: behaviors.WALL,
						tempHigh: 1000,
						stateHigh: "felsic_magma",
						category: "land",
						state: "solid",
						density: 2488, //2.35-2.6
						breakInto: "obsidian_shard",
					};

					elements.obsidian_shard = {
						color: ["#363330","#231f1a","#272121","#161313","#22281f","#131712","#211924","#100c13"],
						behavior: behaviors.POWDER,
						tempHigh: 1000,
						stateHigh: "felsic_magma",
						category: "land",
						state: "solid",
						density: 2313, //made-up
					},

				//Intermediate felsic: ???

					elements[vitreousInterfelsicName] = {
						color: ["#4f4b42", "#474646", "#4a4d49", "#342f36"],
						behavior: behaviors.WALL,
						tempHigh: 1040, //All vitrites past obsidian have ChatGPT tempHighs and densities
						stateHigh: "intermediate_felsic_magma",
						category: "land",
						state: "solid",
						density: 2640,
						breakInto: vitreousInterfelsicName + "_shard",
					};

					elements[vitreousInterfelsicName + "_shard"] = {
						color: ["#69645b", "#454139", "#5c5b5b", "#424040", "#5e615d", "#454745", "#4d474f", "#39363b"],
						behavior: behaviors.POWDER,
						tempHigh: 1040,
						stateHigh: "intermediate_felsic_magma",
						category: "land",
						state: "solid",
						density: 2401,
					},

				//Intermediate: ???

					elements[vitreousIntermediateName] = {
						color: ["#636059", "#707070", "#5f615f", "#504b52"],
						behavior: behaviors.WALL,
						tempHigh: 1085,
						stateHigh: "intermediate_magma",
						category: "land",
						state: "solid",
						density: 2710,
						breakInto: vitreousIntermediateName + "_shard",
					};

					elements[vitreousIntermediateName + "_shard"] = {
						color: ["#7d7972", "#59554e", "#757474", "#575656", "#7b7d7a", "#5a5c5a", "#69646b", "#4f4b52"],
						behavior: behaviors.POWDER,
						tempHigh: 1085,
						stateHigh: "intermediate_magma",
						category: "land",
						state: "solid",
						density: 2482,
					},

				//Mafic: ???

					elements[vitreousMaficName] = {
						color: ["#6e615d", "#706767", "#6a6b63", "#6e5e68"],
						behavior: behaviors.WALL,
						tempHigh: 1200,
						stateHigh: "magma",
						category: "land",
						state: "solid",
						density: 2900,
						breakInto: vitreousMaficName + "_shard",
					};

					elements[vitreousMaficName + "_shard"] = {
						color: ["#887b77","#5d5351","#8b8484","#5f5959","#82837c","#595954","#887782","#5d5158"],
						behavior: behaviors.POWDER,
						tempHigh: 1200,
						stateHigh: "magma",
						category: "land",
						state: "solid",
						density: 2777,
					},

				//Ultramafic: ???

					elements[vitreousUltramaficName] = {
						color: ["#6e6d5e", "#626659", "#54574b", "#665d55"],
						behavior: behaviors.WALL,
						tempHigh: 1300,
						stateHigh: "ultramafic_magma",
						category: "land",
						state: "solid",
						density: 3200,
						breakInto: vitreousUltramaficName + "_shard",
					};

					elements[vitreousUltramaficName + "_shard"] = {
						color: ["#888777","#5d5c51","#787c6e","#51544a","#696c60","#474941","#7f756c","#554f49"],
						behavior: behaviors.POWDER,
						tempHigh: 1300,
						stateHigh: "ultramafic_magma",
						category: "land",
						state: "solid",
						density: 2998,
					},


		//Sedimentary

			//Chemical
			
			//Clastic
				
				//Grains < 1/16 mm
			
				//Grains 1/16-2 mm
				//Partly intermingled with the radiation cult
				
					//Dummied-out debug counters

						/*sedimentSandstoneTries = 0;
						sedimentSandstoneTryIterations = 0;
						sedimentSandstoneDetects = 0;
						sedimentSandstoneNoDetects = 0;
						sandstoneFormations = 0;
						sandstoneFailures = 0;*/
				
					//Elements from which simplified lithification can spread

						sandstoneLithificationElements = ["sand_sediment", "sandstone", "radioactive_sand_sediment", "radioactive_sandstone"/*, "crimson_sandstone", "crimson_sand_sediment"*/]

					//Water reaction to pick up the fine material (this is very simplified)

						elements.water.reactions.wet_sand = {
							"elem1": "sandy_water",
							"elem2": ["wet_sand","wet_sand","wet_sand","sandy_water"],
							chance: 0.01
						};

						elements.water.reactions.radioactive_wet_sand = {
							"elem1": "radioactive_sandy_water",
							"elem2": ["radioactive_wet_sand","radioactive_wet_sand","radioactive_wet_sand","radioactive_wet_sand","radioactive_wet_sand",null],
							chance: 0.01
						};

						/*elements.water.reactions.crimson_wet_sand = { /
							"elem1": "crimson_sandy_water",
							"elem2": ["crimson_wet_sand","crimson_wet_sand","crimson_wet_sand","crimson_wet_sand","crimson_wet_sand",null],
							chance: 0.01
						};*/

					//Sediment suspension

						elements.sandy_water = {
							color: ["#768485", "#849294"],
							behavior: behaviors.LIQUID,
							tempHigh: 100,
							stateHigh: ["steam","steam","sand"],
							//tempLow: 0,
							//stateLow: "sandy_ice",
							category: "liquids",
							heatCapacity: 4.184, //unimplemented
							reactions: {
								"dirt": { // React with (water reacts with dirt to make mud)
									"elem1": [null,null,"wet_sand"], // First element transforms into; in this case, water deletes itself
									"elem2": "mud", // Second element transforms into; in this case, dirt turns to mud
								},
								"water": { "elem1":"water", "elem2":"sandy_water", "chance":0.025 }, //swap reaction
								"sand": { "elem1": [null,null,"wet_sand"], "elem2": "wet_sand", }, 
								"sandy_water": { "elem1":"water", "elem2":"sand_sediment", "chance": 0.001 }, 
								"wet_sand": { "elem1": "water", "elem2":"sand_sediment", "chance": 0.0005 },
								//"salt": { "elem1": "salt_water", "elem2": null },
								//"sugar": { "elem1": "sugar_water", "elem2": null, },
								"dust": { "elem1": "dirty_water", "elem2": null, },
								"ash": { "elem1": "dirty_water", "elem2": null, },
								"cyanide": { "elem1": "dirty_water", "elem2": null, },
								//"carbon_dioxide": { "elem1": "seltzer", "elem2": null, "oneway":true },
								"sulfur": { "elem1": "dirty_water", "elem2": null, },
								"rat": { "elem1": "dirty_water", chance:0.005 },
								"plague": { "elem1": "dirty_water", "elem2": null, },
								"rust": { "elem1": "dirty_water", chance:0.005 },
								"fallout": { "elem1": "dirty_water", chance:0.25 },
								"radiation": { "elem1": "dirty_water", chance:0.25 },
								"uranium": { "elem1": "dirty_water", chance:0.25 },
								"rotten_meat": { "elem1": "dirty_water", chance:0.25 },
								"quicklime": { "elem1": [null,null,"wet_sand"], "elem2": "slaked_lime", },
								"rock": { "elem2": "wet_sand", "chance": 0.00035 },
								"ruins": { "elem2": "rock", "chance": 0.00035 },
								"mudstone": { "elem2": "mud", "chance": 0.00035 },
								//"methane": { "elem1":"primordial_soup", "elem2":"primordial_soup", tempMin:60, charged:true },
								//"ammonia": { "elem1":"primordial_soup", "elem2":"primordial_soup", tempMin:60, charged:true },
								"fly": { "elem2":"dead_bug", "chance":0.1, "oneway":true },
								"firefly": { "elem2":"dead_bug", "chance":0.1, "oneway":true },
								"bee": { "elem2":"dead_bug", "chance":0.05, "oneway":true },
								"stink_bug": { "elem2":"dead_bug", "chance":0.1, "oneway":true },
							},
							state: "liquid",
							density: 1097,
							conduct: 0.02,
							stain: 0.01,
						}

					//Sediment element where lithification code resides

						elements.sand_sediment = {
							hidden: true,
							color: "#d3b387",
							hardness: 0.2,
							behavior: [
								"XX|XX|XX",
								"XX|XX|XX",
								"SW:wet_sand%1.5 AND M2|SW:wet_sand%2.5 AND M1|SW:wet_sand%1.5 AND M2"
							],
							reactions: {
								"water": { "elem1":"sandy_water", "elem2":"sandy_water", "chance":0.001 },
								"sand": { "elem1": [null,null,"wet_sand"], "elem2": "wet_sand", },
								"sandy_water": { "elem1":["water","water","sand_sediment"], "chance":0.001 },
								"wet_sand": { "elem2": "sand_sediment", "chance": 0.0005 },
							},
							tempHigh: 1700,
							stateHigh: "molten_glass",
							category: "land",
							state: "solid",
							state: "solid",
							density: 1602,
							breakInto: "sand",
							tick: function(pixel) {
								sedimentation(pixel,sandstoneLithificationElements,"sandstone")
							},
						}

					//Reactions to add

						elements.wet_sand.reactions.sand_sediment = {
							elem1: "sand_sediment",
							chance: 0.0003
						};

						elements.wet_sand.reactions.wet_sand = {
							elem1: "sand_sediment",
							chance: 0.0003
						};

					//Final rock

						elements.sandstone = {
							color: ["#b27853", "#d1a784", "#d1a784", "#d4996e"],
							behavior: behaviors.WALL,
							tempHigh: 1500,
							stateHigh: "molten_glass",
							category: "land",
							state: "solid",
							state: "solid",
							density: 2323, //wide range
							hardness: 0.5,
							breakInto: "sand",
						}

					//Worldgen preset for testing

						worldgentypes.sandstone_test_ocean = {
							layers: [
								[0.9, "wet_sand", 0.2],
								[0.9, "sand", 0.2],
								[0.8, "sandy_water", 0.7],
								[0.25, "water"],
								[0.1, "sand", 0.1],
								[0.1, "clay", 0.1],
								[0.1, "gravel", 0.2],
								[0.1, "wet_sand"],
								[0.03, "gravel", 0.5],
								[0.03, "rock"],
								[0, "basalt"],
							]
						};

					//Changes to vanilla desert

						worldgentypes.desert = {
							layers: [
								[0.95, "gravel", 0.6],
								[0.65, "bone", 0.03],
								[0.65, "sand"],
								[0.55, "bone", 0.02],
								[0.3, "sandstone"],
								[0.05, "rock"],
								[-0.78, "basalt"]
							],
							temperature: 38
						};
						
				//Grains > 2 mm
				
					//Angular fragments

						//Breccia

					//Rounded fragments
					
						//Conglomerate
	
	//Gems
	  //There is a mineral classification scheme, but it will take a while to implement if I ever get around to it.
	  //We're assuming that the crystal structures reform properly because I don't want to have to research and implement refrozen amorphous forms.

		//Emerald
		
			elements.emerald = {
				color: ["#31e31e", "#88fa5a", "#28d419", "#54e823", "#64f235"],
				tempHigh: 1287,
					//1: I can't be arsed to find out what happens to emerald in extreme heat. Apparently, neither can anyone else, and Google is useless for this.
					//2: So I'm just assuming that the chromium impurities are polite and remain in solution with the molten beryl.
				behavior: behaviors.POWDER,
				category: "powders",
				state: "solid",
				density: 2710, //within natural variation
				hardness: 0.8, //Mohs scaled to diamond
			};

		//Amethyst

			elements.amethyst = {
				color: ["#c569e0", "#bd43e0", "#e37aeb", "#ab2fe0", "#b05bd4", "#9b2cdb"],
				tempHigh: 1650,
				//1: Gee, another quartz-like...
				//2: Like with emerald, I'm trusting the impurities to stay dissolved because I don't exactly have any amethyst laying around to melt.
                behavior: [
                    "XX|XX|XX",
                    "SP|XX|XX",
                    "SA|M1|SP"
                ],
				category: "powders",
				state: "solid",
				density: 2650,
				hardness: 0.7,
			};

		//Sapphire

			elements.sapphire = {
				color: ["#2d43e3", "#4d5fe3", "#1f30cc", "#375fdb", "#2d39e3"],
				tempHigh: 2040,
					//1: You can actually grow corundum-based gems through the Verneuil process
				behavior: behaviors.POWDER,
				category: "powders",
				state: "solid",
				density: 3980,
				hardness: 0.9,
			}

		//Ruby

			elements.ruby = {
				//Corundum with different impurities, so I can copy/paste everything but the color
				color: ["#ff1222", "#ff4545", "#e30b13", "#fa253b", "#f2120f"],
				tempHigh: 2040,
				behavior: behaviors.POWDER,
				category: "powders",
				state: "solid",
				density: 3980,
				hardness: 0.9,
			}

		//Topaz

			elements.topaz = {
				color: ["#f7f431", "#ffff5c", "#f7e048", "#fae43e", "#fff86e", "#ede321"],
				tempHigh: 1340,
				stateHigh: "mullite", //thermal decomposition
				behavior: behaviors.POWDER,
				category: "powders",
				state: "solid",
				density: 3500,
				hardness: 0.8,
			};
			
		//Mullite

			elements.mullite = {
				color: ["#f2d7bf", "#f5cbdc", "#f2dfd3"], //hardly a gemstone, but i will color it like the others regardless
				tempHigh: 1840,
				behavior: behaviors.POWDER,
				category: "powders",
				state: "solid",
				density: 3110,
				hardness: 0.7,
			};

		//Onyx

			elements.onyx = {
				color: ["#1a1919", "#070605", "#111313"],
				tempHigh: 1650, //another  silicate  mineral
				behavior: behaviors.POWDER,
				category: "powders",
				state: "solid",
				density: 2650,
				hardness: 0.7,
			};

		//Opal

			elements.opal = {
				color: ["#ffcfcf", "#fff0d9", "#fcf7c5", "#e4ffd4", "#d1fff5", "#dcecfa", "#dfdbff", "#f5e0ff", "#f7d0f1"],
				tempHigh: 100,
				stateHigh: ["broken_opal", "broken_opal", "broken_opal", "broken_opal", "broken_opal", "broken_opal", "broken_opal", "broken_opal", "broken_opal", "steam"],
				behavior: behaviors.POWDER,
				category: "powders",
				state: "solid",
				density: 2090,
				hardness: 0.6,
				breakInto: ["quartz", "quartz", "quartz", "quartz", "quartz", "quartz", "quartz", "quartz", "quartz", "water"],
			};

			elements.broken_opal = {
				color: ["#f5e6e6", "#ebe2d5", "#f7f6ed", "#e4eddf", "#d8ebe7", "#d8e0e8", "#e4e3e8", "#f4edf7", "#ebebeb"],
				tempHigh: 1650,
				stateHigh: "molten_quartz",
				behavior: behaviors.POWDER,
				category: "powders",
				state: "solid",
				density: 2322,
				hardness: 0.55, //it cracks
			};

		//Quartz

			elements.quartz = { //silicates, silicates, and more silicates
				color: ["#f0f0f0", "#e3e3e3", "#f7f7f7"],
				tempHigh: 1650, 
				behavior: behaviors.POWDER,
				category: "powders",
				state: "solid",
				density: 2650,
				hardness: 0.7,
			};

			//Re-add molten quartz because it stopped auto-generating
			
			elements.molten_quartz = {"behavior":behaviors.MOLTEN,"hidden":true,"state":"liquid","category":"states","color":['#ffff78', '#fff078', '#ffb400', '#ffff71', '#ffe371', '#ffaa00', '#ffff7b', '#fff77b', '#ffb900'],"temp":1650,"tempLow":1550,"stateLow":"quartz","density":2385,"viscosity":10000,"reactions":{"ash":{"elem1":null,"elem2":"molten_slag"},"dust":{"elem1":null,"elem2":"molten_slag"},"magma":{"elem1":null,"elem2":"molten_slag"}},"movable":true}

			//Use in glass

			elements.molten_quartz.reactions = {
				quicklime: { elem1: "molten_glass", elem2: ["quicklime", "quicklime", "quicklime", "quicklime", "quicklime", "quicklime", "quicklime", "quicklime", "quicklime", null]} //lack of vanilla washing soda, lack of tripartite reactions
			};
			/*
			elements.elem1.reactions = {
				elem2: { elem1: "elem1_becomes", elem2: "elem2_becomes"}
			};
			*/
		
		//Pearl (not a mineral)

			elements.pearl = {
				color: ["#e3e3e3", "#e3e0d1", "#eddbce", "#eef2c9", "#d5f5dc", "#d8f2ec", "#fadcf9", "#e3d1c1", "#f2edc9", "#e0f5d7", "#e2beeb", "#e3e3e3", "#e3e0d1", "#eddbce", "#eef2c9", "#d5f5dc", "#d8f2ec", "#fadcf9", "#e3d1c1", "#f2edc9", "#e0f5d7", "#e2beeb", 	"#38332e"],
				tempHigh: 1340, //yay, more thermal decomposition elements
				behavior: behaviors.POWDER,
				category: "powders",
				state: "solid",
				density: 772, //It is partly made of proteins and is said to burn, but I can't find an ignition point, so here it melts.
				hardness: 0.45,
			};

	//Soil

		//Dry dirt

			elements.dry_dirt = {
				color: ["#a88e5e","#8f7950","#8a7045","#9e804c"],
				behavior: [
					"XX|SW:dirt%3 AND SW:mud%6|XX",
					"XX|XX|XX",
					"M2|M1|M2",
				],
				tempHigh:1200,
				stateHigh: "molten_dirt",
				tempLow: -50,
				stateLow: "dry_permafrost",
				category:"land",
				state: "solid",
				density: 1100,
			},

			elements.molten_dirt = { //added manually because the change to dirt will prevent molten_dirt from being auto-generated
				"behavior": behaviors.MOLTEN,
				"hidden": true,
				"state": "liquid",
				"category": "states",
				"color": ["#EC6A15", "#EC5515", "#EC3F00", "#B85210", "#B84210", "#B83100", "#AE4B0D", "#AE3C0D", "#AE2D00", "#D65A0F", "#D6480F", "#D63600"],
				"temp": 1200,
				"tempLow": 1100,
				"stateLow": "dry_dirt",
				"density": 1098,
				"viscosity": 10000
			}

			if(enabledMods.includes("mods/boiling_rock.js")) {
				elements.molten_dirt.tempHigh = 3000;
				elements.molten_dirt.stateHigh = "vaporized_rock";
			};

			elements.dry_permafrost = {
				color: ["#5B7870","#535D51","#52746A","#5A7A6F"],
				behavior: behaviors.POWDER, //not enough water for cementing
				temp: -50,
				tempHigh: 10,
				stateHigh: "dry_dirt",
				category: "land",
				state: "solid",
				state: "solid",
				density: 1200,
			}

			elements.dirt.tempHigh = 110;
			elements.dirt.stateHigh = "dry_dirt";

			elements.water.reactions.dry_dirt = { elem1: null, elem2: "dirt", chance: 0.1 }
			elements.water.reactions.radioactive_dry_dirt = { elem1: null, elem2: "radioactive_dirt", chance: 0.1 }

			if(!elements.mud.reactions) {
				elements.mud.reactions = {};
			};
			elements.mud.reactions.dry_dirt = { elem1: "dirt", elem2: "dirt", chance: 0.06 }
			elements.mud.reactions.radioactive_dry_dirt = { elem1: "radioactive_dirt", elem2: "radioactive_dirt", chance: 0.06 }

	//Land Element Cults
		/*
		"Cult" signifies a set of elements that systematically replicates another set of elements except for a given modification.
		In this case, they replicate some land elements; a "yellow" cult, for example, would have yellow_dirt, yellow_mud, yellow_mudstone, yellow_permafrost, yellow_sand...
		*/

		//Radioactive land

			//Radioactive behavior cult (see above)

				behaviors.RAD_POWDER = [
					"XX|CR:radiation%2|XX",
					"CR:radiation%2|HT%1.5|CR:radiation%2",
					"M2|M1 AND CR:radiation%2|M2",
				],
				behaviors.RAD_STURDYPOWDER = [
					"XX|CR:radiation%2|XX",
					"CR:radiation%2|HT%1.5|CR:radiation%2",
					"XX|M1 AND CR:radiation%2|XX",
				],
				behaviors.RAD_SUPPORT = [
					"CR:radiation%1|CR:radiation%2|CR:radiation%1",
					"SP AND CR:radiation%2|HT%1.5|SP AND CR:radiation%2",
					"XX|M1 AND CR:radiation%2|XX",
				],
				behaviors.RAD_SUPPORTPOWDER = [
					"CR:radiation%1|CR:radiation%2|CR:radiation%1",
					"SP AND CR:radiation%2|HT%1.5|SP AND CR:radiation%2",
					"M2|M1 AND CR:radiation%2|M2",
				],
				behaviors.RAD_LIQUID = [
					"XX|CR:radiation%2|XX",
					"M2 AND CR:radiation%2|HT%1.5|M2 AND CR:radiation%2",
					"M1|M1 AND CR:radiation%2|M1",
				],
				behaviors.RAD_WALL = [
					"CR:radiation%0.7|CR:radiation%1.4|CR:radiation%0.7",
					"CR:radiation%1.4|HT%1.50000000000|CR:radiation%1.4",
					"CR:radiation%0.7|CR:radiation%1.4|CR:radiation%0.7",
				],
				behaviors.RAD_GAS = [
					"M2 AND CR:radiation%1.0|M1 AND CR:radiation%2|M2 AND CR:radiation%1",
					"M1 AND CR:radiation%2|HT%1 AND CR:radiation%2|M1 AND CR:radiation%2",
					"M2 AND CR:radiation%1.0|M1 AND CR:radiation%2|M2 AND CR:radiation%1",
				],
				behaviors.RAD_MOLTEN = [
					"XX|CR:radiation%2.5 AND CR:fire%2.5|XX",
					"M2 AND CR:radiation%1|HT%2|M2 AND CR:radiation%1",
					"M1|M1 AND CR:radiation%1|M1",
				]

				//console.log(behaviors.RAD_POWDER) //forcing it to acknowledge the behaviors i just added instead of giving me "undefined"
				
			//Setting reactions (we'll define the elements later)
			
				var namelessArray = ["dirt","sand","mud","wet_sand"];
				for(i = 0; i < namelessArray.length; i++) {
					var elementt = namelessArray[i];
					if(!elements[elementt].reactions) {
						elements[elementt].reactions = {};
					};
				};
			
				elements.water.reactions.radiation = { elem1: "radioactive_water", elem2: null, chance:0.25 },
				elements.radiation.reactions.water = { elem2: "radioactive_water", elem1: null, chance:0.25 },
				elements.dirt.reactions.radiation = { elem1: "radioactive_dirt", elem2: null, chance:0.25 },
				elements.radiation.reactions.dirt = { elem2: "radioactive_dirt", elem1: null, chance:0.25 },
				elements.sand.reactions.radiation = { elem1: "radioactive_sand", elem2: null, chance:0.25 },
				elements.radiation.reactions.sand = { elem2: "radioactive_sand", elem1: null, chance:0.25 },
				elements.mud.reactions.radiation = { elem1: "radioactive_mud", elem2: null, chance:0.25 },
				elements.radiation.reactions.mud = { elem2: "radioactive_mud", elem1: null, chance:0.25 },
				elements.wet_sand.reactions.radiation = { elem1: "radioactive_wet_sand", elem2: null, chance:0.25 },
				elements.radiation.reactions.wet_sand = { elem2: "radioactive_wet_sand", elem1: null, chance:0.25 },

			//Substitution table

				radioactiveObject = {
					dirt:				"radioactive_dirt",
					dry_dirt:			"radioactive_dry_dirt",
					molten_dirt:		"molten_radioactive_dirt",
					glass:				"radioactive_glass",
					molten_glass:		"molten_radioactive_glass",
					glass_shard:		"radioactive_glass_shard",
					sand:				"radioactive_sand",
					mud:				"radioactive_mud",
					wet_sand:			"radioactive_wet_sand",
					water:				"radioactive_water",
					permafrost:			"radioactive_permafrost",
					dry_permafrost:		"radioactive_dry_permafrost",
					mudstone:			"radioactive_mudstone",
					packed_sand:		"radioactive_packed_sand",
					ice:				"radioactive_ice",
					snow:				"radioactive_snow",
					packed_snow:		"radioactive_packed_snow",
					rain_cloud:			"rad_cloud",
					snow_cloud:			"rad_snow_cloud",
					snow_cloud_floater:	"rad_snow_cloud_floater",
					rock:				"radioactive_rock",
					gravel:				"radioactive_gravel",
					basalt:				"radioactive_basalt",
					magma:				"radioactive_magma",
					sandstone:			"radioactive_sandstone",
					sand_sediment: 		"radioactive_sand_sediment"
				};
				
				if(enabledMods.includes("mods/glenn_gases.js")) {
					radioactiveObject.rock_dust = "radioactive_rock_dust";
				};
			
				if(enabledMods.includes("mods/fire_mod.js")) {
					radioactiveObject.fire = "rad_fire";
					radioactiveObject.torch = "rad_torch";
				};
			
				if(enabledMods.includes("mods/structure_test.js")) {
					radioactiveObject.glass = "rad_glass";
					radioactiveObject.glass_pane = "rad_glass_pane";
					radioactiveObject.glass_shard = "rad_glass_shard";
				};
			
			//Reverse lookup function

				function getKeyByValue(object, value) {
				  return Object.keys(object).find(key => object[key] === value);
				}
				//getKeyByValue code by UncleLaz on StackOverflow: https://stackoverflow.com/questions/9907419/how-to-get-a-key-in-a-javascript-object-by-its-value"

			//Main elements

				elements.radioactive_dirt = {
					color: ["#70762b","#4c5c21","#50571a","#4c6b1e"],
					behavior: behaviors.RAD_POWDER,
					tempHigh:110,
					stateHigh: "radioactive_dry_dirt",
					reactions: {
						"dirt": { "elem1":"dirt", "elem2":"radioactive_dirt", "chance":0.0005, "oneway":true },
						"dry_dirt": { "elem1":"radioactive_dry_dirt", "elem2":"radioactive_dirt", "chance":0.0005, "oneway":true },
						"radioactive_dry_dirt": { "elem1":"radioactive_dry_dirt", "elem2":"radioactive_dirt", "chance":0.0005, "oneway":true },
					},
					tempLow: -50,
					stateLow: "radioactive_permafrost",
					category: "states",
					state: "solid",
					density: 1220,
				};

				elements.radioactive_dry_dirt = {
					color: ["#8aa85e","#999c5d","#7f8a45","#b5ad59"],
					behavior: [
						"XX|SW:radioactive_dirt%3 AND SW:radioactive_mud%6 AND CR:radiation%2|XX",
						"AND CR:radiation%2|HT%1.5|CR:radiation%2",
						"M2|M1 AND CR:radiation%2|M2",
					],
					tempHigh:1200,
					stateHigh: "molten_radioactive_dirt",
					tempLow: -50,
					stateLow: "radioactive_dry_permafrost",
					category:"land",
					state: "solid",
					density: 1100,
				},

				elements.molten_radioactive_dirt = {
					"behavior": behaviors.RAD_MOLTEN,
					"hidden": true,
					"state": "liquid",
					"category": "states",
					"color": ["#e09315", "#e07615", "#e05800", "#987310", "#985c10", "#984500", "#a06c0d", "#a0570d", "#a04100", "#98850f", "#986b0f", "#985000"],
					"temp": 1250,
					"tempLow": 1100,
					"stateLow": "radioactive_dirt",
					"density": 1098,
					"viscosity": 10000
				}

				elements.radioactive_glass = {
					color: ["#597a58","#719171"],
					colorOn: ["#6dab67","#88b567"],
					behavior: behaviors.RAD_WALL,
					tempHigh: 1500,
					category: "solids",
					state: "solid",
					density: 2500,
					breakInto: "radioactive_glass_shard",
					conduct: 0.01,
				};

				elements.molten_radioactive_glass = {
					behavior: behaviors.RAD_MOLTEN,
					category: "states",
				};

				elements.radioactive_glass_shard = {
					color: ["#597a58","#719171", "#628263"],
					colorOn: ["#6dab67","#88b567", "#7bad6f"],
					behavior: behaviors.RAD_POWDER,
					tempHigh: 1500,
					stateHigh: "molten_radioactive_glass",
					category: "powders",
					state: "solid",
					density: 2500,
					conduct: 0.01,
				};

				elements.radioactive_sand = {
					color: "#cbdb7b",
					behavior: behaviors.RAD_POWDER,
					tempHigh: 1700,
					stateHigh: "molten_radioactive_glass",
					category: "states",
					state: "solid",
					density: 1602
				};

				elements.radioactive_mud = {
					color: "#3c401c",
					behavior: behaviors.RAD_STURDYPOWDER,
					reactions: {
						"dry_dirt": { "elem1": "radioactive_dirt", "elem2": "radioactive_dirt", chance: 0.06 },
						"radioactive_dirt": { "elem1":"radioactive_dirt", "elem2":"radioactive_mud", "chance":0.0005, "oneway":true },
						"radioactive_sand": { "elem1":"radioactive_dirt", "elem2":"radioactive_wet_sand", "chance":0.0005, "oneway":true },
						"sand": { "elem1":"radioactive_dirt", "elem2":"radioactive_wet_sand", "chance":0.0005, "oneway":true },
						"dirt": { "elem1":"radioactive_dirt", "elem2":"radioactive_mud", "chance":0.0005, "oneway":true },
					},
					tempHigh: 100,
					stateHigh: "radioactive_mudstone",
					tempLow: -50,
					stateLow: "radioactive_permafrost",
					category: "states",
					state: "solid",
					density: 1730,
					stain: 0.02,
				};

				elements.radioactive_wet_sand = {
					color: ["#848c3a","#969e4c"],
					behavior: behaviors.RAD_STURDYPOWDER,
					reactions: {
						"radioactive_sand": { "elem1":"radioactive_sand", "elem2":"radioactive_wet_sand", "chance":0.0005, "oneway":true },
						"radioactive_dirt": { "elem1":"radioactive_sand", "elem2":"radioactive_mud", "chance":0.0005, "oneway":true },
						"sand": { "elem1":"radioactive_sand", "elem2":"radioactive_wet_sand", "chance":0.0005, "oneway":true },
						"dirt": { "elem1":"radioactive_sand", "elem2":"radioactive_mud", "chance":0.0005, "oneway":true },
						"wet_sand": { "elem1":"radioactive_sand", "elem2":"radioactive_sand_sediment", "chance":0.0005, "oneway":true },
						"sand_sediment": { "elem1":"radioactive_sand", "elem2":"radioactive_sand_sediment", "chance":0.0005, "oneway":true },
						"radioactive_wet_sand": { "elem1":"radioactive_sand", "elem2":"radioactive_sand_sediment", "chance":0.0005, "oneway":true },
						"radioactive_sand_sediment": { "elem1":"radioactive_sand", "elem2":"radioactive_sand_sediment", "chance":0.0005, "oneway":true },
					},
					tempHigh: 100,
					stateHigh: "radioactive_packed_sand",
					category: "states",
					state: "solid",
					density: 1905,
				};

				elements.radioactive_sandy_water = {
					color: ["#84A244", "#90AE50"],
					behavior: behaviors.RAD_LIQUID,
					tempHigh: 100,
					stateHigh: ["rad_steam","rad_steam","radioactive_sand"],
					//tempLow: 0,
					//stateLow: "radioactive_sandy_ice",
					category: "states",
					heatCapacity: 4.184, //unimplemented
					reactions: {
						"dirt": { // React with (water reacts with dirt to make mud)
							"elem1": [null,null,"radioactive_wet_sand"], // First element transforms into; in this case, water deletes itself
							"elem2": "radioactive_mud", // Second element transforms into; in this case, dirt turns to mud
						},
						"radioactive_dirt": { // React with (water reacts with dirt to make mud)
							"elem1": [null,null,"radioactive_wet_sand"], // First element transforms into; in this case, water deletes itself
							"elem2": "radioactive_mud", // Second element transforms into; in this case, dirt turns to mud
						},
						"water": { "elem1":"radioactive_water", "elem2":"radioactive_sandy_water", "chance":0.025 },
						"radioactive_water": { "elem1":"radioactive_water", "elem2":"radioactive_sandy_water", "chance":0.025 },
						"sand": { "elem1": [null,null,"radioactive_wet_sand"], "elem2": "radioactive_wet_sand", },
						"radioactive_sand": { "elem1": [null,null,"radioactive_wet_sand"], "elem2": "radioactive_wet_sand", },
						"sandy_water": { "elem1":"radioactive_wet_sand", "elem2":"radioactive_sand_sediment", "chance": 0.001 },
						"radioactive_sandy_water": { "elem1":"radioactive_wet_sand", "elem2":"radioactive_sand_sediment", "chance": 0.001 },
						"wet_sand": { "elem1": "radioactive_water", "elem2":"radioactive_sand_sediment", "chance": 0.0005 },
						"radioactive_wet_sand": { "elem1": "radioactive_water", "elem2":"radioactive_sand_sediment", "chance": 0.0005 },
						/*"salt": { "elem1": "salt_water", "elem2": null },
						"sugar": { "elem1": "sugar_water", "elem2": null, },
						"dust": { "elem1": "dirty_water", "elem2": null, },
						"ash": { "elem1": "dirty_water", "elem2": null, },
						"cyanide": { "elem1": "dirty_water", "elem2": null, },
						"carbon_dioxide": { "elem1": "seltzer", "elem2": null, "oneway":true },
						"sulfur": { "elem1": "dirty_water", "elem2": null, },
						"rat": { "elem1": "dirty_water", chance:0.005 },
						"plague": { "elem1": "dirty_water", "elem2": null, },
						"rust": { "elem1": "dirty_water", chance:0.005 },
						"fallout": { "elem1": "dirty_water", chance:0.25 },
						"radiation": { "elem1": "dirty_water", chance:0.25 },
						"uranium": { "elem1": "dirty_water", chance:0.25 },
						"rotten_meat": { "elem1": "dirty_water", chance:0.25 },
						"quicklime": { "elem1": [null,null,"wet_sand"], "elem2": "slaked_lime", },
						"rock": { "elem2": "wet_sand", "chance": 0.00035 },
						"ruins": { "elem2": "rock", "chance": 0.00035 },*/
						"mudstone": { "elem2": "radioactive_mud", "chance": 0.00035 },
						"radioactive_mudstone": { "elem2": "radioactive_mud", "chance": 0.00035 },
						//"methane": { "elem1":"primordial_soup", "elem2":"primordial_soup", tempMin:60, charged:true },
						//"ammonia": { "elem1":"primordial_soup", "elem2":"primordial_soup", tempMin:60, charged:true },
						"fly": { "elem2":"dead_bug", "chance":0.1, "oneway":true },
						"firefly": { "elem2":"dead_bug", "chance":0.1, "oneway":true },
						"bee": { "elem2":"dead_bug", "chance":0.05, "oneway":true },
						"stink_bug": { "elem2":"dead_bug", "chance":0.1, "oneway":true },
					},
					state: "liquid",
					density: 1097,
					conduct: 0.02,
					stain: 0.01,
				}

				elements.radioactive_sand_sediment = {
					hidden: true,
					color: "#afd182",
					hardness: 0.2,
					behavior: [
						"XX|XX|XX",
						"XX|XX|XX",
						"SW:wet_sand,radioactive_wet_sand%1.5 AND M2|SW:wet_sand,radioactive_wet_sand%2.5 AND M1|SW:wet_sand,radioactive_wet_sand%1.5 AND M2"
					],
					reactions: {
						"water": { "elem1":"radioactive_sandy_water", "elem2":"radioactive_sandy_water", "chance":0.025 },
						"radioactive_water": { "elem1":"radioactive_sandy_water", "elem2":"radioactive_sandy_water", "chance":0.025 },
						"sand": { "elem1": [null,null,"radioactive_wet_sand"], "elem2": "radioactive_wet_sand", },
						"radioactive_sand": { "elem1": [null,null,"radioactive_wet_sand"], "elem2": "radioactive_wet_sand", },
						"sandy_water": { "elem1":["radioactive_water","radioactive_water","radioactive_sand_sediment"], "chance":0.001 },
						"radioactive_sandy_water": { "elem1":["radioactive_water","radioactive_water","radioactive_sand_sediment"], "chance":0.001 },
						"wet_sand": { "elem2": "radioactive_sand_sediment", "chance": 0.0005 },
						"radioactive_wet_sand": { "elem2": "radioactive_sand_sediment", "chance": 0.0005 },
					},
					tempHigh: 1700,
					stateHigh: "molten_radioactive_glass",
					category: "states",
					state: "solid",
					density: 1602,
					breakInto: "radioactive_sand",
					tick: function(pixel) {
						sedimentation(pixel,sandstoneLithificationElements,"radioactive_sandstone")
					},
				}

				elements.radioactive_sandstone = {
					color: ["#85b357", "#b5d177", "#9cd184", "#7bc25f"],
					behavior: behaviors.RAD_WALL,
					tempHigh: 1500,
					stateHigh: "molten_radioactive_glass",
					category: "states",
					state: "solid",
					density: 2323, //wide range
					hardness: 0.5,
					breakInto: "radioactive_sand",
				}

				elements.radioactive_water = {
					color: "#85cf57",
					behavior: behaviors.RAD_LIQUID,
					tempHigh: 100,
					stateHigh: ["rad_steam","rad_steam","fallout"],
					tempLow: -5,
					stateLow: "radioactive_ice",
					category: "states",
					heatCapacity: 4.184,
					reactions: {
						"water": { elem1: "water", elem2: "radioactive_water", chance:0.05 }, //swap
						"dirt": { // React with (water reacts with dirt to make mud)
							"elem1": null, // First element transforms into; in this case, water deletes itself
							"elem2": "radioactive_dirt", // Second element transforms into; in this case, dirt turns to mud
						},
						"dry_dirt": { "elem1": null, "elem2": "radioactive_dirt", },
						"radioactive_dirt": { "elem1": null, "elem2": "radioactive_dirt", },
						"sand": { "elem1": null, "elem2": "radioactive_wet_sand", },
						"wet_sand": { "elem1": "radioactive_sandy_water", "elem2": ["radioactive_wet_sand","radioactive_wet_sand","radioactive_wet_sand","radioactive_wet_sand","radioactive_wet_sand",null], chance: 0.01 },
						"radioactive_wet_sand": { "elem1": "radioactive_sandy_water", "elem2": ["radioactive_wet_sand","radioactive_wet_sand","radioactive_wet_sand","radioactive_wet_sand","radioactive_wet_sand",null], chance: 0.01 },
						"rat": { "elem2": "rotten_meat", chance:0.005 },
						"plague": { "elem2": null, chance: 0.3, },
						//"quicklime": { "elem1": null, "elem2": "slaked_lime", },
						"rock": { "elem2": "radioactive_wet_sand", "chance": 0.00035 },
						//"ruins": { "elem2": "rock", "chance": 0.00035 },
						"mudstone": { "elem2": "radioactive_mud", "chance": 0.00035 },
						"radioactive_mudstone": { "elem2": "radioactive_mud", "chance": 0.00035 },
						"packed_sand": { "elem2": "radioactive_wet_sand", "chance": 0.00035 },
						"radioactive_packed_sand": { "elem2": "radioactive_wet_sand", "chance": 0.00035 },
						"fly": { "elem2":"dead_bug", "chance":0.1, "oneway":true },
						"firefly": { "elem2":"dead_bug", "chance":0.1, "oneway":true },
						"bee": { "elem2":"dead_bug", "chance":0.05, "oneway":true },
						"stink_bug": { "elem2":"dead_bug", "chance":0.1, "oneway":true },
					},
					state: "liquid",
					density: 997,
					conduct: 0.03,
					stain: 0.02,
				}

				elements.rad_steam.behavior = behaviors.RAD_GAS;
				elements.rad_steam.stateLow = "radioactive_water";
				elements.rad_cloud.behavior =  [
					"XX|XX|XX",
					"XX|CH:fallout,radiation,radioactive_water%0.025|M1%2.5 AND BO",
					"CR:radiation%0.05|CR:radiation%0.05|CR:radiation%0.05",
				];
				elements.rad_cloud.tempLow = 0;
				elements.rad_cloud.stateLow = "rad_snow_cloud";
				elements.fallout.behavior = behaviors.RAD_POWDER;

				elements.radioactive_permafrost = {
					color: ["#51613d","#495234","#3b4a30","#4a4f35"],
					behavior: behaviors.RAD_SUPPORT,
					temp: -50,
					tempHigh: 10,
					stateHigh: "radioactive_mudstone",
					category: "states",
					state: "solid",
					density: 700,
				};

				elements.radioactive_dry_permafrost = {
					color: ["#6e9970","#64756a","#4e7864", "#5f8a78"],
					behavior: behaviors.POWDER, //not enough water for cementing
					temp: -50,
					tempHigh: 10,
					stateHigh: "radioactive_dry_dirt",
					category: "land",
					state: "solid",
					state: "solid",
					density: 1200,
				}

				elements.radioactive_mudstone = {
					color: "#4f5e25",
					behavior: behaviors.RAD_SUPPORT,
					tempHigh:1200,
					stateHigh: "molten_radioactive_dirt",
					tempLow: -50,
					stateLow: "radioactive_permafrost",
					category: "states",
					state: "solid",
					density: 1250,
					breakInto: "radioactive_dirt",
				};

				elements.radioactive_packed_sand = {
					color: "#79945c",
					behavior: behaviors.RAD_SUPPORT,
					tempHigh: 1700,
					stateHigh: "molten_radioactive_glass",
					category: "states",
					state: "solid",
					density: 1682,
					breakInto: "radioactive_sand",
				};

				elements.radioactive_ice = {
					color: "#b7e0b4",
					behavior: behaviors.RAD_WALL,
					temp: 0,
					tempHigh: 5,
					stateHigh: "radioactive_water",
					category: "solids",
					state: "solid",
					density: 917,
					breakInto: "radioactive_snow",
				};

				elements.radioactive_snow = {
					color: "#d5f2d3",
					behavior: behaviors.RAD_POWDER,
					temp: 0,
					tempHigh: 5,
					tempLow: -100,
					stateLow: "radioactive_packed_snow",
					stateHigh: "radioactive_water",
					category: "states",
					state: "solid",
					density: 100,
				};

				elements.radioactive_packed_snow = {
					color: "#a7d4a3",
					behavior: behaviors.RAD_SUPPORTPOWDER,
					temp: 0,
					tempHigh: 20,
					tempLow: -200,
					stateLow: "radioactive_ice",
					stateHigh: "radioactive_water",
					category: "states",
					state: "solid",
					density: 400,
					hidden: true,
				};

				elements.rad_snow_cloud = {
					color: ["#2d6e31","#416e21"],
					behavior: [
						"XX|XX|XX",
						"XX|CH:fallout,radiation,radioactive_snow%0.025|M1%2.5 AND BO",
						"CR:radiation%0.05|CR:radiation%0.05|CR:radiation%0.05",
					],
					category:"states",
					hidden: true,
					state: "gas",
					density: 0.5,
					ignoreAir: true,
					temp: -20,
					tempHigh: 0,
					stateHigh: "rad_cloud",
				};

				elements.rad_snow_cloud_floater = {
					color: ["#2d6e31","#416e21"],
					behavior: [
						"M2|M1|M2",
						"M1%80|CH:rad_snow_cloud_%0.2|M1%80",
						"M%60|XX|M2%60",
					],
					reactions: {
						"rad_snow_cloud_floater": { elem1: "rad_snow_cloud", elem2: "rad_snow_cloud", chance: 0.003 },
						"rad_snow_cloud": { elem1: "rad_snow_cloud", elem2: "rad_snow_cloud", chance: 0.01 }
					},
					category:"states",
					hidden: true,
					state: "gas",
					density: 0.5,
					temp: -20,
					tempHigh: 0,
					stateHigh: "rad_cloud",
				};

				elements.radioactive_rock = {
					color: ["#768063","#444f3f","#7a9476"],
					behavior: behaviors.RAD_POWDER,
					tempHigh: 950,
					stateHigh: "radioactive_magma",
					category: "states",
					state: "solid",
					density: 2550,
					hardness: 0.5,
					breakInto: ["radioactive_sand","radioactive_gravel"],
				};

				elements.radioactive_gravel = {
					color: ["#d1e3c8","#a6b090","#657360","#4d523f"],
					behavior: behaviors.RAD_POWDER,
					category: "states",
					tempHigh: 950,
					stateHigh: "radioactive_magma",
					state: "solid",
					density: 1680,
					hardness: 0.2,
					breakInto: "radioactive_sand",
				};

				elements.radioactive_basalt = {
					color: ["#262e20","#23331f","#3f4235"],
					behavior: behaviors.RAD_STURDYPOWDER,
					tempHigh: 1262.5,
					stateHigh: "radioactive_magma",
					category: "states",
					state: "solid",
					density: 3000,
					hardness: 0.65,
					breakInto: "radioactive_gravel",
				};

				elements.radioactive_magma = {
					color: ["#ff9100","#ffae00","#ff8400"],
					behavior: behaviors.RAD_MOLTEN,
					reactions: {
						"ice": { "elem1": "radioactive_basalt" },
						"radioactive_ice": { "elem1": "radioactive_basalt" },
						"magma": { "elem1":"magma", "elem2":"radioactive_magma", "chance":0.0005, "oneway":true },
					},
					temp: 1500,
					tempLow: 850,
					stateLow: ["radioactive_basalt","radioactive_basalt","radioactive_basalt","radioactive_rock"],
					viscosity: 5000,
					category: "states",
					state: "liquid",
					density: 2725,
				};

				//(Just for fun)

				elements.super_irradiator = {
					color: "#66ee33",
					tick: function(pixel) {
						var twentiethOfTemp = pixel.temp / 20;
						var roundOf20th = Math.round(twentiethOfTemp);
						var boundedR20 = Math.max(1,Math.min(roundOf20th,11));
						transformAround(pixel,boundedR20,radioactiveObject)
					},
					category:"machines",
					insulate: true,
					state: "solid",
				};

				elements.super_deirradiator = {
					color: "#dd33ee",
					tick: function(pixel) {
						var twentiethOfTemp = pixel.temp / 20;
						var roundOf20th = Math.round(twentiethOfTemp);
						var boundedR20 = Math.max(1,Math.min(roundOf20th,11));
						transformAround(pixel,boundedR20,radioactiveObject,reverse=true)
					},
					category:"machines",
					insulate: true,
					state: "solid",
				};

				elements.liquid_irradium = {
					color: "#5499FF",
					behavior: behaviors.RAD_LIQUID,
					tick: function(pixel) {
						for(i = 0; i < adjacentCoords.length; i++) {
							transformAdjacent(pixel,radioactiveObject)
						}
					},
					//Becomes rainbow sand by water or poison, as well as by protocite, or bio-ooze
					//Becomes sulfuric acid on contact with it
					//Becomes corrupt slime by elder fluid
					//Converts black tar and organic soup into itself
					//Turns either grav liquid into aether dust, as well as liquid crystal
					//Turns blood into bloodstone
					//Turns blue slime into black slime
					//Made by {mercury or bio-ooze} and protocite
					category:"liquids",
					state: "liquid",
					density: 18180,	//Cherry-picked from a Tumblr headcanon
									//https://omniblog-of-starbound.tumblr.com/post/188424072728/starbound-element-headcannon-modded-metals
					viscosity: 80.1,	//probably misinterpreting tickDelta, and w/o the game assets, I can't compare against water, so this is in relation to H2SO4 scaled to its density in cP and under the assumption that water visc = 1
				};
				
			//Inter-mod compatibility

				if(enabledMods.includes("mods/some_tf_liquids.js")) {
					elements.radioactive_basalt_gravel = {
						color: ["#394d37", "#3b452f", "#3f452a", "#2d3d2c"],
						behavior: behaviors.RAD_POWDER,
						tempHigh: 1262.5,
						stateHigh: "radioactive_magma",
						category: "states",
						state: "solid",
						density: 1975,
						hardness: 0.26,
					}
					elements.radioactive_basalt.breakInto = "radioactive_basalt_gravel";
				};

			//Worldgen preset for testing

				worldgentypes.radioactive_sandstone_test_ocean = {
					layers: [
						[0.9, "radioactive_wet_sand", 0.2],
						[0.9, "radioactive_sand", 0.2],
						[0.8, "radioactive_sandy_water", 0.7],
						[0.25, "radioactive_water"],
						[0.1, "radioactive_sand", 0.1],
						[0.1, "clay", 0.1],
						[0.1, "radioactive_gravel", 0.2],
						[0.1, "radioactive_wet_sand"],
						[0.03, "radioactive_gravel", 0.5],
						[0.03, "radioactive_rock"],
						[0, "radioactive_basalt"],
					]
				};

			/*/Water irradiation reactions (must be done last)

				waterIrradiationExclusionArray = ["radioactive_water", "radioactive_wet_sand"]
				
				filteredWaterIrradiationArray = Object.keys(elements).filter(function(e) {
					return elements[e].category === "Radioactive" && (!waterIrradiationExclusionArray.includes(e));
				});

				for(i = 0; i < filteredWaterIrradiationArray.length; i++) {
					elements.water.reactions[filteredWaterIrradiationArray[i]] = { "elem1":"radioactive_water", chance: 0.01 }
				};*/

//Generation

	//TNT world

		//Supplementary elements

			elements.oil_cloud = {
				color: "#8c4331",
				behavior: [
					"XX|XX|XX",
					"XX|CH:oil%0.05|M1%2.5 AND BO",
					"XX|XX|XX",
				],
				category:"gases",
				temp: 30,
				state: "gas",
				density: 0.5,
				burn: 60,
				burnTime: 15,
				burnInto: "explosion", //atomization moment
				ignoreAir: true,
				stain: 0.02,
			};

			elements.oil_cloud_floater = {
				color: "#8c4331",
				behavior: [
					"M2|M1|M2",
					"M1%80|CH:oil_cloud%0.2|M1%80",
					"M%60|XX|M2%60",
				],
				reactions: {
					"oil_cloud_floater": { elem1: "oil_cloud", elem2: "oil_cloud", chance: 0.003 },
					"oil_cloud": { elem1: "oil_cloud", elem2: "oil_cloud", chance: 0.01 }
				},
				category:"gases",
				temp: 30, //otherwise identical
				state: "gas",
				density: 0.5,
				burn: 60,
				burnTime: 15,
				burnInto: "explosion", //atomization moment
				stain: 0.02,
			};

		//Main preset

			worldgentypes.tnt_world = {
				name: "TNT World", //unimplemented
				layers: [
					[0.9, "oil_cloud_floater"],
					[0.65, "coal", 0.1],
					[0.65, "nitroglycerin"],
					[0.55, "nitroglycerin", 0.5],
					[0.2, "coal", 0.2],
					[0.2, "tnt"],
					[0.05, "coal", 0.3],
					[0.05, "c4"],
					[0.0, "coal", 0.4],
					[0.0, "lamp_oil"]
				]
			};

		//Inter-mod compatibility

			runAfterLoad(function() {
				if(enabledMods.includes("mods/glenn_gases.js")) {
					worldgentypes.tnt_world.layers.unshift([0.9, "red_gas", 0.50])
				};
			});

	//Ice world

		//Supplementary elements

			elements.snow_cloud_floater = {
				color: "#7e8691",
				behavior: [
					"M2|M1|M2",
					"M1%80|CH:snow_cloud%0.2|M1%80",
					"M%60|XX|M2%60",
				],
				reactions: {
					"snow_cloud_floater": { elem1: "snow_cloud", elem2: "snow_cloud", chance: 0.003 },
					"snow_cloud": { elem1: "snow_cloud", elem2: "snow_cloud", chance: 0.01 }
				},
				category:"gases",
				temp:-10,
				tempHigh:30,
				stateHigh:"rain_cloud",
				tempLow:-200,
				stateLow:"hail_cloud",
				state:"gas",
				density:0.55,
				conduct:0.01,
				movable:true,
				isGas:true
			};
			
		//Main preset

			worldgentypes.ice = {
				layers: [
					//[0.95, "snow_cloud_floater"], //le cutting room floor has arrived
					[0.9, "snow"],
					[0.65, "ice"],
					[0.6, "gravel"],
					[0.35, "permafrost"],
					[0, "rock"]
				],
				temperature: -20
			};

	//Nuclear wasteland

		//Elements defined above
			
		//Main preset

			worldgentypes.nuclear_wasteland = {
				layers: [
					[0.9, "smoke", 0.5],
					[0.9, "rad_snow_cloud_floater", 0.75],
					[0.82, "fallout", 0.4],
					[0.7, "liquid_irradium", 0.05],
					[0.7, "dead_plant", 0.12],
					[0.55, "radioactive_dirt"],
					[0.45, "radioactive_rock"],
					[0.25, "uranium", 0.4],
					[0.35, "radioactive_rock", 0.5],
					[0.3, "radioactive_gravel", 0.5],
					[0.2, "uranium", 0.2],
					[0.05, "rock"],
					[0, "basalt"],
				],
				temperature: -5 //nuclear winter
			};

	//Dark world

	worldgentypes.dark = {
		layers: [
			[0.8, "carbon_dioxide"],
			[0.65, "ink"],
			[0.5, "charcoal"],
			[0, "basalt"]
		]
	};

	//Money world
	
	worldgentypes.money = {
		layers: [
			[0.9, "emerald"],
			[0.6, "diamond"],
			[0.3, "gold_coin"],
			[0.1, "ruby", 1/3],
			[0.1, "amethyst", 1/2],
			[0.1, "sapphire"],
			[-0.1, "pearl", 0.4],
			[-0.1, "onyx"]
		]
	};
	
	//Star world
	//If GWSN can have a decidedly Earth-y name and a space concept, then I should be able to do the same
	
		//Supplementary elements

			elements.liquid_stellar_plasma = {
				color: "#ffffbd",
				colorOn: "#ffffbd",
				behavior: [
					"XX|M2%5 AND CR:plasma%1|XX",
					"M2|XX|M2",
					"M1|M1|M1",
				],
				behaviorOn: [
					"XX|M2%10 AND M1%0.5 AND CR:plasma%2.3|XX",
					"M2|XX|M2",
					"M1|M1|M1",
				],
				tick: function(pixel) {
					almostSun(pixel,0.6,stellarPlasmaSpreadWhitelist);
				},
				temp:5500,
				isGas: true,
				tempLow:2300,
				stateLow: "plasma",
				category: "liquids",
				state: "liquid",
				density: 1000, //density actually depends on depth in the star: https://astronomy.stackexchange.com/a/32734
				conduct: 0.5,
			};

			elements.stellar_plasma = {
				color: "#ffffbd",
				colorOn: "#ffffbd",
				behavior: [
					"M2|M1 AND CR:plasma%0.6|M2",
					"M1 AND CR:plasma%0.6|XX|M1 AND CR:plasma%0.6",
					"M2|M1 AND CR:plasma%0.6|M2",
				],
				behaviorOn: [
					"M2|M1 AND CR:plasma%1|M2",
					"M1 AND CR:plasma%1|XX|M1 AND CR:plasma%1",
					"M2|M1 AND CR:plasma%1|M2",
				],
				tick: function(pixel) {
					almostSun(pixel,0.5,stellarPlasmaSpreadWhitelist);
				},
				temp:5500,
				tempLow:2300,
				stateLow: "plasma",
				category: "gases",
				state: "gas",
				density: 10,
				conduct: 0.5,
			};
			
			elements.neutron_star = {
				color: "#e9eaf7",
				colorOn: "#ffffbd",
				behavior: [
					"XX|CR:neutron%0.1|XX", //no neutrinos though
					"CR:neutron%0.1|XX|CR:neutron%0.1",
					"XX|CR:neutron%0.1|XX"
				],
				tick: function(pixel) {
					nsTick(pixel,0.7,stellarPlasmaSpreadWhitelist);
				},
                temp: 1e12,
                category: "special",
                state: "gas",
                density: 1e17,
                insulate: true,
				conduct: 1,
			};
			
			elements.liquid_degenerate_neutronium = {
				color: "#e9eaf7",
				behavior: [
					"XX|M2%5 AND CR:neutron%0.6|XX",
					"M2|XX|M2",
					"M1|M1|M1",
				],
				behaviorOn: [
					"XX|M2%10 AND M1%0.5 AND CR:neutron%1.2|XX",
					"M2|XX|M2",
					"M1|M1|M1",
				],
				tick: function(pixel) {
					nsTick(pixel,0.7,stellarPlasmaSpreadWhitelist);
				},
				temp:1e6,
				isGas: true,
				tempLow:2300,
				stateLow: elements.liquid_neutronium ? "liquid_neutronium" : "neutron",
				category: "liquids",
				state: "liquid",
				density: 100000, //i'm not doing any more research on these neutron stars because google is useless
				conduct: 1,
			};

			elements.gaseous_degenerate_neutronium = {
				color: "#e9eaf7",
				behavior: [
					"M2|M1 AND CR:neutron%0.6|M2",
					"M1 AND CR:neutron%0.6|XX|M1 AND CR:neutron%0.6",
					"M2|M1 AND CR:neutron%0.6|M2",
				],
				behaviorOn: [
					"M2|M1 AND CR:neutron%1|M2",
					"M1 AND CR:neutron%1|XX|M1 AND CR:neutron%1",
					"M2|M1 AND CR:neutron%1|M2",
				],
				tick: function(pixel) {
					nsTick(pixel,0.6,stellarPlasmaSpreadWhitelist);
				},
				temp:1e6,
				isGas: true,
				tempLow:2300,
				stateLow: "neutron",
				category: "gases",
				state: "gas",
				density: 10000, //i'm not doing any more research on these neutron stars because google is useless
				conduct: 1,
			};
			
			if(enabledMods.includes("mods/chem.js")) {
				elements.supernova.behavior = [
					"XX|XX|XX",
					"XX|EX:80>plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,plasma,molten_iron,molten_uranium,molten_lead AND CH:neutron_star,neutron_star,neutron_star,neutronium,quark_matter,void|XX",
					"XX|XX|XX",
				]
			};
			
			elements.plasma.noConduct = ["stellar_plasma","liquid_stellar_plasma","liquid_degenerate_neutronium","gaseous_degenerate_neutronium","neutron_star"]; //I can't suppress the charge overlay and keep the tick color, only effective with noConduct.js but not strictly required
			
		//Main preset

			worldgentypes.star = {
				layers: [
					[0.9, "stellar_plasma"],
					[0.65, "liquid_stellar_plasma"],
					[0.4, "liquid_stellar_plasma", 1/2],
					[0, "sun"],
				],
				complexity: 100,
				baseHeight: 0.3,
				temperature: 6500,
			};

	//Radioactive Desert

		//Main preset

			worldgentypes.nuclear_wasteland_desert = {
				layers: [
					[0.97, "fallout", 0.4],
					[0.95, "radioactive_gravel", 0.6],
					[0.65, "liquid_irradium", 0.01],
					[0.65, "cancer", 0.02],
					[0.65, "bone", 0.02],
					[0.65, "radioactive_sand"],
					[0.55, "cancer", 0.01],
					[0.55, "bone", 0.01],
					[0.3, "radioactive_sandstone"],
					[0.05, "radioactive_rock"],
					[-0.78, "radioactive_basalt"]
				],
				temperature: -13
			};
			

























































































//------------------------------------------------------------------------------------------------------------------------------------------------------------------








































































/* Flowers And Forests
Created by Pixelegend4 and SquareScreamYT
*/

elements.nutmeg = {
	color: "#b86d42",
	behavior: behaviors.POWDER,
	category: "land",
	state: "solid",
    breakInto: "nutmeg_ground",
};

elements.nutmeg_drink = {
	color: "#b86d42",
	behavior: behaviors.LIQUID,
	category: "land",
	state: "solid",
    reactions: {
        "baked_batter": { elem1: "nutmeg_cake", elem2: "nutmeg_cake" },
    },
};
elements.nutmeg_cake = {
	color: "#b86d42",
	behavior: behaviors.SOLID,
	category: "land",
	state: "solid",
};

elements.nutmeg_ground = {
	color: "#804d2f",
	behavior: behaviors.POWDER,
	category: "land",
	state: "solid",
    reactions: {
        "water": { elem1: "nutmeg_drink", elem2: "nutmeg_drink" },
    },
};
elements.sycamore_wood = {
    color: "#632e1f",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
}
elements.sycamore_branch = {
    color: "#632e1f",
    behavior: [
        "CR:sycamore_leaves,sycamore_branch%2|CR:sycamore_leaves,sycamore_branch%2|CR:sycamore_leaves,sycamore_branch%2",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tempHigh: 100,
    stateHigh: "sycamore_wood",
    tempLow: -30,
    stateLow: "sycamore_wood",
    category: "life",
    burn: 40,
    burnTime: 50,
    burnInto: ["sap","ember","charcoal"],
    hidden: true,
    state: "solid",
    density: 1500,
    hardness: 0.15,
    breakInto: ["sap","sawdust"],
};
elements.sycamore_leaves = {
    color: ["#00d404","#0ec911","#109e12"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
}

elements.sycamore_seed = {
    color: "#854610",
    tick: function(pixel) {
        if (isEmpty(pixel.x,pixel.y+1)) {
            movePixel(pixel,pixel.x,pixel.y+1);
        }
        else {
            if (Math.random() < 0.02 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel(Math.random() > 0.5 ? "sycamore_wood" : "sycamore_branch",pixel.x,pixel.y+1);
                }
            }
            else if (pixel.age > 1000) {
                changePixel(pixel,"sycamore_wood");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age":0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|FX%10|XX",
        "XX|M1|XX",
    ],
};

worldgentypes.fields = {
    layers: [
        [0.75, "dirt"],
        [0.05, "rock"],
        [0, "basalt"],
    ],
    decor: [
        ["sapling", 0.04, 20],
        ["grass", 0.25, 30],
	    ["grass", 0.25, 30],
        ["bee", 0.02, 25],
        ["cloud", 1, 2],
    ],
    baseHeight: 0.25
}

worldgentypes.sycamore_forest = {
    layers: [
        [0.75, "dirt"],
        [0.05, "dirt"],
    ],
    decor: [
        ["sycamore_seed", 0.04, 20],
        ["sycamore_seed", 0.10, 20],
        ["sycamore_seed", 0.13, 20],
	    ["grass", 0.25, 30],
        ["cloud", 1, 2],
    ],
    baseHeight: 0.25
};



elements.palm_tree_seed = {
    color: "#7a603d",
    tick: function(pixel) {
            if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1) && pixel.height < 7) {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel("palm_tree_stem",pixel.x,pixel.y+1);
                    
                    pixel.height++
                }
            }
            else if (pixel.age > 150 && pixel.height > 6 && Math.random() < 0.1) {
                changePixel(pixel,"palm_tree_top");
            }
            pixel.age++;
        doDefaults(pixel);
    },
    properties: {
        "age":0,
        "height": 0
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};

elements.palm_tree_stem = {
    color: "#8f6c3f",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    hidden: true
}
elements.palm_tree_top = {
    color: "#8f6c3f",
    behavior: behaviors.WALL,
    tempHigh: 400,
    stateHigh: ["ember","charcoal","fire","fire","fire"],
    category: "solids",
    burn: 5,
    burnTime: 300,
    burnInto: ["ember","charcoal","fire"],
    state: "solid",
    hardness: 0.15,
    breakInto: "sawdust",
    breakIntoColor: ["#dba66e","#cc8a64"],
    properties:{
        "leftleaves": 0,
        "rightleaves": 0,
    },
    hidden: true,
    tick: function(pixel) {
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rightleaves == 0) {
            if (isEmpty(pixel.x+1,pixel.y)) {
                createPixel(Math.random() > 0.5 ? "palm_leaves" : "palm_leaves",pixel.x+1,pixel.y);

                pixel.rightleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rightleaves == 1) {
            if (isEmpty(pixel.x+2,pixel.y)) {
                createPixel(Math.random() > 0.5 ? "palm_leaves" : "palm_leaves",pixel.x+2,pixel.y);

                pixel.rightleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rightleaves == 2) {
            if (isEmpty(pixel.x+3,pixel.y)) {
                createPixel(Math.random() > 0.5 ? "palm_leaves" : "palm_leaves",pixel.x+3,pixel.y);

                pixel.rightleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.rightleaves == 3) {
            if (isEmpty(pixel.x+4,pixel.y+1)) {
                createPixel(Math.random() > 0.5 ? "palm_leaves" : "palm_leaves",pixel.x+4,pixel.y+1);

                pixel.rightleaves++
            }
        }


        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.leftleaves == 0) {
            if (isEmpty(pixel.x-1,pixel.y)) {
                createPixel(Math.random() > 0.5 ? "palm_leaves" : "palm_leaves",pixel.x-1,pixel.y);

                pixel.leftleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.leftleaves == 1) {
            if (isEmpty(pixel.x-2,pixel.y)) {
                createPixel(Math.random() > 0.5 ? "palm_leaves" : "palm_leaves",pixel.x-2,pixel.y);

                pixel.leftleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.leftleaves == 2) {
            if (isEmpty(pixel.x-3,pixel.y)) {
                createPixel(Math.random() > 0.5 ? "palm_leaves" : "palm_leaves",pixel.x-3,pixel.y);

                pixel.leftleaves++
            }
        }
        if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100 && pixel.leftleaves == 3) {
            if (isEmpty(pixel.x-4,pixel.y+1)) {
                createPixel(Math.random() > 0.5 ? "palm_leaves" : "palm_leaves",pixel.x-4,pixel.y+1);

                pixel.leftleaves++
            }
        }
        pixel.age++;
    doDefaults(pixel);
},
}
elements.palm_leaves = {
    color: ["#569923","#5ea12b"],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 }
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    hidden: true
}
elements.fruit_vine = {
    color: "#00df00",
    behavior: [
        "ST:wood|ST:wood|ST:wood",
        "ST:wood AND CR:grape%0.01|XX|ST:wood AND CR:grape%0.01",
        "ST:wood|ST:wood AND M1|ST:wood",
    ],
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "mercury": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "stench": { elem2:null, chance:0.25 },
        "carbon_dioxide": { elem2:"oxygen", chance:0.25 },
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:15,
    burnTime:60,
    burnInto: "dead_plant",
    state: "solid",
    density: 1050,
    breakInto: "dead_plant"
}
elements.fruit_vine_seed = {
    color: "#6b4f36",
    tick: function(pixel) {
            if (Math.random() < 0.1 && pixel.age > 50 && pixel.temp < 100) {
                if (!outOfBounds(pixel.x,pixel.y+1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y+1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        changePixel(dirtPixel,"root");
                    }
                }
                if (isEmpty(pixel.x,pixel.y-1)) {
                    if (!isEmpty(pixel.x+1,pixel.y-1) || !isEmpty(pixel.x-1,pixel.y-1)) {
                        movePixel(pixel,pixel.x,pixel.y-1);
                        createPixel("fruit_vine",pixel.x,pixel.y+1);
                    }
                }
                if (!isEmpty(pixel.x+2,pixel.y-1) && isEmpty(pixel.x+1,pixel.y-1)) {
                    movePixel(pixel,pixel.x+1,pixel.y-1);
                    createPixel("fruit_vine",pixel.x-1,pixel.y+1);
                }
                if (!isEmpty(pixel.x-2,pixel.y-1) && isEmpty(pixel.x-1,pixel.y-1)) {
                    movePixel(pixel,pixel.x-1,pixel.y-1);
                    createPixel("fruit_vine",pixel.x+1,pixel.y+1);
                }
                if (!isEmpty(pixel.x,pixel.y-1) && !isEmpty(pixel.x+1,pixel.y) && isEmpty(pixel.x+1,pixel.y-1)) {
                    movePixel(pixel,pixel.x+1,pixel.y-1);
                    createPixel("fruit_vine",pixel.x-1,pixel.y+1);
                }
                if (!isEmpty(pixel.x,pixel.y-1) && !isEmpty(pixel.x-1,pixel.y) && isEmpty(pixel.x-1,pixel.y-1)) {
                    movePixel(pixel,pixel.x-1,pixel.y-1);
                    createPixel("fruit_vine",pixel.x+1,pixel.y+1);
                }
                /*if (pixelMap[pixel.x+1][pixel.y-1].element !== "wood" && pixelMap[pixel.x-1][pixel.y-1].element !== "wood") {
                    movePixel(pixel,pixel.x,pixel.y-1);
                    createPixel("fruit_vine",pixel.x,pixel.y+1);
                    if (isEmpty(pixel.x+1,pixel.y-1) && pixelMap[pixel.x+2][pixel.y-1].element === "wood") {
                        movePixel(pixel,pixel.x+1,pixel.y-1);
                        createPixel("fruit_vine",pixel.x-1,pixel.y+1);
                    }
                    if (isEmpty(pixel.x-1,pixel.y-1) && pixelMap[pixel.x-2][pixel.y-1].element === "wood") {
                        movePixel(pixel,pixel.x-1,pixel.y-1);
                        createPixel("fruit_vine",pixel.x+1,pixel.y+1);
                    }
                }*/
            }
            else if (pixel.age > 400 && Math.random() < 0.1) {
                changePixel(pixel,"fruit_vine");
            }
            pixel.age++;
        doDefaults(pixel);
    },
    properties: {
        "age":0,
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "ST:wood,fruit_vine|ST:wood,fruit_vine|ST:wood,fruit_vine",
        "ST:wood,fruit_vine|XX|ST:wood,fruit_vine",
        "ST:wood,fruit_vine|M1|ST:wood,fruit_vine",
    ],
};













































































//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------






































































/*
TODO:
	Blood Crawler?
	Tweak Vicious Goldfish heavily
	Face Monster
	Crimera
	Herpling
	Crimslime
	Blood Jelly
	Blood Feeder
	Blood Mummy
	Deathweed
	Some drops
		Loot items could be implemented as useless powders.
	Crimsandstone
	Fishing loot fish (as Fish copies)
Not doing:
	Mob spawning
	Game-like world generation
	Crafting stations
	Hardmode-exclusive behavior (WoF would be a nightmare to add)
	Biome keys
Might not be possible:
	Thorny bushes (their breaking behavior would require a way for a pixel to detect when another pixel tryMove'd into its position)
	Powders and clentamination (those would require a means of moving through pixels without falsely occupied pixels or other glitches)
	Blood crawlers crawling on background walls
	Brain of Cthulhu (without the rest of the progression)
		*(would be pretty pointless)
		Crimson Hearts are probably possible but would be useless without this
	Actually usable weapons
	Game-like fishing system
	Crates breaking into multiple items
	Tree shaking behavior
	Deadland Comes Alive painting
	Floaty Gross, Crimson Axe, Crimson Pigron (same issue as powders)
Probably possible but far beyond my skill level:
	Enemy pathfinding
	Music boxes
	Crimera variants
	Multi-pixel enemies other than Face Monsters (which would copy human code)
*/

function includesArray(parentArray, testArray) {
    for (let i = 0; i < parentArray.length; i++) {
        if (parentArray[i].every(function(value, index) { return value === testArray[index]})) {
            return true;
        }
    }
    return false;
}

crimRate = 0.002

function grassSpread(pixel,dirt,grass,chance) {
	pixel.dirtArray = [] //initialize dirt neighbor list
	for (i = -2; i < 3; i++) { //iterate around
		for (j = -2; j < 3; j++) {
			if (!isEmpty(pixel.x+i,pixel.y+j,true)) { //check for a pixel to see if it's dirt
				if(Array.isArray(dirt)) {
					if(dirt.includes(pixelMap[pixel.x+i][pixel.y+j].element)) { //see if it's dirt
						if(!includesArray(pixel.dirtArray,[i,j])) { //avoid duplicate dirt entry
							pixel.dirtArray.push([i,j]) //store dirt
						}
					}
				} else {
					if(pixelMap[pixel.x+i][pixel.y+j].element == dirt) { //see if it's dirt
						if(!includesArray(pixel.dirtArray,[i,j])) { //avoid duplicate dirt entry
							pixel.dirtArray.push([i,j]) //store dirt
						}
					}
				}
			}
		}
	}
	for (k = 0; k < pixel.dirtArray.length; k++) { //iterate through dirt list
		if(Math.random() < chance) { //random chance
			if(isEmpty(pixel.x+pixel.dirtArray[k][0],pixel.y+pixel.dirtArray[k][1]-1)) { //check for empty space to grow grass
				createPixel(grass,pixel.x+pixel.dirtArray[k][0],pixel.y+pixel.dirtArray[k][1]-1) //place grass above dirt
			}
		}
	}
}



crimsonObject = {
	grass: "crimson_grass",
	rock: "crimstone",
	sand: "crimsand",
	ice: "red_ice",
	gravel: "crimgravel",
	water: "crimwater",
	snow: "crimsnow",
	packed_snow: "crimsnow",
	wet_sand: "crimsand",
	mud: "dirt",
	permafrost: "dirt",
	vine: "crimson_vine",
	fish: "vicious_goldfish",
	sapling: "shadewood_sapling"
};

function crimSpread(pixel) {
	for (let i = -2; i < 3; i++) {
		for (let j = -2; j < 3; j++) {
			if (!isEmpty(pixel.x+j,pixel.y+i,true)) {
				var destPixel = pixelMap[pixel.x+j][pixel.y+i];
				var elementToCheck = destPixel.element;
				if(Math.random() < crimRate) {
					if(crimsonObject[elementToCheck]) {
						changePixel(destPixel,crimsonObject[elementToCheck]);
					};
					grassSpread(pixel,"dirt","crimson_grass",0.5);
				};
			};
		};
	};
};

eLists.WHL = "water,salt_water,sugar_water,dirty_water,swamp_water,heavy_water,radioactive_water,crimwater,pure_water,chilly_water,honey,magma"

elements.crimson_grass = {
    color: ["#e82535","#cc471f","#d6153c","#c20e29","#b81a2c"],
    behavior: [
        "XX|CR:vicious_mushroom%0.01|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
    tick: function(pixel) {
        crimSpread(pixel)
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn:50,
    burnTime:20,
    category:"life",
    state: "solid",
    density: 1400,
}

elements.crimstone = {
	color: ["#cb4444", "#953333", "#611c1c", "#b43434", "#752424"],
	behavior: behaviors.POWDER,
    tick: function(pixel) {
        crimSpread(pixel)
    },
	tempHigh: 950,
	stateHigh: "magma",
	category: "land",
	state: "solid",
	density: 2550,
	hardness: 0.5,
	breakInto: ["crimsand","crimgravel"],
}

elements.crimsand = {
	color: ["#4c4c44", "#6c645c", "#5c544c", "#847c6c", "#24241c", "#4c4c44", "#6c645c", "#5c544c", "#847c6c", "#24241c", "#3c140c", "#842c24"],
	behavior: behaviors.POWDER,
    tick: function(pixel) {
        crimSpread(pixel)
    },
	tempHigh: 1700,
	stateHigh: "molten_glass",
	category: "land",
	state: "solid",
	density: 1602,
}

elements.red_ice = {
	color: ["#f0ccc5", "#f7d8d2", "#eba39b"],
	behavior: behaviors.WALL,
    tick: function(pixel) {
        crimSpread(pixel)
    },
	temp: 0,
	tempHigh: 5,
	stateHigh: "crimwater",
	category: "solids",
	state: "solid",
	density: 917,
	breakInto: "crimsnow",
}

elements.crimgravel = { //break from canon for crimstone breakInto
	color: ["#c4533f", "#de6957", "#b84639", "#cf4634", "#db6758", "#d17366", "#ab2b2b"],
	behavior: behaviors.POWDER,
    tick: function(pixel) {
        crimSpread(pixel)
    },
	category:"land",
	tempHigh: 950,
	stateHigh: "magma",
	state: "solid",
	density: 1680,
	hardness: 0.2,
},

elements.crimwater = { //you shouldn't be able to purify ice by melting it
	color: "#e45c7c",
	behavior: behaviors.LIQUID,
    tick: function(pixel) {
        crimSpread(pixel)
    },
	tempLow: 0,
	stateLow: "red_ice",
	tempHigh: 100,
	stateHigh: "steam",
	viscosity: 1,
	category: "liquids",
	reactions: {
		"quicklime": { "elem1": null, "elem2": "slaked_lime", },
		"ruins": { "elem2": "rock", "chance": 0.00035 },
	},
	state: "liquid",
	density: 997,
	conduct: 0.02,
	stain: 0.02,
}

elements.crimsnow = { //BIG break from canon but you shouldn't be able to purify ice by grinding it either
	color: "#fce1e4",
	behavior: behaviors.POWDER,
    tick: function(pixel) {
        crimSpread(pixel)
    },
	temp: 0,
	tempHigh: 5,
	stateHigh: "crimwater",
	category: "land",
	state: "solid",
	density: 100,
}

elements.vicious_mushroom = {
	color: "#e36554",
	behavior: behaviors.POWDER,
    tick: function(pixel) {
        crimSpread(pixel)
    },
	category: "life",
	hidden: true,
	tempHigh: 225,
	stateHigh: "fire",
	burn: 10,
	burnTime: 65,
	state: "solid",
	density: 90.445,
}

elements.crimtane_ore = {
	color: ["#d83a3b", "#85242c", "#5d5d5d", "#540c14"],
	behavior: behaviors.POWDER,
	category: "land",
	tempHigh: 1552, //using palladium's melting point as an upper bound
	stateHigh: ["molten_slag","molten_slag","molten_crimtane"], //:sunglasses: can't turn things into slag if you're already slag
	state: "solid",
	density: 5854, //arbitrarily chosen, average of ((average of gold and palladium densities) + (crimstone density) + (crimstone density))
}

elements.crimtane = {
	color: ["#fc141e", "#C62A2F", "#903f3f", "#752E2E", "#5a1c1c", "#5B3C3C", "#5c5c5c"],
	behavior: behaviors.SOLID,
	category: "solids",
	tempHigh: 1200, //i want a behaviors.WALL form of crimtane... and I'm letting the game autogenerate molten_crimtane because I'm going to use it.
	//just pretend it got sintered somehow
	state: "solid",
	hidden: true,
	density: 15661,
}

elements.shadewood_tree_branch = {
	color: "#677a8f",
	behavior: [
		"CR:crimson_leaf,shadewood_tree_branch%2|CR:crimson_leaf,crimson_leaf,crimson_leaf,shadewood_tree_branch%2|CR:crimson_leaf,shadewood_tree_branch%2",
		"XX|XX|XX",
		"XX|XX|XX",
	],
	tempHigh: 400,
	stateHigh: ["fire","sap"],
	tempLow: -30,
	stateLow: "wood",
	category: "solids",
	burn: 40,
	burnTime: 50,
	burnInto: ["sap","ember","charcoal"],
	hidden: true,
	state: "solid",
	density: 1500,
	hardness: 0.15,
	breakInto: ["sap","sawdust"],
	hidden: true,
}
elements.crimson_vine = {
	color: "#de3323",
	behavior: [
		"XX|SP|XX",
		"XX|XX|XX",
		"XX|CL%1 AND M1|XX",
	],
    tick: function(pixel) {
        crimSpread(pixel)
    },
	tempHigh: 100,
	stateHigh: "dead_plant",
	tempLow: -2,
	stateLow: "frozen_plant",
	burn: 35,
	burnTime: 100,
	category: "life",
	state: "solid",
	density: 1050,
}

elements.shadewood = {
	color: "#677a8f",
	behavior: behaviors.WALL,
	tempHigh: 400,
	stateHigh: ["ember","charcoal","fire","fire","fire"],
	category: "solids",
	burn: 5,
	burnTime: 300,
	burnInto: ["ember","charcoal","fire"],
	state: "solid",
	hardness: 0.15,
	breakInto: "shadewood_sawdust",
	density: 930, //used tigerwood
}

elements.shadewood_sapling = {
	color: ["#e64029", "#d43b26"],
	behavior: [
		"XX|M2%2|XX",
		"XX|L2:shadewood,shadewood_tree_branch%80|XX",
		"XX|M1|XX",
	],
	tempHigh: 100,
	stateHigh: "dead_plant",
	tempLow: -2,
	stateLow: "frozen_plant",
	burn: 65,
	burnTime: 15,
	category: "life",
	state: "solid",
	density: 1500,
}

elements.shadewood_sawdust = {
	color: ["#95abcf","#8190a3"],
	behavior: behaviors.POWDER,
	tempHigh: 400,
	stateHigh: "fire",
	category: "powders",
	burn: 25,
	burnTime: 150,
	burnInto: ["ash","fire","fire","fire"],
	state: "solid",
	density: 493,
	hidden: true,
}

elements.crimson_leaf = {
	color: "#de3323",
	behavior: behaviors.WALL,
	category:"life",
	tempHigh: 100,
	stateHigh: "dead_plant",
	tempLow: -1.66,
	stateLow: "frozen_plant",
	burn:65,
	burnTime:60,
	burnInto: "dead_plant",
	state: "solid",
	density: 500,
	hidden: true,
}

elements.ichor = {
	color: ["#ffec70", "#ffcb52"],
	behavior: behaviors.LIQUID,
	reactions: {
		"head": { "elem2":"meat" }, //sb has no defense to reduce so i just made it deadly
		"body": { "elem2":"meat" },
	},
	category: "liquids",
	viscosity: 1,
	state: "liquid",
	density: 1010,
	stain: 0.02,
}

elements.vicious_goldfish = {
	color: "#e64230",
	behavior: [
		"SW:"+eLists.WHL+",blood%2|M2%5 AND SW:"+eLists.WHL+",blood%1|XX", //this is where M3 would have been useful
		"SW:"+eLists.WHL+",blood%40|FX%0.01|BO%1", //i have no idea what i'm doing
		"SW:"+eLists.WHL+",blood%2 AND M2|M1|XX",
	],
	reactions: {
		"algae": { "elem2":null, chance:0.5 },
		"plant": { "elem2":null, chance:0.125 },
		"fly": { "elem2":null, chance:0.5 },
		"firefly": { "elem2":null, chance:0.5 },
		"worm": { "elem2":null, chance:0.25 },
		"head": { "elem2":[null,"blood"], chance:0.25 },
		"body": { "elem2":[null,"blood"], chance:0.25 },
		"oxygen": { "elem2":"carbon_dioxide", chance:0.5 },
	},
	tick: function(pixel) {
		pixel.color = pixelColorPick(pixel)
	},
	temp: 20,
	tempHigh: 42,
	stateHigh: "meat",
	tempLow: -20,
	stateLow: "frozen_meat",
	category:"life",
	burn:40,
	burnTime:100,
	state: "solid",
	density: 1080,
	conduct: 0.2,
}






















































































//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




























































































// by Nekonico

viewInfo[4] = { // Nutrition View
    name: "nutr",
    pixel: function(pixel,ctx) {
        if (elements[pixel.element].isBio === true) {
        var nutrition = pixel.nutrition;
        if (nutrition < 0) {nutrition = 0}
        if (nutrition > 6000) {nutrition = 6000}
        var hue = Math.round(225 - (Math.log(nutrition)/Math.log(6000))*225);
        if (hue < 0) {hue = 0}
        if (hue > 225) {hue = 225}
        drawSquare(ctx,"hsl("+hue+",100%,50%)",pixel.x,pixel.y)
        }
    }
}

viewInfo[5] = { // Oxygen View
    name: "oxy",
    pixel: function(pixel,ctx) {
        if (elements[pixel.element].isBio === true) {
            var oxygen = pixel.oxygen;
            if (oxygen < 0) {oxygen = 0}
            if (oxygen > 6000) {oxygen = 6000}
            var hue = Math.round(225 - (Math.log(oxygen)/Math.log(6000))*225);
            if (hue < 0) {hue = 0}
            if (hue > 225) {hue = 225}
            drawSquare(ctx,"hsl("+hue+",100%,50%)",pixel.x,pixel.y)
        }
    }
}

viewInfo[6] = { // Speed View
    name: "spd",
    pixel: function(pixel,ctx) {
        if (elements[pixel.element].isBio === true) {
            var speed = pixel.speed;
            if (speed < -50) {speed = -50}
            if (speed > 150) {speed = 150}
            var hue = Math.round(225 - (Math.log(speed+50)/Math.log(100+50))*225);
            if (hue < 0) {hue = 0}
            if (hue > 225) {hue = 225}
            drawSquare(ctx,"hsl("+hue+",100%,50%)",pixel.x,pixel.y)
        }
    }
}

viewInfo[7] = { // Illness View
    name: "ill",
    pixel: function(pixel,ctx) {
        if ((elements[pixel.element].id === elements.cyanide_gas.id || elements[pixel.element].id === elements.poison_gas.id || elements[pixel.element].id === elements.poison.id || elements[pixel.element].id === elements.cyanide.id || elements[pixel.element].id === elements.infected_vessel.id || elements[pixel.element].id === elements.infection.id || elements[pixel.element].id === elements.cancer.id || elements[pixel.element].id === elements.plague.id || elements[pixel.element].id === elements.rotten_meat.id) || (elements[pixel.element].isBio === true && ((pixel.speed < -5 || pixel.oxygen < 250 || pixel.nutrition < 250) || pixel.ibupCount > 0 || pixel.poisoned === true || pixel.sick === true || pixel.alcoholic === true)) || ((elements[pixel.element].id === elements.digested_material.id || elements[pixel.element].id === elements.gaseous_material.id) && ((pixel.speed < 0 || pixel.nutrition < 5) || pixel.poisoned === true) && (pixel.immune !== true || !pixel.immune))) {
            var a = (settings.textures !== 0) ? pixel.alpha : undefined;
                    if (((elements[pixel.element].isGas && elements[pixel.element].glow !== false) || elements[pixel.element].glow || pixel.glow) && pixel.glow !== false) {
                        drawPlus(ctx,pixel.color,pixel.x,pixel.y,undefined,a)
                        // if (isEmpty(pixel.x+1,pixel.y) || isEmpty(pixel.x-1,pixel.y) || isEmpty(pixel.x,pixel.y+1) || isEmpty(pixel.x,pixel.y-1)) {}
                    }
                    else {
                        drawSquare(ctx,pixel.color,pixel.x,pixel.y,undefined,a)
                    }
                    if (pixel.charge && view !== 2) { // Yellow glow on charge
                        if (!elements[pixel.element].colorOn) {
                            drawSquare(ctx,"rgba(255,255,0,0.5)",pixel.x,pixel.y);
                        }
                    }
        }
    }
}

var ibuprofenTime = pixelTicks

renderPresets.FLESHBURN = function(pixel,ctx) {
    drawDefault(ctx,pixel);
    if (!viewInfo[view].colorEffects || !pixel.char) { return }
    var max = 20;
    var ratio = ((pixel.char/max*100)|0)/100;
    if (ratio < 0.5) { return }
    if (ratio > 1) { ratio = 1 }
    drawSquare(ctx,"#000000",pixel.x,pixel.y,undefined,Math.min(0.8,(ratio-0.5)*0.8));
},

renderPresets.NERVE = function(pixel,ctx) {
    drawDefault(ctx,pixel)
        if (pixel.darkcharge === true) {
            drawSquare(ctx,"#000000",pixel.x,pixel.y,undefined,Math.min(0.8,0.55));
        }
        if (pixel.darkchargeCD === true) {
            drawSquare(ctx,"#000000",pixel.x,pixel.y,undefined,Math.min(0.8,0.5));
        }
        if (pixel.lightcharge === true) {
            drawSquare(ctx,"#ffffff",pixel.x,pixel.y,undefined,Math.min(0.8,0.55));
        }
        if (pixel.lightchargeCD === true) {
            drawSquare(ctx,"#ffffff",pixel.x,pixel.y,undefined,Math.min(0.8,0.5));
        }
},

behaviorRules.BCF = function() {
    if (btemp.pixel.clone) {
        if (isEmpty(btemp.newCoords.x, btemp.newCoords.y)) {
            createPixel(btemp.pixel.clone, btemp.newCoords.x, btemp.newCoords.y)
            btemp.pixel.nutrition = (btemp.pixel.nutrition - 10)
            btemp.pixel.oxygen = (btemp.pixel.oxygen - 1)
            if (pixelMap[btemp.newCoords.x][btemp.newCoords.y]) {
                pixelMap[btemp.newCoords.x][btemp.newCoords.y].temp = btemp.pixel.temp;
                pixelTempCheck(pixelMap[btemp.newCoords.x][btemp.newCoords.y]);
            }
        }
    }
    else {
        if (!isEmpty(btemp.newCoords.x, btemp.newCoords.y,true)) {
            var newPixel = pixelMap[btemp.newCoords.x][btemp.newCoords.y];
            if (!btemp.pixel.clone && btemp.info.ignore && btemp.info.ignore.indexOf(newPixel.element) !== -1) {
                return;
            }
            if (newPixel.element !== btemp.pixel.element) {
                btemp.pixel.clone = newPixel.element;
                btemp.pixel.temp = newPixel.temp;
            }
            else if (newPixel.clone) {
                btemp.pixel.clone = newPixel.clone;
                btemp.pixel.temp = newPixel.temp;
            }
        }
    }
}

behaviorRules.BCR = function() {
    if (isEmpty(btemp.newCoords.x,btemp.newCoords.y)) {
        if (btemp.arg == null) {
            btemp.arg = btemp.pixel.element;
        }
        else if (btemp.arg.indexOf(",") !== -1) {
            btemp.arg = choose(btemp.arg.split(","));
        }
        if (elements[btemp.arg]) {
            createPixel(btemp.arg,btemp.newCoords.x,btemp.newCoords.y);
            btemp.pixel.nutrition = (btemp.pixel.nutrition - 1)
            if (btemp.info.fireColor && btemp.arg==="fire") {
                pixelMap[btemp.newCoords.x][btemp.newCoords.y].color = pixelColorPick(pixelMap[btemp.newCoords.x][btemp.newCoords.y],btemp.info.fireColor);
            }
            pixelMap[btemp.newCoords.x][btemp.newCoords.y].temp = btemp.pixel.temp
            pixelTempCheck(pixelMap[btemp.newCoords.x][btemp.newCoords.y]);
        }
    }
}

behaviorRules.ADB = function() {
        if (!isEmpty(btemp.newCoords.x,btemp.newCoords.y,true)) {
            // if the pixel at newCoords is the same element as the pixel, ignore
            var newPixel = pixelMap[btemp.newCoords.x][btemp.newCoords.y];
            // if info.ignore exists and newPixel.element is in it
            if (btemp.info.ignore && btemp.info.ignore.indexOf(newPixel.element) !== -1) {
                return;
            }
            if (!(newPixel.element == btemp.pixel.element)) {
                if (btemp.arg != null) { var args = btemp.arg.split(","); }
                if (btemp.arg == null || args.indexOf(newPixel.element) !== -1) {
                    if (!elements[newPixel.element].hardness || Math.random() > elements[newPixel.element].hardness) {
                        if (elements[newPixel.element].isFood === true && !elements[btemp.pixel.element].reactions[newPixel.element]) {
                            changePixel(newPixel,"digested_material");
                            newPixel.nutrition = 10;
                            if (pixelMap[btemp.pixel.x][btemp.pixel.y] != undefined) {
                                deletePixel(btemp.pixel.x,btemp.pixel.y);
                            }
                            btemp.deleted = true;
                            btemp.swapSpots = [];
                        }
                        else if (elements[newPixel.element].isFood != true && !elements[btemp.pixel.element].reactions[newPixel.element]) {
                                if (elements[newPixel.element].hardness < 0.9 || !elements[newPixel.element].hardness) {
                                deletePixel(btemp.newCoords.x,btemp.newCoords.y);
                                if (pixelMap[btemp.pixel.x][btemp.pixel.y] != undefined) {
                                    deletePixel(btemp.pixel.x,btemp.pixel.y);
                                }
                                btemp.deleted = true;
                                btemp.swapSpots = [];
                            }
                        }
                    }
                }
            }
        }
    },

doBioNorm = function(pixel) {
if ((Math.random() > 0.92 && pixel.nutrition > 0 && pixel.oxygen > 0) || (Math.random() < (pixel.ibupCount / 20) && pixel.ibupCount > 3 && pixel.nutrition > 0 && pixel.oxygen > 0) || (Math.random() < (pixel.fentDepri / 100) && pixel.fenAddict === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (Math.random() < (pixel.alcoDepri / 100) && pixel.alcoholic === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (Math.random() > 0.60 && pixel.sick === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (Math.random() > 0.5 && pixel.poisoned === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (pixel.burning === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (pixel.temp > 53 && pixel.nutrition > 0 && pixel.oxygen > 0) || (pixel.temp < -10 && pixel.nutrition > 0 && pixel.oxygen > 0) || Math.random() > 0.85 && Math.random() < (pixel.burnt / 100)) {
    pixel.nutrition -= 0.5
    pixel.oxygen--
}
if (pixel.temp > 42 && pixel.ibupCount > 1) { 
    pixel.temp -= 5 
}
else if (pixel.temp > 37 && pixel.ibupCount > 0) { 
    pixel.temp-- 
}
if (Math.random() > 0.5 && (pixel.nutrition < 1 || pixel.oxygen < 1 || pixel.speed < -100)) {
    if (elements[pixel.element].isMultiDie === true) {
        if (pixel.temp > 95) {
            if (Math.random() < 0.75) {
                changePixel(pixel,elements[pixel.element].normDie); 
            }
            else {
                changePixel(pixel,elements[pixel.element].heatDie); 
            }
        }
        else if (pixel.temp < -15) {
            if (Math.random() < 0.75) {
                changePixel(pixel,elements[pixel.element].normDie); 
            }
            else {
                changePixel(pixel,elements[pixel.element].coldDie); 
            }
        }
        else {
            if (Math.random() < 0.999) {
                changePixel(pixel,elements[pixel.element].normDie); 
            }
            else {
                changePixel(pixel,elements[pixel.element].roomDie); 
            }
        }
        }
        else if (elements[pixel.element].isMultiDie === false) {
            if (Math.random() < 0.75) {
                changePixel(pixel,elements[pixel.element].normDie); 
            }
            else {
                changePixel(pixel,elements[pixel.element].otherDie); 
            }
        }
}
if (pixel.nutrition === null || isNaN(pixel.nutrition)) {
    pixel.nutrition = 500
}
if (pixel.oxygen === null || isNaN(pixel.oxygen)) {
    pixel.oxygen = 500
}
if (pixel.speed === null || isNaN(pixel.speed)) {
    pixel.speed = 0
}
if ((pixel.alcoDepri || pixel.alcoDepri === 0) && pixel.alcoholic === true) {
    pixel.alcoDepri += 1
}
if (pixel.alcoTime < (pixelTicks - 10000) && pixel.alcoholic === true && Math.random() > 0.999 || pixel.alcoRecover === true) {
    pixel.alcoDepri = undefined
    pixel.alcoTime = undefined
    pixel.alcoholic = false
    pixel.alcoRecover = true
}
if ((pixel.fentDepri || pixel.fentDepri === 0) && pixel.fenAddict === true) {
    pixel.fentDepri += 1
}
if (pixel.poisonImmune === true) {
    pixel.fentDepri = undefined
    pixel.fenAddict = false
}
if (pixel.poisonImmune === true && pixel.poisoned != false) {
    pixel.poisoned = false
}
if ((pixel.poisonImmune === true || pixel.immune === true) && pixel.sick != false) {
    pixel.sick = false
}
if (ibuprofenTime < pixelTicks - 1000 && (pixel.ibup || pixel.ibupCount > 0)) {
    pixel.ibup = false
    pixel.ibupCount = false
}
if ((pixel.temp > 124.55 || pixel.burning) && Math.random() > 0.5) {
    if (!pixel.burnt) { pixel.burnt = 1 }
    else { pixel.burnt ++ }
}
if (pixel.char != pixel.burnt && pixel.burnt > pixel.char || !pixel.char) {
    pixel.char = pixel.burnt
}
if (!isEmpty(pixel.x, pixel.y-1, true)) {
    var hitPixel = pixelMap[pixel.x][pixel.y-1]
    if (elements[hitPixel.element].isBio === true) {
        if (hitPixel.oxygen < pixel.oxygen) {
            hitPixel.oxygen += (elements[pixel.element].oxygTrans)
            pixel.oxygen -= (elements[pixel.element].oxygTrans)
        }
        if (hitPixel.nutrition < pixel.nutrition) {
            hitPixel.nutrition += (elements[pixel.element].nutrTrans)
            pixel.nutrition -= (elements[pixel.element].nutrTrans)
        }
        if (hitPixel.speed < pixel.speed) {
            hitPixel.speed += 1
            pixel.speed -= 1
        }
        if (hitPixel.oxygen > pixel.oxygen) {
            hitPixel.oxygen -= (elements[hitPixel.element].oxygTrans)
            pixel.oxygen += (elements[hitPixel.element].oxygTrans)
        }
        if (hitPixel.nutrition > pixel.nutrition) {
            hitPixel.nutrition -= (elements[hitPixel.element].nutrTrans)
            pixel.nutrition += (elements[hitPixel.element].nutrTrans)
        }
        if (hitPixel.speed > pixel.speed) {
            hitPixel.speed -= 1
            pixel.speed += 1
        }
        if (hitPixel.alcoholic !== true && pixel.alcoholic === true && Math.random() > 0.85) {
            hitPixel.alcoholic = true
            hitPixel.alcoTime = pixel.alcoTime
            hitPixel.alcoDepri = 0
        }
        if (hitPixel.alcoDepri > pixel.alcoDepri && pixel.alcoDepri) {
            hitPixel.alcoDepri = pixel.alcoDepri
        }
        if (hitPixel.alcoTime < pixel.alcoTime && pixel.alcoTime) {
            hitPixel.alcoTime = pixel.alcoTime
        }
        if (hitPixel.alcoRecover !== true && pixel.alcoRecover) {
            hitPixel.alcoRecover = true
        }
        if ((hitPixel.fentDepri < pixel.fentDepri || !hitPixel.fentDepri) && pixel.fentDepri) {
            hitPixel.fentDepri = pixel.fentDepri
            hitPixel.fenAddict = true
        }
        if (hitPixel.sick != true && pixel.sick == true && Math.random() > 0.95) {
            hitPixel.sick = true
        }
        if (hitPixel.poisonImmune != true && pixel.poisonImmune == true && Math.random() > 0.75) {
            hitPixel.poisonImmune = true
        }
        if (hitPixel.poisoned != true && pixel.poisoned == true && Math.random() > 0.95) {
            hitPixel.poisoned = true
        }
        if (hitPixel.immune != true && pixel.immune == true && Math.random() > 0.75) {
            hitPixel.immune = true
        }
        if (hitPixel.ibupCount != 0 && hitPixel.ibup != true && pixel.ibup === true && Math.random() < 0.75) {
            hitPixel.ibup = true
            if (!hitPixel.ibupCount) {
                hitPixel.ibupCount = 1
            }
            else {
                hitPixel.ibupCount += 1
            }
            ibuprofenTime = pixelTicks
        }
        if (hitPixel.ibupCount < pixel.ibupCount && Math.random() > 0.995) {
            hitPixel.ibupCount += 1
        }
        if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burnt--
        }
        if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burning = false
        }
    }
    else if (hitPixel.burning && Math.random() > 0.9) {
        if (!pixel.burnt) { pixel.burnt = 1 }
        else { pixel.burnt ++ }
    }
}
if (!isEmpty(pixel.x, pixel.y+1, true)) {
    var hitPixel = pixelMap[pixel.x][pixel.y+1]
    if (elements[hitPixel.element].isBio === true) {
        if (hitPixel.oxygen < pixel.oxygen) {
            hitPixel.oxygen += (elements[pixel.element].oxygTrans)
            pixel.oxygen -= (elements[pixel.element].oxygTrans)
        }
        if (hitPixel.nutrition < pixel.nutrition) {
            hitPixel.nutrition += (elements[pixel.element].nutrTrans)
            pixel.nutrition -= (elements[pixel.element].nutrTrans)
        }
        if (hitPixel.speed < pixel.speed) {
            hitPixel.speed += 1
            pixel.speed -= 1
        }
        if (hitPixel.oxygen > pixel.oxygen) {
            hitPixel.oxygen -= (elements[hitPixel.element].oxygTrans)
            pixel.oxygen += (elements[hitPixel.element].oxygTrans)
        }
        if (hitPixel.nutrition > pixel.nutrition) {
            hitPixel.nutrition -= (elements[hitPixel.element].nutrTrans)
            pixel.nutrition += (elements[hitPixel.element].nutrTrans)
        }
        if (hitPixel.speed > pixel.speed) {
            hitPixel.speed -= 1
            pixel.speed += 1
        }
        if (hitPixel.alcoholic !== true && pixel.alcoholic === true && Math.random() > 0.85) {
            hitPixel.alcoholic = true
            hitPixel.alcoTime = pixel.alcoTime
            hitPixel.alcoDepri = 0
        }
        if (hitPixel.alcoDepri > pixel.alcoDepri && pixel.alcoDepri) {
            hitPixel.alcoDepri = pixel.alcoDepri
        }
        if (hitPixel.alcoTime < pixel.alcoTime && pixel.alcoTime) {
            hitPixel.alcoTime = pixel.alcoTime
        }
        if (hitPixel.alcoRecover !== true && pixel.alcoRecover) {
            hitPixel.alcoRecover = true
        }
        if ((hitPixel.fentDepri < pixel.fentDepri || !hitPixel.fentDepri) && pixel.fentDepri) {
            hitPixel.fentDepri = pixel.fentDepri
            hitPixel.fenAddict = true
        }
        if (hitPixel.sick != true && pixel.sick == true && Math.random() > 0.95) {
            hitPixel.sick = true
        }
        if (hitPixel.poisonImmune != true && pixel.poisonImmune == true && Math.random() > 0.75) {
            hitPixel.poisonImmune = true
        }
        if (hitPixel.poisoned != true && pixel.poisoned == true && Math.random() > 0.95) {
            hitPixel.poisoned = true
        }
        if (hitPixel.immune != true && pixel.immune == true && Math.random() > 0.75) {
            hitPixel.immune = true
        }
        if (hitPixel.ibupCount != 0 && hitPixel.ibup != true && pixel.ibup === true && Math.random() < 0.75) {
            hitPixel.ibup = true
            if (!hitPixel.ibupCount) {
                hitPixel.ibupCount = 1
            }
            else {
                hitPixel.ibupCount += 1
            }
            ibuprofenTime = pixelTicks
        }
        if (hitPixel.ibupCount < pixel.ibupCount && Math.random() > 0.995) {
            hitPixel.ibupCount += 1
        }
        if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burnt--
        }
        if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burning = false
        }
    }
    else if (hitPixel.burning && Math.random() > 0.9) {
        if (!pixel.burnt) { pixel.burnt = 1 }
        else { pixel.burnt ++ }
    }
}
if (!isEmpty(pixel.x-1, pixel.y, true)) {
    var hitPixel = pixelMap[pixel.x-1][pixel.y]
    if (elements[hitPixel.element].isBio === true) {
        if (hitPixel.oxygen < pixel.oxygen) {
            hitPixel.oxygen += (elements[pixel.element].oxygTrans)
            pixel.oxygen -= (elements[pixel.element].oxygTrans)
        }
        if (hitPixel.nutrition < pixel.nutrition) {
            hitPixel.nutrition += (elements[pixel.element].nutrTrans)
            pixel.nutrition -= (elements[pixel.element].nutrTrans)
        }
        if (hitPixel.speed < pixel.speed) {
            hitPixel.speed += 1
            pixel.speed -= 1
        }
        if (hitPixel.oxygen > pixel.oxygen) {
            hitPixel.oxygen -= (elements[hitPixel.element].oxygTrans)
            pixel.oxygen += (elements[hitPixel.element].oxygTrans)
        }
        if (hitPixel.nutrition > pixel.nutrition) {
            hitPixel.nutrition -= (elements[hitPixel.element].nutrTrans)
            pixel.nutrition += (elements[hitPixel.element].nutrTrans)
        }
        if (hitPixel.speed > pixel.speed) {
            hitPixel.speed -= 1
            pixel.speed += 1
        }
        if (hitPixel.alcoholic !== true && pixel.alcoholic === true && Math.random() > 0.85) {
            hitPixel.alcoholic = true
            hitPixel.alcoTime = pixel.alcoTime
            hitPixel.alcoDepri = 0
        }
        if (hitPixel.alcoDepri > pixel.alcoDepri && pixel.alcoDepri) {
            hitPixel.alcoDepri = pixel.alcoDepri
        }
        if (hitPixel.alcoTime < pixel.alcoTime && pixel.alcoTime) {
            hitPixel.alcoTime = pixel.alcoTime
        }
        if (hitPixel.alcoRecover !== true && pixel.alcoRecover) {
            hitPixel.alcoRecover = true
        }
        if ((hitPixel.fentDepri < pixel.fentDepri || !hitPixel.fentDepri) && pixel.fentDepri) {
            hitPixel.fentDepri = pixel.fentDepri
            hitPixel.fenAddict = true
        }
        if (hitPixel.sick != true && pixel.sick == true && Math.random() > 0.95) {
            hitPixel.sick = true
        }
        if (hitPixel.poisonImmune != true && pixel.poisonImmune == true && Math.random() > 0.75) {
            hitPixel.poisonImmune = true
        }
        if (hitPixel.poisoned != true && pixel.poisoned == true && Math.random() > 0.95) {
            hitPixel.poisoned = true
        }
        if (hitPixel.immune != true && pixel.immune == true && Math.random() > 0.75) {
            hitPixel.immune = true
        }
        if (hitPixel.ibupCount != 0 && hitPixel.ibup != true && pixel.ibup === true && Math.random() < 0.75) {
            hitPixel.ibup = true
            if (!hitPixel.ibupCount) {
                hitPixel.ibupCount = 1
            }
            else {
                hitPixel.ibupCount += 1
            }
            ibuprofenTime = pixelTicks
        }
        if (hitPixel.ibupCount < pixel.ibupCount && Math.random() > 0.995) {
            hitPixel.ibupCount += 1
        }
        if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burnt--
        }
        if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burning = false
        }
    }
    else if (hitPixel.burning && Math.random() > 0.9) {
        if (!pixel.burnt) { pixel.burnt = 1 }
        else { pixel.burnt ++ }
    }
}
if (!isEmpty(pixel.x+1, pixel.y, true)) {
    var hitPixel = pixelMap[pixel.x+1][pixel.y]
    if (elements[hitPixel.element].isBio === true) {
        if (hitPixel.oxygen < pixel.oxygen) {
            hitPixel.oxygen += (elements[pixel.element].oxygTrans)
            pixel.oxygen -= (elements[pixel.element].oxygTrans)
        }
        if (hitPixel.nutrition < pixel.nutrition) {
            hitPixel.nutrition += (elements[pixel.element].nutrTrans)
            pixel.nutrition -= (elements[pixel.element].nutrTrans)
        }
        if (hitPixel.speed < pixel.speed) {
            hitPixel.speed += 1
            pixel.speed -= 1
        }
        if (hitPixel.oxygen > pixel.oxygen) {
            hitPixel.oxygen -= (elements[hitPixel.element].oxygTrans)
            pixel.oxygen += (elements[hitPixel.element].oxygTrans)
        }
        if (hitPixel.nutrition > pixel.nutrition) {
            hitPixel.nutrition -= (elements[hitPixel.element].nutrTrans)
            pixel.nutrition += (elements[hitPixel.element].nutrTrans)
        }
        if (hitPixel.speed > pixel.speed) {
            hitPixel.speed -= 1
            pixel.speed += 1
        }
        if (hitPixel.alcoholic !== true && pixel.alcoholic === true && Math.random() > 0.85) {
            hitPixel.alcoholic = true
            hitPixel.alcoTime = pixel.alcoTime
            hitPixel.alcoDepri = 0
        }
        if (hitPixel.alcoDepri > pixel.alcoDepri && pixel.alcoDepri) {
            hitPixel.alcoDepri = pixel.alcoDepri
        }
        if (hitPixel.alcoTime < pixel.alcoTime && pixel.alcoTime) {
            hitPixel.alcoTime = pixel.alcoTime
        }
        if (hitPixel.alcoRecover !== true && pixel.alcoRecover) {
            hitPixel.alcoRecover = true
        }
        if ((hitPixel.fentDepri < pixel.fentDepri || !hitPixel.fentDepri) && pixel.fentDepri) {
            hitPixel.fentDepri = pixel.fentDepri
            hitPixel.fenAddict = true
        }
        if (hitPixel.sick != true && pixel.sick == true && Math.random() > 0.95) {
            hitPixel.sick = true
        }
        if (hitPixel.poisonImmune != true && pixel.poisonImmune == true && Math.random() > 0.75) {
            hitPixel.poisonImmune = true
        }
        if (hitPixel.poisoned != true && pixel.poisoned == true && Math.random() > 0.95) {
            hitPixel.poisoned = true
        }
        if (hitPixel.immune != true && pixel.immune == true && Math.random() > 0.75) {
            hitPixel.immune = true
        }
        if (hitPixel.ibupCount != 0 && hitPixel.ibup != true && pixel.ibup === true && Math.random() < 0.75) {
            hitPixel.ibup = true
            if (!hitPixel.ibupCount) {
                hitPixel.ibupCount = 1
            }
            else {
                hitPixel.ibupCount += 1
            }
            ibuprofenTime = pixelTicks
        }
        if (hitPixel.ibupCount < pixel.ibupCount && Math.random() > 0.995) {
            hitPixel.ibupCount += 1
        }
        if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burnt--
        }
        if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burning = false
        }
    }
    else if (hitPixel.burning && Math.random() > 0.9) {
        if (!pixel.burnt) { pixel.burnt = 1 }
        else { pixel.burnt ++ }
    }
}
}

doBioBlood = function(pixel) {
if (Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) && Math.random() < 0.001) {
    for (var i = 0; i < squareCoords.length; i++) {
        var coords = squareCoords[i];
        var x = pixel.x + coords[0];
        var y = pixel.y + coords[1];
        if (isEmpty(x,y)) {
            createPixel("flesh",x,y);
        }
    }
}
if ((Math.random() > (elements[pixel.element].ageRate) && pixel.nutrition > 0 && pixel.oxygen > 0) || (Math.random() < (pixel.alcoDepri / 100) && pixel.alcoholic === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (Math.random() > 0.60 && pixel.sick === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (Math.random() > 0.5 && pixel.poisoned === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (pixel.burning === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (pixel.temp > 53 && pixel.nutrition > 0 && pixel.oxygen > 0) || (pixel.temp < -10 && pixel.nutrition > 0 && pixel.oxygen > 0) || Math.random() > 0.85 && Math.random() < (pixel.burnt / 100) ) {
    pixel.nutrition -= 0.5
    pixel.oxygen--
}
if (pixel.temp > 42 && pixel.ibupCount > 0) { 
    pixel.temp -= 5 
    pixel.ibupCount--
}
else if (pixel.temp > 37 && pixel.ibupCount > 0) { 
    pixel.temp-- 
    pixel.ibupCount--
}
if (Math.random() > 0.5 && (pixel.nutrition < 1 || pixel.oxygen < 1 || pixel.speed < -100)) {
    if (pixel.poisoned === true || pixel.sick === true) {
        changePixel(pixel,"infection")
    }
    else {
        changePixel(pixel,elements[pixel.element].bleed);
    }
}
if (pixel.nutrition === null || isNaN(pixel.nutrition)) {
    pixel.nutrition = 500
}
if (pixel.oxygen === null || isNaN(pixel.oxygen)) {
    pixel.oxygen = 500
}
if (pixel.speed === null || isNaN(pixel.speed)) {
    pixel.speed = 0
}
if ((pixel.alcoDepri || pixel.alcoDepri === 0) && pixel.alcoholic === true) {
    pixel.alcoDepri += 1
}
if (pixel.alcoTime < (pixelTicks - 10000) && pixel.alcoholic === true && Math.random() > 0.999 || pixel.alcoRecover === true) {
    pixel.alcoDepri = undefined
    pixel.alcoTime = undefined
    pixel.alcoholic = false
    pixel.alcoRecover = true
}
if (pixel.poisonImmune === true && pixel.poisoned != false) {
    pixel.poisoned = false
}
if ((pixel.poisonImmune === true || pixel.immune === true) && pixel.sick != false) {
    pixel.sick = false
}
if (ibuprofenTime < pixelTicks - 1000 && (pixel.ibup || pixel.ibupCount > 0)) {
    pixel.ibup = false
    pixel.ibupCount = false
}
if ((pixel.temp > 124.55 || pixel.burning) && Math.random() > 0.5) {
    if (!pixel.burnt) { pixel.burnt = 1 }
    else { pixel.burnt ++ }
}
if ((pixel.temp > 150 || pixel.burning) && Math.random() > 0.95) {
    if (!pixel.burnt) { pixel.burnt = 1 }
    else { pixel.burnt ++ }
}
if (pixel.char != pixel.burnt && pixel.burnt > pixel.char || !pixel.char) {
    pixel.char = pixel.burnt
}
if (!isEmpty(pixel.x, pixel.y-1, true)) {
    var hitPixel = pixelMap[pixel.x][pixel.y-1]
    if (elements[hitPixel.element].isBio === true) {
        if (hitPixel.oxygen < pixel.oxygen) {
            if (pixel.heartAttached === true) {
                hitPixel.oxygen += (elements[pixel.element].oxygTrans + 10)
                pixel.oxygen -= (elements[pixel.element].oxygTrans + 9)
            }
            else {
                hitPixel.oxygen += (elements[pixel.element].oxygTrans)
                pixel.oxygen -= (elements[pixel.element].oxygTrans)
            }
        }
        if (hitPixel.nutrition < pixel.nutrition) {
            if (pixel.heartAttached === true) {
                hitPixel.nutrition += (elements[pixel.element].nutrTrans + 10)
                pixel.nutrition -= (elements[pixel.element].nutrTrans + 10)
            }
            else {
                hitPixel.nutrition += (elements[pixel.element].nutrTrans)
                pixel.nutrition -= (elements[pixel.element].nutrTrans)
            }
        }
        if (hitPixel.speed < pixel.speed) {
            hitPixel.speed += 1
            pixel.speed -= 1
        }
        if (hitPixel.alcoholic !== true && pixel.alcoholic === true && Math.random() > 0.85) {
            hitPixel.alcoholic = true
            hitPixel.alcoTime = pixel.alcoTime
            hitPixel.alcoDepri = 0
        }
        if (hitPixel.alcoDepri > pixel.alcoDepri && pixel.alcoDepri) {
            hitPixel.alcoDepri = pixel.alcoDepri
        }
        if (hitPixel.alcoTime < pixel.alcoTime && pixel.alcoTime) {
            hitPixel.alcoTime = pixel.alcoTime
        }
        if (hitPixel.alcoRecover !== true && pixel.alcoRecover) {
            hitPixel.alcoRecover = true
        }
        if ((hitPixel.fentDepri < pixel.fentDepri || !hitPixel.fentDepri) && pixel.fentDepri) {
            hitPixel.fentDepri = pixel.fentDepri
            hitPixel.fenAddict = true
        }
        if (hitPixel.sick != true && pixel.sick == true && Math.random() > 0.95) {
            hitPixel.sick = true
        }
        if (hitPixel.poisonImmune != true && pixel.poisonImmune == true && Math.random() > 0.75) {
            hitPixel.poisonImmune = true
        }
        if (hitPixel.poisoned != true && pixel.poisoned == true && Math.random() > 0.95) {
            hitPixel.poisoned = true
        }
        if (hitPixel.immune != true && pixel.immune == true && Math.random() > 0.75) {
            hitPixel.immune = true
        }
        if (hitPixel.ibupCount != 0 && hitPixel.ibup != true && pixel.ibup === true && Math.random() < 0.75) {
            hitPixel.ibup = true
            if (!hitPixel.ibupCount) {
                hitPixel.ibupCount = 1
            }
            else {
                hitPixel.ibupCount += 1
            }
            ibuprofenTime = pixelTicks
        }
        if (hitPixel.ibupCount < pixel.ibupCount && Math.random() > 0.995) {
            hitPixel.ibupCount += 1
        }
        if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burnt--
        }
        if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burning = false
        }
        if (elements[hitPixel.element].isBlood === true && pixel.heartAttached === true && hitPixel.heartAttached === false && Math.random() > 0.5) {
            hitPixel.heartAttached = true
        }
    }
}
else if (isEmpty(pixel.x, pixel.y-1) && Math.random() > 0.75 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
    if (Math.random() > 0.95) {
        if (pixel.poisonImmune === true) {
            createPixel("antibody",pixel.x,pixel.y-1)
        }
        else if (pixel.poisoned === true || pixel.sick === true) {
            createPixel("infection",pixel.x,pixel.y-1)
        }
        else {
            createPixel(elements[pixel.element].bleed,pixel.x,pixel.y-1)
        }
    }
    pixel.oxygen -= 50
    pixel.nutrition -= 50
}
if (!isEmpty(pixel.x, pixel.y+1, true)) {
    var hitPixel = pixelMap[pixel.x][pixel.y+1]
    if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
        if (hitPixel.oxygen < pixel.oxygen) {
            if (pixel.heartAttached === true) {
                hitPixel.oxygen += (elements[pixel.element].oxygTrans + 10)
                pixel.oxygen -= (elements[pixel.element].oxygTrans + 9)
            }
            else {
                hitPixel.oxygen += (elements[pixel.element].oxygTrans)
                pixel.oxygen -= (elements[pixel.element].oxygTrans)
            }
        }
        if (hitPixel.nutrition < pixel.nutrition) {
            if (pixel.heartAttached === true) {
                hitPixel.nutrition += (elements[pixel.element].nutrTrans + 10)
                pixel.nutrition -= (elements[pixel.element].nutrTrans + 10)
            }
            else {
                hitPixel.nutrition += (elements[pixel.element].nutrTrans)
                pixel.nutrition -= (elements[pixel.element].nutrTrans)
            }
        }
        if (hitPixel.speed < pixel.speed) {
            hitPixel.speed += 1
            pixel.speed -= 1
        }
        if (hitPixel.alcoholic !== true && pixel.alcoholic === true && Math.random() > 0.85) {
            hitPixel.alcoholic = true
            hitPixel.alcoTime = pixel.alcoTime
            hitPixel.alcoDepri = 0
        }
        if (hitPixel.alcoDepri > pixel.alcoDepri && pixel.alcoDepri) {
            hitPixel.alcoDepri = pixel.alcoDepri
        }
        if (hitPixel.alcoTime < pixel.alcoTime && pixel.alcoTime) {
            hitPixel.alcoTime = pixel.alcoTime
        }
        if (hitPixel.alcoRecover !== true && pixel.alcoRecover) {
            hitPixel.alcoRecover = true
        }
        if ((hitPixel.fentDepri < pixel.fentDepri || !hitPixel.fentDepri) && pixel.fentDepri) {
            hitPixel.fentDepri = pixel.fentDepri
            hitPixel.fenAddict = true
        }
        if (hitPixel.sick != true && pixel.sick == true && Math.random() > 0.95) {
            hitPixel.sick = true
        }
        if (hitPixel.poisonImmune != true && pixel.poisonImmune == true && Math.random() > 0.75) {
            hitPixel.poisonImmune = true
        }
        if (hitPixel.poisoned != true && pixel.poisoned == true && Math.random() > 0.95) {
            hitPixel.poisoned = true
        }
        if (hitPixel.immune != true && pixel.immune == true && Math.random() > 0.75) {
            hitPixel.immune = true
        }
        if (hitPixel.ibupCount != 0 && hitPixel.ibup != true && pixel.ibup === true && Math.random() < 0.75) {
            hitPixel.ibup = true
            if (!hitPixel.ibupCount) {
                hitPixel.ibupCount = 1
            }
            else {
                hitPixel.ibupCount += 1
            }
            ibuprofenTime = pixelTicks
        }
        if (hitPixel.ibupCount < pixel.ibupCount && Math.random() > 0.995) {
            hitPixel.ibupCount += 1
        }
        if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burnt--
        }
        if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burning = false
        }
        if (elements[hitPixel.element].isBlood === true && pixel.heartAttached === true && hitPixel.heartAttached === false && Math.random() > 0.5) {
            hitPixel.heartAttached = true
        }
    }
}
else if (isEmpty(pixel.x, pixel.y+1) && Math.random() > 0.75 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
    if (Math.random() > 0.95) {
        if (pixel.poisonImmune === true) {
            createPixel("antibody",pixel.x,pixel.y+1)
        }
        else if (pixel.poisoned === true || pixel.sick === true) {
            createPixel("infection",pixel.x,pixel.y+1)
        }
        else {
            createPixel(elements[pixel.element].bleed,pixel.x,pixel.y+1)
        }
    }
    pixel.oxygen -= 50
    pixel.nutrition -= 50
}
if (!isEmpty(pixel.x-1, pixel.y, true)) {
    var hitPixel = pixelMap[pixel.x-1][pixel.y]
    if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
        if (hitPixel.oxygen < pixel.oxygen) {
            if (pixel.heartAttached === true) {
                hitPixel.oxygen += (elements[pixel.element].oxygTrans + 10)
                pixel.oxygen -= (elements[pixel.element].oxygTrans + 9)
            }
            else {
                hitPixel.oxygen += (elements[pixel.element].oxygTrans)
                pixel.oxygen -= (elements[pixel.element].oxygTrans)
            }
        }
        if (hitPixel.nutrition < pixel.nutrition) {
            if (pixel.heartAttached === true) {
                hitPixel.nutrition += (elements[pixel.element].nutrTrans + 10)
                pixel.nutrition -= (elements[pixel.element].nutrTrans + 10)
            }
            else {
                hitPixel.nutrition += (elements[pixel.element].nutrTrans)
                pixel.nutrition -= (elements[pixel.element].nutrTrans)
            }
        }
        if (hitPixel.speed < pixel.speed) {
            hitPixel.speed += 1
            pixel.speed -= 1
        }
        if (hitPixel.alcoholic !== true && pixel.alcoholic === true && Math.random() > 0.85) {
            hitPixel.alcoholic = true
            hitPixel.alcoTime = pixel.alcoTime
            hitPixel.alcoDepri = 0
        }
        if (hitPixel.alcoDepri > pixel.alcoDepri && pixel.alcoDepri) {
            hitPixel.alcoDepri = pixel.alcoDepri
        }
        if (hitPixel.alcoTime < pixel.alcoTime && pixel.alcoTime) {
            hitPixel.alcoTime = pixel.alcoTime
        }
        if (hitPixel.alcoRecover !== true && pixel.alcoRecover) {
            hitPixel.alcoRecover = true
        }
        if ((hitPixel.fentDepri < pixel.fentDepri || !hitPixel.fentDepri) && pixel.fentDepri) {
            hitPixel.fentDepri = pixel.fentDepri
            hitPixel.fenAddict = true
        }
        if (hitPixel.sick != true && pixel.sick == true && Math.random() > 0.95) {
            hitPixel.sick = true
        }
        if (hitPixel.poisonImmune != true && pixel.poisonImmune == true && Math.random() > 0.75) {
            hitPixel.poisonImmune = true
        }
        if (hitPixel.poisoned != true && pixel.poisoned == true && Math.random() > 0.95) {
            hitPixel.poisoned = true
        }
        if (hitPixel.immune != true && pixel.immune == true && Math.random() > 0.75) {
            hitPixel.immune = true
        }
        if (hitPixel.ibupCount != 0 && hitPixel.ibup != true && pixel.ibup === true && Math.random() < 0.75) {
            hitPixel.ibup = true
            if (!hitPixel.ibupCount) {
                hitPixel.ibupCount = 1
            }
            else {
                hitPixel.ibupCount += 1
            }
            ibuprofenTime = pixelTicks
        }
        if (hitPixel.ibupCount < pixel.ibupCount && Math.random() > 0.995) {
            hitPixel.ibupCount += 1
        }
        if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burnt--
        }
        if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burning = false
        }
        if (elements[hitPixel.element].isBlood === true && pixel.heartAttached === true && hitPixel.heartAttached === false && Math.random() > 0.5) {
            hitPixel.heartAttached = true
        }
    }
}
else if (isEmpty(pixel.x-1, pixel.y) && Math.random() > 0.75 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
    if (Math.random() > 0.95) {
        if (pixel.poisonImmune === true) {
            createPixel("antibody",pixel.x-1,pixel.y)
        }
        else if (pixel.poisoned === true || pixel.sick === true) {
            createPixel("infection",pixel.x-1,pixel.y)
        }
        else {
            createPixel(elements[pixel.element].bleed,pixel.x-1,pixel.y)
        }
    }
    pixel.oxygen -= 50
    pixel.nutrition -= 50
}
if (!isEmpty(pixel.x+1, pixel.y, true)) {
    var hitPixel = pixelMap[pixel.x+1][pixel.y]
    if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
        if (hitPixel.oxygen < pixel.oxygen) {
            if (pixel.heartAttached === true) {
                hitPixel.oxygen += (elements[pixel.element].oxygTrans + 10)
                pixel.oxygen -= (elements[pixel.element].oxygTrans + 9)
            }
            else {
                hitPixel.oxygen += (elements[pixel.element].oxygTrans)
                pixel.oxygen -= (elements[pixel.element].oxygTrans)
            }
        }
        if (hitPixel.nutrition < pixel.nutrition) {
            if (pixel.heartAttached === true) {
                hitPixel.nutrition += (elements[pixel.element].nutrTrans + 10)
                pixel.nutrition -= (elements[pixel.element].nutrTrans + 10)
            }
            else {
                hitPixel.nutrition += (elements[pixel.element].nutrTrans)
                pixel.nutrition -= (elements[pixel.element].nutrTrans)
            }
        }
        if (hitPixel.speed < pixel.speed) {
            hitPixel.speed += 1
            pixel.speed -= 1
        }
        if (hitPixel.alcoholic !== true && pixel.alcoholic === true && Math.random() > 0.85) {
            hitPixel.alcoholic = true
            hitPixel.alcoTime = pixel.alcoTime
            hitPixel.alcoDepri = 0
        }
        if (hitPixel.alcoDepri > pixel.alcoDepri && pixel.alcoDepri) {
            hitPixel.alcoDepri = pixel.alcoDepri
        }
        if (hitPixel.alcoTime < pixel.alcoTime && pixel.alcoTime) {
            hitPixel.alcoTime = pixel.alcoTime
        }
        if (hitPixel.alcoRecover !== true && pixel.alcoRecover) {
            hitPixel.alcoRecover = true
        }
        if ((hitPixel.fentDepri < pixel.fentDepri || !hitPixel.fentDepri) && pixel.fentDepri) {
            hitPixel.fentDepri = pixel.fentDepri
            hitPixel.fenAddict = true
        }
        if (hitPixel.sick != true && pixel.sick == true && Math.random() > 0.95) {
            hitPixel.sick = true
        }
        if (hitPixel.poisonImmune != true && pixel.poisonImmune == true && Math.random() > 0.75) {
            hitPixel.poisonImmune = true
        }
        if (hitPixel.poisoned != true && pixel.poisoned == true && Math.random() > 0.95) {
            hitPixel.poisoned = true
        }
        if (hitPixel.immune != true && pixel.immune == true && Math.random() > 0.75) {
            hitPixel.immune = true
        }
        if (hitPixel.ibupCount != 0 && hitPixel.ibup != true && pixel.ibup === true && Math.random() < 0.75) {
            hitPixel.ibup = true
            if (!hitPixel.ibupCount) {
                hitPixel.ibupCount = 1
            }
            else {
                hitPixel.ibupCount += 1
            }
            ibuprofenTime = pixelTicks
        }
        if (hitPixel.ibupCount < pixel.ibupCount && Math.random() > 0.995) {
            hitPixel.ibupCount += 1
        }
        if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burnt--
        }
        if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burning = false
        }
        if (elements[hitPixel.element].isBlood === true && pixel.heartAttached === true && hitPixel.heartAttached === false && Math.random() > 0.5) {
            hitPixel.heartAttached = true
        }
    }
}
else if (isEmpty(pixel.x+1, pixel.y) && Math.random() > 0.75 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
    if (Math.random() > 0.95) {
        if (pixel.poisonImmune === true) {
            createPixel("antibody",pixel.x+1,pixel.y)
        }
        else if (pixel.poisoned === true || pixel.sick === true) {
            createPixel("infection",pixel.x+1,pixel.y)
        }
        else {
            createPixel(elements[pixel.element].bleed,pixel.x+1,pixel.y)
        }
    }
    pixel.oxygen -= 50
    pixel.nutrition -= 50
}
}

doBioBone = function(pixel){
if ((Math.random() > 0.995 && pixel.nutrition > 0 && pixel.oxygen > 0) || (Math.random() < (pixel.alcoDepri / 100) && pixel.alcoholic === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (Math.random() > 0.60 && pixel.sick === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (Math.random() > 0.5 && pixel.poisoned === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (pixel.burning === true && pixel.nutrition > 0 && pixel.oxygen > 0) || (pixel.temp > 55 && pixel.nutrition > 0 && pixel.oxygen > 0) || (pixel.temp < -10 && pixel.nutrition > 0 && pixel.oxygen > 0) || Math.random() > 0.85 && Math.random() < (pixel.burnt / 100)) {
    pixel.nutrition -= 0.5
    pixel.oxygen--
}
if (pixel.temp > 42 && pixel.ibupCount > 0) { 
    pixel.temp -= 5 
    pixel.ibupCount--
}
else if (pixel.temp > 37 && pixel.ibupCount > 0) { 
    pixel.temp-- 
    pixel.ibupCount--
}
if (Math.random() > 0.5 && (pixel.nutrition < 1 || pixel.oxygen < 1 || pixel.speed < -100)) {
    if (elements[pixel.element].isMultiDie === true) {
        if (pixel.temp > 95) {
            if (Math.random() < 0.75) {
                changePixel(pixel,elements[pixel.element].normDie); 
            }
            else {
                changePixel(pixel,elements[pixel.element].heatDie); 
            }
        }
        else if (pixel.temp < -15) {
            if (Math.random() < 0.75) {
                changePixel(pixel,elements[pixel.element].normDie); 
            }
            else {
                changePixel(pixel,elements[pixel.element].coldDie); 
            }
        }
        else {
            if (Math.random() < 0.999) {
                changePixel(pixel,elements[pixel.element].normDie); 
            }
            else {
                changePixel(pixel,elements[pixel.element].roomDie); 
            }
        }
        }
        else if (elements[pixel.element].isMultiDie === false) {
            if (Math.random() < 0.75) {
                changePixel(pixel,elements[pixel.element].normDie); 
            }
            else {
                changePixel(pixel,elements[pixel.element].otherDie); 
            }
        }
}
if (pixel.nutrition === null || isNaN(pixel.nutrition)) {
    pixel.nutrition = 500
}
if (pixel.oxygen === null || isNaN(pixel.oxygen)) {
    pixel.oxygen = 500
}
if (pixel.speed === null || isNaN(pixel.speed)) {
    pixel.speed = 0
}
if ((pixel.alcoDepri || pixel.alcoDepri === 0) && pixel.alcoholic === true) {
    pixel.alcoDepri += 1
}
if (pixel.alcoTime < (pixelTicks - 10000) && pixel.alcoholic === true && Math.random() > 0.999 || pixel.alcoRecover === true) {
    pixel.alcoDepri = undefined
    pixel.alcoTime = undefined
    pixel.alcoholic = false
    pixel.alcoRecover = true
}
if (pixel.poisonImmune === true && pixel.poisoned != false) {
    pixel.poisoned = false
}
if ((pixel.poisonImmune === true || pixel.immune === true) && pixel.sick != false) {
    pixel.sick = false
}
if (ibuprofenTime < pixelTicks - 1000 && (pixel.ibup || pixel.ibupCount > 0)) {
    pixel.ibup = false
    pixel.ibupCount = false
}
if ((pixel.temp > 124.55 || pixel.burning) && Math.random() > 0.5) {
    if (!pixel.burnt) { pixel.burnt = 1 }
    else { pixel.burnt ++ }
}
if ((pixel.temp > 66 || pixel.burning) && Math.random() > 0.95) {
    if (!pixel.burnt) { pixel.burnt = 1 }
    else { pixel.burnt ++ }
}
if (pixel.char != pixel.burnt && pixel.burnt > pixel.char || !pixel.char) {
    pixel.char = pixel.burnt
}
if (!isEmpty(pixel.x, pixel.y-1, true)) {
    var hitPixel = pixelMap[pixel.x][pixel.y-1]
    if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
        if (hitPixel.oxygen < pixel.oxygen) {
            hitPixel.oxygen += (elements[pixel.element].oxygTrans)
            pixel.oxygen -= (elements[pixel.element].oxygTrans)
        }
        if (hitPixel.nutrition < pixel.nutrition) {
            hitPixel.nutrition += (elements[pixel.element].nutrTrans)
            pixel.nutrition -= (elements[pixel.element].nutrTrans)
        }
        if (hitPixel.speed < pixel.speed) {
            hitPixel.speed += 1
            pixel.speed -= 1
        }
        if (hitPixel.oxygen > pixel.oxygen) {
            hitPixel.oxygen -= (elements[hitPixel.element].oxygTrans)
            pixel.oxygen += (elements[hitPixel.element].oxygTrans)
        }
        if (hitPixel.nutrition > pixel.nutrition) {
            hitPixel.nutrition -= (elements[hitPixel.element].nutrTrans)
            pixel.nutrition += (elements[hitPixel.element].nutrTrans)
        }
        if (hitPixel.speed > pixel.speed) {
            hitPixel.speed -= 1
            pixel.speed += 1
        }
        if (hitPixel.alcoholic !== true && pixel.alcoholic === true && Math.random() > 0.85) {
            hitPixel.alcoholic = true
            hitPixel.alcoTime = pixel.alcoTime
            hitPixel.alcoDepri = 0
        }
        if (hitPixel.alcoDepri > pixel.alcoDepri && pixel.alcoDepri) {
            hitPixel.alcoDepri = pixel.alcoDepri
        }
        if (hitPixel.alcoTime < pixel.alcoTime && pixel.alcoTime) {
            hitPixel.alcoTime = pixel.alcoTime
        }
        if (hitPixel.alcoRecover !== true && pixel.alcoRecover) {
            hitPixel.alcoRecover = true
        }
        if ((hitPixel.fentDepri < pixel.fentDepri || !hitPixel.fentDepri) && pixel.fentDepri) {
            hitPixel.fentDepri = pixel.fentDepri
            hitPixel.fenAddict = true
        }
        if (hitPixel.sick != true && pixel.sick == true && Math.random() > 0.95) {
            hitPixel.sick = true
        }
        if (hitPixel.poisonImmune != true && pixel.poisonImmune == true && Math.random() > 0.75) {
            hitPixel.poisonImmune = true
        }
        if (hitPixel.poisoned != true && pixel.poisoned == true && Math.random() > 0.95) {
            hitPixel.poisoned = true
        }
        if (hitPixel.immune != true && pixel.immune == true && Math.random() > 0.75) {
            hitPixel.immune = true
        }
        if (hitPixel.ibupCount != 0 && hitPixel.ibup != true && pixel.ibup === true && Math.random() < 0.75) {
            hitPixel.ibup = true
            if (!hitPixel.ibupCount) {
                hitPixel.ibupCount = 1
            }
            else {
                hitPixel.ibupCount += 1
            }
            ibuprofenTime = pixelTicks
        }
        if (hitPixel.ibupCount < pixel.ibupCount && Math.random() > 0.995) {
            hitPixel.ibupCount += 1
        }
        if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burnt--
        }
        if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burning = false
        }
    }
}
if (!isEmpty(pixel.x, pixel.y+1, true)) {
    var hitPixel = pixelMap[pixel.x][pixel.y+1]
    if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
        if (hitPixel.oxygen < pixel.oxygen) {
            hitPixel.oxygen += (elements[pixel.element].oxygTrans)
            pixel.oxygen -= (elements[pixel.element].oxygTrans)
        }
        if (hitPixel.nutrition < pixel.nutrition) {
            hitPixel.nutrition += (elements[pixel.element].nutrTrans)
            pixel.nutrition -= (elements[pixel.element].nutrTrans)
        }
        if (hitPixel.speed < pixel.speed) {
            hitPixel.speed += 1
            pixel.speed -= 1
        }
        if (hitPixel.oxygen > pixel.oxygen) {
            hitPixel.oxygen -= (elements[hitPixel.element].oxygTrans)
            pixel.oxygen += (elements[hitPixel.element].oxygTrans)
        }
        if (hitPixel.nutrition > pixel.nutrition) {
            hitPixel.nutrition -= (elements[hitPixel.element].nutrTrans)
            pixel.nutrition += (elements[hitPixel.element].nutrTrans)
        }
        if (hitPixel.speed > pixel.speed) {
            hitPixel.speed -= 1
            pixel.speed += 1
        }
        if (hitPixel.alcoholic !== true && pixel.alcoholic === true && Math.random() > 0.85) {
            hitPixel.alcoholic = true
            hitPixel.alcoTime = pixel.alcoTime
            hitPixel.alcoDepri = 0
        }
        if (hitPixel.alcoDepri > pixel.alcoDepri && pixel.alcoDepri) {
            hitPixel.alcoDepri = pixel.alcoDepri
        }
        if (hitPixel.alcoTime < pixel.alcoTime && pixel.alcoTime) {
            hitPixel.alcoTime = pixel.alcoTime
        }
        if (hitPixel.alcoRecover !== true && pixel.alcoRecover) {
            hitPixel.alcoRecover = true
        }
        if ((hitPixel.fentDepri < pixel.fentDepri || !hitPixel.fentDepri) && pixel.fentDepri) {
            hitPixel.fentDepri = pixel.fentDepri
            hitPixel.fenAddict = true
        }
        if (hitPixel.sick != true && pixel.sick == true && Math.random() > 0.95) {
            hitPixel.sick = true
        }
        if (hitPixel.poisonImmune != true && pixel.poisonImmune == true && Math.random() > 0.75) {
            hitPixel.poisonImmune = true
        }
        if (hitPixel.poisoned != true && pixel.poisoned == true && Math.random() > 0.95) {
            hitPixel.poisoned = true
        }
        if (hitPixel.immune != true && pixel.immune == true && Math.random() > 0.75) {
            hitPixel.immune = true
        }
        if (hitPixel.ibupCount != 0 && hitPixel.ibup != true && pixel.ibup === true && Math.random() < 0.75) {
            hitPixel.ibup = true
            if (!hitPixel.ibupCount) {
                hitPixel.ibupCount = 1
            }
            else {
                hitPixel.ibupCount += 1
            }
            ibuprofenTime = pixelTicks
        }
        if (hitPixel.ibupCount < pixel.ibupCount && Math.random() > 0.995) {
            hitPixel.ibupCount += 1
        }
        if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burnt--
        }
        if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burning = false
        }
    }
}
if (!isEmpty(pixel.x-1, pixel.y, true)) {
    var hitPixel = pixelMap[pixel.x-1][pixel.y]
    if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
        if (hitPixel.oxygen < pixel.oxygen) {
            hitPixel.oxygen += (elements[pixel.element].oxygTrans)
            pixel.oxygen -= (elements[pixel.element].oxygTrans)
        }
        if (hitPixel.nutrition < pixel.nutrition) {
            hitPixel.nutrition += (elements[pixel.element].nutrTrans)
            pixel.nutrition -= (elements[pixel.element].nutrTrans)
        }
        if (hitPixel.speed < pixel.speed) {
            hitPixel.speed += 1
            pixel.speed -= 1
        }
        if (hitPixel.oxygen > pixel.oxygen) {
            hitPixel.oxygen -= (elements[hitPixel.element].oxygTrans)
            pixel.oxygen += (elements[hitPixel.element].oxygTrans)
        }
        if (hitPixel.nutrition > pixel.nutrition) {
            hitPixel.nutrition -= (elements[hitPixel.element].nutrTrans)
            pixel.nutrition += (elements[hitPixel.element].nutrTrans)
        }
        if (hitPixel.speed > pixel.speed) {
            hitPixel.speed -= 1
            pixel.speed += 1
        }
        if (hitPixel.alcoholic !== true && pixel.alcoholic === true && Math.random() > 0.85) {
            hitPixel.alcoholic = true
            hitPixel.alcoTime = pixel.alcoTime
            hitPixel.alcoDepri = 0
        }
        if (hitPixel.alcoDepri > pixel.alcoDepri && pixel.alcoDepri) {
            hitPixel.alcoDepri = pixel.alcoDepri
        }
        if (hitPixel.alcoTime < pixel.alcoTime && pixel.alcoTime) {
            hitPixel.alcoTime = pixel.alcoTime
        }
        if (hitPixel.alcoRecover !== true && pixel.alcoRecover) {
            hitPixel.alcoRecover = true
        }
        if ((hitPixel.fentDepri < pixel.fentDepri || !hitPixel.fentDepri) && pixel.fentDepri) {
            hitPixel.fentDepri = pixel.fentDepri
            hitPixel.fenAddict = true
        }
        if (hitPixel.sick != true && pixel.sick == true && Math.random() > 0.95) {
            hitPixel.sick = true
        }
        if (hitPixel.poisonImmune != true && pixel.poisonImmune == true && Math.random() > 0.75) {
            hitPixel.poisonImmune = true
        }
        if (hitPixel.poisoned != true && pixel.poisoned == true && Math.random() > 0.95) {
            hitPixel.poisoned = true
        }
        if (hitPixel.immune != true && pixel.immune == true && Math.random() > 0.75) {
            hitPixel.immune = true
        }
        if (hitPixel.ibupCount != 0 && hitPixel.ibup != true && pixel.ibup === true && Math.random() < 0.75) {
            hitPixel.ibup = true
            if (!hitPixel.ibupCount) {
                hitPixel.ibupCount = 1
            }
            else {
                hitPixel.ibupCount += 1
            }
            ibuprofenTime = pixelTicks
        }
        if (hitPixel.ibupCount < pixel.ibupCount && Math.random() > 0.995) {
            hitPixel.ibupCount += 1
        }
        if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burnt--
        }
        if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burning = false
        }
    }
}
if (!isEmpty(pixel.x+1, pixel.y, true)) {
    var hitPixel = pixelMap[pixel.x+1][pixel.y]
    if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
        if (hitPixel.oxygen < pixel.oxygen) {
            hitPixel.oxygen += (elements[pixel.element].oxygTrans)
            pixel.oxygen -= (elements[pixel.element].oxygTrans)
        }
        if (hitPixel.nutrition < pixel.nutrition) {
            hitPixel.nutrition += (elements[pixel.element].nutrTrans)
            pixel.nutrition -= (elements[pixel.element].nutrTrans)
        }
        if (hitPixel.speed < pixel.speed) {
            hitPixel.speed += 1
            pixel.speed -= 1
        }
        if (hitPixel.oxygen > pixel.oxygen) {
            hitPixel.oxygen -= (elements[hitPixel.element].oxygTrans)
            pixel.oxygen += (elements[hitPixel.element].oxygTrans)
        }
        if (hitPixel.nutrition > pixel.nutrition) {
            hitPixel.nutrition -= (elements[hitPixel.element].nutrTrans)
            pixel.nutrition += (elements[hitPixel.element].nutrTrans)
        }
        if (hitPixel.speed > pixel.speed) {
            hitPixel.speed -= 1
            pixel.speed += 1
        }
        if (hitPixel.alcoholic !== true && pixel.alcoholic === true && Math.random() > 0.85) {
            hitPixel.alcoholic = true
            hitPixel.alcoTime = pixel.alcoTime
            hitPixel.alcoDepri = 0
        }
        if (hitPixel.alcoDepri > pixel.alcoDepri && pixel.alcoDepri) {
            hitPixel.alcoDepri = pixel.alcoDepri
        }
        if (hitPixel.alcoTime < pixel.alcoTime && pixel.alcoTime) {
            hitPixel.alcoTime = pixel.alcoTime
        }
        if (hitPixel.alcoRecover !== true && pixel.alcoRecover) {
            hitPixel.alcoRecover = true
        }
        if ((hitPixel.fentDepri < pixel.fentDepri || !hitPixel.fentDepri) && pixel.fentDepri) {
            hitPixel.fentDepri = pixel.fentDepri
            hitPixel.fenAddict = true
        }
        if (hitPixel.sick != true && pixel.sick == true && Math.random() > 0.95) {
            hitPixel.sick = true
        }
        if (hitPixel.poisonImmune != true && pixel.poisonImmune == true && Math.random() > 0.75) {
            hitPixel.poisonImmune = true
        }
        if (hitPixel.poisoned != true && pixel.poisoned == true && Math.random() > 0.95) {
            hitPixel.poisoned = true
        }
        if (hitPixel.immune != true && pixel.immune == true && Math.random() > 0.75) {
            hitPixel.immune = true
        }
        if (hitPixel.ibupCount != 0 && hitPixel.ibup != true && pixel.ibup === true && Math.random() < 0.75) {
            hitPixel.ibup = true
            if (!hitPixel.ibupCount) {
                hitPixel.ibupCount = 1
            }
            else {
                hitPixel.ibupCount += 1
            }
            ibuprofenTime = pixelTicks
        }
        if (hitPixel.ibupCount < pixel.ibupCount && Math.random() > 0.995) {
            hitPixel.ibupCount += 1
        }
        if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burnt--
        }
        if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
            hitPixel.burning = false
        }
    }
}
}

elements.flesh = {
	color: ["#9e4839","#ba6449"],
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioNorm(pixel);
        doDefaults(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
	reactions: {
        "cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.epidermis = {
	color: "#f7ead0",
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "dust",
    roomDie: "meat",
    coldDie: "dust",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if ((pixel.temp > 40 || pixel.temp < 10) && Math.random() < 0.005) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    if (pixel.temp > 40) {
                        pixel.temp -= 20;
                        createPixel("salt_water",x,y);
                        break;
                    }
                    pixel.temp += 20;
                    break;
                }
            }
        }
        if (pixel.temp < 36.5 && Math.random() < 0.1) {
            pixel.temp += 1;
        }
        else if (pixel.temp > 37 && Math.random() < 0.1) {
            pixel.temp -= 1;
        }
        doBioNorm(pixel);
        doDefaults(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 3,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat","dust","dust","dust","dust"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","meat","rotten_meat","cooked_meat","flesh"], chance:0.2 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.dermis = {
	color: "#CFA08B",
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if (Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) && Math.random() < 0.005) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    createPixel("epidermis",x,y);
                    pixelMap[x][y].nutrition = (Math.round(pixel.nutrition / 2))
                    pixelMap[x][y].oxygen = (Math.round(pixel.oxygen / 2))
                    pixel.nutrition = (Math.round(pixel.nutrition / 2))
                    pixel.oxygen = (Math.round(pixel.oxygen / 2))
                }
            }
        }
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 4,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","meat","rotten_meat","cooked_meat","flesh"], chance:0.2 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.cloak_skin = {
	color: "#CFD4A5",
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "dust",
    roomDie: "meat",
    coldDie: "dust",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if ((pixel.temp > 40 || pixel.temp < 10) && Math.random() < 0.005) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    if (pixel.temp > 40) {
                        pixel.temp -= 20;
                        createPixel("salt_water",x,y);
                        break;
                    }
                    pixel.temp += 20;
                    break;
                }
            }
        }
        if (pixel.temp < 36.5 && Math.random() < 0.1) {
            pixel.temp += 1;
        }
        else if (pixel.temp > 37 && Math.random() < 0.1) {
            pixel.temp -= 1;
        }
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].movable) {
                if (pixel.color != hitPixel.color) {
                    pixel.color = hitPixel.color
                }
            }
            if (elements[hitPixel.element].isBio) {
                if (pixel.color != hitPixel.color) {
                    hitPixel.color = pixel.color
                }
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].movable) {
                if (pixel.color != hitPixel.color) {
                    pixel.color = hitPixel.color
                }
            }
            if (elements[hitPixel.element].isBio) {
                if (pixel.color != hitPixel.color) {
                    hitPixel.color = pixel.color
                }
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].movable) {
                if (pixel.color != hitPixel.color) {
                    pixel.color = hitPixel.color
                }
            }
            if (elements[hitPixel.element].isBio) {
                if (pixel.color != hitPixel.color) {
                    hitPixel.color = pixel.color
                }
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].movable) {
                if (pixel.color != hitPixel.color) {
                    pixel.color = hitPixel.color
                }
            }
            if (elements[hitPixel.element].isBio) {
                if (pixel.color != hitPixel.color) {
                    hitPixel.color = pixel.color
                }
            }
        }
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 3,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat","dust","dust","dust","dust"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","meat","rotten_meat","cooked_meat","flesh"], chance:0.2 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.cloak_dermis = {
	color: "#BC9F7B",
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if (Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) && Math.random() < 0.005) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    createPixel("cloak_skin",x,y);
                    pixelMap[x][y].nutrition = (Math.round(pixel.nutrition / 2))
                    pixelMap[x][y].oxygen = (Math.round(pixel.oxygen / 2))
                    pixel.nutrition = (Math.round(pixel.nutrition / 2))
                    pixel.oxygen = (Math.round(pixel.oxygen / 2))
                }
            }
        }
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].movable) {
                if (pixel.color != hitPixel.color) {
                    pixel.color = hitPixel.color
                }
            }
            if (elements[hitPixel.element].isBio) {
                if (pixel.color != hitPixel.color) {
                    hitPixel.color = pixel.color
                }
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].movable) {
                if (pixel.color != hitPixel.color) {
                    pixel.color = hitPixel.color
                }
            }
            if (elements[hitPixel.element].isBio) {
                if (pixel.color != hitPixel.color) {
                    hitPixel.color = pixel.color
                }
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].movable) {
                if (pixel.color != hitPixel.color) {
                    pixel.color = hitPixel.color
                }
            }
            if (elements[hitPixel.element].isBio) {
                if (pixel.color != hitPixel.color) {
                    hitPixel.color = pixel.color
                }
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].movable) {
                if (pixel.color != hitPixel.color) {
                    pixel.color = hitPixel.color
                }
            }
            if (elements[hitPixel.element].isBio) {
                if (pixel.color != hitPixel.color) {
                    hitPixel.color = pixel.color
                }
            }
        }
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 4,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","meat","rotten_meat","cooked_meat","flesh"], chance:0.2 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.loose_hair = {
    color: "#79554D",
    singleColor: true,
    behavior: behaviors.POWDER,
    category:"powders",
    tempHigh: 223,
    stateHigh: ["smoke","smoke","smoke","ash","ash","stench"],
    burn: 20,
    burnTime: 350,
    burnInto:["smoke","smoke","fire","ash","ash","stench"],
    breakInto: [null,null,null,null,"dust"],
    state: "solid",
    density: 935,
    hidden: true
}

elements.hair_end = {
    color: "#754a41",
	category: "biology",
    behavior: behaviors.WALL,
    tick: function(pixel) {
        if (pixel.dir === "up") {
            if (isEmpty(pixel.x,pixel.y+1)) {
                changePixel(pixel,"loose_hair"); 
            }
            else if (!isEmpty(pixel.x,pixel.y+1,true)) {
                if (elements[pixelMap[pixel.x][pixel.y+1].element].isHair != true) {
                    changePixel(pixel,"loose_hair"); 
                }
            }
        }
        else if (pixel.dir === "down") {
            if (isEmpty(pixel.x,pixel.y-1)) {
                changePixel(pixel,"loose_hair"); 
            }
            else if (!isEmpty(pixel.x,pixel.y-1,true)) {
                if (elements[pixelMap[pixel.x][pixel.y-1].element].isHair != true) {
                    changePixel(pixel,"loose_hair"); 
                }
            }
        }
        else if (pixel.dir === "left") {
            if (isEmpty(pixel.x+1,pixel.y)) {
                changePixel(pixel,"loose_hair"); 
            }
            else if (!isEmpty(pixel.x+1,pixel.y,true)) {
                if (elements[pixelMap[pixel.x+1][pixel.y].element].isHair != true) {
                    changePixel(pixel,"loose_hair"); 
                }
            }
        }
        else if (pixel.dir === "right") {
            if (isEmpty(pixel.x-1,pixel.y)) {
                changePixel(pixel,"loose_hair"); 
            }
            else if (!isEmpty(pixel.x-1,pixel.y,true)) {
                if (elements[pixelMap[pixel.x-1][pixel.y].element].isHair != true) {
                    changePixel(pixel,"loose_hair"); 
                }
            }
        }
        else if (!pixel.dir && pixel.age > 10) {
            changePixel(pixel,"loose_hair"); 
        }
        if (pixel.temp < 5 && Math.random() < 0.01) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    pixel.temp += 10;
                    break;
                }
            }
        }
        if (pixel.temp < 10 && Math.random() < 0.1) {
            pixel.temp += 1;
        }
        doDefaults(pixel);
        pixel.age++
    },
    properties: {
        age: 0,
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempLow: -25,
    stateLow: "loose_hair",
    tempHigh: 123,
    stateHigh: "loose_hair",
    burn:15,
    burnTime: 400,
    burnInto:"loose_hair",
    breakInto:"loose_hair",
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:null, chance:0.0005 },
        "radiation": { elem1:["ash","dust"], chance:0.2 },
	},
    isHair: true,
    movable: false,
    hidden: true,
}

elements.attached_hair = {
    color: "#754a41",
	category: "biology",
    behavior: behaviors.WALL,
    tick: function(pixel) {
        if (Math.random() < 0.001) {
            if (pixel.dir === "up") {
                if (isEmpty(pixel.x,pixel.y-1)) {
                    if (Math.random() > 0.25) {
                        createPixel("attached_hair",pixel.x,pixel.y-1)
                        pixelMap[pixel.x][pixel.y-1].dir = "up"
                    }
                    else {
                        createPixel("hair_end",pixel.x,pixel.y-1)
                        pixelMap[pixel.x][pixel.y-1].dir = "up"
                    }
                }
            }
            else if (pixel.dir === "down") {
                if (isEmpty(pixel.x,pixel.y+1)) {
                    if (Math.random() > 0.25) {
                        createPixel("attached_hair",pixel.x,pixel.y+1)
                        pixelMap[pixel.x][pixel.y+1].dir = "down"
                    }
                    else {
                        createPixel("hair_end",pixel.x,pixel.y+1)
                        pixelMap[pixel.x][pixel.y+1].dir = "down"
                    }
                }
            }
            else if (pixel.dir === "left") {
                if (isEmpty(pixel.x-1,pixel.y)) {
                    if (Math.random() > 0.25) {
                        createPixel("attached_hair",pixel.x-1,pixel.y)
                        pixelMap[pixel.x-1][pixel.y].dir = "left"
                    }
                    else {
                        createPixel("hair_end",pixel.x-1,pixel.y)
                        pixelMap[pixel.x-1][pixel.y].dir = "left"
                    }
                }
            }
            else if (pixel.dir === "right") {
                if (isEmpty(pixel.x+1,pixel.y)) {
                    if (Math.random() > 0.25) {
                        createPixel("attached_hair",pixel.x+1,pixel.y)
                        pixelMap[pixel.x+1][pixel.y].dir = "right"
                    }
                    else {
                        createPixel("hair_end",pixel.x+1,pixel.y)
                        pixelMap[pixel.x+1][pixel.y].dir = "right"
                    }
                }
            }
        }
        if (pixel.dir === "up") {
            if (isEmpty(pixel.x,pixel.y+1)) {
                changePixel(pixel,"loose_hair"); 
            }
            else if (!isEmpty(pixel.x,pixel.y+1,true)) {
                if (elements[pixelMap[pixel.x][pixel.y+1].element].isHair != true) {
                    changePixel(pixel,"loose_hair"); 
                }
            }
        }
        else if (pixel.dir === "down") {
            if (isEmpty(pixel.x,pixel.y-1)) {
                changePixel(pixel,"loose_hair"); 
            }
            else if (!isEmpty(pixel.x,pixel.y-1,true)) {
                if (elements[pixelMap[pixel.x][pixel.y-1].element].isHair != true) {
                    changePixel(pixel,"loose_hair"); 
                }
            }
        }
        else if (pixel.dir === "left") {
            if (isEmpty(pixel.x+1,pixel.y)) {
                changePixel(pixel,"loose_hair"); 
            }
            else if (!isEmpty(pixel.x+1,pixel.y,true)) {
                if (elements[pixelMap[pixel.x+1][pixel.y].element].isHair != true) {
                    changePixel(pixel,"loose_hair"); 
                }
            }
        }
        else if (pixel.dir === "right") {
            if (isEmpty(pixel.x-1,pixel.y)) {
                changePixel(pixel,"loose_hair"); 
            }
            else if (!isEmpty(pixel.x-1,pixel.y,true)) {
                if (elements[pixelMap[pixel.x-1][pixel.y].element].isHair != true) {
                    changePixel(pixel,"loose_hair"); 
                }
            }
        }
        else if (!pixel.dir && pixel.age > 10) {
            changePixel(pixel,"loose_hair"); 
        }
        if (pixel.temp < 5 && Math.random() < 0.01) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    pixel.temp += 10;
                    break;
                }
            }
        }
        if (pixel.temp < 10 && Math.random() < 0.1) {
            pixel.temp += 1;
        }
        doDefaults(pixel);
        pixel.age++
    },
    properties: {
        age: 0,
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempLow: -25,
    stateLow: "loose_hair",
    tempHigh: 123,
    stateHigh: "loose_hair",
    burn:15,
    burnTime: 400,
    burnInto:"loose_hair",
    breakInto:"loose_hair",
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:null, chance:0.0005 },
        "radiation": { elem1:["ash","dust"], chance:0.2 },
	},
    isHair: true,
    movable: false,
    hidden: true,
}

elements.hairy_skin = {
	color: "#ECDCC3",
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "dust",
    roomDie: "meat",
    coldDie: "dust",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if (Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) && Math.random() < 0.01) {
                if (isEmpty(pixel.x,pixel.y-1)) {
                    createPixel("attached_hair",pixel.x,pixel.y-1)
                    pixelMap[pixel.x][pixel.y-1].dir = "up"
                }
                if (isEmpty(pixel.x,pixel.y+1)) {
                    createPixel("attached_hair",pixel.x,pixel.y+1)
                    pixelMap[pixel.x][pixel.y+1].dir = "down"
                }

                if (isEmpty(pixel.x-1,pixel.y)) {
                    createPixel("attached_hair",pixel.x-1,pixel.y)
                    pixelMap[pixel.x-1][pixel.y].dir = "left"
                }

                if (isEmpty(pixel.x+1,pixel.y)) {
                    createPixel("attached_hair",pixel.x+1,pixel.y)
                    pixelMap[pixel.x+1][pixel.y].dir = "right"
                }

        }
        if ((pixel.temp > 40 || pixel.temp < 10) && Math.random() < 0.005) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    if (pixel.temp > 40) {
                        pixel.temp -= 20;
                        createPixel("salt_water",x,y);
                        break;
                    }
                    pixel.temp += 20;
                    break;
                }
            }
        }
        if (pixel.temp < 36.5 && Math.random() < 0.1) {
            pixel.temp += 1;
        }
        else if (pixel.temp > 37 && Math.random() < 0.1) {
            pixel.temp -= 1;
        }
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 375,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat","dust","dust","dust","dust"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","meat","rotten_meat","cooked_meat","flesh"], chance:0.2 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isHair: true,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.hair_dermis = {
	color: "#C89985",
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if (Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) && Math.random() < 0.005) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    if (Math.random() > 0.05) {
                        createPixel("hairy_skin",x,y);
                        pixelMap[x][y].nutrition = (Math.round(pixel.nutrition / 2))
                        pixelMap[x][y].oxygen = (Math.round(pixel.oxygen / 2))
                        pixel.nutrition = (Math.round(pixel.nutrition / 2))
                        pixel.oxygen = (Math.round(pixel.oxygen / 2))
                    }
                    else {
                        createPixel("epidermis",x,y);
                        pixelMap[x][y].nutrition = (Math.round(pixel.nutrition / 2))
                        pixelMap[x][y].oxygen = (Math.round(pixel.oxygen / 2))
                        pixel.nutrition = (Math.round(pixel.nutrition / 2))
                        pixel.oxygen = (Math.round(pixel.oxygen / 2))
                    }
                }
            }
        }
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 360,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","meat","rotten_meat","cooked_meat","flesh"], chance:0.2 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isHair: true,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.scales = {
	color: "#6b839a",
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: false,
    normDie: "dust",
    otherDie: "calcium",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if (pixel.temp > 40 && Math.random() < 0.1) {
            pixel.temp -= 1;
        }
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 210,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.000075 },
        "radiation": { elem1:["calcium","calcium","ash","meat","rotten_meat","cooked_meat","skin","epidermis"], chance:0.1 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.scale_dermis = {
	color: "#CFA08B",
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if (Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) && Math.random() < 0.005) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    createPixel("scales",x,y);
                        pixelMap[x][y].nutrition = (Math.round(pixel.nutrition / 2))
                        pixelMap[x][y].oxygen = (Math.round(pixel.oxygen / 2))
                        pixel.nutrition = (Math.round(pixel.nutrition / 2))
                        pixel.oxygen = (Math.round(pixel.oxygen / 2))
                }
            }
        }
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","meat","rotten_meat","cooked_meat","flesh"], chance:0.2 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.bug_dermis = {
	color: "#C6AD5B",
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if (Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) && Math.random() < 0.005) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    createPixel("exoskeleton",x,y);
                        pixelMap[x][y].nutrition = (Math.round(pixel.nutrition / 2))
                        pixelMap[x][y].oxygen = (Math.round(pixel.oxygen / 2))
                        pixel.nutrition = (Math.round(pixel.nutrition / 2))
                        pixel.oxygen = (Math.round(pixel.oxygen / 2))
                }
            }
        }
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","meat","rotten_meat","cooked_meat","flesh"], chance:0.2 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.amphib_dermis = {
	color: "#9DAB6A",
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if (Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) && Math.random() < 0.005) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    createPixel("amphib_skin",x,y);
                    pixelMap[x][y].nutrition = (Math.round(pixel.nutrition - ((pixel.nutrition / 4) * 3)))
                    pixelMap[x][y].oxygen = (Math.round(pixel.oxygen - ((pixel.oxygen / 4) * 3)))
                    pixel.nutrition = (Math.round(pixel.nutrition - (pixel.nutrition / 4)))
                    pixel.oxygen = (Math.round(pixel.oxygen - (pixel.oxygen / 4)))
                }
            }
        }
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat","meat","slime","slime"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","slime","meat","rotten_meat","cooked_meat","flesh"], chance:0.2 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.acidic_flesh = {
	color: ["#946231","#976E30"],
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "acid",
    coldDie: "acid",
    heatDie: "acid",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioNorm(pixel);
        doDefaults(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: ["acid_gas","cooked_meat","cooked_meat","cooked_meat"],
    tempLow: -25,
    stateLow: ["frozen_meat","acid","acid"],
    burn: 5,
    burnTime: 350,
    burnInto: ["acid_gas","cooked_meat","cooked_meat"],
    breakInto: ["acid","acid","meat"],
	reactions: {
        "cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","acid","fat","meat","rotten_meat","cooked_meat"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.slimey_flesh = {
	color: ["#8EA714","#96B013"],
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "slime",
    coldDie: "slime",
    heatDie: "slime",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioNorm(pixel);
        doDefaults(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: ["slime","cooked_meat","cooked_meat","cooked_meat"],
    tempLow: -25,
    stateLow: ["frozen_meat","slime_ice","slime_ice"],
    burn: 5,
    burnTime: 350,
    burnInto: ["slime","cooked_meat","cooked_meat"],
    breakInto: ["slime","slime","meat"],
	reactions: {
        "cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","slime","slime","meat","rotten_meat","cooked_meat"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.cloak_flesh = {
	color: ["#879720","#8C9D1F"],
    grain: 0,
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].movable) {
                if (pixel.color != hitPixel.color) {
                    pixel.color = hitPixel.color
                }
            }
            if (elements[hitPixel.element].isBio) {
                if (pixel.color != hitPixel.color) {
                    hitPixel.color = pixel.color
                }
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].movable) {
                if (pixel.color != hitPixel.color) {
                    pixel.color = hitPixel.color
                }
            }
            if (elements[hitPixel.element].isBio) {
                if (pixel.color != hitPixel.color) {
                    hitPixel.color = pixel.color
                }
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].movable) {
                if (pixel.color != hitPixel.color) {
                    pixel.color = hitPixel.color
                }
            }
            if (elements[hitPixel.element].isBio) {
                if (pixel.color != hitPixel.color) {
                    hitPixel.color = pixel.color
                }
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].movable) {
                if (pixel.color != hitPixel.color) {
                    pixel.color = hitPixel.color
                }
            }
            if (elements[hitPixel.element].isBio) {
                if (pixel.color != hitPixel.color) {
                    hitPixel.color = pixel.color
                }
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 4,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","meat","rotten_meat","cooked_meat","flesh"], chance:0.2 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.adipose = {
	color: ["#C3A375","#B9945A"],
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 10,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "grease",
    coldDie: "fat",
    heatDie: "grease",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .03,
    tempHigh: 200,
    stateHigh: ["fat","fat","fat","cooked_meat"],
    tempLow: -25,
    stateLow: ["fat","frozen_meat"],
    burn: 10,
    burnTime: 300,
    burnInto: ["fat","fat","fat","cooked_meat"],
    breakInto: ["fat","meat"],
	reactions: {
        "cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","blood","fat","fat","fat","fat","fat","meat","rotten_meat","cooked_meat"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1005,
    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.acid_vessel = {
    color: "#BF6B0E",
    behavior: [
        "XX|SW:acid_vessel%1|XX",
        "SW:acid_vessel%1|XX|SW:acid_vessel%1",
        "XX|SW:acid_vessel%1|XX",
    ],
    bleed: "acid",
    nutrTrans: 30,
    oxygTrans: 35,
    isMultiDie: false,
    normDie: "acid",
    otherDie: "acid",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioBlood(pixel);
    },
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    tempHigh: 175,
    stateHigh: ["acid_gas","acid_gas","acid_gas","cooked_meat","cooked_meat"],
    tempLow: -50,
    stateLow: "frozen_meat",
    burn: 20,
    burnTime: 160,
    burnInto: ["acid_gas","acid_gas","acid_gas","acid_gas","cooked_meat"],
    breakInto: "acid",
    category: "biology",
    state: "solid",
    density: 1250,
    conduct: .001,
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
}

elements.heart = {
    color: ["#98002e","#532e63","#6f1200","#551900"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    nutrTrans: 40,
    oxygTrans: 45,
    isMultiDie: true,
    normDie: "blood",
    roomDie: "meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].isBlood === true && Math.random() > 0.5) {
                hitPixel.heartAttached = true
            }
        }
        else if (isEmpty(pixel.x, pixel.y-1) && Math.random() > 0.75) {
            if (Math.random() > 0.95) {
                createPixel("blood",pixel.x,pixel.y-1)
            }
            pixel.oxygen -= 50
            pixel.nutrition -= 50
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].isBlood === true && Math.random() > 0.5) {
                hitPixel.heartAttached = true
            }
        }
        else if (isEmpty(pixel.x, pixel.y+1) && Math.random() > 0.75) {
            if (Math.random() > 0.95) {
                createPixel("blood",pixel.x,pixel.y+1)
            }
            pixel.oxygen -= 50
            pixel.nutrition -= 50
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].isBlood === true && Math.random() > 0.5) {
                hitPixel.heartAttached = true
            }
        }
        else if (isEmpty(pixel.x-1, pixel.y) && Math.random() > 0.75) {
            if (Math.random() > 0.95) {
                createPixel("blood",pixel.x-1,pixel.y)
            }
            pixel.oxygen -= 50
            pixel.nutrition -= 50
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].isBlood === true && Math.random() > 0.5) {
                hitPixel.heartAttached = true
            }
        }
        else if (isEmpty(pixel.x+1, pixel.y) && Math.random() > 0.75) {
            if (Math.random() > 0.95) {
                createPixel("blood",pixel.x+1,pixel.y)
            }
            pixel.oxygen -= 50
            pixel.nutrition -= 50
        }
    },
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,
    },
    tempHigh: 175,
    stateHigh: "cooked_heart",
    tempLow: -50,
    stateLow: "frozen_meat",
    burn: 20,
    burnTime: 160,
    burnInto: "meat",
    breakInto: ["meat","blood","blood",],
    category: "biology",
    state: "solid",
    density: 1250,
    conduct: .001,
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
}

elements.kidney = {
    color: ["#AB1354","#89212E","#74272E"],
    behavior: behaviors.WALL,
    nutrTrans: 40,
    oxygTrans: 45,
    isMultiDie: true,
    normDie: "urine",
    roomDie: "meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].isBlood === true && Math.random() < 0.025 && (hitPixel.speed < 1 || Math.random() < 0.00025) && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                hitPixel.speed++
                pixel.pee += 1
            }
            if (hitPixel.pee < pixel.pee && elements[hitPixel.element].isKidney === true) {
                hitPixel.pee += 1
                pixel.pee -= 1
            }
        }
        else if (pixel.pee > 4 && Math.random() > 0.95) {
            if (Math.random() > 0.8) {
                createPixel("urine",pixel.x,pixel.y-1)
            }
            pixel.pee -= 5
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].isBlood === true && Math.random() < 0.025 && (hitPixel.speed < 1 || Math.random() < 0.00025) && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                hitPixel.speed++
                pixel.pee += 1
            }
            if (hitPixel.pee < pixel.pee && elements[hitPixel.element].isKidney === true) {
                hitPixel.pee += 1
                pixel.pee -= 1
            }
        }
        else if (pixel.pee > 4 && Math.random() > 0.95) {
            if (Math.random() > 0.8) {
                createPixel("urine",pixel.x,pixel.y+1)
            }
            pixel.pee -= 5
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].isBlood === true && Math.random() < 0.025 && (hitPixel.speed < 1 || Math.random() < 0.00025) && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                hitPixel.speed++
                pixel.pee += 1
            }
            if (hitPixel.pee < pixel.pee && elements[hitPixel.element].isKidney === true) {
                hitPixel.pee += 1
                pixel.pee -= 1
            }
        }
        else if (pixel.pee > 4 && Math.random() > 0.95) {
            if (Math.random() > 0.8) {
                createPixel("urine",pixel.x-1,pixel.y)
            }
            pixel.pee -= 5
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].isBlood === true && Math.random() < 0.025 && (hitPixel.speed < 1 || Math.random() < 0.00025) && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                hitPixel.speed++
                pixel.pee += 1
            }
            if (hitPixel.pee < pixel.pee && elements[hitPixel.element].isKidney === true) {
                hitPixel.pee += 1
                pixel.pee -= 1
            }
        }
        else if (pixel.pee > 4 && Math.random() > 0.95) {
            if (Math.random() > 0.8) {
                createPixel("urine",pixel.x+1,pixel.y)
            }
            pixel.pee -= 5
        }
    },
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,
        pee: 0,
    },
    renderer: function(pixel,ctx) {
        drawDefault(ctx,pixel);
        if (!viewInfo[view].colorEffects) { return }
        if (pixel.pee > 0) {
            drawSquare(ctx,"#E9BE3C",pixel.x,pixel.y,undefined,Math.min(0.8,pixel.pee/10));
        }
        if (!viewInfo[view].colorEffects || !pixel.char || pixel.char < 11) { return }
        var max = 25;
        var ratio = ((pixel.char/max*100)|0)/100;
        if (ratio < 0.5) { return }
        if (ratio > 1) { ratio = 1 }
        drawSquare(ctx,"#000000",pixel.x,pixel.y,undefined,Math.min(0.8,(ratio-0.5)*0.8));
    },
    tempHigh: 175,
    stateHigh: "meat",
    tempLow: -50,
    stateLow: "frozen_meat",
    burn: 20,
    burnTime: 160,
    burnInto: "meat",
    breakInto: ["meat","urine","blood"],
    category: "biology",
    state: "solid",
    density: 1250,
    conduct: .001,
    movable: false,
    isBio: true,
    isKidney: true,
}

elements.liver = {
    color: ["#6c2e1f","#7B2827","#702B27"],
    behavior: behaviors.WALL,
    nutrTrans: 40,
    oxygTrans: 45,
    isMultiDie: true,
    normDie: "rotten_meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioNorm(pixel);
        if (pixel.speed < -1 && Math.random() < (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
            pixel.speed += 1
        }
    },
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,
    },
    tempHigh: 175,
    stateHigh: "meat",
    tempLow: -50,
    stateLow: "frozen_meat",
    burn: 20,
    burnTime: 160,
    burnInto: "meat",
    breakInto: ["meat","rotten_meat","blood",],
    category: "biology",
    state: "solid",
    density: 1250,
    conduct: .001,
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
}

elements.blood_vessel = {
    color: "#c72114",
    behavior: [
        "SW:blood_vessel%1|SW:blood_vessel%5|SW:blood_vessel%1",
        "SW:blood_vessel%5|XX|SW:blood_vessel%5",
        "SW:blood_vessel%1|SW:blood_vessel%5|SW:blood_vessel%1",
    ],
    ageRate: 0.975,
    nutrTrans: 30,
    oxygTrans: 35,
    isMultiDie: true,
    bleed: "blood",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioBlood(pixel);
    },
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,
        heartAttached: false,
    },
    reactions: {
        "dirt": { elem2: "infected_vessel", chance:0.005 },
        "dust": { elem1: null, elem2: "infected_vessel", chance:0.005 },
        "ash": { elem1: null, elem2: "infected_vessel", chance:0.005 },
        "mud": { elem2: "infected_vessel", chance:0.005 },
        "sand": { elem2: "infected_vessel", chance:0.005 },
        "gravel": { elem2: "infected_vessel", chance:0.005 },
        "brick_rubble": { elem2: "infected_vessel", chance:0.005 },
        "glitter": { elem1: null, elem2: "infected_vessel", chance:0.001 },
        "sulfur": { elem2: "infected_vessel", chance:0.005 },
        "rust": { elem1: ["meat","infected_vessel","infected_vessel","infected_vessel","blood","blood"], chance:0.005 },
        "mercury": { elem2: null, elem1: "infected_vessel", func:function(pixel1,pixel2){ if (pixel1.poisoned != true) {
            pixel1.poisoned = true;
        } }, chance:0.005 },
        "vaccine": { elem2: null, func:function(pixel1,pixel2){ if (pixel1.immune != true) {
            pixel1.immune = true;
        } }, chance:0.01 },
        "antibody": { elem2: null, func:function(pixel1,pixel2){ if (pixel1.immune != true) {
            pixel1.immune = true;
        } }, chance:0.0025 },
        "antidote": { elem2: null, func:function(pixel1,pixel2){ if (pixel1.poisonImmune != true) {
            pixel1.poisonImmune = true;
        } }, chance:0.02 },
        "poison": { elem2: null, func:function(pixel1,pixel2){ if (pixel1.poisoned != true) {
            pixel1.poisoned = true;
        } }, chance:0.02 },
        "cyanide": { elem2: null, func:function(pixel1,pixel2){ if (pixel1.poisoned != true) {
            pixel1.poisoned = true;
        } }, chance:0.01 },
    },
    tempHigh: 175,
    stateHigh: ["meat","blood","blood"],
    tempLow: -50,
    stateLow: ["frozen_meat","blood","blood","blood"],
    burn: 20,
    burnTime: 160,
    burnInto: ["meat","blood","blood","blood","blood","blood","blood","steam"],
    breakInto: ["meat","blood","blood","blood","blood","blood","blood","blood"],
    category: "biology",
    state: "solid",
    density: 1250,
    conduct: .001,
    movable: false,
    extinguish: true,
    isBio: true,
    isBlood: true,
}

elements.infected_vessel = {
    color: "#BF0347",
    behavior: [
        "XX|SW:blood_vessel%1 AND CH:blood_vessel,white_blood_cell>infected_vessel%1|XX",
        "SW:blood_vessel%1 AND CH:blood_vessel,white_blood_cell>infected_vessel%1|XX|SW:blood_vessel%1 AND CH:blood_vessel,white_blood_cell>infected_vessel%1",
        "XX|SW:blood_vessel%2 AND CH:blood_vessel,white_blood_cell>infected_vessel%1|XX",
    ],
    ageRate: 0.5,
    nutrTrans: 10,
    oxygTrans: 15,
    isMultiDie: true,
    bleed: "infection",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioBlood(pixel);
        if (Math.random() > 0.995 && pixel.sick != true) {
            pixel.sick = true
        }
        if (Math.random() > 0.95 && pixel.immune === true) {
            pixel.element = "blood_vessel"
            pixel.color = elements.blood_vessel.color
        }
    },
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,
        heartAttached: false,
    },
    reactions: {
		"bless": { elem1:"blood_vessel"  },
	},
    tempHigh: 175,
    stateHigh: ["meat","infection","infection"],
    tempLow: -50,
    stateLow: ["frozen_meat","infection","infection"],
    burn: 20,
    burnTime: 160,
    burnInto: ["meat","infection","infection"],
    breakInto: "infection",
    category: "biology",
    state: "solid",
    density: 1250,
    conduct: .001,
    movable: false,
    extinguish: true,
    isBio: true,
    isBlood: true,
}

elements.white_blood_cell = {
    color: "#F5D7D4",
    behavior: [
        "XX|SW:blood_vessel,white_blood_cell%5|XX",
        "SW:blood_vessel,white_blood_cell%5|XX|SW:blood_vessel,white_blood_cell%5",
        "XX|SW:blood_vessel,white_blood_cell%5|XX",
    ],
    ageRate: 0.995,
    nutrTrans: 35,
    oxygTrans: 40,
    isMultiDie: true,
    bleed: "blood",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioBlood(pixel);
        doDefaults(pixel);
        if (Math.random() > 0.995 && Math.random() < (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) || Math.random() > 0.9995) {
            pixel.element = "blood_vessel"
            pixel.color = elements.blood_vessel.color
        }
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].isBlood === true && Math.random() > 0.25) {
                if (elements[hitPixel.element].id === elements.infected_vessel.id) {
                    hitPixel.element = "blood_vessel"
                    hitPixel.color = elements.blood_vessel.color
                }
                if (hitPixel.sick === true && (Math.random() > 0.95 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) || Math.random() > 0.995)) {
                    hitPixel.sick = false
                    if (Math.random() > 0.995 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                        pixel.immune = true
                    }
                }
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].isBlood === true && Math.random() > 0.25) {
                if (elements[hitPixel.element].id === elements.infected_vessel.id) {
                    hitPixel.element = "blood_vessel"
                    hitPixel.color = elements.blood_vessel.color
                }
            }
            if (hitPixel.sick === true && (Math.random() > 0.95 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) || Math.random() > 0.995)) {
                hitPixel.sick = false
                if (Math.random() > 0.995 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                    pixel.immune = true
                }
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].isBlood === true && Math.random() > 0.25) {
                if (elements[hitPixel.element].id === elements.infected_vessel.id) {
                    hitPixel.element = "blood_vessel"
                    hitPixel.color = elements.blood_vessel.color
                }
            }
            if (hitPixel.sick === true && (Math.random() > 0.95 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) || Math.random() > 0.995)) {
                hitPixel.sick = false
                if (Math.random() > 0.995 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                    pixel.immune = true
                }
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].isBlood === true && Math.random() > 0.25) {
                if (elements[hitPixel.element].id === elements.infected_vessel.id) {
                    hitPixel.element = "blood_vessel"
                    hitPixel.color = elements.blood_vessel.color
                }
            }
            if (hitPixel.sick === true && (Math.random() > 0.95 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) || Math.random() > 0.995)) {
                hitPixel.sick = false
                if (Math.random() > 0.995 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                    pixel.immune = true
                }
            }
        }
    },
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,
        heartAttached: false,
    },
    reactions: {
            "rust": { elem1: ["meat","infected_vessel","infected_vessel","infected_vessel","blood","blood"], chance:0.005 },
            "mercury": { elem2: null, elem1: "infected_vessel", func:function(pixel1,pixel2){ if (pixel1.poisoned != true) {
                pixel1.poisoned = true;
            } }, chance:0.005 },
            "vaccine": { elem2: null, func:function(pixel1,pixel2){ if (pixel1.immune != true) {
                pixel1.immune = true;
            } }, chance:0.01 },
            "antibody": { elem2: null, func:function(pixel1,pixel2){ if (pixel1.immune != true) {
                pixel1.immune = true;
            } }, chance:0.0025 },
            "antidote": { elem2: null, func:function(pixel1,pixel2){ if (pixel1.poisonImmune != true) {
                pixel1.poisonImmune = true;
            } }, chance:0.02 },
            "poison": { elem2: null, func:function(pixel1,pixel2){ if (pixel1.poisoned != true) {
                pixel1.poisoned = true;
            } }, chance:0.02 },
            "cyanide": { elem2: null, func:function(pixel1,pixel2){ if (pixel1.poisoned != true) {
                pixel1.poisoned = true;
            } }, chance:0.01 },
            "blood": { elem2:"blood_vessel", chance:0.10  },
	},
    tempHigh: 175,
    stateHigh: ["meat","blood","blood","blood"],
    tempLow: -50,
    stateLow: "frozen_meat",
    burn: 20,
    burnTime: 160,
    burnInto: ["meat","blood","blood","blood"],
    breakInto: "blood",
    category: "biology",
    state: "solid",
    density: 1250,
    conduct: .001,
    movable: false,
    extinguish: true,
    isBio: true,
    isBlood: true,
}

elements.eye = {
	color: "#451800",
	category: "biology",
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: false,
    normDie: "meat",
    otherDie: "salt_water",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doHeat(pixel);
		doBurning(pixel);
		doElectricity(pixel);
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            doElectricity(hitPixel);
            if (elements[hitPixel.element].id === elements.light.id) {
                pixel.saw = true
            }
            else if (pixel.saw === true && elements[hitPixel.element].id === elements.nerve.id && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                if (!hitPixel.charge) {
                    hitPixel.charge = 0.1
                }
                else if (hitPixel.charge) {
                    hitPixel.charge += 0.1
                }
                pixel.saw = false
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            doElectricity(hitPixel);
            if (elements[hitPixel.element].id === elements.light.id && Math.random() > 0.5) {
                pixel.saw = true
            }
            else if (pixel.saw === true && elements[hitPixel.element].id === elements.nerve.id && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                if (!hitPixel.charge) {
                    hitPixel.charge = 0.1
                }
                else if (hitPixel.charge) {
                    hitPixel.charge += 0.1
                }
                pixel.saw = false
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            doElectricity(hitPixel);
            if (elements[hitPixel.element].id === elements.light.id && Math.random() > 0.5) {
                pixel.saw = true
            }
            else if (pixel.saw === true && elements[hitPixel.element].id === elements.nerve.id && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                if (!hitPixel.charge) {
                    hitPixel.charge = 0.1
                }
                else if (hitPixel.charge) {
                    hitPixel.charge += 0.1
                }
                pixel.saw = false
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            doElectricity(hitPixel);
            if (elements[hitPixel.element].id === elements.light.id && Math.random() > 0.5) {
                pixel.saw = true
            }
            else if (pixel.saw === true && elements[hitPixel.element].id === elements.nerve.id && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                if (!hitPixel.charge) {
                    hitPixel.charge = 0.1
                }
                else if (hitPixel.charge) {
                    hitPixel.charge += 0.1
                }
                pixel.saw = false
            }
        }
        if (pixel.saw === true && Math.random() > 0.8) {
            pixel.saw = false
        }
    },
    density: 2710,
    state: "solid",
    tempHigh: 200,
    stateHigh: ["cooked_meat","salt_water","blood"],
    tempLow: -25,
    stateLow: ["salt_water","cerebrospinal_fluid","salt_water","blood","frozen_meat"],
    burn: 5,
    burnTime: 350,
    conduct: .001,
    burnInto: ["cooked_meat","salt_water","blood"],
    breakInto: ["blood","blood","blood","blood","cerebrospinal_fluid","cerebrospinal_fluid","salt_water","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","salt","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        saw: false,
    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.olfactory_bulb = {
	color: "#8A7650",
	category: "biology",
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: false,
    normDie: "meat",
    otherDie: "rotten_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doHeat(pixel);
		doBurning(pixel);
		doElectricity(pixel);
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            doElectricity(hitPixel);
            if ((elements[hitPixel.element].id === elements.smoke.id || elements[hitPixel.element].id === elements.stench.id || elements[hitPixel.element].id === elements.fragrance.id || elements[hitPixel.element].id === elements.methane.id || elements[hitPixel.element].id === elements.ammonia.id) && Math.random() > 0.5) {
                pixel.smell = true
                deletePixel(hitPixel.x,hitPixel.y)
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                pixel.smell = true
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 50
                pixel.nutrition -= 50
            }
            else if (pixel.smell === true && elements[hitPixel.element].id === elements.nerve.id && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                if (!hitPixel.charge) {
                    hitPixel.charge = 0.1
                }
                else if (hitPixel.charge) {
                    hitPixel.charge += 0.1
                }
                pixel.smell = false
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            doElectricity(hitPixel);
            if ((elements[hitPixel.element].id === elements.smoke.id || elements[hitPixel.element].id === elements.stench.id || elements[hitPixel.element].id === elements.fragrance.id || elements[hitPixel.element].id === elements.methane.id || elements[hitPixel.element].id === elements.ammonia.id) && Math.random() > 0.5) {
                pixel.smell = true
                deletePixel(hitPixel.x,hitPixel.y)
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                pixel.smell = true
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 50
                pixel.nutrition -= 50
            }
            else if (pixel.smell === true && elements[hitPixel.element].id === elements.nerve.id && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                if (!hitPixel.charge) {
                    hitPixel.charge = 0.1
                }
                else if (hitPixel.charge) {
                    hitPixel.charge += 0.1
                }
                pixel.smell = false
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            doElectricity(hitPixel);
            if ((elements[hitPixel.element].id === elements.smoke.id || elements[hitPixel.element].id === elements.stench.id || elements[hitPixel.element].id === elements.fragrance.id || elements[hitPixel.element].id === elements.methane.id || elements[hitPixel.element].id === elements.ammonia.id) && Math.random() > 0.5) {
                pixel.smell = true
                deletePixel(hitPixel.x,hitPixel.y)
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                pixel.smell = true
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 50
                pixel.nutrition -= 50
            }
            else if (pixel.smell === true && elements[hitPixel.element].id === elements.nerve.id && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                if (!hitPixel.charge) {
                    hitPixel.charge = 0.1
                }
                else if (hitPixel.charge) {
                    hitPixel.charge += 0.1
                }
                pixel.smell = false
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            doElectricity(hitPixel);
            if ((elements[hitPixel.element].id === elements.smoke.id || elements[hitPixel.element].id === elements.stench.id || elements[hitPixel.element].id === elements.fragrance.id || elements[hitPixel.element].id === elements.methane.id || elements[hitPixel.element].id === elements.ammonia.id) && Math.random() > 0.5) {
                pixel.smell = true
                deletePixel(hitPixel.x,hitPixel.y)
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                pixel.smell = true
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 50
                pixel.nutrition -= 50
            }
            else if (pixel.smell === true && elements[hitPixel.element].id === elements.nerve.id && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                if (!hitPixel.charge) {
                    hitPixel.charge = 0.1
                }
                else if (hitPixel.charge) {
                    hitPixel.charge += 0.1
                }
                pixel.smell = false
            }
        }
        if (pixel.smell === true && Math.random() > 0.8) {
            pixel.smell = false
        }
    },
    density: 2710,
    state: "solid",
    tempHigh: 200,
    stateHigh: ["cooked_meat","slime","blood"],
    tempLow: -25,
    stateLow: ["slime","slime","blood","frozen_meat"],
    burn: 5,
    burnTime: 350,
    conduct: .001,
    burnInto: ["cooked_meat","slime","blood"],
    breakInto: ["blood","blood","meat","meat","slime","slime","slime","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","slime","ash","slime","slime","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        smell: false,
    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.taste_bud = {
	color: "#DB6767",
	category: "biology",
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: false,
    normDie: "meat",
    otherDie: "rotten_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doHeat(pixel);
		doBurning(pixel);
		doElectricity(pixel);
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            doElectricity(hitPixel);
            if ((
                elements[hitPixel.element].id === elements.sugar.id || elements[hitPixel.element].id === elements.salt.id || elements[hitPixel.element].id === elements.grease.id || elements[hitPixel.element].id === elements.cooked_meat.id || elements[hitPixel.element].id === elements.chocolate.id || elements[hitPixel.element].id === elements.chocolate_powder.id || elements[hitPixel.element].id === elements.cheese.id || elements[hitPixel.element].id === elements.cheese_powder.id || elements[hitPixel.element].id === elements.pickle.id || elements[hitPixel.element].id === elements.herb.id || elements[hitPixel.element].id === elements.juice.id || elements[hitPixel.element].id === elements.gingerbread.id || elements[hitPixel.element].id === elements.ketchup.id || elements[hitPixel.element].id === elements.mayo.id || elements[hitPixel.element].id === elements.sauce.id || elements[hitPixel.element].id === elements.chocolate_milk.id || elements[hitPixel.element].id === elements.grape.id  || elements[hitPixel.element].id === elements.pilk.id || elements[hitPixel.element].id === elements.fruit_milk.id || elements[hitPixel.element].id === elements.nut_milk.id || elements[hitPixel.element].id === elements.soda.id || elements[hitPixel.element].id === elements.sugar_water.id
            ) && Math.random() > 0.5 && hitPixel.tasted != true) {
                pixel.tasted = true
                if (Math.random() > 0.5) {
                hitPixel.tasted = false
                }
            }
            else if ((elements[hitPixel.element].id === elements.alcohol.id || elements[hitPixel.element].id === elements.rotten_cheese.id || elements[hitPixel.element].id === elements.rotten_meat.id || elements[hitPixel.element].id === elements.pool_water.id || elements[hitPixel.element].id === elements.poison.id || elements[hitPixel.element].id === elements.bleach.id || elements[hitPixel.element].id === elements.cyanide.id || elements[hitPixel.element].id === elements.infection.id) && Math.random() > 0.5) {
                pixel.tasted = true
                if (Math.random() > 0.5) {
                    hitPixel.tasted = false
                }
                pixel.oxygen--
                pixel.nutrition--
            }
            else if (pixel.tasted === true && elements[hitPixel.element].id === elements.nerve.id && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                if (!hitPixel.charge) {
                    hitPixel.charge = 0.1
                }
                else if (hitPixel.charge) {
                    hitPixel.charge += 0.1
                }
                pixel.tasted = false
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            doElectricity(hitPixel);
            if ((
                elements[hitPixel.element].id === elements.sugar.id || elements[hitPixel.element].id === elements.salt.id || elements[hitPixel.element].id === elements.grease.id || elements[hitPixel.element].id === elements.cooked_meat.id || elements[hitPixel.element].id === elements.chocolate.id || elements[hitPixel.element].id === elements.chocolate_powder.id || elements[hitPixel.element].id === elements.cheese.id || elements[hitPixel.element].id === elements.cheese_powder.id || elements[hitPixel.element].id === elements.pickle.id || elements[hitPixel.element].id === elements.herb.id || elements[hitPixel.element].id === elements.juice.id || elements[hitPixel.element].id === elements.gingerbread.id || elements[hitPixel.element].id === elements.ketchup.id || elements[hitPixel.element].id === elements.mayo.id || elements[hitPixel.element].id === elements.sauce.id || elements[hitPixel.element].id === elements.chocolate_milk.id || elements[hitPixel.element].id === elements.grape.id  || elements[hitPixel.element].id === elements.pilk.id || elements[hitPixel.element].id === elements.fruit_milk.id || elements[hitPixel.element].id === elements.nut_milk.id || elements[hitPixel.element].id === elements.soda.id || elements[hitPixel.element].id === elements.sugar_water.id
            ) && Math.random() > 0.5 && hitPixel.tasted != true) {
                pixel.tasted = true
                if (Math.random() > 0.5) {
                hitPixel.tasted = false
                }
            }
            else if ((elements[hitPixel.element].id === elements.alcohol.id || elements[hitPixel.element].id === elements.rotten_cheese.id || elements[hitPixel.element].id === elements.rotten_meat.id || elements[hitPixel.element].id === elements.pool_water.id || elements[hitPixel.element].id === elements.poison.id || elements[hitPixel.element].id === elements.bleach.id || elements[hitPixel.element].id === elements.cyanide.id || elements[hitPixel.element].id === elements.infection.id) && Math.random() > 0.5) {
                pixel.tasted = true
                if (Math.random() > 0.5) {
                    hitPixel.tasted = false
                }
                pixel.oxygen--
                pixel.nutrition--
            }
            else if (pixel.tasted === true && elements[hitPixel.element].id === elements.nerve.id && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                if (!hitPixel.charge) {
                    hitPixel.charge = 0.1
                }
                else if (hitPixel.charge) {
                    hitPixel.charge += 0.1
                }
                pixel.tasted = false
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            doElectricity(hitPixel);
            if ((
                elements[hitPixel.element].id === elements.sugar.id || elements[hitPixel.element].id === elements.salt.id || elements[hitPixel.element].id === elements.grease.id || elements[hitPixel.element].id === elements.cooked_meat.id || elements[hitPixel.element].id === elements.chocolate.id || elements[hitPixel.element].id === elements.chocolate_powder.id || elements[hitPixel.element].id === elements.cheese.id || elements[hitPixel.element].id === elements.cheese_powder.id || elements[hitPixel.element].id === elements.pickle.id || elements[hitPixel.element].id === elements.herb.id || elements[hitPixel.element].id === elements.juice.id || elements[hitPixel.element].id === elements.gingerbread.id || elements[hitPixel.element].id === elements.ketchup.id || elements[hitPixel.element].id === elements.mayo.id || elements[hitPixel.element].id === elements.sauce.id || elements[hitPixel.element].id === elements.chocolate_milk.id || elements[hitPixel.element].id === elements.grape.id  || elements[hitPixel.element].id === elements.pilk.id || elements[hitPixel.element].id === elements.fruit_milk.id || elements[hitPixel.element].id === elements.nut_milk.id || elements[hitPixel.element].id === elements.soda.id || elements[hitPixel.element].id === elements.sugar_water.id
            ) && Math.random() > 0.5 && hitPixel.tasted != true) {
                pixel.tasted = true
                if (Math.random() > 0.5) {
                hitPixel.tasted = false
                }
            }
            else if ((elements[hitPixel.element].id === elements.alcohol.id || elements[hitPixel.element].id === elements.rotten_cheese.id || elements[hitPixel.element].id === elements.rotten_meat.id || elements[hitPixel.element].id === elements.pool_water.id || elements[hitPixel.element].id === elements.poison.id || elements[hitPixel.element].id === elements.bleach.id || elements[hitPixel.element].id === elements.cyanide.id || elements[hitPixel.element].id === elements.infection.id) && Math.random() > 0.5) {
                pixel.tasted = true
                if (Math.random() > 0.5) {
                    hitPixel.tasted = false
                }
                pixel.oxygen--
                pixel.nutrition--
            }
            else if (pixel.tasted === true && elements[hitPixel.element].id === elements.nerve.id && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                if (!hitPixel.charge) {
                    hitPixel.charge = 0.1
                }
                else if (hitPixel.charge) {
                    hitPixel.charge += 0.1
                }
                pixel.tasted = false
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            doElectricity(hitPixel);
            if ((
                elements[hitPixel.element].id === elements.sugar.id || elements[hitPixel.element].id === elements.salt.id || elements[hitPixel.element].id === elements.grease.id || elements[hitPixel.element].id === elements.cooked_meat.id || elements[hitPixel.element].id === elements.chocolate.id || elements[hitPixel.element].id === elements.chocolate_powder.id || elements[hitPixel.element].id === elements.cheese.id || elements[hitPixel.element].id === elements.cheese_powder.id || elements[hitPixel.element].id === elements.pickle.id || elements[hitPixel.element].id === elements.herb.id || elements[hitPixel.element].id === elements.juice.id || elements[hitPixel.element].id === elements.gingerbread.id || elements[hitPixel.element].id === elements.ketchup.id || elements[hitPixel.element].id === elements.mayo.id || elements[hitPixel.element].id === elements.sauce.id || elements[hitPixel.element].id === elements.chocolate_milk.id || elements[hitPixel.element].id === elements.grape.id  || elements[hitPixel.element].id === elements.pilk.id || elements[hitPixel.element].id === elements.fruit_milk.id || elements[hitPixel.element].id === elements.nut_milk.id || elements[hitPixel.element].id === elements.soda.id || elements[hitPixel.element].id === elements.sugar_water.id
            ) && Math.random() > 0.5 && hitPixel.tasted != true) {
                pixel.tasted = true
                if (Math.random() > 0.5) {
                hitPixel.tasted = false
                }
            }
            else if ((elements[hitPixel.element].id === elements.alcohol.id || elements[hitPixel.element].id === elements.rotten_cheese.id || elements[hitPixel.element].id === elements.rotten_meat.id || elements[hitPixel.element].id === elements.pool_water.id || elements[hitPixel.element].id === elements.poison.id || elements[hitPixel.element].id === elements.bleach.id || elements[hitPixel.element].id === elements.cyanide.id || elements[hitPixel.element].id === elements.infection.id) && Math.random() > 0.5) {
                pixel.tasted = true
                if (Math.random() > 0.5) {
                    hitPixel.tasted = false
                }
                pixel.oxygen--
                pixel.nutrition--
            }
            else if (pixel.tasted === true && elements[hitPixel.element].id === elements.nerve.id && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
                if (!hitPixel.charge) {
                    hitPixel.charge = 0.1
                }
                else if (hitPixel.charge) {
                    hitPixel.charge += 0.1
                }
                pixel.tasted = false
            }
        }
        if (pixel.tasted === true && Math.random() > 0.8) {
            pixel.tasted = false
        }
    },
    density: 2710,
    state: "solid",
    tempHigh: 200,
    stateHigh: ["cooked_meat","meat","blood"],
    tempLow: -25,
    stateLow: ["meat","blood","blood","frozen_meat"],
    burn: 5,
    burnTime: 350,
    conduct: .001,
    burnInto: ["cooked_meat","meat","blood"],
    breakInto: ["blood","blood","meat","meat","meat","meat","blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","ash","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        taste: false,
    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.brain = {
	color: ["#fce3e3","#deb6c5","#f5ced5","#e87b8f"],
	category: "biology",
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    reactions: {
		"dirty_water": { "elem1":"rotten_human_flesh", "chance":0.1 },
		"fly": { "elem1":"rotten_human_flesh", "chance":0.2 },
		"dioxin": { "elem1":"rotten_human_flesh", "elem2":null, "chance":0.1 },
		"uranium": { "elem1":"rotten_human_flesh", "chance":0.1 },
		"cancer": { "elem1":"rotten_human_flesh", "chance":0.1 },
		"plague": { "elem1":"rotten_human_flesh", "elem2":null, "chance":0.3 },
		"ant": { "elem1":"rotten_human_flesh", "chance":0.1 },
		"worm": { "elem1":"rotten_human_flesh", "chance":0.1 },
		"rat": { "elem1":"rotten_human_flesh", "chance":0.3 },
		"mushroom_spore": { "elem1":"rotten_human_flesh", "chance":0.1 },
		"mushroom_stalk": { "elem1":"rotten_human_flesh", "chance":0.1 },
		"mercury": { "elem1":"rotten_human_flesh", "elem2":null, "chance":0.2 },
		"mercury_gas": { "elem1":"rotten_human_flesh", "elem2":null, "chance":0.1 },
		"virus": { "elem1":"rotten_human_flesh", "chance":0.1 },
		"poison": { "elem1":"rotten_human_flesh", "elem2":null, "chance":0.5 },
		"infection": { "elem1":"rotten_human_flesh", "elem2":null, "chance":0.1 },
		"ink": { "elem1":"rotten_human_flesh", "elem2":null, "chance":0.1 },
		"acid": { "elem1":"rotten_human_flesh", "elem2":null, "chance":0.5 },
		"acid_gas": { "elem1":"rotten_human_flesh", "chance":0.4 },
		"cyanide": { "elem1":"rotten_human_flesh", "elem2":null, "chance":0.5 },
    },
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            doElectricity(hitPixel);
            if (elements[hitPixel.element].id === elements.nerve.id && Math.random() > 0.75 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed - pixel.alcoDepri) / 2050))) {
                pixel.chargeCD = 16
                hitPixel.charge = 0.5
            }
            if ((elements[hitPixel.element].id === elements.brain.id || elements[hitPixel.element].id === elements.hypothalamus.id) && Math.random() > 0.75 && pixel.feel === true && hitPixel.feel != true) {
                hitPixel.feel = true
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            doElectricity(hitPixel);
            if (elements[hitPixel.element].id === elements.nerve.id && pixel.feel == true && Math.random() > 0.75) { //  electrical signals do this 01101001001000000110011001100101011001010110110000101110001000000110100100100000011000010110110100100000011000010110110001101001011101100110010100101110001000000110100001100101011011000111000000100000011011010110010100101110
                if (!pixel.stage || pixel.stage > 224) {
                    pixel.stage = 1
                }
                else if (pixel.stage) {
                    pixel.stage += 0.25
                }
                pixel.digitToCheck = (Math.floor(pixel.stage))
                pixel.number = "01101001001000000110011001100101011001010110110000101110001000000110100100100000011000010110110100100000011000010110110001101001011101100110010100101110001000000110100001100101011011000111000000100000011011010110010100101110"
                pixel.sentientCheck = pixel.number.toString()[pixel.digitToCheck] === "1"
                if (pixel.sentientCheck === true /* (pixel.stage === 1 || pixel.stage === 2 || pixel.stage === 4 || pixel.stage === 7 || pixel.stage === 10 || pixel.stage === 17 || pixel.stage === 18 || pixel.stage === 21 || pixel.stage === 22 || pixel.stage === 25 || pixel.stage === 26 || pixel.stage === 29 || pixel.stage === 31 || pixel.stage === 33 || pixel.stage === 34 || pixel.stage === 37 || pixel.stage === 39 || pixel.stage === 41 || pixel.stage === 42 || pixel.stage === 44 || pixel.stage === 45 || pixel.stage === 50 || pixel.stage === 52 || pixel.stage === 53 || pixel.stage === 54) */ ) {
                    hitPixel.lightcharge = true 
                }
                if (pixel.sentientCheck !== true) {
                    hitPixel.darkcharge = true                
                }
            }
            if (elements[hitPixel.element].id === elements.nerve.id && Math.random() > 0.75 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed - pixel.alcoDepri) / 2050))) {
                pixel.chargeCD = 16
                hitPixel.charge = 0.5
            }
            if ((elements[hitPixel.element].id === elements.brain.id || elements[hitPixel.element].id === elements.hypothalamus.id) && Math.random() > 0.75 && pixel.feel === true && hitPixel.feel != true) {
                hitPixel.feel = true
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            doElectricity(hitPixel);
            if (elements[hitPixel.element].id === elements.nerve.id && Math.random() > 0.75 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed - pixel.alcoDepri) / 2050))) {
                pixel.chargeCD = 16
                hitPixel.charge = 0.5
            }
            if ((elements[hitPixel.element].id === elements.brain.id || elements[hitPixel.element].id === elements.hypothalamus.id) && Math.random() > 0.75 && pixel.feel === true && hitPixel.feel != true) {
                hitPixel.feel = true
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            doElectricity(hitPixel);
            if (elements[hitPixel.element].id === elements.nerve.id && Math.random() > 0.75 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed - pixel.alcoDepri) / 2050))) {
                pixel.chargeCD = 16
                hitPixel.charge = 0.5
            }
            if ((elements[hitPixel.element].id === elements.brain.id || elements[hitPixel.element].id === elements.hypothalamus.id) && Math.random() > 0.75 && pixel.feel === true && hitPixel.feel != true) {
                hitPixel.feel = true
            }
        }
        if (pixel.charge) { 
            pixel.charge = 0;
            pixel.chargeCD = 16; 
        }
    },
    density: 2710,
    state: "solid",
    conduct: 1,
    tempHigh: 200,
    stateHigh: "cooked_brain",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
}

elements.amygdala = {
	color: ["#B33E93","#B33E93","#f5ced5","#e87b8f"],
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].id === elements.brain.id && Math.random() > 0.75 && hitPixel.feel != true) {
                hitPixel.feel = true
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].id === elements.brain.id && Math.random() > 0.75 && hitPixel.feel != true) {
                hitPixel.feel = true
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].id === elements.brain.id && Math.random() > 0.75 && hitPixel.feel != true) {
                hitPixel.feel = true
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].id === elements.brain.id && Math.random() > 0.75 && hitPixel.feel != true) {
                hitPixel.feel = true
            }
        }
        if (pixel.charge) { 
            pixel.charge = 0;
            pixel.chargeCD = 16; 
        }
    },
    density: 2710,
    state: "solid",
    conduct: 1,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","salt","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
    hidde: true,
    desc: "Makes brains sentient. Don't question it."
}

elements.hypothalamus = { 
	color: ["#B33E93","#B33E93","#f5ced5","#e87b8f"],
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
        if (pixel.temp > 42) { pixel.temp -= 5; }
        else if (pixel.temp < 32) { pixel.temp += 5; }
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            doElectricity(hitPixel);
            if (elements[hitPixel.element].id === elements.nerve.id && Math.random() > 0.75 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed - pixel.alcoDepri) / 2050))) {
                pixel.chargeCD = 16
                hitPixel.charge = 0.5
            }
            if ((elements[hitPixel.element].id === elements.brain.id || elements[hitPixel.element].id === elements.hypothalamus.id) && Math.random() > 0.75 && pixel.feel === true && hitPixel.feel != true) {
                hitPixel.feel = true
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            doElectricity(hitPixel);
            if (elements[hitPixel.element].id === elements.nerve.id && Math.random() > 0.75 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed - pixel.alcoDepri) / 2050))) {
                pixel.chargeCD = 16
                hitPixel.charge = 0.5
            }
            if ((elements[hitPixel.element].id === elements.brain.id || elements[hitPixel.element].id === elements.hypothalamus.id) && Math.random() > 0.75 && pixel.feel === true && hitPixel.feel != true) {
                hitPixel.feel = true
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            doElectricity(hitPixel);
            if (elements[hitPixel.element].id === elements.nerve.id && Math.random() > 0.75 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed - pixel.alcoDepri) / 2050))) {
                pixel.chargeCD = 16
                hitPixel.charge = 0.5
            }
            if ((elements[hitPixel.element].id === elements.brain.id || elements[hitPixel.element].id === elements.hypothalamus.id) && Math.random() > 0.75 && pixel.feel === true && hitPixel.feel != true) {
                hitPixel.feel = true
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            doElectricity(hitPixel);
            if (elements[hitPixel.element].id === elements.nerve.id && Math.random() > 0.75 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed - pixel.alcoDepri) / 2050))) {
                pixel.chargeCD = 16
                hitPixel.charge = 0.5
            }
            if ((elements[hitPixel.element].id === elements.brain.id || elements[hitPixel.element].id === elements.hypothalamus.id) && Math.random() > 0.75 && pixel.feel === true && hitPixel.feel != true) {
                hitPixel.feel = true
            }
        }
        if (pixel.charge) { 
            pixel.charge = 0;
            pixel.chargeCD = 16; 
        }
    },
    density: 2710,
    state: "solid",
    conduct: 1,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","salt","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
    desc: "Regulates brain temperature."
}

elements.nerve = {
	color: "#B33E93",
	category: "biology",
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    conduct: 1,
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].id === elements.nerve.id && pixel.darkcharge === true && pixel.darkchargeCD !== true) {
                pixel.darkcharge = false
                pixel.darkchargeCD = true
                hitPixel.darkcharge = true
                pixel.darktransmit = true
            }
        }
        if (isEmpty(pixel.x, pixel.y+1) || elements[pixelMap[pixel.x][pixel.y+1].element].id != elements.nerve.id) {
            if (pixel.darkcharge === true) {
                pixel.darkcharge = false
                pixel.darkchargeCD = true
            }
        }
        if (pixel.darkchargeCD === true && pixel.darktransmit !== true) {
            pixel.darkchargeCD = false
        }
        if (pixel.darktransmit === true) {
            pixel.darktransmit = false
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].id === elements.nerve.id && pixel.lightcharge === true && pixel.lightchargeCD !== true) {
                pixel.lightcharge = false
                pixel.lightchargeCD = true
                hitPixel.lightcharge = true
                pixel.lighttransmit = true
            }
        }
        if (isEmpty(pixel.x, pixel.y+1) || elements[pixelMap[pixel.x][pixel.y+1].element].id != elements.nerve.id) {
            if (pixel.lightcharge === true) {
                pixel.lightcharge = false
                pixel.lightchargeCD = true
            }
        }
        if (pixel.lightchargeCD === true && pixel.lighttransmit !== true) {
            pixel.lightchargeCD = false
        }
        if (pixel.lighttransmit === true) {
            pixel.lighttransmit = false
        }
    },
    density: 2710,
    state: "solid",
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","salt","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.NERVE,
    movable: false,
    desc: "Basically a biowire, try connecting it to a brain!"
}

elements.throat_lining = {
	color: "#bc6157",
	category: "biology",
    behavior: [
        "MX%5|DL:stomach_acid,explosive_acid,carni_acid,herbi_acid%5 AND MX%5|MX%5",
        "MX%7.5 AND DL:stomach_acid,explosive_acid,carni_acid,herbi_acid%5|XX|MX%7.5 AND DL:stomach_acid,explosive_acid,carni_acid,herbi_acid%5",
        "XX|DL:stomach_acid,explosive_acid,carni_acid,herbi_acid%5|XX",
    ],
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","slime","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,
    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
    desc: "Like, flesh but immune to stomach acids! Use it to make throats."
}

elements.intestines = {
	color: "#bc6157",
	category: "biology",
    behavior: [
        "MX%25|MX%25|MX%25",
        "MX%0.5|XX|MX%0.5",
        "XX|XX|XX",
    ],
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
	hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
		if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].id === elements.digested_material.id && Math.random() > 0.99) {
                if (Math.random() > 0.5) {
            		changePixel(hitPixel,"excrement"); 
	            }
		        else {
            		changePixel(hitPixel,"stench"); 
	            }
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                }
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.sick = false
                    pixel.immune = true
                }
                if (hitPixel.sick === true && Math.random() > 0.95) {
                    pixel.sick = true
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    if (pixel.alcoDepri) {
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                    if (Math.random() > 0.95) {
                        pixel.alcoholic = true
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                }
                if (hitPixel.fent === true && Math.random() > 0.25) {
                    if (pixel.fentDepri) {
                        pixel.fentDepri = 0
                    }
                    if (Math.random() > 0.5) {
                        pixel.fenAddict = true
                        pixel.fentDepri = 0
                    }
                }
                if (hitPixel.ibup === true) {
                    ibuprofenTime = pixelTicks
                    if (pixel.ibup !== true) {
                        pixel.ibup = true
                        if (!pixel.ibupCount) {
                            pixel.ibupCount = 1
                        }
                        else {
                            pixel.ibupCount += 1
                        }
                    }
                    else {     
                        pixel.ibupCount ++
                    }
                }
                if (hitPixel.poisonImmune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.sick = false
                    pixel.poisonImmune = true
                }
            }
            else if (elements[hitPixel.element].id === elements.gaseous_material.id && Math.random() > 0.99) {
                changePixel(hitPixel,"stench");
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                }
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.sick = false
                    pixel.immune = true
                }
                if (hitPixel.sick === true && Math.random() > 0.95) {
                    pixel.sick = true
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    if (pixel.alcoDepri) {
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                    if (Math.random() > 0.95) {
                        pixel.alcoholic = true
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                }
                if (hitPixel.fent === true && Math.random() > 0.25) {
                    if (pixel.fentDepri) {
                        pixel.fentDepri = 0
                    }
                    if (Math.random() > 0.5) {
                        pixel.fenAddict = true
                        pixel.fentDepri = 0
                    }
                }
                if (hitPixel.ibup === true) {
                    ibuprofenTime = pixelTicks
                    if (pixel.ibup !== true) {
                        pixel.ibup = true
                        if (!pixel.ibupCount) {
                            pixel.ibupCount = 1
                        }
                        else {
                            pixel.ibupCount += 1
                        }
                    }
                    else {     
                        pixel.ibupCount ++
                    }
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    pixel.alcoholic = true
                    pixel.alcoTime = pixelTicks
                    pixel.alcoDepri = 0
                }
                if (hitPixel.poisonImmune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.sick = false
                    pixel.poisonImmune = true
                }
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].id === elements.digested_material.id && Math.random() > 0.99) {
                if (Math.random() > 0.5) {
            		changePixel(hitPixel,"excrement"); 
	            }
		        else {
            		changePixel(hitPixel,"stench"); 
	            }
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                }
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.sick = false
                    pixel.immune = true
                }
                if (hitPixel.sick === true && Math.random() > 0.95) {
                    pixel.sick = true
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    if (pixel.alcoDepri) {
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                    if (Math.random() > 0.95) {
                        pixel.alcoholic = true
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                }
                if (hitPixel.fent === true && Math.random() > 0.25) {
                    if (pixel.fentDepri) {
                        pixel.fentDepri = 0
                    }
                    if (Math.random() > 0.5) {
                        pixel.fenAddict = true
                        pixel.fentDepri = 0
                    }
                }
                if (hitPixel.ibup === true) {
                    ibuprofenTime = pixelTicks
                    if (pixel.ibup !== true) {
                        pixel.ibup = true
                        if (!pixel.ibupCount) {
                            pixel.ibupCount = 1
                        }
                        else {
                            pixel.ibupCount += 1
                        }
                    }
                    else {     
                        pixel.ibupCount ++
                    }
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    pixel.alcoholic = true
                    pixel.alcoTime = pixelTicks
                    pixel.alcoDepri = 0
                }
                if (hitPixel.poisonImmune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.sick = false
                    pixel.poisonImmune = true
                }
            }
            else if (elements[hitPixel.element].id === elements.gaseous_material.id && Math.random() > 0.99) {
                changePixel(hitPixel,"stench");
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                }
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.sick = false
                    pixel.immune = true
                }
                if (hitPixel.sick === true && Math.random() > 0.95) {
                    pixel.sick = true
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    if (pixel.alcoDepri) {
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                    if (Math.random() > 0.95) {
                        pixel.alcoholic = true
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                }
                if (hitPixel.fent === true && Math.random() > 0.25) {
                    if (pixel.fentDepri) {
                        pixel.fentDepri = 0
                    }
                    if (Math.random() > 0.5) {
                        pixel.fenAddict = true
                        pixel.fentDepri = 0
                    }
                }
                if (hitPixel.ibup === true) {
                    ibuprofenTime = pixelTicks
                    if (pixel.ibup !== true) {
                        pixel.ibup = true
                        if (!pixel.ibupCount) {
                            pixel.ibupCount = 1
                        }
                        else {
                            pixel.ibupCount += 1
                        }
                    }
                    else {     
                        pixel.ibupCount ++
                    }
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    pixel.alcoholic = true
                    pixel.alcoTime = pixelTicks
                    pixel.alcoDepri = 0
                }
                if (hitPixel.poisonImmune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.sick = false
                    pixel.poisonImmune = true
                }
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].id === elements.digested_material.id && Math.random() > 0.99) {
                if (Math.random() > 0.5) {
            		changePixel(hitPixel,"excrement"); 
	            }
		        else {
            		changePixel(hitPixel,"stench"); 
	            }
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                }
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.sick = false
                    pixel.immune = true
                }
                if (hitPixel.sick === true && Math.random() > 0.95) {
                    pixel.sick = true
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    if (pixel.alcoDepri) {
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                    if (Math.random() > 0.95) {
                        pixel.alcoholic = true
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                }
                if (hitPixel.fent === true && Math.random() > 0.25) {
                    if (pixel.fentDepri) {
                        pixel.fentDepri = 0
                    }
                    if (Math.random() > 0.5) {
                        pixel.fenAddict = true
                        pixel.fentDepri = 0
                    }
                }
                if (hitPixel.ibup === true) {
                    ibuprofenTime = pixelTicks
                    if (pixel.ibup !== true) {
                        pixel.ibup = true
                        if (!pixel.ibupCount) {
                            pixel.ibupCount = 1
                        }
                        else {
                            pixel.ibupCount += 1
                        }
                    }
                    else {     
                        pixel.ibupCount ++
                    }
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    pixel.alcoholic = true
                    pixel.alcoTime = pixelTicks
                    pixel.alcoDepri = 0
                }
                if (hitPixel.poisonImmune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.sick = false
                    pixel.poisonImmune = true
                }
            }
            else if (elements[hitPixel.element].id === elements.gaseous_material.id && Math.random() > 0.99) {
                changePixel(hitPixel,"stench");
                pixel.nutrition += hitPixel.nutrition;
                hitPixel.nutrition = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                }
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.sick = false
                    pixel.immune = true
                }
                if (hitPixel.sick === true && Math.random() > 0.95) {
                    pixel.sick = true
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    if (pixel.alcoDepri) {
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                    if (Math.random() > 0.95) {
                        pixel.alcoholic = true
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                }
                if (hitPixel.fent === true && Math.random() > 0.25) {
                    if (pixel.fentDepri) {
                        pixel.fentDepri = 0
                    }
                    if (Math.random() > 0.5) {
                        pixel.fenAddict = true
                        pixel.fentDepri = 0
                    }
                }
                if (hitPixel.ibup === true) {
                    ibuprofenTime = pixelTicks
                    if (pixel.ibup !== true) {
                        pixel.ibup = true
                        if (!pixel.ibupCount) {
                            pixel.ibupCount = 1
                        }
                        else {
                            pixel.ibupCount += 1
                        }
                    }
                    else {     
                        pixel.ibupCount ++
                    }
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    pixel.alcoholic = true
                    pixel.alcoTime = pixelTicks
                    pixel.alcoDepri = 0
                }
                if (hitPixel.poisonImmune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.sick = false
                    pixel.poisonImmune = true
                }
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].id === elements.digested_material.id && Math.random() > 0.99) {
                if (Math.random() > 0.5) {
            		changePixel(hitPixel,"excrement"); 
	            }
		        else {
            		changePixel(hitPixel,"stench"); 
	            }
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                }
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.sick = false
                    pixel.immune = true
                }
                if (hitPixel.sick === true && Math.random() > 0.95) {
                    pixel.sick = true
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    if (pixel.alcoDepri) {
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                    if (Math.random() > 0.95) {
                        pixel.alcoholic = true
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                }
                if (hitPixel.fent === true && Math.random() > 0.25) {
                    if (pixel.fentDepri) {
                        pixel.fentDepri = 0
                    }
                    if (Math.random() > 0.5) {
                        pixel.fenAddict = true
                        pixel.fentDepri = 0
                    }
                }
                if (hitPixel.ibup === true) {
                    ibuprofenTime = pixelTicks
                    if (pixel.ibup !== true) {
                        pixel.ibup = true
                        if (!pixel.ibupCount) {
                            pixel.ibupCount = 1
                        }
                        else {
                            pixel.ibupCount += 1
                        }
                    }
                    else {     
                        pixel.ibupCount ++
                    }
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    pixel.alcoholic = true
                    pixel.alcoTime = pixelTicks
                    pixel.alcoDepri = 0
                }
                if (hitPixel.poisonImmune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.sick = false
                    pixel.poisonImmune = true
                }
            }
            else if (elements[hitPixel.element].id === elements.gaseous_material.id && Math.random() > 0.99) {
                changePixel(hitPixel,"stench");
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                }
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.sick = false
                    pixel.immune = true
                }
                if (hitPixel.sick === true && Math.random() > 0.95) {
                    pixel.sick = true
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    if (pixel.alcoDepri) {
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                    if (Math.random() > 0.95) {
                        pixel.alcoholic = true
                        pixel.alcoTime = pixelTicks
                        pixel.alcoDepri = 0
                    }
                }
                if (hitPixel.fent === true && Math.random() > 0.25) {
                    if (pixel.fentDepri) {
                        pixel.fentDepri = 0
                    }
                    if (Math.random() > 0.5) {
                        pixel.fenAddict = true
                        pixel.fentDepri = 0
                    }
                }
                if (hitPixel.ibup === true) {
                    ibuprofenTime = pixelTicks
                    if (pixel.ibup !== true) {
                        pixel.ibup = true
                        if (!pixel.ibupCount) {
                            pixel.ibupCount = 1
                        }
                        else {
                            pixel.ibupCount += 1
                        }
                    }
                    else {     
                        pixel.ibupCount ++
                    }
                }
                if (hitPixel.alcoholic === true && Math.random() > 0.95) {
                    pixel.alcoholic = true
                    pixel.alcoTime = pixelTicks
                    pixel.alcoDepri = 0
                }
                if (hitPixel.poisonImmune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.sick = false
                    pixel.poisonImmune = true
                }
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Gets nutrition from digested material and makes it into poo."
}

elements.appendix = {
	color: "#B45942",
	category: "biology",
    behavior: [
        "XX|CR:intestine_bacteria%0.005|XX",
        "CR:intestine_bacteria%0.005|XX|CR:intestine_bacteria%0.005",
        "XX|CR:intestine_bacteria%0.005|XX",
    ],
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "stomach_acid",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
	hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if (Math.random() < 0.0001 && (pixel.nutrition < 750 || pixel.oxygen < 500)) {
            changePixel(pixel,"stomach_acid");
        }
        doDefaults(pixel);
        doBioNorm(pixel);
		if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].id === elements.digested_material.id && Math.random() > 0.99) {
                if (Math.random() > 0.5) {
            		changePixel(hitPixel,"excrement"); 
	            }
		        else {
            		changePixel(hitPixel,"stench"); 
	            }
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                };
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.immune = true
                };
            }
            else if (elements[hitPixel.element].id === elements.gaseous_material.id && Math.random() > 0.99) {
                changePixel(hitPixel,"stench");
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                };
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.immune = true
                };
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].id === elements.digested_material.id && Math.random() > 0.99) {
                if (Math.random() > 0.5) {
            		changePixel(hitPixel,"excrement"); 
	            }
		        else {
            		changePixel(hitPixel,"stench"); 
	            }
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                };
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.immune = true
                };
            }
            else if (elements[hitPixel.element].id === elements.gaseous_material.id && Math.random() > 0.99) {
                changePixel(hitPixel,"stench");
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                };
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.immune = true
                };
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].id === elements.digested_material.id && Math.random() > 0.99) {
                if (Math.random() > 0.5) {
            		changePixel(hitPixel,"excrement"); 
	            }
		        else {
            		changePixel(hitPixel,"stench"); 
	            }
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                };
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.immune = true
                };
            }
            else if (elements[hitPixel.element].id === elements.gaseous_material.id && Math.random() > 0.99) {
                changePixel(hitPixel,"stench");
                pixel.nutrition += hitPixel.nutrition;
                hitPixel.nutrition = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                };
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.immune = true
                };
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].id === elements.digested_material.id && Math.random() > 0.99) {
                if (Math.random() > 0.5) {
            		changePixel(hitPixel,"excrement"); 
	            }
		        else {
            		changePixel(hitPixel,"stench"); 
	            }
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                };
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.immune = true
                };
            }
            else if (elements[hitPixel.element].id === elements.gaseous_material.id && Math.random() > 0.99) {
                changePixel(hitPixel,"stench");
                pixel.nutrition += (hitPixel.nutrition * 10);
                hitPixel.nutrition = 0;
                pixel.speed += (hitPixel.speed * 2);
                hitPixel.speed = 0;
                if (hitPixel.poisoned === true && Math.random() > 0.9) {
                    pixel.poisoned = true
                };
                if (hitPixel.immune === true && Math.random() > 0.5) {
                    pixel.poisoned = false
                    pixel.immune = true
                };
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["stomach_acid","blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Like intestine but it can randomly turn into acid, but also creates helpful bacteria!"
}

elements.simple_lung = {
	color: "#EB85D9",
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 20,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
	hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        for (var i = 0; i < squareCoords.length; i++) {
            var x = pixel.x+squareCoords[i][0];
            var y = pixel.y+squareCoords[i][1];
            if (isEmpty(x,y)) {
                if (Math.random() < 0.01) { pixel.oxygen += 100 }
                break
            } 
        } 
        doDefaults(pixel);
        doBioNorm(pixel);
		if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","carbon_dioxide","meat","rotten_meat","cooked_meat","flesh","ash","carbon_dioxide","meat","rotten_meat","cooked_meat","flesh","ash","oxygen","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Like lung, but no need to hassle with the oxygen element!"
}

elements.lungs = {
	color: "#d4aaab",
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 20,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
	hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
		if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].id === elements.oxygen.id && Math.random() > 0.9) {
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"carbon_dioxide");
                }
                pixel.oxygen += 100
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].id === elements.oxygen.id && Math.random() > 0.9) {
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"carbon_dioxide");
                }
                pixel.oxygen += 100
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].id === elements.oxygen.id && Math.random() > 0.9) {
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"carbon_dioxide");
                }
                pixel.oxygen += 100
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].id === elements.oxygen.id && Math.random() > 0.9) {
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"carbon_dioxide");
                }
                pixel.oxygen += 100
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","carbon_dioxide","meat","rotten_meat","cooked_meat","flesh","ash","carbon_dioxide","meat","rotten_meat","cooked_meat","flesh","ash","oxygen","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Gets oxygen from, well, oxygen! Makes it into carbon-dioxide."
}

elements.amphib_skin = {
	color: "#7E9C33",
	category: "biology",
    behavior: [
        "XX|CR:slime%0.001|XX",
        "CR:slime%0.001|XX|CR:slime%0.001",
        "XX|CR:slime%0.001|XX",
    ],
    nutrTrans: 20,
    oxygTrans: 20,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
	hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if ((pixel.temp > 35 || pixel.temp < 10) && Math.random() < 0.005) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    if (pixel.temp > 35) {
                        pixel.temp -= 20;
                        if (Math.random() < 0.01) {
                            createPixel("slime",x,y);
                        }
                        break;
                    }
                    pixel.temp += 20;
                    break;
                }
            }
        }
        if (pixel.temp < 15 && Math.random() < 0.1) {
            pixel.temp += 1;
        }
        doDefaults(pixel);
        doBioNorm(pixel);
		if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].id === elements.oxygen.id && Math.random() > 0.9) {
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"carbon_dioxide");
                }
                pixel.oxygen += 100
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].id === elements.oxygen.id && Math.random() > 0.9) {
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"carbon_dioxide");
                }
                pixel.oxygen += 100
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].id === elements.oxygen.id && Math.random() > 0.9) {
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"carbon_dioxide");
                }
                pixel.oxygen += 100
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].id === elements.oxygen.id && Math.random() > 0.9) {
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"carbon_dioxide");
                }
                pixel.oxygen += 100
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 220,
    stateHigh: ["cooked_meat","slime"],
    tempLow: -25,
    stateLow: ["frozen_meat","slime_ice","slime_ice"],
    breakInto: ["blood","meat","slime","slime"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.000075 },
        "radiation": { elem1:["slime","slime","ash","meat","rotten_meat","cooked_meat","skin","epidermis"], chance:0.1 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
    burn:5,
    burnTime: 100,
    burnInto: ["cooked_meat","calcium","calcium","cooked_meat","calcium","calcium","quicklime"],
    desc: "Epidermis, but immune to acid and breathable!"
}

elements.exoskeleton = {
	color: ["#453a2e","#241d15","#242e23"],
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 20,
    isMultiDie: false,
    normDie: "dust",
    otherDie: "calcium",
	hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if (pixel.temp > 40 && Math.random() < 0.1) {
            pixel.temp -= 1;
        }
        doDefaults(pixel);
        doBioNorm(pixel);
		if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].id === elements.oxygen.id && Math.random() > 0.9) {
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"carbon_dioxide");
                }
                pixel.oxygen += 100
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].id === elements.oxygen.id && Math.random() > 0.9) {
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"carbon_dioxide");
                }
                pixel.oxygen += 100
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].id === elements.oxygen.id && Math.random() > 0.9) {
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"carbon_dioxide");
                }
                pixel.oxygen += 100
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].id === elements.oxygen.id && Math.random() > 0.9) {
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"carbon_dioxide");
                }
                pixel.oxygen += 100
            }
            else if ((elements[hitPixel.element].id === elements.chlorine.id || elements[hitPixel.element].id === elements.poison_gas.id  || elements[hitPixel.element].id === elements.acid_gas.id || elements[hitPixel.element].id === elements.cyanide_gas.id || elements[hitPixel.element].id === elements.dioxin.id) && Math.random() > 0.5) {
                deletePixel(hitPixel.x,hitPixel.y)
                pixel.oxygen -= 250
                pixel.nutrition -= 250
                pixel.speed -= 25
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 220,
    stateHigh: ["cooked_meat","calcium","calcium"],
    tempLow: -25,
    stateLow: "frozen_meat",
    breakInto: ["blood","meat","calcium"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.000075 },
        "radiation": { elem1:["calcium","calcium","ash","meat","rotten_meat","cooked_meat","skin","epidermis"], chance:0.1 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
    burn:5,
    burnTime: 100,
    burnInto: ["cooked_meat","calcium","calcium","cooked_meat","calcium","calcium","quicklime"],
    desc: "Like scales, but breathable!"
}

elements.gills = {
	color: "#5EBAE3",
	category: "biology",
    nutrTrans: 20,
    oxygTrans: 20,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
	hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].id === elements.deoxygenated_water.id && Math.random() > 0.75) {
                if (!tryMove(hitPixel,pixel.x,pixel.y+1)) {
                    if (elements[pixelMap[pixel.x][pixel.y+1].element].state === "liquid") {
                        swapPixels(hitPixel,pixelMap[pixel.x][pixel.y+1])
                    }
                }
            }
            else if (elements[hitPixel.element].id === elements.water.id && Math.random() > 0.75) {
                pixel.oxygen += 100
                if (Math.random() > 0.75) {
                    changePixel(hitPixel,"deoxygenated_water")
                }
                if (!tryMove(hitPixel,pixel.x,pixel.y+1)) {
                    if (elements[pixelMap[pixel.x][pixel.y+1].element].state === "liquid") {
                        swapPixels(hitPixel,pixelMap[pixel.x][pixel.y+1])
                    }
                }
            }
            else if (elements[hitPixel.element].id === elements.salt_water.id && Math.random() > 0.75) {
                pixel.oxygen += 90
                    if (Math.random() > 0.85) {
                    changePixel(hitPixel,"deoxygenated_water")
                }
                if (!tryMove(hitPixel,pixel.x,pixel.y+1)) {
                    if (elements[pixelMap[pixel.x][pixel.y+1].element].state === "liquid") {
                        swapPixels(hitPixel,pixelMap[pixel.x][pixel.y+1])
                    }
                }
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].id === elements.deoxygenated_water.id && Math.random() > 0.75) {
                if (isEmpty(pixel.x+1, pixel.y)) {
                    tryMove(hitPixel,pixel.x+1,pixel.y);
                }
            }
            else if (elements[hitPixel.element].id === elements.water.id && Math.random() > 0.75) {
                if (isEmpty(pixel.x+1, pixel.y)) {
                    pixel.oxygen += 100
                    if (Math.random() > 0.75) {
                        changePixel(hitPixel,"deoxygenated_water")
                    }
                    tryMove(hitPixel,pixel.x+1,pixel.y);
                }
            }
            else if (elements[hitPixel.element].id === elements.salt_water.id && Math.random() > 0.75) {
                if (isEmpty(pixel.x+1, pixel.y)) {
                    pixel.oxygen += 90
                    if (Math.random() > 0.85) {
                        changePixel(hitPixel,"deoxygenated_water")
                    }
                    tryMove(hitPixel,pixel.x+1,pixel.y);
                }
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","oxygen","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Gets oxygen from water passing through!"
}

elements.simple_gill = {
	color: "#75C0E2",
	category: "biology",
    nutrTrans: 20,
    oxygTrans: 20,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
	hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].id === elements.deoxygenated_water.id && Math.random() > 0.75) {
                if (!tryMove(hitPixel,pixel.x,pixel.y+1)) {
                    if (elements[pixelMap[pixel.x][pixel.y+1].element].state === "liquid") {
                        swapPixels(hitPixel,pixelMap[pixel.x][pixel.y+1])
                    }
                }
            }
            else if (elements[hitPixel.element].id === elements.water.id && Math.random() > 0.75) {
                pixel.oxygen += 75
                if (!tryMove(hitPixel,pixel.x,pixel.y+1)) {
                    if (elements[pixelMap[pixel.x][pixel.y+1].element].state === "liquid") {
                        swapPixels(hitPixel,pixelMap[pixel.x][pixel.y+1])
                    }
                }
            }
            else if (elements[hitPixel.element].id === elements.salt_water.id && Math.random() > 0.75) {
                pixel.oxygen += 75
                if (!tryMove(hitPixel,pixel.x,pixel.y+1)) {
                    if (elements[pixelMap[pixel.x][pixel.y+1].element].state === "liquid") {
                        swapPixels(hitPixel,pixelMap[pixel.x][pixel.y+1])
                    }
                }
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].id === elements.deoxygenated_water.id && Math.random() > 0.75) {
                if (isEmpty(pixel.x+1, pixel.y)) {
                    tryMove(hitPixel,pixel.x+1,pixel.y);
                }
            }
            else if (elements[hitPixel.element].id === elements.water.id && Math.random() > 0.75) {
                if (isEmpty(pixel.x+1, pixel.y)) {
                    pixel.oxygen += 50
                    tryMove(hitPixel,pixel.x+1,pixel.y);
                }
            }
            else if (elements[hitPixel.element].id === elements.salt_water.id && Math.random() > 0.75) {
                if (isEmpty(pixel.x+1, pixel.y)) {
                    pixel.oxygen += 50
                    tryMove(hitPixel,pixel.x+1,pixel.y);
                }
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","oxygen","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Gets oxygen from water!"
}

elements.stomach_lining = {
	color: "#be5c4b",
	category: "biology",
    behavior: [
        "XX|CR:stomach_acid%1|XX",
        "CR:stomach_acid%1|XX|CR:stomach_acid%1",
        "XX|CR:stomach_acid%1|XX",
    ],
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Makes stomach acid to digest foods!"
}

elements.herbi_stomach = {
	color: "#B77A3D",
	category: "biology",
    behavior: [
        "XX|CR:herbi_acid%5|XX",
        "CR:herbi_acid%5|XX|CR:herbi_acid%5",
        "XX|CR:herbi_acid%5|XX",
    ],
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Makes a different stomach acid to digest plants!"
}

elements.carni_stomach = {
	color: "#8E2A3E",
	category: "biology",
    behavior: [
        "XX|CR:carni_acid%5|XX",
        "CR:carni_acid%5|XX|CR:carni_acid%5",
        "XX|CR:carni_acid%5|XX",
    ],
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Makes a different stomach acid to digest meat!"
}

elements.explosive_stomach = {
	color: "#AA9167",
	category: "biology",
    behavior: [
        "XX|CR:explosive_acid%5|XX",
        "CR:explosive_acid%5|XX|CR:explosive_acid%5",
        "XX|CR:explosive_acid%5|XX",
    ],
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Makes an efficient yet explosive stomach acid to digest foods!"
}

elements.stomach_valve = {
	color: "#c8846f",
	category: "biology",
    behavior: behaviors.WALL,
	hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    nutrTrans: 45,
    oxygTrans: 50,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].movable == true && (elements[hitPixel.element].isAcid != true || !elements[hitPixel.element].isAcid) && Math.random() > 0.9 && (elements[hitPixel.element].isFood != true || !elements[hitPixel.element].isFood) || (elements[hitPixel.element].id == elements.digested_material.id || elements[hitPixel.element].id == elements.gaseous_material.id)) {
                if (hitPixel.wait || (elements[hitPixel.element].id == elements.digested_material.id || elements[hitPixel.element].id == elements.gaseous_material.id)) {
                    if (hitPixel.wait < 50 && (elements[hitPixel.element].id != elements.digested_material.id || elements[hitPixel.element].id != elements.gaseous_material.id)) {
                        hitPixel.wait += 1
                    }
                    else {
                        if (isEmpty(pixel.x, pixel.y+1)) {
                            tryMove(hitPixel,pixel.x,pixel.y+1);
                        }
                    }
                }
                else {
                    hitPixel.wait = 1
                }
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,
    },
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Blocks acid, lets other things through!"
}

elements.sphincter = {
	color: "#c8846f",
	category: "biology",
    nutrTrans: 45,
    oxygTrans: 50,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
	hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if ((elements[hitPixel.element].id === elements.excrement.id || elements[hitPixel.element].id === elements.stench.id || elements[hitPixel.element].id === elements.dirty_water.id || elements[hitPixel.element].id === elements.urine.id || elements[hitPixel.element].id === elements.intestine_bacteria.id || elements[hitPixel.element].id === elements.blood.id || elements[hitPixel.element].id === elements.infection.id) && Math.random() > 0.75) {
                if (isEmpty(pixel.x, pixel.y+1)) {
                    tryMove(hitPixel,pixel.x,pixel.y+1);
                }
            }
            else {
                if (isEmpty(pixel.x, pixel.y+1) && Math.random() > 0.995 && elements[hitPixel.element].id !== elements.digested_material.id && elements[hitPixel.element].id !== elements.gaseous_material.id) {
                    tryMove(hitPixel,pixel.x,pixel.y+1);
                }
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","steam","excrement","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Blocks undigested material, lets other things through!"
}

elements.real_udder = {
    color: "#ecb3f5",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
        if (isEmpty(pixel.x, pixel.y-1) && Math.random() > 0.95 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
            if (Math.random() > 0.95) {
                if (Math.random() > 0.95) {
                    pixel.nutrition -= 25
                }
                createPixel("milk",pixel.x,pixel.y-1)
            }
        }
        if (isEmpty(pixel.x, pixel.y+1) && Math.random() > 0.95 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
            if (Math.random() > 0.95) {
                if (Math.random() > 0.95) {
                    pixel.nutrition -= 25
                }
                createPixel("milk",pixel.x,pixel.y+1)
            }
        }
        if (isEmpty(pixel.x-1, pixel.y) && Math.random() > 0.95 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
            if (Math.random() > 0.95) {
                if (Math.random() > 0.95) {
                    pixel.nutrition -= 20
                }
                createPixel("milk",pixel.x-1,pixel.y)
            }
        }
        if (isEmpty(pixel.x+1, pixel.y) && Math.random() > 0.95 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
            if (Math.random() > 0.95) {
                if (Math.random() > 0.95) {
                    pixel.nutrition -= 20
                }
                createPixel("milk",pixel.x+1,pixel.y)
            }
        }
    },
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    tempHigh: 175,
    stateHigh: "meat",
    tempLow: -50,
    stateLow: "frozen_meat",
    burn: 20,
    burnTime: 160,
    burnInto: "meat",
    breakInto: ["meat","meat","meat","milk"],
    category: "biology",
    state: "solid",
    density: 1250,
    conduct: .001,
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Turns nutrition into milk!"
}

elements.biotorch = {
    color: ["#856559","#7F6057","#815C50"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "cooked_meat",
    roomDie: "cooked_meat",
    coldDie: "meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doDefaults(pixel);
        doBioNorm(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].isBio != true && Math.random() > 0.5) {
                if (hitPixel.temp < pixel.temp) {
                    hitPixel.temp++
                    pixel.temp--
                }
                if (hitPixel.temp > pixel.temp) {
                    hitPixel.temp--
                    pixel.temp++
                }
            }
        }
        else if (isEmpty(pixel.x, pixel.y-1) && Math.random() > 0.95 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
            if (Math.random() > 0.95) {
                pixel.oxygen -= 5
            }
            createPixel("fire",pixel.x,pixel.y-1)
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].isBio != true && Math.random() > 0.5) {
                if (hitPixel.temp < pixel.temp) {
                    hitPixel.temp++
                    pixel.temp--
                }
                if (hitPixel.temp > pixel.temp) {
                    hitPixel.temp--
                    pixel.temp++
                }
            }
        }
        else if (isEmpty(pixel.x, pixel.y+1) && Math.random() > 0.95 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
            if (Math.random() > 0.95) {
                if (Math.random() > 0.95) {
                    pixel.oxygen -= 5
                }
                createPixel("fire",pixel.x,pixel.y+1)
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].isBio != true && Math.random() > 0.5) {
                if (hitPixel.temp < pixel.temp) {
                    hitPixel.temp++
                    pixel.temp--
                }
                if (hitPixel.temp > pixel.temp) {
                    hitPixel.temp--
                    pixel.temp++
                }
            }
        }
        else if (isEmpty(pixel.x-1, pixel.y) && Math.random() > 0.95 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
            if (Math.random() > 0.95) {
                if (Math.random() > 0.95) {
                    pixel.oxygen -= 5
                }
                createPixel("fire",pixel.x-1, pixel.y)
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].isBio != true && Math.random() > 0.5) {
                if (hitPixel.temp < pixel.temp) {
                    hitPixel.temp++
                    pixel.temp--
                }
                if (hitPixel.temp > pixel.temp) {
                    hitPixel.temp--
                    pixel.temp++
                }
            }
        }
        else if (isEmpty(pixel.x+1, pixel.y) && Math.random() > 0.95 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) {
            if (Math.random() > 0.95) {
                if (Math.random() > 0.95) {
                    pixel.oxygen -= 5
                }
                createPixel("fire",pixel.x+1, pixel.y)
            }
        }
        doDefaults(pixel);
    },
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,
    },
    tempHigh: 750,
    stateHigh: "cooked_meat",
    tempLow: -20,
    stateLow: "frozen_meat",
    breakInto: ["meat","cooked_meat","cooked_meat","fire"],
    category: "biology",
    state: "solid",
    insulate: true,
    density: 1250,
    conduct: .001,
    movable: false,
    isBio: true,
    desc: "Turns its oxygen into fire, and works as a heat shield!"
}

elements.digested_material = {
    color: "#B5C306",
    behavior: [
        "XX|XX|XX",
        "SW:stomach_acid,herbi_acid,carni_acid,explosive_acid%3 AND M2%5|XX|SW:stomach_acid,herbi_acid,carni_acid,explosive_acid%3 AND M2%5",
        "SW:stomach_acid,herbi_acid,carni_acid,explosive_acid%5 AND M2%75|SW:stomach_acid,herbi_acid,carni_acid,explosive_acid%10 AND M1|SW:stomach_acid,herbi_acid,carni_acid,explosive_acid%5 AND M2%75",
    ],
	properties: {
        nutrition: 100,
	    speed: 0,
    },
    category: "biology",
    state: "solid",
    density: 900,
    conduct: 0.25,
    stain: 0.001,
    darkText: true,
    hidden: true,
    tempHigh: 95,
    stateHigh: ["dirty_water","dirty_water","excrement"],
    tempLow: -30,
    stateLow: "dirty_ice",
}

elements.gaseous_material = {
    color: "#B5C306",
    behavior: [
        "XX|XX|XX",
        "SW:stomach_acid,herbi_acid,carni_acid,explosive_acid%3 AND M2%35|XX|SW:stomach_acid,herbi_acid,carni_acid,explosive_acid%3 AND M2%35",
        "SW:stomach_acid,herbi_acid,carni_acid,explosive_acid%5 AND M2%50|SW:stomach_acid,herbi_acid,carni_acid,explosive_acid%10 AND M1|SW:stomach_acid,herbi_acid,carni_acid,explosive_acid%5 AND M2%50",
    ],
	properties: {
        nutrition: 100,
    },
    category: "biology",
    state: "solid",
    density: 800,
    conduct: 0.25,
    stain: 0.001,
    darkText: true,
    hidden: true,
    tempHigh: 90,
    stateHigh: ["dirty_water","dirty_water","excrement"],
    tempLow: -35,
    stateLow: "dirty_ice",
}

elements.excrement = {
    color: "#593001",
    behavior: [
        "CR:stench%0.0002|CR:stench%0.001|CR:stench%0.0002",
        "M2%10|XX|M2%10",
        "M2%75|M1|M2%75",
    ],
    reactions: {
        "soap": { elem1:null, chance:0.2 },
        "bleach": { elem1:null, chance:0.5 },
        "pool_water": { elem1:null, elem2:"water", chance:0.05 },
        "water": { elem1:null, elem2:"dirty_water", chance:0.02 },
        "deoxygenated_water": { elem1:null, elem2:"dirty_water", chance:0.0175 },
        "salt_water": { elem1:null, elem2:"dirty_water", chance:0.02 },
        "sugar_water": { elem1:null, elem2:"dirty_water", chance:0.02 },
        "plant": { elem2:"dead_plant", chance:0.02},
    },
    category: "biology",
    state: "liquid",
    viscosity: 1000,
    density: 200,
    darkText: true,
    hidden: true,
    isWaste: true,
    tempHigh: 160,
    stateHigh: ["ash","stench","steam","steam","carbon_dioxide"],
    burn: 5,
    burnTime: 30,
    burnInto: ["ash","stench","steam","steam","carbon_dioxide","fire","fire"],
    tempLow: -10,
    stain: 0.005,
    stateLowName: "solid_poop",
}

elements.intestine_bacteria = {
    color: "#955E93",
    behavior: [
        "XX|M2%0.3|M2%3",
        "XX|FX%2 AND DL%0.0005|M2%3 AND BO",
        "XX|M1|M2%3",
    ],
    reactions: {
        "water": { elem1:null, elem2:"dirty_water", chance:0.01 },
        "excrement": { elem2:null, chance:0.01, func:behaviors.FEEDPIXEL  },
        "bacteria": { elem2:null, chance:0.5, func:behaviors.FEEDPIXEL   },
        "intestine_bacteria": { elem2:null, chance:0.001, func:behaviors.FEEDPIXEL   },
        "mercury": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.1 },
        "bleach": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.1 },
        "uranium": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.1 },
        "cyanide": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.1 },
        "chlorine": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.1 },
        "alcohol": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.25 },
        "vinegar": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.01 },
        "mouthwash": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.001 },
    },
    foodNeed: 25,
    egg: "intestine_bacteria",
    tempHigh: 80,
    stateHigh: "dna",
    tempLow: -10,
    stateLow: "dna",
    breakInto: "dna",
    category:"biology",
    burn:95,
    burnTime: 100,
    burnInto: "dna",
    state: "solid",
    density: 600,
    stain: -0.005,
    conduct: 0.1,
    isWaste: true
}

elements.stomach_acid = {
    color: ["#b5cf91","#288f2a"],
    behavior: [
        "ADB%5|ADB%5|ADB%5",
        "ADB%10 AND M2|XX|ADB%10 AND M2",
        "ADB%10 AND M2|ADB%15 AND M1|ADB%10 AND M2",
    ],
    ignore: ["amphib_skin","stomach_worm","amphib_dermis","acidic_flesh","acid_vessel","throat_lining","explosive_stomach","stomach_lining","stomach_valve","slime","gaseous_material","digested_material","glass","rad_glass","glass_shard","rad_shard","stained_glass","baked_clay","acid_gas","neutral_acid","acid_cloud","water","salt_water","sugar_water","dirty_water","copper","gold","porcelain","plastic","bead","microplastic","molten_plastic","pool_water","chlorine","hydrogen","gold_coin","silver","nickel","calcium","bone","earthquake","tornado","tsunami","liquid_light","sensor"],
    reactions: {
        "bless": { elem1:null, elem2:["gaseous_material",null,null,null,null,null,null,null,null,null,null], attr2:{"nutrition":100, "speed":10, "poisonImmune":true}, chance:0.5 },
        "dirty_water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":-5, "speed":-1, "sick":true}, chance:0.02 },
        "water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":0, "speed":2}, chance:0.02 },
        "salt_water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "sugar_water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":10, "speed":-1}, chance:0.02 },
        "tree_branch": { elem1:null, elem2:"wood", chance:0.02 },
        "sugar": { elem2:"digested_material", attr2:{"nutrition":25, "speed":5}, chance:0.02 },
        "molasses": { elem2:"digested_material", attr2:{"nutrition":10, "speed":8}, chance:0.02 },
        "dead_plant": { elem2:"digested_material", attr2:{"nutrition":15, "speed":1}, chance:0.02 },
        "meat": { elem2:"digested_material", attr2:{"nutrition":30, "speed":-1}, chance:0.02 },
        "cooked_meat": { elem2:"digested_material", attr2:{"nutrition":60}, chance:0.02 },
        "broth": { elem1:null, elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "rotten_meat": { elem2:["digested_material","digested_material","ammonia"], attr2:{"nutrition":-10, "speed":-10, "sick":true}, chance:0.02 },
        "cured_meat": { elem2:"digested_material", attr2:{"nutrition":50}, chance:0.02 },
        "cheese": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "rotten_cheese": { elem2:["digested_material"], attr2:{"nutrition":-10, "speed":-10, "sick":true}, chance:0.02 },
        "cheese_powder": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "lettuce": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "herb": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "toast": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "bread": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "hard_yolk": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "yolk": { elem2:"gaseous_material", attr2:{"nutrition":5, "speed":-2}, chance:0.02 },
        "milk": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "eggnog": { elem2:"digested_material", attr2:{"nutrition":25, "speed":-1}, chance:0.02 },
        "nut_milk": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "chocolate_milk": { elem2:"digested_material", attr2:{"nutrition":25, "speed":1}, chance:0.02 },
        "fruit_milk": { elem2:"digested_material", attr2:{"nutrition":30, "speed":1}, chance:0.02 },
        "pilk": { elem2:"digested_material", attr2:{"nutrition":30, "speed":5}, chance:0.02 },
        "crumb": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "pickle": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "salt": { elem2:"digested_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "worm": { elem2:"gaseous_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "ant": { elem2:"gaseous_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "flea": { elem2:"gaseous_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "fly": { elem2:"gaseous_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "firefly": { elem2:"gaseous_material", attr2:{"nutrition":5, "speed":-5, "poisoned":true}, chance:0.02 },
        "stinkbug": { elem2:"gaseous_material", attr2:{"nutrition":4, "speed":-5, "sick":true}, chance:0.02 },
        "bee": { elem2:"gaseous_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "spider": { elem2:"gaseous_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "rat": { elem2:"digested_material", attr2:{"nutrition":-10, "speed":-5, "sick":true}, chance:0.01 },
        "bird": { elem2:"digested_material", attr2:{"nutrition":-10, "speed":-1}, chance:0.01 },
        "fish": { elem2:"digested_material", attr2:{"nutrition":5, "speed":-1}, chance:0.01 },
        "head": { elem2:"digested_material", attr2:{"nutrition":-15, "speed":-2}, chance:0.01 },
        "body": { elem2:"digested_material", attr2:{"nutrition":-15, "speed":-2}, chance:0.01 },
        "egg": { elem2:"gaseous_material", attr2:{"nutrition":-5, "speed":-2}, chance:0.02 },
        "soda": { elem2:"digested_material", attr2:{"nutrition":20, "speed":2}, chance:0.02 },
        "sap": { elem2:"digested_material", attr2:{"nutrition":-5, "speed":-1}, chance:0.02 },
        "juice": { elem2:"digested_material", attr2:{"nutrition":25, "speed":1}, chance:0.02 },
        "mayo": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "nut_butter": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "ketchup": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "jelly": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "bleach": { elem2:"digested_material", attr2:{"nutrition":-500, "speed":-10, "poisoned":true}, chance:0.02 },
        "poison": { elem2:"digested_material", attr2:{"nutrition":-750, "speed":-10, "poisoned":true}, chance:0.02 },
        "cyanide": { elem2:"digested_material", attr2:{"nutrition":-750, "speed":-10, "poisoned":true}, chance:0.02 },
        "poison_gas": { elem2:"gaseous_material", attr2:{"nutrition":-750, "speed":-10, "poisoned":true}, chance:0.02 },
        "cyanide_gas": { elem2:"gaseous_material", attr2:{"nutrition":-750, "speed":-10, "poisoned":true}, chance:0.02 },
        "soap": { elem2:"digested_material", attr2:{"nutrition":-20, "speed":-10}, chance:0.02 },
        "mercury": { elem2:"digested_material", attr2:{"nutrition":-500, "speed":-10, "poisoned":true}, chance:0.02 },
        "chlorine": { elem2:"gaseous_material", attr2:{"nutrition":-500, "speed":-10, "poisoned":true}, chance:0.02 },
        "pool_water": { elem2:"digested_material", attr2:{"nutrition":-10, "speed":-10}, chance:0.02 },
        "vaccine": { elem2:"digested_material", attr2:{"nutrition":-5, "speed":1, "immune":true}, chance:0.02 },
        "antidote": { elem2:"digested_material", attr2:{"nutrition":1, "speed":1, "poisonImmune":true}, chance:0.02 },
        "coffee": { elem2:"digested_material", attr2:{"nutrition":20, "speed":10}, chance:0.02 },
        "tomato": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "grape": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "beans": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "sauce": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "butter": { elem2:"digested_material", attr2:{"nutrition":15, "speed":-1}, chance:0.02 },
        "melted_cheese": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "melted_chocolate": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "melted_butter": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "chocolate": { elem2:"digested_material", attr2:{"nutrition":35, "speed":2}, chance:0.02 },
        "chocolate_powder": { elem2:"digested_material", attr2:{"nutrition":35, "speed":2}, chance:0.02 },
        "rice": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "dough": { elem2:"digested_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "batter": { elem2:"digested_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "baked_batter": { elem2:"digested_material", attr2:{"nutrition":45, "speed":2}, chance:0.02 },
        "gingerbread": { elem2:"digested_material", attr2:{"nutrition":45, "speed":2}, chance:0.02 },
        "ice_cream": { elem2:"digested_material", attr2:{"nutrition":40, "speed":2}, chance:0.02 },
        "cream": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "caramel": { elem2:"digested_material", attr2:{"nutrition":30, "speed":3}, chance:0.02 },
        "potato": { elem2:"digested_material", attr2:{"nutrition":15, "speed":-1}, chance:0.02 },
        "baked_potato": { elem2:"digested_material", attr2:{"nutrition":45, "speed":1}, chance:0.02 },
        "mashed_potato": { elem2:"digested_material", attr2:{"nutrition":40, "speed":1}, chance:0.02 },
        "yogurt": { elem2:"digested_material", attr2:{"nutrition":35, "speed":1}, chance:0.02 },
        "frozen_yogurt": { elem2:"digested_material", attr2:{"nutrition":35, "speed":2}, chance:0.02 },
        "slush": { elem2:"digested_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "coffee_bean": { elem2:"digested_material", attr2:{"nutrition":-5, "speed":20}, chance:0.02 },
	    "coffee_ground": { elem2:"digested_material", attr2:{"nutrition":-5, "speed":15}, chance:0.02 },
        "yeast": { elem2:"digested_material", attr2:{"nutrition":-5, "speed":-1}, chance:0.02 },
        "alcohol": { elem2:"digested_material", attr2:{"nutrition":5, "speed":-5, "alcoholic": true}, chance:0.02 },
        "honey": { elem2:"digested_material", attr2:{"nutrition":35, "speed":3}, chance:0.02 },
        "blood": { elem2:"digested_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "excrement": { elem2:"gaseous_material", attr2:{"nutrition":-15, "speed":-10, "sick":true}, chance:0.02 },
        "urine": { elem2:"gaseous_material", attr2:{"nutrition":-15, "speed":-10, "sick":true}, chance:0.02 },
        "tea": { elem2:"digested_material", attr2:{"nutrition":10, "speed":10}, chance:0.02 },
        "infection": { elem2:"digested_material", attr2:{"nutrition":-15, "speed":-5, "sick":true}, chance:0.02 },
        "cancer": { elem2:"gaseous_material", attr2:{"nutrition":-15, "speed":-15, "sick":true}, chance:0.02 },
        "plague": { elem2:"gaseous_material", attr2:{"nutrition":-15, "speed":-10, "sick":true}, chance:0.02 },
        "glue": { elem2:"gaseous_material", attr2:{"nutrition":-10, "speed":-10}, chance:0.02 },
        "fentanyl": { elem2:"gaseous_material", attr2:{"nutrition":-50, "speed":-20, "fent":true}, chance:0.01 },
        "ibuprofen": { elem2:"gaseous_material", attr2:{"nutrition":1, "speed":1, "ibup":true}, chance:0.02 },
    },
    category: "biology",
    tempHigh: 110,
    stateHigh: "acid_gas",
    tempLow: -58.88,
    burn: 30,
    burnTime: 1,
    state: "liquid",
    density: 1550,
    stain: -0.1,
    isAcid: true,
}

elements.herbi_acid = {
    color: ["#A8E54F","#5BC217"],
    behavior: [
        "XX|ADB%5|XX",
        "ADB%5 AND M2|XX|ADB%5 AND M2",
        "ADB%5 AND M2|ADB%5 AND M1|ADB%5 AND M2",
    ],
    ignore: ["amphib_skin","stomach_worm","amphib_dermis","acidic_flesh","acid_vessel","throat_lining","explosive_stomach","herbi_stomach","carni_stomach","stomach_lining","stomach_valve","slime","gaseous_material","digested_material","glass","rad_glass","glass_shard","rad_shard","stained_glass","baked_clay","acid_gas","neutral_acid","acid_cloud","water","salt_water","sugar_water","dirty_water","copper","gold","porcelain","plastic","bead","microplastic","molten_plastic","pool_water","chlorine","hydrogen","gold_coin","silver","nickel","calcium","bone","earthquake","tornado","tsunami","liquid_light","sensor"],
    reactions: {
        "bless": { elem1:null, elem2:["gaseous_material",null,null,null,null,null,null,null,null,null,null], attr2:{"nutrition":100, "speed":10, "poisonImmune":true}, chance:0.5 },
        "dirty_water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":-5, "speed":-3, "sick":true}, chance:0.02 },
        "water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":0, "speed":5}, chance:0.02 },
        "salt_water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "sugar_water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":10, "speed":1}, chance:0.02 },
        "plant": { elem2:"digested_material", attr2:{"nutrition":80, "speed":1}, chance:0.02},
        "tree_branch": { elem1:null, elem2:"wood", attr2:{"nutrition":10, "speed":1}, chance:0.02 },
        "sugar": { elem2:"digested_material", attr2:{"nutrition":25, "speed":5}, chance:0.02 },
        "molasses": { elem2:"digested_material", attr2:{"nutrition":10, "speed":8}, chance:0.02 },
        "dead_plant": { elem2:"digested_material", attr2:{"nutrition":75}, chance:0.02 },
        "meat": { elem2:"gaseous_material", attr2:{"nutrition":-10, "speed":-1}, chance:0.02 },
        "cooked_meat": { elem2:"digested_material", attr2:{"nutrition":-5, "speed":1}, chance:0.02 },
        "broth": { elem1:null, elem2:"digested_material", attr2:{"nutrition":-5}, chance:0.02 },
        "rotten_meat": { elem2:["digested_material","ammonia",null,null,null], attr2:{"nutrition":-25, "speed":-20, "sick":true}, chance:0.02 },
        "cured_meat": { elem2:"digested_material", attr2:{"nutrition":-5, "speed":-1}, chance:0.02 },
        "cheese": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "rotten_cheese": { elem2:["digested_material"], attr2:{"nutrition":-10, "speed":-10, "sick":true}, chance:0.02 },
        "cheese_powder": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "vine": { elem2:"digested_material", attr2:{"nutrition":60}, chance:0.02 },
        "grass": { elem2:"digested_material", attr2:{"nutrition":60}, chance:0.02 },
        "kelp": { elem2:"digested_material", attr2:{"nutrition":60}, chance:0.02 },
        "algae": { elem2:"digested_material", attr2:{"nutrition":50}, chance:0.02 },
        "lettuce": { elem2:"digested_material", attr2:{"nutrition":60}, chance:0.02 },
        "herb": { elem2:"digested_material", attr2:{"nutrition":50}, chance:0.02 },
        "toast": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "bread": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "hard_yolk": { elem2:"digested_material", attr2:{"nutrition":30}, chance:0.02 },
        "yolk": { elem2:"digested_material", attr2:{"nutrition":10, "speed":5}, chance:0.02 },
        "milk": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "eggnog": { elem2:"digested_material", attr2:{"nutrition":25, "speed":-1}, chance:0.02 },
        "nut_milk": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "chocolate_milk": { elem2:"digested_material", attr2:{"nutrition":35, "speed":1}, chance:0.02 },
        "fruit_milk": { elem2:"digested_material", attr2:{"nutrition":40, "speed":1}, chance:0.02 },
        "pilk": { elem2:"digested_material", attr2:{"nutrition":25, "speed":5}, chance:0.02 },
        "crumb": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "pickle": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "salt": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "worm": { elem2:"gaseous_material", attr2:{"nutrition":-10, "speed":-1}, chance:0.02 },
        "ant": { elem2:"gaseous_material", attr2:{"nutrition":-10, "speed":-1}, chance:0.02 },
        "flea": { elem2:"gaseous_material", attr2:{"nutrition":-10, "speed":-1}, chance:0.02 },
        "fly": { elem2:"gaseous_material", attr2:{"nutrition":-10, "speed":-1}, chance:0.02 },
        "firefly": { elem2:"gaseous_material", attr2:{"nutrition":-10, "speed":-5, "poisoned":true}, chance:0.02 },
        "stinkbug": { elem2:"gaseous_material", attr2:{"nutrition":-11, "speed":-5}, chance:0.02 },
        "bee": { elem2:"gaseous_material", attr2:{"nutrition":-9}, chance:0.02 },
        "spider": { elem2:"gaseous_material", attr2:{"nutrition":-10, "speed":-1}, chance:0.02 },
        "rat": { elem2:"digested_material", attr2:{"nutrition":-15, "speed":-5, "sick":true}, chance:0.02 },
        "bird": { elem2:"digested_material", attr2:{"nutrition":-15, "speed":-1}, chance:0.02 },
        "fish": { elem2:"digested_material", attr2:{"nutrition":-15, "speed":-1}, chance:0.02 },
        "head": { elem2:"digested_material", attr2:{"nutrition":-15, "speed":-2}, chance:0.02 },
        "body": { elem2:"digested_material", attr2:{"nutrition":-15, "speed":-2}, chance:0.02 },
        "egg": { elem2:"digested_material", attr2:{"nutrition":-20}, chance:0.02 },
        "soda": { elem2:"digested_material", attr2:{"nutrition":-5}, chance:0.02 },
        "sap": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "juice": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "mayo": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "nut_butter": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "ketchup": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "jelly": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "bleach": { elem2:"digested_material", attr2:{"nutrition":-500, "speed":-20, "poisoned":true}, chance:0.02 },
        "poison": { elem2:"digested_material", attr2:{"nutrition":-750, "speed":-20, "poisoned":true}, chance:0.02 },
        "cyanide": { elem2:"digested_material", attr2:{"nutrition":-750, "speed":-20, "poisoned":true}, chance:0.02 },
        "poison_gas": { elem2:"gaseous_material", attr2:{"nutrition":-750, "speed":-20, "poisoned":true}, chance:0.02 },
        "cyanide_gas": { elem2:"gaseous_material", attr2:{"nutrition":-750, "speed":-20, "poisoned":true}, chance:0.02 },
        "soap": { elem2:"digested_material", attr2:{"nutrition":-20, "speed":-10}, chance:0.02 },
        "mercury": { elem2:"digested_material", attr2:{"nutrition":-500, "speed":-20, "poisoned":true}, chance:0.02 },
        "chlorine": { elem2:"gaseous_material", attr2:{"nutrition":-500, "speed":-20, "poisoned":true}, chance:0.02 },
        "pool_water": { elem2:"digested_material", attr2:{"nutrition":-20, "speed":-20}, chance:0.02 },
        "vaccine": { elem2:"digested_material", attr2:{"nutrition":1, "speed":-1, "immune":true}, chance:0.02 },
        "antidote": { elem2:"digested_material", attr2:{"nutrition":-1, "speed":1, "poisonImmune":true}, chance:0.02 },
        "coffee": { elem2:"digested_material", attr2:{"nutrition":20, "speed":10}, chance:0.02 },
        "tomato": { elem2:"digested_material", attr2:{"nutrition":55}, chance:0.02 },
        "grape": { elem2:"digested_material", attr2:{"nutrition":50}, chance:0.02 },
        "beans": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "sauce": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "butter": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "melted_cheese": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "melted_chocolate": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "melted_butter": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "chocolate": { elem2:"digested_material", attr2:{"nutrition":20, "speed":2}, chance:0.02 },
        "chocolate_powder": { elem2:"digested_material", attr2:{"nutrition":20, "speed":2}, chance:0.02 },
        "rice": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "dough": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "batter": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "baked_batter": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "gingerbread": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "ice_cream": { elem2:"digested_material", attr2:{"nutrition":30}, chance:0.02 },
        "cream": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "caramel": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "potato": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "baked_potato": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "mashed_potato": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "yogurt": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "frozen_yogurt": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "slush": { elem2:"digested_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "coffee_bean": { elem2:"digested_material", attr2:{"nutrition":-5, "speed":20}, chance:0.02 },
	    "coffee_ground": { elem2:"digested_material", attr2:{"nutrition":-5, "speed":15}, chance:0.02 },
        "yeast": { elem2:"digested_material", attr2:{"nutrition":-5}, chance:0.02 },
        "alcohol": { elem2:"digested_material", attr2:{"nutrition":-5, "speed":-15, "alcoholic": true}, chance:0.02 },
        "honey": { elem2:"digested_material", attr2:{"nutrition":35, "speed":3}, chance:0.02 },
        "blood": { elem2:"digested_material", attr2:{"nutrition":-5, "speed":-1}, chance:0.02 },
        "excrement": { elem2:"gaseous_material", attr2:{"nutrition":-15, "speed":-10, "sick":true}, chance:0.02 },
        "urine": { elem2:"gaseous_material", attr2:{"nutrition":-15, "speed":-10, "sick":true}, chance:0.02 },
        "tea": { elem2:"digested_material", attr2:{"nutrition":10, "speed":10}, chance:0.02 },
        "infection": { elem2:"digested_material", attr2:{"nutrition":-20, "speed":-5, "sick":true}, chance:0.02 },
        "cancer": { elem2:"gaseous_material", attr2:{"nutrition":-25, "speed":-15, "sick":true}, chance:0.02 },
        "plague": { elem2:"gaseous_material", attr2:{"nutrition":-15, "speed":-10, "sick":true}, chance:0.02 },
        "glue": { elem2:"gaseous_material", attr2:{"nutrition":-10, "speed":-10, "sick":true}, chance:0.02 },
        "fentanyl": { elem2:"gaseous_material", attr2:{"nutrition":-50, "speed":-20, "fent":true}, chance:0.01 },
    },
    category: "biology",
    tempHigh: 110,
    stateHigh: "acid_gas",
    tempLow: -58.88,
    burn: 30,
    burnTime: 1,
    state: "liquid",
    density: 1550,
    stain: -0.1,
    isAcid: true,
}

elements.carni_acid = {
    color: ["#ADA469","#5B6517"],
    behavior: [
        "XX|ADB%5|XX",
        "ADB%5 AND M2|XX|ADB%5 AND M2",
        "ADB%5 AND M2|ADB%5 AND M1|ADB%5 AND M2",
    ],
    ignore: ["stomach_worm","amphib_skin","amphib_dermis","acidic_flesh","acid_vessel","throat_lining","explosive_stomach","stomach_lining","carni_stomach","stomach_valve","slime","gaseous_material","digested_material","glass","rad_glass","glass_shard","rad_shard","stained_glass","baked_clay","acid_gas","neutral_acid","acid_cloud","water","salt_water","sugar_water","dirty_water","copper","gold","porcelain","plastic","bead","microplastic","molten_plastic","pool_water","chlorine","hydrogen","gold_coin","silver","nickel","calcium","bone","earthquake","tornado","tsunami","liquid_light","sensor"],
    reactions: {
        "bless": { elem1:null, elem2:["gaseous_material",null,null,null,null,null,null,null,null,null,null], attr2:{"nutrition":100, "speed":10, "poisonImmune":true}, chance:0.5 },
        "dirty_water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":-5, "speed":-2, "sick":true}, chance:0.02 },
        "water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":0, "speed":5}, chance:0.02 },
        "salt_water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "sugar_water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":10, "speed":1}, chance:0.02 },
        "plant": { elem2:"digested_material", attr2:{"nutrition":5, "speed":-5}, chance:0.02},
        "tree_branch": { elem1:null, elem2:"wood", chance:0.02 },
        "sugar": { elem2:"digested_material", attr2:{"nutrition":10, "speed":3}, chance:0.02 },
        "molasses": { elem2:"digested_material", attr2:{"nutrition":5, "speed":5}, chance:0.02 },
        "dead_plant": { elem2:"digested_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "meat": { elem2:"digested_material", attr2:{"nutrition":70, "speed":5}, chance:0.02 },
        "cooked_meat": { elem2:"digested_material", attr2:{"nutrition":60, "speed":4}, chance:0.02 },
        "broth": { elem1:null, elem2:"digested_material", attr2:{"nutrition":50, "speed":6}, chance:0.02 },
        "rotten_meat": { elem2:["digested_material","ammonia",null,null,null], attr2:{"nutrition":5, "speed":-5, "sick":true}, chance:0.02 },
        "cured_meat": { elem2:"digested_material", attr2:{"nutrition":50, "speed":-1}, chance:0.02 },
        "cheese": { elem2:"digested_material", attr2:{"nutrition":35, "speed":-1}, chance:0.02 },
        "rotten_cheese": { elem2:["digested_material","ammonia",null,null,null], attr2:{"nutrition":-20, "speed":-5, "sick":true}, chance:0.02 },
        "cheese_powder": { elem2:"digested_material", attr2:{"nutrition":35, "speed":-1}, chance:0.02 },
        "lettuce": { elem2:"digested_material", attr2:{"nutrition":20}, chance:0.02 },
        "herb": { elem2:"digested_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "toast": { elem2:"digested_material", attr2:{"nutrition":20}, chance:0.02 },
        "bread": { elem2:"digested_material", attr2:{"nutrition":20}, chance:0.02 },
        "hard_yolk": { elem2:"digested_material", attr2:{"nutrition":50}, chance:0.02 },
        "yolk": { elem2:"digested_material", attr2:{"nutrition":50}, chance:0.02 },
        "milk": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "eggnog": { elem2:"digested_material", attr2:{"nutrition":20, "speed":-1}, chance:0.02 },
        "nut_milk": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "chocolate_milk": { elem2:"digested_material", attr2:{"nutrition":25, "speed":1}, chance:0.02 },
        "fruit_milk": { elem2:"digested_material", attr2:{"nutrition":30, "speed":1}, chance:0.02 },
        "pilk": { elem2:"digested_material", attr2:{"nutrition":30, "speed":5}, chance:0.02 },
        "crumb": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "pickle": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "salt": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "worm": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "ant": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "bee": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "spider": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "rat": { elem2:"digested_material", attr2:{"nutrition":15, "speed":-5, "sick":true}, chance:0.02 },
        "bird": { elem2:"digested_material", attr2:{"nutrition":15, "speed":1}, chance:0.02 },
        "fish": { elem2:"digested_material", attr2:{"nutrition":15, "speed":1}, chance:0.02 },
        "head": { elem2:"digested_material", attr2:{"nutrition":15, "speed":2}, chance:0.02 },
        "body": { elem2:"digested_material", attr2:{"nutrition":15, "speed":2}, chance:0.02 },
        "flea": { elem2:"gaseous_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "fly": { elem2:"gaseous_material", attr2:{"nutrition":5, "speed":-1}, chance:0.02 },
        "firefly": { elem2:"gaseous_material", attr2:{"nutrition":4, "speed":-5, "poisoned":true}, chance:0.02 },
        "stinkbug": { elem2:"gaseous_material", attr2:{"nutrition":4, "speed":-5, "sick":true}, chance:0.02 },
        "egg": { elem2:"digested_material", attr2:{"nutrition":25, "speed":1}, chance:0.02 },
        "soda": { elem2:"digested_material", attr2:{"nutrition":10, "speed":-1}, chance:0.02 },
        "sap": { elem2:"gaseous_material", attr2:{"nutrition":-10, "speed":-1}, chance:0.02 },
        "juice": { elem2:"digested_material", attr2:{"nutrition":10, "speed":1}, chance:0.02 },
        "mayo": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "nut_butter": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "ketchup": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "jelly": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "bleach": { elem2:"digested_material", attr2:{"nutrition":-500, "speed":-20, "poisoned":true}, chance:0.02 },
        "poison": { elem2:"digested_material", attr2:{"nutrition":-750, "speed":-20, "poisoned":true}, chance:0.02 },
        "cyanide": { elem2:"digested_material", attr2:{"nutrition":-750, "speed":-20, "poisoned":true}, chance:0.02 },
        "poison_gas": { elem2:"gaseous_material", attr2:{"nutrition":-750, "speed":-20, "poisoned":true}, chance:0.02 },
        "cyanide_gas": { elem2:"gaseous_material", attr2:{"nutrition":-750, "speed":-20, "poisoned":true}, chance:0.02 },
        "soap": { elem2:"digested_material", attr2:{"nutrition":-20, "speed":-15}, chance:0.02 },
        "mercury": { elem2:"digested_material", attr2:{"nutrition":-500, "speed":-20, "poisoned":true}, chance:0.02 },
        "chlorine": { elem2:"gaseous_material", attr2:{"nutrition":-500, "speed":-20, "poisoned":true}, chance:0.02 },
        "pool_water": { elem2:"digested_material", attr2:{"nutrition":-400, "speed":-15}, chance:0.02 },
        "vaccine": { elem2:"digested_material", attr2:{"nutrition":1, "speed":-1, "immune":true}, chance:0.02 },
        "antidote": { elem2:"digested_material", attr2:{"nutrition":-1, "speed":1, "poisonImmune":true}, chance:0.02 },
        "coffee": { elem2:"digested_material", attr2:{"nutrition":10, "speed":5}, chance:0.02 },
        "tomato": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "grape": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "beans": { elem2:"digested_material", attr2:{"nutrition":20}, chance:0.02 },
        "sauce": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "butter": { elem2:"digested_material", attr2:{"nutrition":-5}, chance:0.02 },
        "melted_cheese": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "melted_chocolate": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "melted_butter": { elem2:"gaseous_material", attr2:{"nutrition":-10}, chance:0.02 },
        "chocolate": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "chocolate_powder": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "rice": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "dough": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "batter": { elem2:"digested_material", attr2:{"nutrition":-5}, chance:0.02 },
        "baked_batter": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "gingerbread": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "ice_cream": { elem2:"digested_material", attr2:{"nutrition":30, "speed":1}, chance:0.02 },
        "cream": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "caramel": { elem2:"digested_material", attr2:{"nutrition":20}, chance:0.02 },
        "potato": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "baked_potato": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "mashed_potato": { elem2:"digested_material", attr2:{"nutrition":20}, chance:0.02 },
        "yogurt": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "frozen_yogurt": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "slush": { elem2:"digested_material", attr2:{"nutrition":-1, "speed":1}, chance:0.02 },
        "coffee_bean": { elem2:"gaseous_material", attr2:{"nutrition":-10, "speed":15}, chance:0.02 },
        "yeast": { elem2:"gaseous_material", attr2:{"nutrition":-10}, chance:0.02 },
        "alcohol": { elem2:"digested_material", attr2:{"nutrition":-15, "speed":-15, "alcoholic": true}, chance:0.02 },
        "honey": { elem2:"digested_material", attr2:{"nutrition":35, "speed":5}, chance:0.02 },
        "blood": { elem2:"digested_material", attr2:{"nutrition":15, "speed":3}, chance:0.02 },
        "excrement": { elem2:"gaseous_material", attr2:{"nutrition":-15, "speed":-5, "sick":true}, chance:0.02 },
        "urine": { elem2:"gaseous_material", attr2:{"nutrition":-15, "speed":-10}, chance:0.02 },
        "tea": { elem2:"digested_material", attr2:{"nutrition":5, "speed":10}, chance:0.02 },
        "infection": { elem2:"digested_material", attr2:{"nutrition":-5, "sick":true}, chance:0.02 },
        "cancer": { elem2:"digested_material", attr2:{"nutrition":-5, "speed":-5, "sick":true}, chance:0.02 },
        "plague": { elem2:"gaseous_material", attr2:{"nutrition":-15, "speed":-10, "sick":true}, chance:0.02 },
        "glue": { elem2:"gaseous_material", attr2:{"nutrition":-10, "speed":-15, "sick":true}, chance:0.02 },
        "fentanyl": { elem2:"gaseous_material", attr2:{"nutrition":-50, "speed":-20, "fent":true}, chance:0.01 },
    },
    category: "biology",
    tempHigh: 110,
    stateHigh: "acid_gas",
    tempLow: -58.88,
    burn: 30,
    burnTime: 1,
    state: "liquid",
    density: 1550,
    stain: -0.1,
    isAcid: true,
}

elements.explosive_acid = {
    color: ["#E9DC8C","#D0C15A"],
    behavior: [
        "XX|ADB%5|XX",
        "ADB%5 AND M2|XX|ADB%5 AND M2",
        "ADB%5 AND M2|ADB%5 AND M1|ADB%5 AND M2",
    ],
    ignore: ["amphib_skin","stomach_worm","amphib_dermis","acidic_flesh","acid_vessel","throat_lining","stomach_lining","explosive_stomach","stomach_valve","slime","gaseous_material","digested_material","glass","rad_glass","glass_shard","rad_shard","stained_glass","baked_clay","acid_gas","neutral_acid","acid_cloud","water","salt_water","sugar_water","dirty_water","copper","gold","porcelain","plastic","bead","microplastic","molten_plastic","pool_water","chlorine","hydrogen","gold_coin","silver","nickel","calcium","bone","earthquake","tornado","tsunami","liquid_light","sensor"],
    reactions: {
        "bless": { elem1:null, elem2:["gaseous_material",null,null,null,null,null,null,null,null,null,null], attr2:{"nutrition":100, "speed":10, "poisonImmune":true}, chance:0.5 },
        "dirty_water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":0}, chance:0.02 },
        "water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":0, "speed":10}, chance:0.02 },
        "salt_water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "sugar_water": { elem1:null, elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "plant": { elem2:"digested_material", attr2:{"nutrition":10, "speed":5}, chance:0.02},
        "tree_branch": { elem1:null, elem2:"wood", chance:0.02 },
        "sugar": { elem2:"digested_material", attr2:{"nutrition":30, "speed":5}, chance:0.02 },
        "molasses": { elem2:"digested_material", attr2:{"nutrition":15, "speed":8}, chance:0.02 },
        "dead_plant": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "meat": { elem2:"digested_material", attr2:{"nutrition":30, "speed":5}, chance:0.02 },
        "cooked_meat": { elem2:"digested_material", attr2:{"nutrition":60}, chance:0.02 },
        "broth": { elem1:null, elem2:"digested_material", attr2:{"nutrition":55}, chance:0.02 },
        "rotten_meat": { elem2:["digested_material","ammonia",null,null,null], attr2:{"nutrition":30}, chance:0.02 },
        "cured_meat": { elem2:"digested_material", attr2:{"nutrition":50}, chance:0.02 },
        "cheese": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "lettuce": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "herb": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "toast": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "bread": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "hard_yolk": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "yolk": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "milk": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "eggnog": { elem2:"digested_material", attr2:{"nutrition":25, "speed":1}, chance:0.02 },
        "nut_milk": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "chocolate_milk": { elem2:"digested_material", attr2:{"nutrition":25, "speed":1}, chance:0.02 },
        "fruit_milk": { elem2:"digested_material", attr2:{"nutrition":30, "speed":1}, chance:0.02 },
        "pilk": { elem2:"digested_material", attr2:{"nutrition":30, "speed":5}, chance:0.02 },
        "crumb": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "pickle": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "salt": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "worm": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "ant": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "bee": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "spider": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "rat": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "bird": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "fish": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "head": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "body": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "flea": { elem2:"gaseous_material", attr2:{"nutrition":5}, chance:0.02 },
        "fly": { elem2:"gaseous_material", attr2:{"nutrition":5}, chance:0.02 },
        "firefly": { elem2:"gaseous_material", attr2:{"nutrition":5}, chance:0.02 },
        "stinkbug": { elem2:"gaseous_material", attr2:{"nutrition":5}, chance:0.02 },
        "egg": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "soda": { elem2:"digested_material", attr2:{"nutrition":20}, chance:0.02 },
        "sap": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "juice": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "mayo": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "nut_butter": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "ketchup": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "jelly": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "bleach": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "poison": { elem2:"digested_material", attr2:{"nutrition":20}, chance:0.02 },
        "cyanide": { elem2:"digested_material", attr2:{"nutrition":20}, chance:0.02 },
        "poison_gas": { elem2:"gaseous_material", attr2:{"nutrition":10}, chance:0.02 },
        "cyanide_gas": { elem2:"gaseous_material", attr2:{"nutrition":10}, chance:0.02 },
        "soap": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "mercury": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "chlorine": { elem2:"gaseous_material", attr2:{"nutrition":5}, chance:0.02 },
        "pool_water": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "vaccine": { elem2:"digested_material", attr2:{"nutrition":1, "speed":-1, "immune":true}, chance:0.02 },
        "antidote": { elem2:"digested_material", attr2:{"nutrition":-1, "speed":1, "poisonImmune":true}, chance:0.02 },
        "coffee": { elem2:"digested_material", attr2:{"nutrition":20}, chance:0.02 },
        "tomato": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "grape": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "beans": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "sauce": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "butter": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "melted_cheese": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "melted_chocolate": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "melted_butter": { elem2:"digested_material", attr2:{"nutrition":10}, chance:0.02 },
        "chocolate": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "cheese_powder": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "chocolate_powder": { elem2:"digested_material", attr2:{"nutrition":35, "speed":2}, chance:0.02 },
        "rice": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "dough": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "batter": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "baked_batter": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "gingerbread": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "ice_cream": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "cream": { elem2:"digested_material", attr2:{"nutrition":25}, chance:0.02 },
        "caramel": { elem2:"digested_material", attr2:{"nutrition":30}, chance:0.02 },
        "potato": { elem2:"digested_material", attr2:{"nutrition":15}, chance:0.02 },
        "baked_potato": { elem2:"digested_material", attr2:{"nutrition":45}, chance:0.02 },
        "mashed_potato": { elem2:"digested_material", attr2:{"nutrition":40}, chance:0.02 },
        "yogurt": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "frozen_yogurt": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "slush": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "coffee_bean": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "yeast": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "alcohol": { elem2:"digested_material", attr2:{"nutrition":5, "alcoholic": true}, chance:0.02 },
        "honey": { elem2:"digested_material", attr2:{"nutrition":35}, chance:0.02 },
        "blood": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "excrement": { elem2:"gaseous_material", attr2:{"nutrition":5}, chance:0.02 },
        "urine": { elem2:"gaseous_material", attr2:{"nutrition":5}, chance:0.02 },
        "tea": { elem2:"digested_material", attr2:{"nutrition":5, "speed":5}, chance:0.02 },
        "infection": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "cancer": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "plague": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "glue": { elem2:"digested_material", attr2:{"nutrition":5}, chance:0.02 },
        "fentanyl": { elem2:"gaseous_material", attr2:{"nutrition":-5}, chance:0.01 },
    },
    category: "biology",
    tempHigh: 600,
    stateHigh: "pop",
    burn: 100,
    burnTime: 1,
    burnInto: "explosion",
    breakInto: ["explosion","pop"],
    viscosity: 36,
    tempLow: -58.88,
    state: "liquid",
    density: 1550,
    isAcid: true,
}

elements.deoxygenated_water = {
    color: "#829BD4",
    behavior: behaviors.LIQUID,
    tempHigh: 100,
    stateHigh: "steam",
    tempLow: 0,
    stateLow: "ice",
    category: "liquids",
    heatCapacity: 4.184,
    reactions: {
        "oxygen": { elem1: "water", elem2: null },
        "dust": { elem1: "dirty_water", elem2: null },
        "ash": { elem1: "dirty_water", elem2: null },
        "cyanide": { elem1: "dirty_water", elem2: null },
        "cyanide_gas": { elem1: "dirty_water", elem2: null },
        "carbon_dioxide": { elem1: "seltzer", elem2: null, oneway:true },
        "sulfur": { elem1: "dirty_water", elem2: null },
        "rat": { elem1: "dirty_water", chance:0.005 },
        "plague": { elem1: "dirty_water", elem2: null },
        "rust": { elem1: "dirty_water", chance:0.005 },
        "lead": { elem1: "dirty_water", chance:0.005 },
        "solder": { elem1: "dirty_water", chance:0.005 },
        "fallout": { elem1: "dirty_water", chance:0.25 },
        "radiation": { elem1: "dirty_water", chance:0.25 },
        "uranium": { elem1: "dirty_water", chance:0.25 },
        "rad_steam": { elem1: "dirty_water", chance:0.02 },
        "rad_glass": { elem1: "dirty_water", chance:0.005 },
        "rad_shard": { elem1: "dirty_water", chance:0.01 },
        "rotten_meat": { elem1: "dirty_water", chance:0.25 },
        "rotten_cheese": { elem1: "dirty_water", chance:0.25 },
        "cancer": { elem1: "dirty_water", chance:0.25 },
        "oil": { elem1: "dirty_water", chance:0.005 },
        "dioxin": { elem1: "dirty_water", chance:0.1 },
        "rock": { elem2: "wet_sand", chance: 0.00035 },
        "limestone": { elem2: "wet_sand", chance: 0.00035 },
        "tuff": { elem2: "wet_sand", color2:"#7a6b5c", chance: 0.00035 },
        "ruins": { elem2: "rock", chance: 0.00035 },
        "mudstone": { elem2: "mud", chance: 0.00035 },
        "fly": { elem2:"dead_bug", chance:0.1, oneway:true },
        "firefly": { elem2:"dead_bug", chance:0.1, oneway:true },
        "bee": { elem2:"dead_bug", chance:0.05, oneway:true },
        "stink_bug": { elem2:"dead_bug", chance:0.1, oneway:true },
        "cured_meat": { elem1:"salt_water", elem2:"meat" },
        "water": { elem1:"water", chance:0.005 },
        "salt_water": { elem1:"water", chance:0.005 },
        "deoxygenated_water": { elem2:"bubble", attr2:{"clone":"water"}, chance:0.001, tempMin:85 },
    },
    state: "liquid",
    density: 1100,
    conduct: 0.02,
    stain: -0.5,
    extinguish: true
}

elements.real_bone = {
    color: "#d9d9d9",
    behavior: behaviors.WALL,
    reactions: {
        "water": { elem2:"broth", tempMin:70 },
        "salt_water": { elem2:"broth", tempMin:70 },
        "sugar_water": { elem2:"broth", tempMin:70 },
        "seltzer": { elem2:"broth", tempMin:70 },
    },
    nutrTrans: 10,
    oxygTrans: 15,
    isMultiDie: false,
    normDie: "bone",
    otherDie: "bone",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioBone(pixel);
        doDefaults(pixel);
    },
    category:"biology",
    tempHigh: 260,
    stateHigh: "bone",
    tempLow: -36,
    stateLow: "bone",
    state: "solid",
    density: 1900,
    hardness: 0.5,
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,
    },
    breakInto: ["real_bone_marrow","real_bone_marrow","blood","bone","bone","bone","bone","bone","bone","bone","bone","bone","bone","bone","bone"],
    movable: false,
    isBio: true,
    burn: 1,
    burnTime: 100,
    burnInto: ["bone","bone","bone","bone","quicklime"],
    desc: "Hard organism building material!"
}

elements.real_bone_marrow = {
	color: "#D3A491",
	category: "biology",
    behavior: [
        "SW:real_bone_marrow%0.25|SW:real_bone_marrow%1.25|SW:real_bone_marrow%0.25",
        "SW:real_bone_marrow%1.25|XX|SW:real_bone_marrow%1.25",
        "SW:real_bone_marrow%0.25|SW:real_bone_marrow%1.25|SW:real_bone_marrow%0.25",
    ],
    nutrTrans: 25,
    oxygTrans: 30,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if (Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050)) && Math.random() < 0.005) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coords = squareCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    createPixel("real_bone",x,y);
                }
            }
        }
        doBioNorm(pixel);
        doDefaults(pixel);
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].isBlood === true) {
                if (Math.random() > 0.9995 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2020))) {
                    hitPixel.element = "white_blood_cell";
                    hitPixel.color = elements.white_blood_cell.color;
                }
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].isBlood === true) {
                if (Math.random() > 0.9995 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2020))) {
                    hitPixel.element = "white_blood_cell";
                    hitPixel.color = elements.white_blood_cell.color;
                }
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].isBlood === true) {
                if (Math.random() > 0.9995 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2020))) {
                    hitPixel.element = "white_blood_cell";
                    hitPixel.color = elements.white_blood_cell.color;
                }
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].isBlood === true) {
                if (Math.random() > 0.9995 && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2020))) {
                    hitPixel.element = "white_blood_cell";
                    hitPixel.color = elements.white_blood_cell.color;
                }
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: .001,
    tempHigh: 350,
    stateHigh: "cooked_meat",
    tempLow: -40,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 400,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
    hardness: 0.2,
    forceSaveColor: true,
	reactions: {
		"cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","meat","rotten_meat","cooked_meat","flesh"], chance:0.2 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    extinguish: true,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
    desc: "Makes bones and white blood cells!"
}

elements.cartilage = {
    color: "#DBDBDB",
    behavior: behaviors.WALL,
    nutrTrans: 10,
    oxygTrans: 15,
    isMultiDie: false,
    normDie: "quicklime",
    otherDie: "water",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioBone(pixel);
        doDefaults(pixel);
    },
    category:"biology",
    tempHigh: 200,
    stateHigh: ["calcium","glue","steam","steam","meat","steam",null],
    tempLow: -36,
    stateLow: ["calcium","calcium","meat","water","water","water",null],
    state: "solid",
    density: 1900,
    hardness: 0.05,
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    breakInto: ["quicklime","calcium","meat","meat","water","water",null],
    movable: false,
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    burn: 1,
    burnTime: 100,
    burnInto: ["bone","bone","bone","bone","quicklime"],
    desc: "Bones but slightly worse!"
}

elements.cerebrospinal_fluid = {
    color: "#CBC3E3",
    behavior: behaviors.LIQUID,
    ageRate: 0.975,
    nutrTrans: 30,
    oxygTrans: 35,
    tick: function(pixel) {
        if (pixel.nutrition === null || isNaN(pixel.nutrition)) {
            pixel.nutrition = 500
        }
        if (pixel.oxygen === null || isNaN(pixel.oxygen)) {
            pixel.oxygen = 500
        }
        if (pixel.speed === null || isNaN(pixel.speed)) {
            pixel.speed = 0
        }
        if (pixel.immune === true && pixel.poisoned != false) {
            pixel.poisoned = false
        }
        if ((pixel.temp > 66 || pixel.burning) && Math.random() > 0.95) {
            if (!pixel.burnt) { pixel.burnt = 1 }
            else { pixel.burnt ++ }
        }
        if (pixel.char != pixel.burnt && pixel.burnt > pixel.char || !pixel.char) {
            pixel.char = pixel.burnt
        }
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
                if (hitPixel.oxygen < pixel.oxygen) {
                    hitPixel.oxygen += 15
                    pixel.oxygen -= 15
                }
                if (hitPixel.nutrition < pixel.nutrition) {
                    hitPixel.nutrition += 10
                    pixel.nutrition -= 10
                }
                if (hitPixel.speed < pixel.speed) {
                    hitPixel.speed += 1
                    pixel.speed -= 1
                }
                if (hitPixel.poisoned != true && pixel.poisoned == true) {
                    hitPixel.poisoned = true
                }
                if (hitPixel.immune != true && pixel.immune == true) {
                    hitPixel.poisoned = false
                    hitPixel.immune = true
                }
                if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
                    hitPixel.burnt--
                }
                if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
                    hitPixel.burning = false
                }
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
                if (hitPixel.oxygen < pixel.oxygen) {
                    hitPixel.oxygen += 15
                    pixel.oxygen -= 15
                }
                if (hitPixel.nutrition < pixel.nutrition) {
                    hitPixel.nutrition += 10
                    pixel.nutrition -= 10
                }
                if (hitPixel.speed < pixel.speed) {
                    hitPixel.speed += 1
                    pixel.speed -= 1
                }
                if (hitPixel.poisoned != true && pixel.poisoned == true) {
                    hitPixel.poisoned = true
                }
                if (hitPixel.immune != true && pixel.immune == true) {
                    hitPixel.poisoned = false
                    hitPixel.immune = true
                }
                if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
                    hitPixel.burnt--
                }
                if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
                    hitPixel.burning = false
                }
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
                if (hitPixel.oxygen < pixel.oxygen) {
                    hitPixel.oxygen += 15
                    pixel.oxygen -= 15
                }
                if (hitPixel.nutrition < pixel.nutrition) {
                    hitPixel.nutrition += 10
                    pixel.nutrition -= 10
                }
                if (hitPixel.speed < pixel.speed) {
                    hitPixel.speed += 1
                    pixel.speed -= 1
                }
                if (hitPixel.poisoned != true && pixel.poisoned == true) {
                    hitPixel.poisoned = true
                }
                if (hitPixel.immune != true && pixel.immune == true) {
                    hitPixel.poisoned = false
                    hitPixel.immune = true
                }
                if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
                    hitPixel.burnt--
                }
                if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
                    hitPixel.burning = false
                }
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
                if (hitPixel.oxygen < pixel.oxygen) {
                    hitPixel.oxygen += 15
                    pixel.oxygen -= 15
                }
                if (hitPixel.nutrition < pixel.nutrition) {
                    hitPixel.nutrition += 10
                    pixel.nutrition -= 10
                }
                if (hitPixel.speed < pixel.speed) {
                    hitPixel.speed += 1
                    pixel.speed -= 1
                }
                if (hitPixel.poisoned != true && pixel.poisoned == true) {
                    hitPixel.poisoned = true
                }
                if (hitPixel.immune != true && pixel.immune == true) {
                    hitPixel.poisoned = false
                    hitPixel.immune = true
                }
                if (hitPixel.burnt > 0 && (!pixel.burnt || pixel.burnt < hitPixel.burnt && pixel.burnt < 51) && Math.random() > 0.8) {
                    hitPixel.burnt--
                }
                if (hitPixel.burning && (!pixel.burnt || pixel.burnt < 51) && Math.random() > 0.8) {
                    hitPixel.burning = false
                }
            }
        }
    },
    tempHigh: 102,
    stateHigh: ["steam","salt"],
    tempLow: -5,
    category: "biology",
    reactions: {
        "dust": { elem1: "dirty_water", elem2: null },
        "ash": { elem1: "dirty_water", elem2: null },
        "carbon_dioxide": { elem1: "dirty_water", elem2: null },
        "sulfur": { elem1: "dirty_water", elem2: null },
        "rat": { elem1: "dirty_water", chance:0.005 },
        "plague": { elem1: "dirty_water", elem2: null },
        "fallout": { elem1: "dirty_water", chance:0.25 },
        "radiation": { elem1: "dirty_water", chance:0.25 },
        "rust": { elem1: "dirty_water", chance:0.005 },
        "lead": { elem1: "dirty_water", chance:0.005 },
        "solder": { elem1: "dirty_water", chance:0.005 },
        "rock": { elem2: "wet_sand", chance: 0.0005 },
        "limestone": { elem2: "wet_sand", chance: 0.0005 },
        "fly": { elem2:"dead_bug", chance:0.1, oneway:true },
        "firefly": { elem2:"dead_bug", chance:0.1, oneway:true },
        "bee": { elem2:"dead_bug", chance:0.05, oneway:true },
        "stink_bug": { elem2:"dead_bug", chance:0.1, oneway:true },
        "cancer": { elem1: "dirty_water", chance:0.25 },
        "oil": { elem1: "dirty_water", chance:0.005 },
        "uranium": { elem1: "dirty_water", chance:0.25 },
        "wet_sand": { oneway:true, chance:0.007, func:function(pixel){
            if (isEmpty(pixel.x,pixel.y-1) || isEmpty(pixel.x,pixel.y-2) || isEmpty(pixel.x,pixel.y-3)) {
                changePixel(pixel,"foam");
                pixel.clone = "salt_water";
            }
        }},
        "salt_water": { elem2:"bubble", attr2:{"clone":"salt_water"}, chance:0.001, tempMin:85 },
        // electrolysis:
        "aluminum": { elem1:["hydrogen","hydrogen","oxygen","chlorine"], charged:true, chance:0.0025 },
        "zinc": { elem1:["hydrogen","hydrogen","oxygen","chlorine"], charged:true, chance:0.015 },
        "steel": { elem1:["hydrogen","hydrogen","oxygen","chlorine"], charged:true, chance:0.0125 },
        "iron": { elem1:["hydrogen","hydrogen","oxygen","chlorine"], charged:true, chance:0.0125 },
        "tin": { elem1:["hydrogen","hydrogen","oxygen","chlorine"], charged:true, chance:0.01 },
        "brass": { elem1:["hydrogen","hydrogen","oxygen","chlorine"], charged:true, chance:0.001 },
        "bronze": { elem1:["hydrogen","hydrogen","oxygen","chlorine"], charged:true, chance:0.001 },
        "copper": { elem1:["hydrogen","hydrogen","oxygen","chlorine"], charged:true, chance:0.0075 },
        "silver": { elem1:["hydrogen","hydrogen","oxygen","chlorine"], charged:true, chance:0.0075 },
        "gold": { elem1:["hydrogen","hydrogen","oxygen","chlorine"], charged:true, chance:0.0075 },
    },
    state: "liquid",
    density: 1026,
    stain: -0.01,
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    extinguish: true,
    isBio: true,
    desc: "Liquid that doesnt die but transfers nutrients and oxygen! Part of a secret recipe."
}

elements.urine = {
    color: ["#E9BE3C","#D0B937"],
    behavior: behaviors.LIQUID,
    tempHigh: 102,
    stateHigh: ["steam","steam","steam","salt"],
    tempLow: -2,
    stateLowName: "pee_ice",
    category: "liquids",
    reactions: {
        "sand": { elem1:null, elem2:"wet_sand", chance: 0.02},
        "dust": { elem1: "dirty_water", elem2: null },
        "ash": { elem1: "dirty_water", elem2: null },
        "carbon_dioxide": { elem1: "dirty_water", elem2: null },
        "sulfur": { elem1: "dirty_water", elem2: null },
        "rat": { elem1: "dirty_water", chance:0.005 },
        "plague": { elem1: "dirty_water", elem2: null },
        "fallout": { elem1: "dirty_water", chance:0.25 },
        "radiation": { elem1: "dirty_water", chance:0.25 },
        "rust": { elem1: "dirty_water", chance:0.005 },
        "lead": { elem1: "dirty_water", chance:0.005 },
        "solder": { elem1: "dirty_water", chance:0.005 },
        "rock": { elem2: "wet_sand", chance: 0.0005 },
        "limestone": { elem2: "wet_sand", chance: 0.0005 },
        "fly": { elem2:"dead_bug", chance:0.1, oneway:true },
        "firefly": { elem2:"dead_bug", chance:0.1, oneway:true },
        "bee": { elem2:"dead_bug", chance:0.05, oneway:true },
        "stink_bug": { elem2:"dead_bug", chance:0.1, oneway:true },
        "cancer": { elem1: "dirty_water", chance:0.25 },
        "oil": { elem1: "dirty_water", chance:0.005 },
        "uranium": { elem1: "dirty_water", chance:0.25 },
        // electrolysis:
        "aluminum": { elem1:["hydrogen","hydrogen","oxygen","chlorine","salt"], charged:true, chance:0.0025 },
        "zinc": { elem1:["hydrogen","hydrogen","oxygen","chlorine","salt"], charged:true, chance:0.015 },
        "steel": { elem1:["hydrogen","hydrogen","oxygen","chlorine","salt"], charged:true, chance:0.0125 },
        "iron": { elem1:["hydrogen","hydrogen","oxygen","chlorine","salt"], charged:true, chance:0.0125 },
        "tin": { elem1:["hydrogen","hydrogen","oxygen","chlorine","salt"], charged:true, chance:0.01 },
        "brass": { elem1:["hydrogen","hydrogen","oxygen","chlorine","salt"], charged:true, chance:0.001 },
        "bronze": { elem1:["hydrogen","hydrogen","oxygen","chlorine","salt"], charged:true, chance:0.001 },
        "copper": { elem1:["hydrogen","hydrogen","oxygen","chlorine","salt"], charged:true, chance:0.0075 },
        "silver": { elem1:["hydrogen","hydrogen","oxygen","chlorine","salt"], charged:true, chance:0.0075 },
        "gold": { elem1:["hydrogen","hydrogen","oxygen","chlorine","salt"], charged:true, chance:0.0075 },
    },
    state: "liquid",
    density: 1006,
    conduct: 0.1,
    stain: 0.01,
    stainSelf: true,
    isWaste: true,
    extinguish: true,
    desc: "Pee."
}

elements.elixir = {
    color: "#8CB6AA",
    behavior: behaviors.LIQUID,
    reactions: {
        "dirt": { elem2: "mud", elem1: null },
        "dust": { elem1: "dirty_water", elem2: null },
        "ash": { elem1: "dirty_water", elem2: null },
        "carbon_dioxide": { elem1: "dirty_water", elem2: null },
        "sulfur": { elem1: "dirty_water", elem2: null },
        "rat": { elem1: "dirty_water", chance:0.005 },
        "plague": { elem1: "dirty_water", elem2: null },
        "fallout": { elem1: "dirty_water", chance:0.25 },
        "radiation": { elem1: "dirty_water", chance:0.25 },
        "rust": { elem1: "dirty_water", chance:0.005 },
        "lead": { elem1: "dirty_water", chance:0.005 },
        "solder": { elem1: "dirty_water", chance:0.005 },
        "rock": { elem2: "wet_sand", chance: 0.0005 },
        "limestone": { elem2: "wet_sand", chance: 0.0005 },
        "fly": { elem2:"dead_bug", chance:0.1, oneway:true },
        "firefly": { elem2:"dead_bug", chance:0.1, oneway:true },
        "bee": { elem2:"dead_bug", chance:0.05, oneway:true },
        "stink_bug": { elem2:"dead_bug", chance:0.1, oneway:true },
        "cancer": { elem1: "dirty_water", chance:0.25 },
        "oil": { elem1: "dirty_water", chance:0.005 },
        "uranium": { elem1: "dirty_water", chance:0.25 },
        "cerebrospinal_fluid": { elem1:"brain_jar_juice", elem2:"brain_jar_juice", chance:0.01 },
    },
    viscosity: 4000,
    tempHigh: 120,
    stateHigh: ["steam","steam","dna","dna","stench","salt",],
    tempLow: 0,
    category:"liquids",
    state: "liquid",
    density: 1450,
    stain: 0.05,
    hidden: true,
    desc: "Part of a secret recipe."
}

elements.brain_jar_juice = {
    color: "#4F8C24",
    behavior: behaviors.LIQUID,
    hidden: true,
    tick: function(pixel) {
        if (pixel.nutrition === null || isNaN(pixel.nutrition)) {
            pixel.nutrition = 500
        }
        if (pixel.oxygen === null || isNaN(pixel.oxygen)) {
            pixel.oxygen = 500
        }
        if (pixel.speed === null || isNaN(pixel.speed)) {
            pixel.speed = 0
        }
        if (pixel.immune === true && pixel.poisoned != false) {
            pixel.poisoned = false
        }
        if ((pixel.temp > 66 || pixel.burning) && Math.random() > 0.95) {
            if (!pixel.burnt) { pixel.burnt = 1 }
            else { pixel.burnt ++ }
        }
        if (pixel.char != pixel.burnt && pixel.burnt > pixel.char || !pixel.char) {
            pixel.char = pixel.burnt
        }
        if (!isEmpty(pixel.x, pixel.y-1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y-1]
            if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
                if (hitPixel.oxygen < pixel.oxygen) {
                    hitPixel.oxygen += 1
                }
                if (hitPixel.nutrition < pixel.nutrition) {
                    hitPixel.nutrition += 1
                }
            }
        }
        if (!isEmpty(pixel.x, pixel.y+1, true)) {
            var hitPixel = pixelMap[pixel.x][pixel.y+1]
            if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
                if (hitPixel.oxygen < pixel.oxygen) {
                    hitPixel.oxygen += 1
                }
                if (hitPixel.nutrition < pixel.nutrition) {
                    hitPixel.nutrition += 1
                }
            }
        }
        if (!isEmpty(pixel.x-1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x-1][pixel.y]
            if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
                if (hitPixel.oxygen < pixel.oxygen) {
                    hitPixel.oxygen += 1
                }
                if (hitPixel.nutrition < pixel.nutrition) {
                    hitPixel.nutrition += 1
                }
            }
        }
        if (!isEmpty(pixel.x+1, pixel.y, true)) {
            var hitPixel = pixelMap[pixel.x+1][pixel.y]
            if (elements[hitPixel.element].isBio === true && Math.random() > 0.5) {
                if (hitPixel.oxygen < pixel.oxygen) {
                    hitPixel.oxygen += 1
                }
                if (hitPixel.nutrition < pixel.nutrition) {
                    hitPixel.nutrition += 1
                }
            }
        }
    },
    tempHigh: 102,
    stateHigh: ["steam","steam","dna","dna","stench","salt",],
    tempLow: -5,
    category: "biology",
    reactions: {
        "dust": { elem1: "dirty_water", elem2: null },
        "ash": { elem1: "dirty_water", elem2: null },
        "carbon_dioxide": { elem1: "dirty_water", elem2: null },
        "sulfur": { elem1: "dirty_water", elem2: null },
        "rat": { elem1: "dirty_water", chance:0.005 },
        "plague": { elem1: "dirty_water", elem2: null },
        "fallout": { elem1: "dirty_water", chance:0.25 },
        "radiation": { elem1: "dirty_water", chance:0.25 },
        "rust": { elem1: "dirty_water", chance:0.005 },
        "lead": { elem1: "dirty_water", chance:0.005 },
        "solder": { elem1: "dirty_water", chance:0.005 },
        "rock": { elem2: "wet_sand", chance: 0.0005 },
        "limestone": { elem2: "wet_sand", chance: 0.0005 },
        "fly": { elem2:"dead_bug", chance:0.1, oneway:true },
        "firefly": { elem2:"dead_bug", chance:0.1, oneway:true },
        "bee": { elem2:"dead_bug", chance:0.05, oneway:true },
        "stink_bug": { elem2:"dead_bug", chance:0.1, oneway:true },
        "cancer": { elem1: "dirty_water", chance:0.25 },
        "oil": { elem1: "dirty_water", chance:0.005 },
        "uranium": { elem1: "dirty_water", chance:0.25 },
        "wet_sand": { oneway:true, chance:0.007, func:function(pixel){
            if (isEmpty(pixel.x,pixel.y-1) || isEmpty(pixel.x,pixel.y-2) || isEmpty(pixel.x,pixel.y-3)) {
                changePixel(pixel,"foam");
                pixel.clone = "salt_water";
            }
        }},
        "brain_jar_juice": { elem2:"bubble", color2:"#81cf63", attr2:{"clone":"brain_jar_juice"}, chance:0.00005 },
    },
    state: "liquid",
    density: 1026,
    stain: -0.01,
    properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    extinguish: true,
    desc: "Made from a secret recipe with crushed fruit, cell slop and brain soup."
}

elements.bacteria = {
    color: "#769356",
    behavior: [
        "XX|SW:excrement,dirty_water,urine,infection%5 AND M2%0.5|M2%5 AND SW:excrement,dirty_water,urine,infection%5",
        "XX|FX%2|M2%5 AND SW:excrement,dirty_water,urine,infection%5 AND BO",
        "XX|M1 AND SW:excrement,dirty_water,urine,infection%5|M2%5 AND SW:excrement,dirty_water,urine,infection%5",
    ],
    reactions: {
        "sphincter": { elem2:null, chance:0.01, func:behaviors.FEEDPIXEL },
        "flesh": { elem2:null, chance:0.02, func:behaviors.FEEDPIXEL },
        "intestine": { elem2:null, chance:0.01, func:behaviors.FEEDPIXEL },
        "blood_vessel": { elem2:null, chance:0.02, func:behaviors.FEEDPIXEL },
        "dermis": { elem2:null, chance:0.02, func:behaviors.FEEDPIXEL },
        "scale_dermis": { elem2:null, chance:0.01, func:behaviors.FEEDPIXEL },
        "bug_dermis": { elem2:null, chance:0.01, func:behaviors.FEEDPIXEL },
        "lungs": { elem2:null, chance:0.02, func:behaviors.FEEDPIXEL },
        "rotten_meat": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "excrement": { elem2:[null,null,null,null,"excrement"], chance:0.05, func:behaviors.FEEDPIXEL },
        "rotten_cheese": { elem2:null, chance:0.05, func:behaviors.FEEDPIXEL },
        "cheese": { elem2:"rotten_cheese", chance:0.5, func:behaviors.FEEDPIXEL },
        "meat": { elem2:"rotten_meat", chance:0.5, func:behaviors.FEEDPIXEL },
        "cured_meat": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.01 },
        "dead_plant": { elem2:"dirt", chance:0.05, func:behaviors.FEEDPIXEL },
        "dead_bug": { elem2:null, chance:0.02, func:behaviors.FEEDPIXEL },
        "mercury": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.1 },
        "bleach": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.1 },
        "uranium": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.1 },
        "cyanide": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.1 },
        "chlorine": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.1 },
        "alcohol": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.25 },
        "water": { elem1:null, elem2:"dirty_water", chance:0.01 },
        "blood": { elem1:null, elem2:"infection", chance:0.01 },
        "salt_water": { elem1:null, elem2:"dirty_water", chance:0.01 },
        "sugar_water": { elem1:null, elem2:"dirty_water", chance:0.01, func:behaviors.FEEDPIXEL },
        "pool_water": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], elem2:"water", chance:0.005 },
        "vinegar": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.001 },
        "mouthwash": { elem1:[null,null,null,null,null,null,null,null,null,"dna"], chance:0.01 },
    },
    foodNeed: 15,
    egg: "bacteria",
    tempHigh: 100,
    stateHigh: ["dna","dna","dna","dna","dna","dna","carbon_dioxide","steam"],
    tempLow: 0,
    stateLow: "dna",
    breakInto: "dna",
    category:"life",
    burn:95,
    burnTime: 100,
    burnInto: ["dna","dna","dna","dna","dna","smoke","carbon_dioxide","steam"],
    state: "solid",
    density: 600,
    conduct: .1
}

elements.tract = {
    name: "bio-pipe",
    color: ["#7C4941","#83594C"],
    onSelect: function() {
        logMessage("Draw a pipe, wait for walls to appear, then erase the exit hole.");
    },
    nutrTrans: 25,
    oxygTrans: 30,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioNorm(pixel);
        doDefaults(pixel);
        if (!pixel.stage && pixelTicks-pixel.start > 60) {
            for (var i = 0; i < squareCoords.length; i++) {
                var coord = squareCoords[i];
                var x = pixel.x+coord[0];
                var y = pixel.y+coord[1];
                if (!isEmpty(x,y,true) && elements[pixelMap[x][y].element].movable) {
                    deletePixel(x,y)
                }
                if (isEmpty(x,y)) {
                    createPixel("flesh",x,y);
                }
            }
            pixel.stage = 1;
        }
        else if (pixel.stage === 1 && pixelTicks-pixel.start > 70) { //uninitialized
            for (var i = 0; i < squareCoords.length; i++) {
                var coord = squareCoords[i];
                var x = pixel.x+coord[0];
                var y = pixel.y+coord[1];
                if (isEmpty(x,y)) {
                    pixel.stage = 2; //blue
                    pixel.color = pixelColorPick(pixel,"#552D3F");
                    break;
                }
            }
        }
        else if (pixel.stage > 1 && pixelTicks % 3 === pixel.stage-2) { //initialized
            for (var i = 0; i < squareCoords.length; i++) {
                var coord = squareCoords[i];
                var x = pixel.x+coord[0];
                var y = pixel.y+coord[1];
                if (!isEmpty(x,y,true) && pixelMap[x][y].element === "tract") {
                    var newPixel = pixelMap[x][y];
                    if (newPixel.stage === 1) {
                        var newColor;
                        switch (pixel.stage) {
                            case 2: newPixel.stage = 3; newColor = "#554B21"; break; //green
                            case 3: newPixel.stage = 4; newColor = "#66241B"; break; //red
                            case 4: newPixel.stage = 2; newColor = "#552D3F"; break; //blue
                        }
                        newPixel.color = pixelColorPick(newPixel,newColor);
                    }
                }
            }
            var moved = false;
            shuffleArray(squareCoordsShuffle);
            for (var i = 0; i < squareCoordsShuffle.length; i++) {
                var coord = squareCoordsShuffle[i];
                var x = pixel.x+coord[0];
                var y = pixel.y+coord[1];
                if (!isEmpty(x,y,true)) {
                    var newPixel = pixelMap[x][y];
                    if (newPixel.element === "tract") {
                        var nextStage;
                        switch (pixel.stage) {
                            case 2: nextStage = 4; break; //green
                            case 3: nextStage = 2; break; //red
                            case 4: nextStage = 3; break; //blue
                        }
                        if (pixel.con && !newPixel.con && newPixel.stage === nextStage && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) { //transfer to adjacent pipe
                            newPixel.con = pixel.con;
                            newPixel.con.x = newPixel.x;
                            newPixel.con.y = newPixel.y;
                            pixel.con = null;
                            moved = true;
                            break;
                        }
                    }
                    else if (!pixel.con && elements[newPixel.element].movable) { //suck up pixel
                        pixel.con = newPixel;
                        deletePixel(newPixel.x,newPixel.y);
                        pixel.con.x = pixel.x;
                        pixel.con.y = pixel.y;
                        pixel.con.del;
                        moved = true;
                        break;
                    }
                }
            }
            if (pixel.con && !moved && Math.random() > (1 - ((pixel.nutrition + pixel.oxygen + pixel.speed) / 2050))) { // move to same stage if none other
                for (var i = 0; i < squareCoordsShuffle.length; i++) {
                    var coord = squareCoordsShuffle[i];
                    var x = pixel.x+coord[0];
                    var y = pixel.y+coord[1];
                    if (isEmpty(x,y)) {
                        delete pixel.con.del;
                        pixel.con.x = x;
                        pixel.con.y = y;
                        pixelMap[x][y] = pixel.con;
                        currentPixels.push(pixel.con);
                        pixel.con = null;
                        break;
                    }
                    if (!isEmpty(x,y,true) && pixelMap[x][y].element === "tract") {
                        var newPixel = pixelMap[x][y];
                        if (pixel.con && !newPixel.con && newPixel.stage === pixel.stage) {
                            newPixel.con = pixel.con;
                            newPixel.con.x = newPixel.x;
                            newPixel.con.y = newPixel.y;
                            pixel.con = null;
                            break;
                        }
                    }
                }
            }
        }
    },
    category: "biology",
    movable: false,
    canContain: true,
    forceSaveColor: true,
    density: 2710,
    state: "solid",
    conduct: 1,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
	reactions: {
        "cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    desc: "Biological pipe!"
}

elements.biosensor = {
	color: ["#AD6770","#B0707D"],
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        for (var i = 0; i < adjacentCoords.length; i++) {
            var coords = adjacentCoords[i];
            var x = pixel.x + coords[0];
            var y = pixel.y + coords[1];
            if (!isEmpty(x,y,true)) {
                var sensed = pixelMap[x][y];
                if (sensed.con || elements[sensed.element].movable && elements.biosensor.ignore.indexOf(sensed.element) === -1) {
                    pixel.charge = 5;
                    break;
                }
            }
        }
        doBioNorm(pixel);
        doDefaults(pixel);
    },
    ignore: ["flash"],
    density: 2710,
    state: "solid",
    conduct: 1,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
	reactions: {
        "cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
    desc: "Biological sensor!"
}

elements.bioplate = {
	color: ["#AD6770","#B0707D"],
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        if (!isEmpty(pixel.x, pixel.y-1, true)){
            if (pixel.min && elements[pixelMap[pixel.x][pixel.y-1].element].density < pixel.min) {}
            else if (pixelMap[pixel.x][pixel.y-1].element != "bioplate" || pixelMap[pixel.x][pixel.y-1].on) {
                pixel.on = true;
                var coordsToShock = [
                    [pixel.x, pixel.y+1],
                    [pixel.x+1, pixel.y],
                    [pixel.x-1, pixel.y],
                ]
                for (var i = 0; i < coordsToShock.length; i++) {
                    var x = coordsToShock[i][0];
                    var y = coordsToShock[i][1];
                    if (!isEmpty(x,y,true)) {
                        var newpixel = pixelMap[x][y];
                        if (elements[newpixel.element].conduct) {
                            newpixel.charge = 1;
                        }
                    }
                }
            }
        }
        else if (pixel.on) {
            pixel.on = false;
        }
        doBioNorm(pixel);
        doDefaults(pixel);
    },
    ignore: ["flash"],
    density: 2710,
    state: "solid",
    conduct: 1,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
	reactions: {
        "cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
    desc: "Biological pressure plate!"
}

elements.biocloner = {
	color: ["#BE9247","#C09850"],
	category: "biology",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|BCF|XX",
        "BCF|XX|BCF",
        "XX|BCF|XX",
    ],
    nutrTrans: 20,
    oxygTrans: 25,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioNorm(pixel);
        doDefaults(pixel);
        if (pixel.clone) { return }
        for (var i = 0; i < adjacentCoords.length; i++) {
            var coords = adjacentCoords[i];
            var x = pixel.x + coords[0];
            var y = pixel.y + coords[1];
            if (!isEmpty(x,y,true)) {
                pixel.temp = pixelMap[x][y].temp;
                if (pixelMap[x][y].clone) { pixel.clone = pixelMap[x][y].clone; break }
                var element = pixelMap[x][y].element;
                if (element === pixel.element || elements[pixel.element].ignore.indexOf(element) !== -1 && element !== "fuse") { continue }
                pixel.clone = element;
                break;
            }
        }
    },
    ignore: ["cloner","slow_cloner","clone_powder","floating_cloner","wire","ewall","sensor","battery","fuse","nerve","flesh"],
    ignoreConduct:["fuse"],
    density: 2710,
    state: "solid",
    conduct: 1,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
	reactions: {
        "cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
    desc: "Biological e-cloner! Turns its oxygen and nutrients into material through bio-synthesis."
}

elements.valve = {
	color: ["#A9436A","#B64F71"],
	category: "biology",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|DL:valve_extension|XX",
        "DL:valve_extension|XX|DL:valve_extension",
        "XX|DL:valve_extension|XX",
    ],
    nutrTrans: 30,
    oxygTrans: 35,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioNorm(pixel);
        doDefaults(pixel);
        if (pixel.charge || !pixel.open) {
            pixel.openAge = 0
            pixel.open = true
        }
        if (pixel.open === true) {
            pixel.openAge++
        }
        if (pixel.openAge > 29) {
            for (var i = 0; i < adjacentCoords.length; i++) {
                var coords = adjacentCoords[i];
                var x = pixel.x + coords[0];
                var y = pixel.y + coords[1];
                if (isEmpty(x,y)) {
                    createPixel("valve_extension",x,y);
                    pixel.openAge = 0;
                    pixel.open = false;
                }
            }
        }
    },
    density: 2710,
    state: "solid",
    conduct: 1,
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
	reactions: {
        "cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
    desc: "Power it to open, closes automatically."
}

elements.valve_extension = {
    name: "valve",
	color: ["#9e4839","#ba6449"],
	category: "biology",
    behavior: behaviors.WALL,
    nutrTrans: 40,
    oxygTrans: 45,
    isMultiDie: true,
    normDie: "meat",
    roomDie: "rotten_meat",
    coldDie: "frozen_meat",
    heatDie: "cooked_meat",
    hoverStat: function(pixel) {
        return "Ntr:"+pixel.nutrition+" O2:"+pixel.oxygen
    },
    tick: function(pixel) {
        doBioNorm(pixel);
        doDefaults(pixel);
    },
    density: 2710,
    state: "solid",
    tempHigh: 200,
    stateHigh: "cooked_meat",
    tempLow: -25,
    stateLow: "frozen_meat",
    burn: 5,
    burnTime: 350,
    burnInto: "cooked_meat",
    breakInto: ["blood","meat"],
	reactions: {
        "cancer": { elem1:"cancer", chance:0.0005 },
        "radiation": { elem1:["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.4 },
	},
	properties: {
        oxygen: 1000,
        nutrition: 1000,
        speed: 0,
        poisoned: false,
        immune: false,

    },
    isBio: true,
    renderer: renderPresets.FLESHBURN,
    movable: false,
    hidden: true,
    desc: "Valve gate."
}
elements.death_ray = {
    color: ["#C33846","#930C00"],
    tick: function(pixel) {
        var x = pixel.x;
        for (var y = pixel.y+1; y < height+1; y++) {
            if (outOfBounds(x, y)) {
                if (isEmpty(x, y-1)) { 
                    if (Math.random() > 0.95) {
                        createPixel("poison_gas", x, y-1);
                    }
                    else if (Math.random() > 0.5) {
                        createPixel("plague", x, y-1);
                    }
                    else if (Math.random() > 0.25) {
                        createPixel("radiation", x, y-1);
                    }
                    else {
                        createPixel("foam", x, y-1);
                        pixelMap[x][y-1].color = "#930C00";
                    }
                }
                break;
            }
            if (isEmpty(x, y)) {
                if (Math.random() > 0.1) { continue }
                createPixel("flash", x, y);
                pixelMap[x][y].color = "#C33846";
                pixelMap[x][y].delay = (y - pixel.y) / 8;
            }
            else {
                if (elements[pixelMap[x][y].element].id === elements.flash.id) { continue }
                if (elements[pixelMap[x][y].element].id === elements.death_ray.id) { break }
                if (!elements[pixelMap[x][y].element].isGas && isEmpty(x, y-1)) {
                    if (Math.random() > 0.95) {
                        createPixel("poison_gas", x, y-1);
                    }
                    else if (Math.random() > 0.95) {
                        createPixel("plague", x, y-1);
                    }
                    else if (Math.random() > 0.75) {
                        createPixel("radiation", x, y-1);
                    }
                    else {
                        createPixel("foam", x, y-1);
                        pixelMap[x][y-1].color = "#930C00";
                    }
                }
                if (Math.random() > 0.1) { continue }
                elements.drain_health.tool(pixelMap[x][y])
            }
        }
        deletePixel(pixel.x, pixel.y);
    },
    category: "energy",
    state: "gas",
    density: 1,
    excludeRandom: true,
    noMix: true,
},

elements.toilet = {
    color: "#e1e4dd",
    behavior: behaviors.WALL,
    category: "machines",
    state: "solid",
    density: 2403,
    hardness: 0.4,
    breakInto: ["porcelain_shard","porcelain_shard","porcelain_shard","porcelain_shard","porcelain_shard","porcelain_shard","porcelain_shard","water","porcelain_shard","porcelain_shard","porcelain_shard","water","porcelain_shard","porcelain_shard","porcelain_shard","urine","porcelain_shard","porcelain_shard","porcelain_shard","water","porcelain_shard","porcelain_shard","porcelain_shard","water","porcelain_shard","porcelain_shard","porcelain_shard","excrement"],
    noMix: true,
    movable: false,
    tempHigh: 900,
    stateHigh: ["porcelain_shard","porcelain_shard","porcelain_shard","porcelain_shard","porcelain_shard","porcelain_shard","porcelain_shard","water","porcelain_shard","porcelain_shard","porcelain_shard","water","porcelain_shard","porcelain_shard","porcelain_shard","urine","porcelain_shard","porcelain_shard","porcelain_shard","water","porcelain_shard","porcelain_shard","porcelain_shard","water","porcelain_shard","porcelain_shard","porcelain_shard","excrement"],
    tick: function(pixel) {
        var coords = rectCoords(pixel.x-1,pixel.y-1,pixel.x+1,pixel.y+3);
        for (var i = 0; i < coords.length; i++) { // Burn adjacent pixels
            var x = coords[i].x;
            var y = coords[i].y;
            if (!isEmpty(x,y,true)) {
                elements.toilet.tool(pixelMap[x][y]);
            }
        }
    },
    tool: function(pixel) {
        if (elements[pixel.element].isWaste === true || elements[pixel.element].id === elements.water.id) {
            deletePixel(pixel.x,pixel.y)
        }
    },
    canPlace: true,
    hidden: true,
} 

elements.ibuprofen = {
    category: "medicine",
    color: ["#c34a35","#c34a35","#c34a35","#ef866d","#993a2f","#993a2f","#c34a35","#c34a35","#c34a35"],
    state: "solid",
    behavior: behaviors.POWDER,
    tempHigh: 147,
    density: 980,
    stateHigh: ["oxygen","smoke","fire","ash","ash","dust","carbon_dioxide","oxygen","smoke","fire","ash","ash","dust","carbon_dioxide","oxygen","smoke","fire","ash","ash","dust","carbon_dioxide","sugar"],
    desc: "Helps with fevers, don't take more than 3 a day!"
}

elements.fentanyl = {
    category: "medicine",
    color: ["#d5edf3","#BFD3E5"],
    state: "solid",
    behavior: behaviors.POWDER,
    reactions: {
        "water": { elem1:null, elem2:"dirty_water", chance:0.05 },
        "salt_water": { elem1:null, elem2:"dirty_water", chance:0.03 },
        "sugar_water": { elem1:null, elem2:"dirty_water", chance:0.03 },
        "seltzer": { elem1:null, elem2:"dirty_water", chance:0.04 },
	},
    tempHigh: 137.5,
    density: 1025,
    stateHigh: ["carbon_dioxide","smoke","smoke","smoke","fire","ash","ash","dust","carbon_dioxide"],
}

if (!elements.cancer.reactions) { elements.cancer.reactions = {} }
elements.cancer.reactions.attached_hair = { elem2: "loose_hair", chance:0.4 };
elements.cancer.reactions.hair_end = { elem2: "loose_hair", chance:0.4 };
elements.cancer.reactions.flesh = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.slimey_flesh = { elem2: ["slime","cancer"], chance:0.004 };
elements.cancer.reactions.acidic_flesh = { elem2: ["acid","cancer"], chance:0.004 };
elements.cancer.reactions.cloak_flesh = { elem2: "cancer", chance:0.004 };
elements.cancer.reactions.adipose = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.blood_vessel = { elem2: ["cancer","infected_vessel","infected_vessel","infected_vessel","infected_vessel"], chance:0.05 };
elements.cancer.reactions.white_blood_cell = { elem2: ["cancer","blood","blood_vessel","blood_vessel","infected_vessel"], chance:0.005 };
elements.cancer.reactions.heart = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.kidney = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.liver = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.dermis = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.amphib_dermis = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.scale_dermis = { elem2: "cancer", chance:0.004 };
elements.cancer.reactions.epidermis = { elem2: "cancer", chance:0.0002 };
elements.cancer.reactions.amphib_skin = { elem2: "cancer", chance:0.0003 };
elements.cancer.reactions.hairy_skin = { elem2: "cancer", chance:0.0003 };
elements.cancer.reactions.hair_dermis = { elem2: "cancer", chance:0.0003 };
elements.cancer.reactions.scales = { elem2: "cancer", chance:0.0001 };
elements.cancer.reactions.real_bone = { elem2: ["bone","bone","cancer"], chance:0.0001 };
elements.cancer.reactions.real_bone_marrow = { elem2: ["bone","cancer","cancer","cancer","cancer","cancer","cancer"], chance:0.0001 };
elements.cancer.reactions.lungs = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.simple_lung = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.gills = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.brain = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.nerve = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.olfactory_bulb = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.eye = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.sphincter = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.digested_material = { elem2: "cancer", chance:0.001 };
elements.cancer.reactions.intestines = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.stomach_valve = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.stomach_lining = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.herbi_stomach = { elem2: "cancer", chance:0.004 };
elements.cancer.reactions.carni_stomach = { elem2: "cancer", chance:0.004 };
elements.cancer.reactions.explosive_stomach = { elem2: ["pop","cancer","cancer","cancer"], chance:0.003 };
elements.cancer.reactions.biotorch = { elem2: ["cooked_meat","cancer","cancer","cancer"], chance:0.003 };
elements.cancer.reactions.biosensor = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.valve = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.valve_extension = { elem2: "cancer", chance:0.005 };
elements.cancer.reactions.throat_lining = { elem2: "cancer", chance:0.005 };

if (!elements.uranium.reactions) { elements.uranium.reactions = {} }
elements.uranium.reactions.attached_hair = { elem2: "loose_hair", chance:0.4 };
elements.uranium.reactions.hair_end = { elem2: "loose_hair", chance:0.4 };
elements.uranium.reactions.flesh = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.5 };
elements.uranium.reactions.slimey_flesh = { elem2: ["ash","slime","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.uranium.reactions.acidic_flesh = { elem2: ["ash","acid","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.uranium.reactions.cloak_flesh = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.uranium.reactions.adipose = { elem2: ["ash","blood","fat","fat","meat","rotten_meat","cooked_meat"], chance:0.5 };
elements.uranium.reactions.blood_vessel = { elem2: ["ash","blood","blood","blood","blood","blood","infected_vessel","meat","rotten_meat","cooked_meat"], chance:0.5 };
elements.uranium.reactions.heart = { elem2: ["ash","blood","blood","blood","blood","blood","infected_vessel","meat","rotten_meat","cooked_meat"], chance:0.5 };
elements.uranium.reactions.kidney = { elem2: ["ash","blood","meat","rotten_meat","cooked_meat"], chance:0.5 };
elements.uranium.reactions.liver = { elem2: ["ash","blood","meat","rotten_meat","cooked_meat"], chance:0.5 };
elements.uranium.reactions.dermis = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.5 };
elements.uranium.reactions.amphib_dermis = { elem2: ["ash","blood","slime","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.5 };
elements.uranium.reactions.scale_dermis = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.5 };
elements.uranium.reactions.bug_dermis = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.5 };
elements.uranium.reactions.epidermis = { elem2: ["cooked_meat","cancer","ash","skin"], chance:0.1 };
elements.uranium.reactions.hairy_skin = { elem2: ["cooked_meat","cancer","ash","skin","hair"], chance:0.1 };
elements.uranium.reactions.hair_dermis = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.5 };
elements.uranium.reactions.amphib_skin = { elem2: ["cooked_meat","cancer","ash","skin","slime"], chance:0.4 };
elements.uranium.reactions.scales = { elem2: ["cooked_meat","cancer","ash","epidermis","skin","dust","calcium"], chance:0.1 };
elements.uranium.reactions.exoskeleton = { elem2: ["cooked_meat","cancer","ash","epidermis","skin","dust","calcium"], chance:0.1 };
elements.uranium.reactions.real_bone = { elem2: ["bone","bone","radiation"], chance:0.01 };
elements.uranium.reactions.gills = { elem2: ["ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.lungs = { elem2: ["ash","carbon_dioxide","meat","rotten_meat","cooked_meat","flesh","ash","carbon_dioxide","meat","rotten_meat","cooked_meat","flesh","ash","oxygen","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.simple_lung = { elem2: ["ash","carbon_dioxide","meat","rotten_meat","cooked_meat","flesh","ash","carbon_dioxide","meat","rotten_meat","cooked_meat","flesh","ash","oxygen","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.brain = { elem2: ["ash","steam","salt","meat","rotten_meat","cooked_meat","flesh","cerebrospinal_fluid"], chance:0.5 };
elements.uranium.reactions.amygdala = { elem2: ["ash","steam","salt","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.nerve = { elem2: ["ash","steam","salt","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.olfactory_bulb = { elem2: ["ash","steam","salt","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.eye = { elem2: ["ash","steam","salt","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.sphincter = { elem2: ["ash","steam","excrement","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.intestines = { elem2: ["ash","steam","meat","rotten_meat","cooked_meat","flesh","ash","steam","meat","rotten_meat","cooked_meat","flesh","excrement"], chance:0.5 };
elements.uranium.reactions.stomach_valve = { elem2: ["ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.stomach_lining = { elem2: ["ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.herbi_stomach = { elem2: ["cancer","ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.carni_stomach = { elem2: ["cancer","ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.explosive_stomach = { elem2: ["cancer","ash","steam","meat","rotten_meat","cooked_meat","flesh","pop"], chance:0.4 };
elements.uranium.reactions.throat_lining = { elem2: ["ash","slime","meat","rotten_meat","cooked_meat","flesh"], chance:0.5 };
elements.uranium.reactions.biotorch = { elem2: ["cancer","ash","steam","cooked_meat","rotten_meat","cooked_meat","flesh","fire"], chance:0.5 };
elements.uranium.reactions.biosensor = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.5 };
elements.uranium.reactions.valve = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.5 };
elements.uranium.reactions.valve_extension = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.5 };

if (!elements.radiation.reactions) { elements.radiation.reactions = {} }
elements.radiation.reactions.attached_hair = { elem2: "loose_hair", chance:0.4 };
elements.radiation.reactions.hair_end = { elem2: "loose_hair", chance:0.4 };
elements.radiation.reactions.flesh = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.radiation.reactions.slimey_flesh = { elem2: ["ash","slime","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.radiation.reactions.acidic_flesh = { elem2: ["ash","acid","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.radiation.reactions.cloak_flesh = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.radiation.reactions.adipose = { elem2: ["ash","blood","fat","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.radiation.reactions.blood_vessel = { elem2: ["ash","blood","blood","blood","blood","blood","infected_vessel","meat","rotten_meat","cooked_meat"], chance:0.4 };
elements.radiation.reactions.heart = { elem2: ["ash","blood","blood","blood","blood","infected_vessel","blood","meat","rotten_meat","cooked_meat"], chance:0.4 };
elements.radiation.reactions.kidney = { elem2: ["ash","blood","meat","rotten_meat","cooked_meat"], chance:0.5 };
elements.radiation.reactions.liver = { elem2: ["ash","blood","meat","rotten_meat","cooked_meat"], chance:0.5 };
elements.radiation.reactions.dermis = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.radiation.reactions.amphib_dermis = { elem2: ["ash","blood","slime","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.radiation.reactions.scale_dermis = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.radiation.reactions.scales = { elem2: ["cooked_meat","cancer","ash","epidermis","skin","dust","calcium"], chance:0.1 };
elements.radiation.reactions.exoskeleton = { elem2: ["cooked_meat","cancer","ash","epidermis","skin","dust","calcium"], chance:0.1 };
elements.radiation.reactions.bug_dermis = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.radiation.reactions.epidermis = { elem2: ["cooked_meat","cancer","ash","skin"], chance:0.1 };
elements.radiation.reactions.hairy_skin = { elem2: ["cooked_meat","cancer","ash","skin","hair"], chance:0.1 };
elements.radiation.reactions.hair_dermis = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat","cancer","cancer"], chance:0.4 };
elements.radiation.reactions.amphib_skin = { elem2: ["cooked_meat","cancer","ash","skin","slime"], chance:0.1 };
elements.radiation.reactions.real_bone = { elem2: ["bone","bone","radiation"], chance:0.01 };
elements.radiation.reactions.gills = { elem2: ["ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.lungs = { elem2: ["cancer","ash","carbon_dioxide","meat","rotten_meat","cooked_meat","flesh","ash","carbon_dioxide","meat","rotten_meat","cooked_meat","flesh","ash","oxygen","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.simple_lung = { elem2: ["cancer","ash","carbon_dioxide","meat","rotten_meat","cooked_meat","flesh","ash","carbon_dioxide","meat","rotten_meat","cooked_meat","flesh","ash","oxygen","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.brain = { elem2: ["cancer","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh","cerebrospinal_fluid"], chance:0.4 };
elements.radiation.reactions.amygdala = { elem2: ["cancer","ash","steam","salt","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.nerve = { elem2: ["cancer","ash","steam","salt","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.olfactory_bulb = { elem2: ["cancer","ash","steam","salt","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.eye = { elem2: ["cancer","ash","steam","salt","ash","steam","salt","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.sphincter = { elem2: ["cancer","ash","steam","excrement","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.intestines = { elem2: ["cancer","ash","steam","meat","rotten_meat","cooked_meat","flesh","ash","steam","meat","rotten_meat","cooked_meat","flesh","excrement"], chance:0.4 };
elements.radiation.reactions.stomach_valve = { elem2: ["cancer","ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.stomach_lining = { elem2: ["cancer","ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.herbi_stomach = { elem2: ["cancer","ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.carni_stomach = { elem2: ["cancer","ash","steam","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.explosive_stomach = { elem2: ["cancer","ash","steam","meat","rotten_meat","cooked_meat","flesh","pop"], chance:0.3 };
elements.radiation.reactions.throat_lining = { elem2: ["cancer","ash","slime","meat","rotten_meat","cooked_meat","flesh"], chance:0.4 };
elements.radiation.reactions.biotorch = { elem2: ["cancer","ash","steam","cooked_meat","rotten_meat","cooked_meat","flesh","fire"], chance:0.4 };
elements.radiation.reactions.biosensor = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.4 };
elements.radiation.reactions.valve = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.4 };
elements.radiation.reactions.valve_extension = { elem2: ["ash","blood","fat","meat","rotten_meat","cooked_meat"], chance:0.4 };

if (!elements.plague.reactions) { elements.plague.reactions = {} }
elements.plague.reactions.attached_hair = { elem2: "loose_hair", chance:0.04 };
elements.plague.reactions.hair_end = { elem2: "loose_hair", chance:0.04 };
elements.plague.reactions.flesh = { elem2: ["rotten_meat","plague","fat","meat","rotten_meat","plague","infection","infection"], chance:0.04 };
elements.plague.reactions.slimey_flesh = { elem2: ["slime","slime","rotten_meat","plague","fat","meat","rotten_meat","plague","infection","infection"], chance:0.04 };
elements.plague.reactions.cloak_flesh = { elem2: ["rotten_meat","plague","fat","meat","rotten_meat","plague","infection","infection"], chance:0.04 };
elements.plague.reactions.acidic_flesh = { elem2: ["acid","rotten_meat","steam","meat","rotten_meat","plague","flesh"], chance:0.04 };
elements.plague.reactions.adipose = { elem2: ["rotten_meat","plague","fat","fat","meat","rotten_meat","plague","infection","infection"], chance:0.04 };
elements.plague.reactions.blood_vessel = { elem2: ["rotten_meat","plague","meat","rotten_meat","plague","infected_vessel","infected_vessel","infected_vessel","infected_vessel","infected_vessel","infected_vessel"], chance:0.1 };
elements.plague.reactions.heart = { elem2: ["rotten_meat","plague","meat","rotten_meat","plague","infected_vessel","infection","infection","infection","infection","infection"], chance:0.04 };
elements.plague.reactions.kidney = { elem2: ["rotten_meat","plague","rotten_meat","meat","rotten_meat","plague","infection","infection"], chance:0.04 };
elements.plague.reactions.liver = { elem2: ["rotten_meat","plague","rotten_meat","meat","rotten_meat","plague","infection","infection"], chance:0.04 };
elements.plague.reactions.dermis = { elem2: ["rotten_meat","infection","fat","meat","rotten_meat","plague","infection","infection"], chance:0.04 };
elements.plague.reactions.hair_dermis = { elem2: ["rotten_meat","infection","fat","meat","rotten_meat","plague","infection","infection"], chance:0.04 };
elements.plague.reactions.hairy_skin = { elem2: ["plague","infection","rotten_meat","dust","dust","hair"], chance:0.04 };
elements.plague.reactions.amphib_dermis = { elem2: ["rotten_meat","infection","slime","meat","rotten_meat","plague","infection","infection"], chance:0.01 };
elements.plague.reactions.scale_dermis = { elem2: ["rotten_meat","infection","fat","meat","rotten_meat","plague","infection","infection"], chance:0.04 };
elements.plague.reactions.epidermis = { elem2: ["plague","infection","rotten_meat","dust","dust"], chance:0.01 };
elements.plague.reactions.amphib_skin = { elem2: ["plague","infection","rotten_meat","skin","slime"], chance:0.01 };
elements.plague.reactions.scales = { elem2: ["plague","infection","rotten_meat","dust","skin","calcium"], chance:0.01 };
elements.plague.reactions.real_bone = { elem2: ["bone","bone","infection","plague"], chance:0.01 };
elements.plague.reactions.gills = { elem2: ["infection","steam","meat","rotten_meat","plague","flesh","plague"], chance:0.05 };
elements.plague.reactions.lungs = { elem2: ["infection","rotten_meat","carbon_dioxide","meat","rotten_meat","plague","flesh","rotten_meat","carbon_dioxide","meat","rotten_meat","plague","flesh","rotten_meat","oxygen","meat","rotten_meat","plague","flesh"], chance:0.1 };
elements.plague.reactions.simple_lung = { elem2: ["infection","rotten_meat","carbon_dioxide","meat","rotten_meat","plague","flesh","rotten_meat","carbon_dioxide","meat","rotten_meat","plague","flesh","rotten_meat","oxygen","meat","rotten_meat","plague","flesh"], chance:0.04 };
elements.plague.reactions.brain = { elem2: ["infection","rotten_meat","steam","salt","meat","rotten_meat","plague","flesh","cerebrospinal_fluid"], chance:0.04 };
elements.plague.reactions.amygdala = { elem2: ["infection","rotten_meat","steam","salt","rotten_meat","steam","salt","meat","rotten_meat","plague","flesh"], chance:0.04 };
elements.plague.reactions.nerve = { elem2: ["infection","rotten_meat","steam","salt","rotten_meat","steam","salt","meat","rotten_meat","plague","flesh"], chance:0.04 };
elements.plague.reactions.olfactory_bulb = { elem2: ["infection","rotten_meat","steam","salt","rotten_meat","steam","salt","meat","rotten_meat","plague","flesh"], chance:0.04 };
elements.plague.reactions.eye = { elem2: ["infection","rotten_meat","steam","salt","rotten_meat","steam","salt","meat","rotten_meat","plague","flesh"], chance:0.04 };
elements.plague.reactions.sphincter = { elem2: ["infection","rotten_meat","steam","excrement","meat","rotten_meat","plague","flesh"], chance:0.04 };
elements.plague.reactions.intestines = { elem2: ["infection","rotten_meat","steam","meat","rotten_meat","plague","flesh","rotten_meat","steam","meat","rotten_meat","plague","flesh","excrement"], chance:0.04 };
elements.plague.reactions.stomach_valve = { elem2: ["infection","rotten_meat","steam","meat","rotten_meat","plague","flesh"], chance:0.04 };
elements.plague.reactions.stomach_lining = { elem2: ["infection","rotten_meat","steam","meat","rotten_meat","plague","flesh"], chance:0.04 };
elements.plague.reactions.herbi_stomach = { elem2: ["infection","rotten_meat","steam","meat","rotten_meat","plague","flesh"], chance:0.04 };
elements.plague.reactions.carni_stomach = { elem2: ["infection","rotten_meat","steam","meat","rotten_meat","plague","flesh"], chance:0.04 };
elements.plague.reactions.explosive_stomach = { elem2: ["infection","plague","steam","meat","rotten_meat","plague","flesh","pop"], chance:0.03 };
elements.plague.reactions.throat_lining = { elem2: ["infection","rotten_meat","slime","meat","rotten_meat","plague","flesh"], chance:0.04 };
elements.plague.reactions.biotorch = { elem2: ["infection","ash","steam","cooked_meat","rotten_meat","plague","plague","fire"], chance:0.04 };
elements.plague.reactions.biosensor = { elem2: ["infection","blood","fat","meat","rotten_meat","plague"], chance:0.04 };
elements.plague.reactions.valve = { elem2: ["infection","infection","fat","meat","rotten_meat","plague"], chance:0.04 };
elements.plague.reactions.valve_extension = { elem2: ["infection","infection","plague","meat","rotten_meat","plague"], chance:0.04 };

if (!elements.infection.reactions) { elements.infection.reactions = {} }
elements.infection.reactions.blood_vessel = { elem2: ["infection","infected_vessel","infected_vessel","infected_vessel","infected_vessel","infected_vessel","infected_vessel","infected_vessel"], chance:0.1 };
elements.infection.reactions.heart = { elem2: ["infection","infected_vessel","infection","infection","infection","infection","infected_vessel","infected_vessel"], chance:0.02 };

if (!elements.fly.reactions) { elements.infection.reactions = {} }
elements.fly.reactions.excrement = { elem2:[null,null,"stench"], chance:0.15, func:behaviors.FEEDPIXEL };

if (!elements.stench.reactions) { elements.infection.reactions = {} }
elements.stench.reactions.intestines = { elem1:[null,null,null,null,null,null,"foam"], chance:0.005, };
elements.stench.reactions.stomach_valve = { elem1:[null,null,null,null,null,null,"foam"], chance:0.015, };

elements.bless.reactions.excrement = { elem2:null }
elements.bless.reactions.infected_vessel = { elem2:["blood_vessel","blood_vessel","blood_vessel","blood_vessel","blood_vessel","blood_vessel","white_blood_cell"] }
elements.bless.reactions.urine = { elem2:"water" }
elements.bless.tool = function(pixel) {
    if (elements.bless.ignore.indexOf(pixel.element) !== -1) { return; }
    if (pixel.burning && !elements[pixel.element].burning) { // stop burning
        delete pixel.burning;
        delete pixel.burnStart;
    }
    if (!elements[pixel.element].insulate) {
        if (pixel.temp > 100) {
            pixel.temp = (pixel.temp+100)/2;
            pixelTempCheck(pixel);
            if (pixel.del) {return}
        }
        if (pixel.temp < -200) {
            pixel.temp = (pixel.temp-200)/2;
            pixelTempCheck(pixel);
            if (pixel.del) {return}
        }
    }
    if (pixel.origColor) {
        pixel.color = "rgb("+pixel.origColor.join(",")+")";
        delete pixel.origColor;
    }
    if (pixel.charge) {
        delete pixel.charge;
        pixel.chargeCD = 16;
    }
    if (elements.bless.reactions[pixel.element] && Math.random()<0.25) {
        var r = elements.bless.reactions[pixel.element];
        var elem2 = r.elem2;
        if (elem2 !== undefined) {
            if (Array.isArray(elem2)) { elem2 = elem2[Math.floor(Math.random()*elem2.length)]; }
            if (elem2 === null) { deletePixel(pixel.x,pixel.y) }
            else { changePixel(pixel, elem2); }
        }
        if (r.func) { r.func(pixel,pixel) }
        if (r.color2) { pixel.color = pixelColorPick(pixel,r.color2) }
    }
    if (elements[pixel.element].isBio == true) {
        if (pixel.nutrition < 2000 || pixel.oxygen < 2000) {
            if (pixel.nutrition < 2000) {
                pixel.nutrition += 100
            }
            if (pixel.oxygen < 2000) {
                pixel.oxygen += 100
            }
            if (pixel.speed < 0) {
                pixel.oxygen += 10
            }
        }
        if (pixel.burning) {
            pixel.burning = false
        }
    }
}

elements.dna.reactions.juice = { elem1: null, elem2: "elixir", chance:0.01 }

elements.dirty_water.isWaste = true;
elements.salt_water.isWaste = true;
elements.dirty_water.isWaste = true;

elements.acid.isAcid = true;


if (!elements.glass_shard.reactions) { elements.glass_shard.reactions = {} }
elements.glass_shard.reactions.intestines = { elem2: ["blood","blood","meat"], chance:0.001 }
elements.glass_shard.reactions.lungs = { elem2: ["blood","blood","meat"], chance:0.001 };
elements.glass_shard.reactions.simple_lung = { elem2:["blood","blood","meat"], chance:0.001 }
elements.glass_shard.reactions.flesh = { elem2: ["blood","meat","meat"], chance:0.0005 }
elements.glass_shard.reactions.blood_vessel = { elem2: ["meat","infected_vessel","blood","blood","blood","blood","blood"], chance:0.001 }
elements.glass_shard.reactions.epidermis = { elem2: ["dust","blood","blood","blood","blood","blood"], chance:0.0001 }
elements.glass_shard.reactions.dermis = { elem2: ["dust","blood","blood","blood","blood","blood"], chance:0.0001 }

if (!elements.rad_shard.reactions) { elements.rad_shard.reactions = {} }
elements.rad_shard.reactions.intestines = { elem2: ["blood","blood","meat"], chance:0.001 }
elements.rad_shard.reactions.lungs = { elem2: ["blood","blood","meat"], chance:0.001 }
elements.rad_shard.reactions.simple_lung = { elem2:["blood","blood","meat"], chance:0.001 }
elements.rad_shard.reactions.flesh = { elem2: ["blood","meat","meat"], chance:0.0005 }
elements.rad_shard.reactions.blood_vessel = { elem2: ["meat","infected_vessel","blood","blood","blood","blood","blood"], chance:0.001 }
elements.rad_shard.reactions.epidermis = { elem2: ["dust","blood","blood","blood","blood","blood"], chance:0.0001 }
elements.rad_shard.reactions.dermis = { elem2: ["dust","blood","blood","blood","blood","blood"], chance:0.0001 }

if (!elements.porcelain_shard.reactions) { elements.porcelain_shard.reactions = {} }
elements.porcelain_shard.reactions.intestines = { elem2: ["blood","blood","meat"], chance:0.0005 }
elements.porcelain_shard.reactions.lungs = { elem2: ["blood","blood","meat"], chance:0.0005 }
elements.porcelain_shard.reactions.simple_lung = { elem2:["blood","blood","meat"], chance:0.0005 }
elements.porcelain_shard.reactions.flesh = { elem2: ["blood","meat","meat"], chance:0.0001 }
elements.porcelain_shard.reactions.blood_vessel = { elem2: ["meat","infected_vessel","blood","blood","blood","blood","blood"], chance:0.0005 }
elements.porcelain_shard.reactions.epidermis = { elem2: ["dust","blood","blood","blood","blood","blood"], chance:0.00005 }
elements.porcelain_shard.reactions.dermis = { elem2: ["dust","blood","blood","blood","blood","blood"], chance:0.00005 }

if (!elements.metal_scrap.reactions) { elements.metal_scrap.reactions = {} }
elements.metal_scrap.reactions.intestines = { elem2: ["blood","meat"], chance:0.0005 }
elements.metal_scrap.reactions.lungs = { elem2: ["blood","meat"], chance:0.0005 }
elements.metal_scrap.reactions.simple_lung = { elem2:["blood","meat"], chance:0.0005 }
elements.metal_scrap.reactions.flesh = { elem2: ["blood","meat","meat"], chance:0.0001 }
elements.metal_scrap.reactions.blood_vessel = { elem2: ["meat","infected_vessel","blood","blood","blood","blood"], chance:0.0005 }

elements.vaccine.reactions.infected_vessel = { elem1: null, elem2: "blood_vessel", attr2:{"immune": true}, chance:0.02 }
elements.antidote.reactions.infected_vessel = { elem1: null, elem2: "blood_vessel", attr2:{"immune": true}, chance:0.02 }

elements.salt_water.stateHigh = ["steam","steam","salt"]

elements.vaccine.category = "medicine"
elements.antidote.category = "medicine"





















































































//----------------------------------------------------------------------------------------------------------------------------------------------------



































































































// made by squarescreamyt

elements.cat = {
    color: ["#c05811","#cf7941","#d4ccc5","#ffe7b3","#f7b484","#ef7d51","#c15c37","#8e4024","#5f2612","#3a2930","#6b4540","#9d654f","#c68b68","#e2b98d","#ffe8aa","#292c33","#4b4f55","#76797e","#a5a6a7","#d5cfcd","#fff1e8"],
	state: "solid",
    behavior: [
        "M2%1|M2%2|M2%1",
        "M2%10|XX|M2%10",
        "XX|M1|XX",
    ],
    reactions: {
        "meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "cooked_meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "fish": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "rat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "cat_food": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.3 },
        "mercury": { elem1:"rotten_meat", chance:0.1 },
        "bleach": { elem1:"rotten_meat", chance:0.1 },
        "infection": { elem1:"rotten_meat", chance:0.025 },
        "uranium": { elem1:"rotten_meat", chance:0.1 },
        "cyanide": { elem1:"rotten_meat", chance:0.1 },
        "chlorine": { elem1:"meat", chance:0.1 },
        "alcohol": { elem1:"meat", chance:0.025 },
        "dirty_water": { elem1:"rotten_meat", chance:0.0001 },
        "pool_water": { elem1:"rotten_meat", chance:0.005 },
        "vinegar": { elem1:"rotten_meat", chance:0.001 },
    },
    egg: "kitten",
    foodNeed: 10,
    temp: 30,
    tempHigh: 100,
    stateHigh: "cooked_meat",
    tempLow: -18,
    stateLow: "frozen_meat",
    category:"life",
    breakInto: "rotten_meat",
    burn:15,
    burnTime:300,
    state: "solid",
    density: 1450,
    conduct: 0.2
};

elements.kitten = {
    color: ["#c05811","#cf7941","#d4ccc5","#ffe7b3","#f7b484","#ef7d51","#c15c37","#8e4024","#5f2612","#3a2930","#6b4540","#9d654f","#c68b68","#e2b98d","#ffe8aa","#292c33","#4b4f55","#76797e","#a5a6a7","#d5cfcd","#fff1e8"],
	state: "solid",
    behavior: [
        "M2%1|M2%2|M2%1",
        "M2%10|FX%5 AND CH:cat%0.1|M2%10",
        "XX|M1|XX",
    ],
    reactions: {
        "meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "cooked_meat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "fish": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "cat_food": { elem2:null, chance:0.3, func:behaviors.FEEDPIXEL },
        "rat": { elem2:null, chance:0.2, func:behaviors.FEEDPIXEL },
        "oxygen": { elem2:"carbon_dioxide", chance:0.3 },
        "mercury": { elem1:"rotten_meat", chance:0.1 },
        "bleach": { elem1:"rotten_meat", chance:0.1 },
        "infection": { elem1:"rotten_meat", chance:0.025 },
        "uranium": { elem1:"rotten_meat", chance:0.1 },
        "cyanide": { elem1:"rotten_meat", chance:0.1 },
        "chlorine": { elem1:"meat", chance:0.1 },
        "alcohol": { elem1:"meat", chance:0.025 },
        "dirty_water": { elem1:"rotten_meat", chance:0.0001 },
        "pool_water": { elem1:"rotten_meat", chance:0.005 },
        "vinegar": { elem1:"rotten_meat", chance:0.001 },
    },
    egg: "kitten",
    foodNeed: 10,
    temp: 30,
    tempHigh: 100,
    stateHigh: "cooked_meat",
    tempLow: -18,
    stateLow: "frozen_meat",
    category:"life",
    breakInto: "rotten_meat",
    burn:15,
    burnTime:300,
    state: "solid",
    density: 1450,
    conduct: 0.2
};

elements.cat_food = {
	color: ["#b0853c","#c28e4a","#ab8e38","#b56845","#ab6f44","#b57f38"],
	behavior: behaviors.STURDYPOWDER,
	category: "food",
	state: "solid",
	hidden: "TRUE",
    tempHigh: 1000,
    stateHigh: ["ash", "smoke"],
    density: 820.33,
    isFood: true
};

if (!elements.batter.reactions) elements.batter.reactions = {};
elements.batter.reactions.meat = { elem1: "cat_food", elem2: "cat_food" }






























































//----------------------------------------------------------------------------------------------------------------------------------------------































































// mod by nekonico 

window.addEventListener("load", () => { 
    document.getElementById("elementButton-sandboxels_screen")?.remove()
    document.getElementById("elementButton-sand_screen")?.remove()
    document.getElementById("elementButton-wet_sand_screen")?.remove()
    document.getElementById("elementButton-rock_screen")?.remove()
    document.getElementById("elementButton-wall_screen")?.remove()
    document.getElementById("elementButton-water_screen")?.remove()
    document.getElementById("elementButton-steam_screen")?.remove()
    document.getElementById("elementButton-ice_screen")?.remove()
    document.getElementById("elementButton-wood_screen")?.remove()
    document.getElementById("elementButton-sawdust_screen")?.remove()
    document.getElementById("elementButton-cellulose_screen")?.remove()
    document.getElementById("elementButton-blood_screen")?.remove()
    document.getElementById("elementButton-paper_screen")?.remove()
    document.getElementById("elementButton-body_screen")?.remove()
    document.getElementById("elementButton-head_screen")?.remove()
    document.getElementById("elementButton-ash_screen")?.remove()
    document.getElementById("elementButton-mud_screen")?.remove()
    document.getElementById("elementButton-dirt_screen")?.remove()
    document.getElementById("elementButton-bird_screen")?.remove()
    document.getElementById("elementButton-fly_screen")?.remove()
    document.getElementById("elementButton-rat_screen")?.remove()
    document.getElementById("elementButton-oxygen_screen")?.remove()
    document.getElementById("elementButton-fire_screen")?.remove()
    document.getElementById("elementButton-smoke_screen")?.remove()
    document.getElementById("elementButton-simulated_human")?.remove()
}) 

viewInfo[8] = { // Screen Thermal View
    name: "screen therm",
    pixel: function(pixel,ctx) {
        if (elements[pixel.element].isScreen == true) {
        var temp = pixel.dtemp;
        if (temp < -50) {temp = -50}
        if (temp > 6000) {temp = 6000}
        // logarithmic scale, with coldest being 225 (-50 degrees) and hottest being 0 (6000 degrees)
        var hue = Math.round(225 - (Math.log(temp+100)/Math.log(6000+100))*225);
        if (hue < 0) {hue = 0}
        if (hue > 225) {hue = 225}
        drawSquare(ctx,"hsl("+hue+",100%,50%)",pixel.x,pixel.y)
        }
        else {
            var a = (settings.textures !== 0) ? pixel.alpha : undefined;
            if (((elements[pixel.element].isGas && elements[pixel.element].glow !== false) || elements[pixel.element].glow || pixel.glow) && pixel.glow !== false) {
                drawPlus(ctx,pixel.color,pixel.x,pixel.y,undefined,a)
                // if (isEmpty(pixel.x+1,pixel.y) || isEmpty(pixel.x-1,pixel.y) || isEmpty(pixel.x,pixel.y+1) || isEmpty(pixel.x,pixel.y-1)) {}
            }
            else {
                drawSquare(ctx,pixel.color,pixel.x,pixel.y,undefined,a)
            }
            if (pixel.charge && view !== 2) { // Yellow glow on charge
                if (!elements[pixel.element].colorOn) {
                    drawSquare(ctx,"rgba(255,255,0,0.5)",pixel.x,pixel.y);
                }
            }
        }
    }
}

screenTemp = function(pixel) {
    for (var i = 0; i < biCoords.length; i++) {
        var x = pixel.x+biCoords[i][0];
        var y = pixel.y+biCoords[i][1];
        if (!isEmpty(x,y,true)) {
            var newPixel = pixelMap[x][y];
            if (elements[newPixel.element].isScreen) {
                // Skip if both temperatures are the same
                if (pixel.dtemp === newPixel.dtemp || elements[newPixel.element].insulate === true) {
                    continue;
                }
                // Set both pixel temperatures to their average
                var avg = (pixel.dtemp + newPixel.dtemp)/2;
                pixel.dtemp = avg;
                newPixel.dtemp = avg;
                pixelTempCheck(pixel);
                pixelTempCheck(newPixel);
            }
        }
    }
}

doScreenBurning =  function(pixel) {
    if (pixel.digburning) { // Burning
        if (pixel.digburnStart === undefined) { pixel.digburnStart = pixelTicks }
        var info = elements[pixel.element];
        if (!info.insulate) { pixel.dtemp += 1; }
        if (pixel.dtemp < 0) {
            pixel.digburning = undefined;
            pixel.digburnStart = undefined;
            return;
        }
        for (var i = 0; i < adjacentCoords.length; i++) { // Burn adjacent pixels
            var x = pixel.x+adjacentCoords[i][0];
            var y = pixel.y+adjacentCoords[i][1];
            if (!isEmpty(x,y,true)) {
                var newPixel = pixelMap[x][y];
                if (elements[newPixel.element].dburn && !newPixel.digburning) {
                    if (Math.floor(Math.random()*100) < elements[newPixel.element].dburn) {
                        newPixel.digburning = true;
                        newPixel.digburnStart = pixelTicks;
                    }
                }
                if (elements[newPixel.element].dextinguish && elements[pixel.element].digburning !== true) {
                    pixel.digburning = undefined;
                    pixel.digburnStart = undefined;
                    return;
                }
            }
        }

        if ((pixelTicks - pixel.digburnStart > (info.digburnTime || 200)) && Math.floor(Math.random()*100)<(info.dburn || 10) && !(info.digburnTime === undefined && info.hardness >= 1)) {
            var digburnInto = info.digburnInto;
            if (digburnInto === undefined) {
                digburnInto = "fire_screen";
            }
            else if (digburnInto instanceof Array) {
                digburnInto = digburnInto[Math.floor(Math.random()*digburnInto.length)];
            }
            changePixel(pixel,digburnInto);
            if (info.digfireColor !== undefined && digburnInto === "fire_screen") {
                pixel.color = pixelColorPick(pixel,info.digfireColor);
            }
            else {
                pixel.color = pixelColorPick(pixel)
            }
        }
        else if (Math.floor(Math.random()*100)<10 && info.id !== elements.fire_screen.id && info.digfireElement !== null) { // Spawn fire
            if (!isEmpty(pixel.x,pixel.y-1)) {
                var firePixel = pixelMap[pixel.x][pixel.y-1]
                if (firePixel.element === "sandboxels_screen") {
                    changePixel(firePixel,(info.digfireElement || "fire_screen"));
                    firePixel.dtemp = pixel.dtemp//+(pixelTicks - (pixel.digburnStart || 0));
                    if (info.digfireColor !== undefined) {
                        firePixel.color = pixelColorPick(pixelMap[pixel.x][pixel.y-1],info.digfireColor);
                    }
                }
                else if (!isEmpty(pixel.x,pixel.y+1)) {
                    var firePixel = pixelMap[pixel.x][pixel.y+1]
                    if (firePixel.element === "sandboxels_screen") {
                        changePixel(firePixel,(info.digfireElement || "fire_screen"));
                        firePixel.dtemp = pixel.dtemp//+(pixelTicks - (pixel.burnStart || 0));
                        if (info.digfireColor !== undefined) {
                            firePixel.color = pixelColorPick(pixelMap[pixel.x][pixel.y+1],info.digfireColor);
                        }
                    }
                }
            }
            // same for below if top is blocked
            else if (!isEmpty(pixel.x,pixel.y+1)) {
                var firePixel = pixelMap[pixel.x][pixel.y+1]
                if (firePixel.element === "sandboxels_screen") {
                    changePixel(firePixel,(info.digfireElement || "fire_screen"));
                    firePixel.dtemp = pixel.dtemp//+(pixelTicks - (pixel.burnStart || 0));
                    if (info.digfireColor !== undefined) {
                        firePixel.color = pixelColorPick(pixelMap[pixel.x][pixel.y+1],info.digfireColor);
                    }
                }
            }
        }

    }
}

elements.sandboxels_screen_off = {
    name:"screen",
    color: "#454545",
    behavior: behaviors.WALL,
    tick: function(pixel) {
        if (pixel.dtemp !== 20) { pixel.dtemp = 20 }
        if (pixel.charge) { pixel.charges = pixelTicks }
        if (pixelTicks - 1 > pixel.charges) {
            changePixel(pixel,"sandboxels_screen")
        }
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    conduct: 1,
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","sand"],
    tempLow: -80,
    stateLow: "glass_shard",
    category: "simulation",
    state: "solid",
    density: 1200,
    desc: "Shock to turn on."
}
  
elements.sandboxels_screen = {
    name:"screen",
    hidden:true,
    color: "#1D1D1D",
    behavior: behaviors.WALL,
    tick: function(pixel) {
        if (pixel.dtemp !== 20) { pixel.dtemp = 20 }
        if (pixel.charge) { pixel.charge = 0 }
    },
    conduct: 1,
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","sand"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    state: "solid",
    density: 1200,
}

elements.simulated_heat = {
    color: "#ff0000",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tool: function(pixel) {
        if (elements[pixel.element].isScreen === true) {
            pixel.dtemp += 2 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to heat simulated elements."
}

elements.simulated_cool = {
    color: "#0000ff",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tool: function(pixel) {
        if (elements[pixel.element].isScreen === true) {
            pixel.dtemp -= 2
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to cool simulated elements."
}

elements.simulated_roomtemp = {
    color: "#b1c96d",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tool: function(pixel) {
        if (elements[pixel.element].isScreen === true) {
            pixel.dtemp = 20
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to make simulated elements room temperature."
}

elements.simulated_smash = {
    color: ["#666666","#888888","#666666"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tool: function(pixel) {
        if (elements[pixel.element].isScreen === true && elements[pixel.element].digBreakInto) {
            changePixel(pixel,elements[pixel.element].digBreakInto); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to smash simulated elements."
}

elements.simulated_erase = {
    color: "#fdb5ff",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    tool: function(pixel) {
        if (elements[pixel.element].isScreen === true) {
            changePixel(pixel,"sandboxels_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to erase simulated elements."
}

elements.simulated_human = {
    hidden:true,
    color: ["#46433F","#47443C","#4D483D"],
    category: "simulation",
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (!isEmpty(pixel.x, pixel.y+1),true && pixelMap[pixel.x][pixel.y+1].element === "sandboxels_screen") {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            newPixel.element = "body_screen";
            newPixel.dir = 1
            pixel.element = "head_screen";
        }
        else if (!isEmpty(pixel.x, pixel.y-1),true && pixelMap[pixel.x][pixel.y-1].element === "sandboxels_screen") {
            var newPixel = pixelMap[pixel.x][pixel.y-1];
            newPixel.element = "head_screen";
            pixel.element = "body_screen";
            pixel.dir = 1
        }
        else {
            changePixel(pixel, "sandboxels_screen");
        }
    },
    related: ["suited_body","suited_head"],
    cooldown: defaultCooldown,
    forceSaveColor: true,
}

elements.sand_screen = {
    name:"screen",
    hidden:true,
    color: "#e6d577",
    behavior: [
    "XX|XX|XX",
    "XX|XX|XX",
    "XX|XX|XX",
    ],
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","sand"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    isSolid: true,
    tick: function(pixel) {
        screenTemp(pixel)
        if (!isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
            }
            if (Math.random() > 0.5 && !isEmpty(pixel.x+1,pixel.y+1,true) && !isEmpty(pixel.x,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x+1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                }
            }
            else if (!isEmpty(pixel.x-1,pixel.y+1,true) && !isEmpty(pixel.x,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x-1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                }
            }
        }
    },
    state: "solid",
    density: 1602,
}

elements.wet_sand_screen = {
    name:"screen",
    hidden:true,
    color: ["#a19348","#b5a85e"],
    behavior: [
    "XX|XX|XX",
    "XX|XX|XX",
    "XX|XX|XX",
    ],
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","wet_sand"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    isSolid: true,
    tick: function(pixel) {
        screenTemp(pixel)
        if (!isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
            }
        }
    },
    state: "solid",
    density: 1905,
}

elements.dirt_screen = {
    name:"screen",
    hidden:true,
    color: ["#76552b","#5c4221","#573c1a","#6b481e"],
    behavior: [
    "XX|XX|XX",
    "XX|XX|XX",
    "XX|XX|XX",
    ],
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","dirt"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    isSolid: true,
    tick: function(pixel) {
        screenTemp(pixel)
        if (!isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
            }
            if (Math.random() > 0.5 && !isEmpty(pixel.x+1,pixel.y+1,true) && !isEmpty(pixel.x,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x+1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                }
            }
            else if (!isEmpty(pixel.x-1,pixel.y+1,true) && !isEmpty(pixel.x,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x-1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                }
            }
        }
    },
    state: "solid",
    density: 1602,
}

elements.mud_screen = {
    name:"screen",
    hidden:true,
    color: "#382417",
    behavior: [
    "XX|XX|XX",
    "XX|XX|XX",
    "XX|XX|XX",
    ],
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","mud"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    isSolid: true,
    tick: function(pixel) {
        screenTemp(pixel)
        if (!isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
            }
        }
    },
    state: "solid",
    density: 1905,
}

elements.rock_screen = {
    name:"screen",
    hidden:true,
    color: ["#808080","#4f4f4f","#949494"],
    behavior: [
    "XX|XX|XX",
    "XX|XX|XX",
    "XX|XX|XX",
    ],
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","rock"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    digBreakInto: "sand_screen",
    isScreen: true,
    isMoving: true,
    isSolid: true,
    tick: function(pixel) {
        screenTemp(pixel)
        if (!isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
            }
            if (Math.random() > 0.5 && !isEmpty(pixel.x+1,pixel.y+1,true) && !isEmpty(pixel.x,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x+1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                }
            }
            else if (!isEmpty(pixel.x-1,pixel.y+1,true) && !isEmpty(pixel.x,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x-1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                }
            }
        }
    },
    state: "solid",
    density: 2550,
}
    
elements.sawdust_screen = {
    name:"screen",
    hidden:true,
    color: ["#dec150","#c7b15a"],
    behavior: [
    "XX|XX|XX",
    "XX|XX|XX",
    "XX|XX|XX",
    ],
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","sawdust"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    dburn: 25,
    digburnTime: 150,
    digburnInto: ["fire_screen","fire_screen","fire_screen","ash_screen"],
    tick: function(pixel) {
        if (pixel.dtemp > 400) { changePixel(pixel,"fire_screen") }
        screenTemp(pixel)
        doScreenBurning(pixel)
        if (!isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
            }
            if (Math.random() > 0.5 && !isEmpty(pixel.x+1,pixel.y+1,true) && !isEmpty(pixel.x,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x+1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                }
            }
            else if (!isEmpty(pixel.x-1,pixel.y+1,true) && !isEmpty(pixel.x,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x-1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                }
            }
        }
    },
    state: "solid",
    density: 393,
}

elements.ash_screen = {
    name:"screen",
    hidden:true,
    color: ["#8c8c8c","#9c9c9c"],
    behavior: [
    "XX|XX|XX",
    "XX|XX|XX",
    "XX|XX|XX",
    ],
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","sawdust"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    tick: function(pixel) {
        screenTemp(pixel)
        if (!isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
            }
            if (Math.random() > 0.5 && !isEmpty(pixel.x+1,pixel.y+1,true) && !isEmpty(pixel.x,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x+1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                }
            }
            else if (!isEmpty(pixel.x-1,pixel.y+1,true) && !isEmpty(pixel.x,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x-1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                }
            }
        }
    },
    state: "solid",
    density: 700,
}

elements.cellulose_screen = {
    name:"screen",
    hidden:true,
    color: "#c7d4c9",
    behavior: [
    "XX|XX|XX",
    "SW:sandboxels_screen|XX|SW:sandboxels_screen",
    "SW:sandboxels_screen|XX|SW:sandboxels_screen",
    ],
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","cellulose"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    tick: function(pixel) {
        if (pixel.dtemp > 99) { changePixel(pixel,"paper_screen") }
        screenTemp(pixel)
        if (Math.random() > 0.2 && !isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
            }
            else if (Math.random() > 0.5 && !isEmpty(pixel.x+1,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x+1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    pixel.dtemp = newPixel.dtemp;
                    newPixel.dtemp = pixel.dtemp;
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                }
            }
            else if (!isEmpty(pixel.x-1,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x-1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    pixel.dtemp = newPixel.dtemp;
                    newPixel.dtemp = pixel.dtemp;
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                }
            }
        }
        else if (Math.random() > 0.5 && !isEmpty(pixel.x+1,pixel.y,true)) {
            var newPixel = pixelMap[pixel.x+1][pixel.y];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
            }
        }
        else if (!isEmpty(pixel.x-1,pixel.y,true)) {
            var newPixel = pixelMap[pixel.x-1][pixel.y];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
            }
        }
    },
    state: "solid",
    density: 1500,
}

elements.blood_screen = {
    name:"screen",
    hidden:true,
    color: ["#ff0000","#ee0000"],
    behavior: [
    "XX|XX|XX",
    "SW:sandboxels_screen|XX|SW:sandboxels_screen",
    "SW:sandboxels_screen|XX|SW:sandboxels_screen",
    ],
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","blood"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    tick: function(pixel) {
        if (pixel.dtemp > 99) { changePixel(pixel,"steam_screen") }
        screenTemp(pixel)
        if (Math.random() > 0.2 && !isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                    newPixel.dtemp = ((pixel.dtemp + newPixel.dtemp) / 2)
                    pixel.dtemp = newPixel.dtemp
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                    if (elements[newPixel.element].id === elements.sand_screen.id) {
                        changePixel(newPixel, "wet_sand_screen")
                        changePixel(pixel, "sandboxels_screen")
                    }
            }
            else if (Math.random() > 0.5 && !isEmpty(pixel.x+1,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x+1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    pixel.dtemp = newPixel.dtemp;
                    newPixel.dtemp = pixel.dtemp;
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                    if (elements[newPixel.element].id === elements.sand_screen.id) {
                        changePixel(newPixel, "wet_sand_screen")
                        changePixel(pixel, "sandboxels_screen")
                    }
                }
            }
            else if (!isEmpty(pixel.x-1,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x-1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    pixel.dtemp = newPixel.dtemp;
                    newPixel.dtemp = pixel.dtemp;
                    if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel, pixel)
                    }
                    if (elements[newPixel.element].id === elements.sand_screen.id) {
                        changePixel(newPixel, "wet_sand_screen")
                        changePixel(pixel, "sandboxels_screen")
                    }
                }
            }
        }
        else if (Math.random() > 0.5 && !isEmpty(pixel.x+1,pixel.y,true)) {
            var newPixel = pixelMap[pixel.x+1][pixel.y];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
                if (elements[newPixel.element].id === elements.sand_screen.id) {
                    changePixel(newPixel, "wet_sand_screen")
                    changePixel(pixel, "sandboxels_screen")
                }
            }
        }
        else if (!isEmpty(pixel.x-1,pixel.y,true)) {
            var newPixel = pixelMap[pixel.x-1][pixel.y];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
                if (elements[newPixel.element].id === elements.sand_screen.id) {
                    changePixel(newPixel, "wet_sand_screen")
                    changePixel(pixel, "sandboxels_screen")
                }
            }
        }
    },
    state: "solid",
    density: 1060,
}
    
elements.water_screen = {
    name:"screen",
    hidden:true,
    color: "#2167ff",
    behavior: [
    "XX|XX|XX",
    "SW:sandboxels_screen|XX|SW:sandboxels_screen",
    "SW:sandboxels_screen|XX|SW:sandboxels_screen",
    ],
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","water"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    tick: function(pixel) {
        if (pixel.dtemp < 0) { changePixel(pixel,"ice_screen") }
        if (pixel.dtemp > 99) { changePixel(pixel,"steam_screen") }
        screenTemp(pixel)
        if (Math.random() > 0.2 && !isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
                if (elements[newPixel.element].id === elements.sand_screen.id) {
                    changePixel(newPixel, "wet_sand_screen")
                    changePixel(pixel, "sandboxels_screen")
                }
                if (elements[newPixel.element].id === elements.dirt_screen.id) {
                    changePixel(newPixel, "mud_screen")
                    changePixel(pixel, "sandboxels_screen")
                }
                if (elements[newPixel.element].id === elements.sawdust_screen.id || elements[newPixel.element].id === elements.paper_screen.id) {
                    changePixel(newPixel, "cellulose_screen")
                    changePixel(pixel, "sandboxels_screen")
                }
            }
            else if (Math.random() > 0.5 && !isEmpty(pixel.x+1,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x+1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    newPixel.dtemp = ((pixel.dtemp + newPixel.dtemp) / 2)
                    pixel.dtemp = newPixel.dtemp
                    if (elements[newPixel.element].id === elements.sand_screen.id) {
                        changePixel(newPixel, "wet_sand_screen")
                        changePixel(pixel, "sandboxels_screen")
                    }
                    if (elements[newPixel.element].id === elements.dirt_screen.id) {
                        changePixel(newPixel, "mud_screen")
                        changePixel(pixel, "sandboxels_screen")
                    }
                    if (elements[newPixel.element].id === elements.sawdust_screen.id || elements[newPixel.element].id === elements.paper_screen.id) {
                        changePixel(newPixel, "cellulose_screen")
                        changePixel(pixel, "sandboxels_screen")
                    }
                }
            }
            else if (!isEmpty(pixel.x-1,pixel.y+1,true)) {
                newPixel = pixelMap[pixel.x-1][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    changePixel(newPixel,pixel.element);
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
                else if (elements[newPixel.element].isScreen === true) {
                    newPixel.dtemp = ((pixel.dtemp + newPixel.dtemp) / 2)
                    pixel.dtemp = newPixel.dtemp
                    if (elements[newPixel.element].id === elements.sand_screen.id) {
                        changePixel(newPixel, "wet_sand_screen")
                        changePixel(pixel, "sandboxels_screen")
                    }
                    if (elements[newPixel.element].id === elements.dirt_screen.id) {
                        changePixel(newPixel, "mud_screen")
                        changePixel(pixel, "sandboxels_screen")
                    }
                    if (elements[newPixel.element].id === elements.sawdust_screen.id || elements[newPixel.element].id === elements.paper_screen.id) {
                        changePixel(newPixel, "cellulose_screen")
                        changePixel(pixel, "sandboxels_screen")
                    }
                }
            }
        }
        else if (Math.random() > 0.5 && !isEmpty(pixel.x+1,pixel.y,true)) {
            var newPixel = pixelMap[pixel.x+1][pixel.y];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
                if (elements[newPixel.element].id === elements.sand_screen.id) {
                    changePixel(newPixel, "wet_sand_screen")
                    changePixel(pixel, "sandboxels_screen")
                }
                if (elements[newPixel.element].id === elements.dirt_screen.id) {
                    changePixel(newPixel, "mud_screen")
                    changePixel(pixel, "sandboxels_screen")
                }
                if (elements[newPixel.element].id === elements.sawdust_screen.id || elements[newPixel.element].id === elements.paper_screen.id) {
                    changePixel(newPixel, "cellulose_screen")
                    changePixel(pixel, "sandboxels_screen")
                }
            }
        }
        else if (!isEmpty(pixel.x-1,pixel.y,true)) {
            var newPixel = pixelMap[pixel.x-1][pixel.y];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
                if (elements[newPixel.element].id === elements.sand_screen.id) {
                    changePixel(newPixel, "wet_sand_screen")
                    changePixel(pixel, "sandboxels_screen")
                }
                if (elements[newPixel.element].id === elements.dirt_screen.id) {
                    changePixel(newPixel, "mud_screen")
                    changePixel(pixel, "sandboxels_screen")
                }
                if (elements[newPixel.element].id === elements.sawdust_screen.id || elements[newPixel.element].id === elements.paper_screen.id) {
                    changePixel(newPixel, "cellulose_screen")
                    changePixel(pixel, "sandboxels_screen")
                }
            }
        }
    },
    state: "solid",
    density: 997,
}

elements.steam_screen = {
    name:"screen",
    hidden:true,
    color: "#abd6ff",
    properties: {
        dtemp: 150,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","steam"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    tick: function(pixel) {
        if (pixel.dtemp < 100) { changePixel(pixel,"water_screen") }
        screenTemp(pixel)
        if (Math.random() > 0.5) {
            pixel.dir1 = 1
        }
        else {
            pixel.dir1 = -1
        }
        if (Math.random() < 0.5) {
            pixel.dir2 = 1
        }
        else {
            pixel.dir2 = -1
        }
        if (Math.random() > 0.25 && !isEmpty(pixel.x+(pixel.dir1),pixel.y-(pixel.dir2),true)) {
            var newPixel = pixelMap[pixel.x+(pixel.dir1)][pixel.y-(pixel.dir2)];
            if (newPixel.element === "sandboxels_screen") {
                changePixel(newPixel,pixel.element);
                newPixel.dtemp = pixel.dtemp;
                changePixel(pixel,"sandboxels_screen");
            }
            else if (elements[newPixel.element].isScreen === true) {
            }
        }
    },
    state: "solid",
    density: 0.6,
}

elements.oxygen_screen = {
    name:"screen",
    hidden:true,
    color: "#99c7ff",
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","oxygen"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    tick: function(pixel) {
        screenTemp(pixel)
        if (Math.random() > 0.5) {
            pixel.dir1 = 1
        }
        else {
            pixel.dir1 = -1
        }
        if (Math.random() < 0.5) {
            pixel.dir2 = 1
        }
        else {
            pixel.dir2 = -1
        }
        if (Math.random() > 0.5 && !isEmpty(pixel.x+(pixel.dir1),pixel.y-(pixel.dir2),true)) {
            var newPixel = pixelMap[pixel.x+(pixel.dir1)][pixel.y-(pixel.dir2)];
            if (newPixel.element === "sandboxels_screen") {
                swapPixels(newPixel, pixel)
            }
            else if (elements[newPixel.element].isScreen === true) {
            }
        }
    },
    state: "solid",
    density: 1.292,
}

elements.fire_screen = {
    name:"screen",
    hidden:true,
    color: ["#ff6b21","#ffa600","#ff4000"],
    properties: {
        dtemp: 600,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","oxygen"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    digburning: true,
    digburnTime: 25,
    digburnInto: "smoke_screen",
    tick: function(pixel) {
        if (pixel.dtemp < 100) { changePixel(pixel,"smoke_screen") }
        screenTemp(pixel)
        doScreenBurning(pixel)
        if (Math.random() > 0.975) {
            changePixel(pixel,"smoke_screen")
        }
        if (Math.random() > 0.5) {
            pixel.dir1 = 1
        }
        else {
            pixel.dir1 = -1
        }
        if (Math.random() < 0.75) {
            pixel.dir2 = 1
        }
        else {
            pixel.dir2 = -1
        }
        if (Math.random() > 0.05 && !isEmpty(pixel.x+(pixel.dir1),pixel.y-(pixel.dir2),true)) {
            var newPixel = pixelMap[pixel.x+(pixel.dir1)][pixel.y-(pixel.dir2)];
            if (newPixel.element === "sandboxels_screen") {
                swapPixels(newPixel, pixel)
            }
            else if (elements[newPixel.element].isScreen === true) {
            }
        }
    },
    state: "solid",
    density: 0.1,
}

elements.smoke_screen = {
    name:"screen",
    hidden:true,
    color: "#383838",
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","oxygen"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isMoving: true,
    tick: function(pixel) {
        if (pixel.dtemp > 1000) { changePixel(pixel,"fire_screen") }
        screenTemp(pixel)
        if (Math.random() > 0.95) {
            changePixel(pixel,"sandboxels_screen")
        }
        if (Math.random() > 0.5) {
            pixel.dir1 = 1
        }
        else {
            pixel.dir1 = -1
        }
        if (Math.random() < 0.5) {
            pixel.dir2 = 1
        }
        else {
            pixel.dir2 = -1
        }
        if (Math.random() > 0.5 && !isEmpty(pixel.x+(pixel.dir1),pixel.y-(pixel.dir2),true)) {
            var newPixel = pixelMap[pixel.x+(pixel.dir1)][pixel.y-(pixel.dir2)];
            if (newPixel.element === "sandboxels_screen") {
                swapPixels(newPixel, pixel)
            }
            else if (elements[newPixel.element].isScreen === true) {
            }
        }
    },
    state: "solid",
    density: 1.292,
}

elements.body_screen = {
    color: ["#A8A7AB","#878689"],
    name:"screen",
    hidden:true,
    behavior: behaviors.WALL,
    properties: {
        dtemp: 20,
        dir: 1,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","body"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    digBreakInto: "blood_screen",
    isScreen: true,
    isSolid: true,
    dburn: 10,
    digburnTime: 250,
    digburnInto: ["fire_screen","ash_screen","ash_screen"],
    tick: function(pixel) {
        if (pixel.dtemp > 300) { changePixel(pixel,"ash_screen") }
        screenTemp(pixel)
        doScreenBurning(pixel)
        if (!isEmpty(pixel.x,pixel.y-1,true) && pixelMap[pixel.x][pixel.y-1].element === "head_screen") {
            var headPixel = pixelMap[pixel.x][pixel.y-1]
            if (Math.random() > 0.9) {
                pixel.dir *= -1
            }
            if (!isEmpty(pixel.x,pixel.y+1,true)) {
                var newPixel = pixelMap[pixel.x][pixel.y+1]
                if (newPixel.element === "sandboxels_screen") {
                    swapPixels(headPixel, pixel)
                    swapPixels(newPixel, pixel)
                }
                else if (elements[newPixel.element].isScreen === true) {
                    if (Math.random() < 0.5 && !isEmpty(pixel.x+pixel.dir,pixel.y,true) && !isEmpty(pixel.x+pixel.dir,pixel.y-1,true)) {
                        var newPixel = pixelMap[pixel.x+pixel.dir][pixel.y];
                        var newHeadPixel = pixelMap[pixel.x+pixel.dir][pixel.y-1];
                        if (newPixel.element === "sandboxels_screen" && newHeadPixel.element === "sandboxels_screen") {
                            swapPixels(newPixel, pixel)
                            swapPixels(headPixel, newHeadPixel)
                        }
                        else if (newPixel.element !== "sandboxels_screen" && newHeadPixel.element === "sandboxels_screen") {
                            var newPixel2 = newHeadPixel;
                            var newHeadPixel2 = pixelMap[newHeadPixel.x][newHeadPixel.y-1];
                            if (newPixel2.element === "sandboxels_screen" && newHeadPixel2.element === "sandboxels_screen") {
                                swapPixels(newPixel2, pixel)
                                swapPixels(headPixel, newHeadPixel2)
                            }
                        }
                    }
                }
            }
            else if (Math.random() < 0.5 && !isEmpty(pixel.x+pixel.dir,pixel.y,true) && !isEmpty(pixel.x+pixel.dir,pixel.y-1,true)) {
                var newPixel = pixelMap[pixel.x+pixel.dir][pixel.y];
                var newHeadPixel = pixelMap[pixel.x+pixel.dir][pixel.y-1];
                if (newPixel.element === "sandboxels_screen" && newHeadPixel.element === "sandboxels_screen") {
                    swapPixels(newPixel, pixel)
                    swapPixels(headPixel, newHeadPixel)
                }
                else if (newPixel.element !== "sandboxels_screen" && newHeadPixel.element === "sandboxels_screen") {
                    var newPixel2 = newHeadPixel;
                    var newHeadPixel2 = pixelMap[newHeadPixel.x][newHeadPixel.y-1];
                    if (newPixel2.element === "sandboxels_screen" && newHeadPixel2.element === "sandboxels_screen") {
                        swapPixels(newPixel2, pixel)
                        swapPixels(headPixel, newHeadPixel2)
                    }
                }
            }
        }
        else if (!isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                swapPixels(newPixel, pixel)
            }
            else if (elements[newPixel.element].isScreen === true) {
            }
        }
    },
}

elements.head_screen = {
    color: ["#46433F","#47443C","#4D483D"],
    name:"screen",
    hidden:true,
    behavior: behaviors.WALL,
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","head"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    digBreakInto: "blood_screen",
    isScreen: true,
    isSolid: true,
    dburn: 10,
    digburnTime: 250,
    digburnInto: ["fire_screen","ash_screen","ash_screen"],
    tick: function(pixel) {
        if (pixel.dtemp > 300) { changePixel(pixel,"ash_screen") }
        screenTemp(pixel)
        doScreenBurning(pixel)
        if (!isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                if (Math.random() < 0.1) {
                    changePixel(newPixel,"blood_screen");
                    newPixel.dtemp = pixel.dtemp;
                }
                else {
                    changePixel(newPixel,"head_screen");
                    newPixel.dtemp = pixel.dtemp;
                    changePixel(pixel,"sandboxels_screen");

                }
            }
            else if (elements[newPixel.element].isScreen === true) {
            }
        }
    },
}

elements.fly_screen = {
    name:"screen",
    hidden:true,
    color: "#4c4e42",
    properties: {
        dtemp: 20,
        dir: 1,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","fly"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    digBreakInto: "blood_screen",
    isScreen: true,
    isMoving: true,
    isSolid: true,
    dburn: 95,
    digburnTime: 25,
    digburnInto: ["fire_screen","ash_screen","ash_screen"],
    tick: function(pixel) {
        if (pixel.dtemp > 100) { changePixel(pixel,"ash_screen") }
        screenTemp(pixel)
        doScreenBurning(pixel)
        if (outOfBounds(pixel.x+(pixel.dir),pixel.y) || isEmpty(pixel.x+(pixel.dir),pixel.y)) {
            if (pixel.dir === -1) {
                pixel.dir = 1
            }
            else if (pixel.dir === 1) {
                pixel.dir = -1
            }
        }
        if (Math.random() > 0.5 && !isEmpty(pixel.x+(pixel.dir),pixel.y-1,true)) {
            var newPixel = pixelMap[pixel.x+(pixel.dir)][pixel.y-1];
            if (newPixel.element === "sandboxels_screen") {
                swapPixels(newPixel, pixel)
            }
            else if (elements[newPixel.element].isScreen === true || newPixel.element !== "sandboxels_screen") {
                if (pixel.dir === -1) {
                    pixel.dir = 1
                }
                else if (pixel.dir === 1) {
                    pixel.dir = -1
                }
            }
        }
        else if (!isEmpty(pixel.x+(pixel.dir),pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x+(pixel.dir)][pixel.y+1];
            if (newPixel.element === "sandboxels_screen") {
                swapPixels(newPixel, pixel)
            }
            else if (elements[newPixel.element].isScreen === true || newPixel.element !== "sandboxels_screen") {
                if (pixel.dir === -1) {
                    pixel.dir = 1
                }
                else if (pixel.dir === 1) {
                    pixel.dir = -1
                }
            }
        }
    },
    state: "solid",
    density: 600,
}

elements.bird_screen = {
    name:"screen",
    hidden:true,
    color: "#997457",
    properties: {
        dtemp: 20,
        dir: 1,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","bird"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    digBreakInto: "blood_screen",
    isScreen: true,
    isMoving: true,
    isSolid: true,
    dburn: 2,
    digburnTime: 100,
    digburnInto: ["fire_screen","ash_screen","ash_screen"],
    tick: function(pixel) {
        if (pixel.dtemp > 300) { changePixel(pixel,"ash_screen") }
        screenTemp(pixel)
        doScreenBurning(pixel)
        if (outOfBounds(pixel.x+(pixel.dir),pixel.y) || isEmpty(pixel.x+(pixel.dir),pixel.y)) {
            if (pixel.dir === -1) {
                pixel.dir = 1
            }
            else if (pixel.dir === 1) {
                pixel.dir = -1
            }
        }
        if (Math.random() > 0.25 && !isEmpty(pixel.x+(pixel.dir),pixel.y,true)) {
            var newPixel = pixelMap[pixel.x+(pixel.dir)][pixel.y];
            if (newPixel.element === "sandboxels_screen") {
                swapPixels(newPixel, pixel)
            }
            else if (elements[newPixel.element].isScreen === true || newPixel.element !== "sandboxels_screen") {
                if (elements[newPixel.element].id === elements.fly_screen.id && Math.random() < 0.5) {
                    changePixel(newPixel, "sandboxels_screen")
                }
                if (pixel.dir === -1) {
                    pixel.dir = 1
                }
                else if (pixel.dir === 1) {
                    pixel.dir = -1
                }
            }
        }
        else {
            if (Math.random() > 0.5 && !isEmpty(pixel.x+(pixel.dir),pixel.y+1,true)) {
                var newPixel = pixelMap[pixel.x+(pixel.dir)][pixel.y+1];
                if (newPixel.element === "sandboxels_screen") {
                    swapPixels(newPixel, pixel)
                }
                else if (elements[newPixel.element].isScreen === true || newPixel.element !== "sandboxels_screen") {
                    newPixel.dtemp = ((pixel.dtemp + newPixel.dtemp) / 2)
                    pixel.dtemp = newPixel.dtemp
                    if (elements[newPixel.element].id === elements.fly_screen.id && Math.random() < 0.5) {
                        changePixel(newPixel, "sandboxels_screen")
                    }
                    if (pixel.dir === -1) {
                        pixel.dir = 1
                    }
                    else if (pixel.dir === 1) {
                        pixel.dir = -1
                    }
                }
            }
            else if (!isEmpty(pixel.x+(pixel.dir),pixel.y-1,true)) {
                var newPixel = pixelMap[pixel.x+(pixel.dir)][pixel.y-1];
                if (newPixel.element === "sandboxels_screen") {
                    swapPixels(newPixel, pixel)
                }
                else if (elements[newPixel.element].isScreen === true || newPixel.element !== "sandboxels_screen") {
                    newPixel.dtemp = ((pixel.dtemp + newPixel.dtemp) / 2)
                    pixel.dtemp = newPixel.dtemp
                    if (elements[newPixel.element].id === elements.fly_screen.id && Math.random() < 0.5) {
                        changePixel(newPixel, "sandboxels_screen")
                    }
                    if (pixel.dir === -1) {
                        pixel.dir = 1
                    }
                    else if (pixel.dir === 1) {
                        pixel.dir = -1
                    }
                }
            }
        }
    },
    state: "solid",
    density: 400,
}

elements.rat_screen = {
    color: ["#a698a9","#8c7d82","#ccc3cf"],
    name:"screen",
    hidden:true,
    behavior: [
    "XX|XX|XX",
    "XX|XX|XX",
    "XX|XX|XX",
    ],
    properties: {
        dtemp: 20,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","rat"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    digBreakInto: "blood_screen",
    isScreen: true,
    isSolid: true,
    isMoving: true,
    dburn: 2,
    digburnTime: 100,
    digburnInto: ["fire_screen","ash_screen","ash_screen"],
    tick: function(pixel) {
        if (pixel.dtemp > 300) { changePixel(pixel,"ash_screen") }
        screenTemp(pixel)
        doScreenBurning(pixel)
        if (!isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y+1]
            if (newPixel.element === "sandboxels_screen") {
                swapPixels(newPixel,pixel);
            }
            else if (Math.random() < 0.25 && elements[newPixel.element].isScreen === true) {
                if (elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel, pixel)
                }
                if (Math.random() < 0.5 && !isEmpty(pixel.x+1,pixel.y,true) && !isEmpty(pixel.x+1,pixel.y-1,true)) {
                    var newPixel = pixelMap[pixel.x+1][pixel.y];
                    var newUpPixel = pixelMap[pixel.x+1][pixel.y-1];
                    if (newPixel.element === "sandboxels_screen" || elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel,pixel);
                    }
                    else if (newPixel.element !== "sandboxels_screen" && newUpPixel.element === "sandboxels_screen") {
                        swapPixels(newUpPixel,pixel);
                    }
                }
                else if (!isEmpty(pixel.x-1,pixel.y,true) && !isEmpty(pixel.x-1,pixel.y-1,true)) {
                    var newPixel = pixelMap[pixel.x-1][pixel.y];
                    var newUpPixel = pixelMap[pixel.x-1][pixel.y-1];
                    if (newPixel.element === "sandboxels_screen" || elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                        swapPixels(newPixel,pixel);
                    }
                    else if (newPixel.element !== "sandboxels_screen" && newUpPixel.element === "sandboxels_screen") {
                        swapPixels(newUpPixel,pixel);
                    }
                }
            }
        }
        else if (Math.random() < 0.25) {
            if (Math.random() < 0.5 && !isEmpty(pixel.x+1,pixel.y,true) && !isEmpty(pixel.x+1,pixel.y-1,true)) {
                var newPixel = pixelMap[pixel.x+1][pixel.y];
                var newUpPixel = pixelMap[pixel.x+1][pixel.y-1];
                if (newPixel.element === "sandboxels_screen" || elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel,pixel);
                }
                else if (newPixel.element !== "sandboxels_screen" && newUpPixel.element === "sandboxels_screen") {
                    swapPixels(newUpPixel,pixel);
                }
            }
            else if (!isEmpty(pixel.x-1,pixel.y,true) && !isEmpty(pixel.x-1,pixel.y-1,true)) {
                var newPixel = pixelMap[pixel.x-1][pixel.y];
                var newUpPixel = pixelMap[pixel.x-1][pixel.y-1];
                if (newPixel.element === "sandboxels_screen" || elements[newPixel.element].density < elements[pixel.element].density && elements[newPixel.element].isSolid !== true && elements[newPixel.element].isMoving === true) {
                    swapPixels(newPixel,pixel);
                }
                else if (newPixel.element !== "sandboxels_screen" && newUpPixel.element === "sandboxels_screen") {
                    swapPixels(newUpPixel,pixel);
                }
            }
        }    
    },
    density: 1450,
}

elements.ice_screen = {
    name:"screen",
    hidden:true,
    color: "#b2daeb",
    behavior: behaviors.WALL,
    properties: {
        dtemp: 0,
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","ice"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    isScreen: true,
    isSolid: true,
    tick: function(pixel) {
        if (pixel.dtemp > 5) { changePixel(pixel,"water_screen") }
        screenTemp(pixel)
    },
    state: "solid",
    density: 1200,
}

elements.wood_screen = {
    name:"screen",
    hidden:true,
    color: "#a0522d",
    behavior: behaviors.WALL,
    properties: {
        dtemp: 20,
    },
    digBreakInto: "sawdust_screen",
    isScreen: true,
    isSolid: true,
    dburn: 5,
    digburnTime: 300,
    digburnInto: ["fire_screen","ash_screen"],
    tick: function(pixel) {
        if (pixel.dtemp > 400) { changePixel(pixel,"fire_screen") }
        screenTemp(pixel)
        doScreenBurning(pixel)
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","wood"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    state: "solid",
    density: 1200,
}

elements.paper_screen = {
    name:"screen",
    hidden:true,
    color: "#f0f0f0",
    behavior: behaviors.WALL,
    properties: {
        dtemp: 20,
    },
    isScreen: true,
    isSolid: true,
    dburn: 70,
    digburnTime: 300,
    digburnInto: ["fire_screen","fire_screen","fire_screen","fire_screen","fire_screen","fire_screen","ash_screen"],
    tick: function(pixel) {
        if (pixel.dtemp > 248) { changePixel(pixel,"fire_screen") }
        screenTemp(pixel)
        doScreenBurning(pixel)
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","paper"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    state: "solid",
    density: 1200,
}

elements.wall_screen = {
    name:"screen",
    hidden:true,
    color: "#808080",
    behavior: behaviors.WALL,
    properties: {
        dtemp: 0,
    },
    isScreen: true,
    isSolid: true,
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_glass","molten_gallium"],
    breakInto: ["glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","glass_shard","concrete"],
    tempLow: -45,
    stateLow: "sandboxels_screen_off",
    category: "simulation",
    state: "solid",
    density: 1200,
}

elements.simulated_sand = {
    color: "#e6d577",
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"sand_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on screen to place simulated sand."
}

elements.simulated_dirt = {
    color: ["#76552b","#5c4221","#573c1a","#6b481e"],
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"dirt_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on screen to place simulated dirt."
}

elements.simulated_wet_sand = {
    color: ["#a19348","#b5a85e"],
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"wet_sand_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on screen to place simulated wet sand."
}

elements.simulated_mud = {
    color: "#382417",
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"mud_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on screen to place simulated mud."
}

elements.simulated_rock = {
    color: ["#808080","#4f4f4f","#949494"],
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"rock_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on screen to place simulated sand."
}

elements.simulated_ash = {
    color: ["#8c8c8c","#9c9c9c"],
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"ash_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on screen to place simulated ash."
}

elements.simulated_water = {
    color: "#2167ff",
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"water_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated water."
}

elements.simulated_ice = {
    color: "#b2daeb",
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"ice_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated ice."
}

elements.simulated_steam = {
    color: "#abd6ff",
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"steam_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated steam."
}

elements.simulated_blood = {
    color: ["#ff0000","#ee0000"],
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"blood_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated blood."
}

elements.simulated_fly = {
    color: "#4c4e42",
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"fly_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated flies."
}

elements.simulated_bird = {
    color: "#997457",
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"bird_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated birds."
}

elements.simulated_rat = {
    color: ["#a698a9","#8c7d82","#ccc3cf"],
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"rat_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated rats."
}

elements.simulated_oxygen = {
    color: "#99c7ff",
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"oxygen_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated oxygen."
}

elements.simulated_fire = {
    color: ["#ff6b21","#ffa600","#ff4000"],
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"fire_screen"); 
            pixel.digburning = true
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated fire."
}

elements.simulated_smoke = {
    color: "#383838",
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"smoke_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated smoke."
}

elements.simulated_sawdust = {
    color: ["#dec150","#c7b15a"],
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"sawdust_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on screen to place simulated sawdust."
}

elements.simulated_wood = {
    color: "#a0522d",
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"wood_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated wood."
}

elements.simulated_paper = {
    color: "#f0f0f0",
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"paper_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated paper."
}

elements.simulated_wall = {
    color: "#808080",
    tool: function(pixel) {
        if (elements[pixel.element].id === elements.sandboxels_screen.id) {
            changePixel(pixel,"wall_screen"); 
        }
    },
    insulate:true,
    canPlace: false,
    category: "simulation",
    desc: "Use on a screen to place simulated wall."
}

elements.danger_suit = {
    color: ["#A8A7AB","#878689"],
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "radiation": { elem2:"electric", temp1:200 },
        "body":{ elem1:null, elem2:"suited_body" },
    },
    tempHigh: 500,
    stateHigh: ["molten_aluminum","smoke","ash"],
    burn: 1,
    burnTime: 300,
    burnInto: ["molten_aluminum","smoke","smoke","smoke","ash"],
    category: "simulation",
    state: "solid",
    density: 2710,
    conduct: 0.73,
    hardness: 0.05,
    breakInto: "metal_scrap",
    fireColor: "#A7B3BF",
    superconductAt: -271.95
}

elements.danger_helmet = {
    color: ["#323233","#434344"],
    behavior: behaviors.STURDYPOWDER,
    reactions: {
        "head":{ elem1:null, elem2:"suited_head" },
    },
    tempHigh: 1500,
    stateHigh: ["molten_glass","molten_glass","molten_plastic"],
    burn: 1,
    burnTime: 200,
    burnInto: ["glass_shard","glass_shard","glass_shard","glass_shard","dioxin","smoke","dioxin","smoke","stench"],
    category: "simulation",
    state: "solid",
    density: 2500,
    breakInto: "glass_shard",
}

elements.suited_body = {
    color: ["#A8A7AB","#878689"],
    category: "life",
    hidden: true,
    density: 2710,
    state: "solid",
    conduct: .05,
    temp: 37,
    tempHigh: 300,
    stateHigh: ["cooked_meat","cooked_meat","cooked_meat","cooked_meat","ash"],
    tempLow: -75,
    stateLow: "frozen_meat",
    burn: 10,
    burnTime: 250,
    burnInto: ["cooked_meat","cooked_meat","cooked_meat","cooked_meat","cooked_meat","cooked_meat","cooked_meat","cooked_meat","molten_aluminum","smoke","smoke","smoke","ash"],
    breakInto: ["blood","meat","bone"],
    forceSaveColor: true,
    reactions: {
        "egg": { elem2:"yolk", chance:0.5, oneway:true },
        "grape": { elem2:"juice", chance:0.5, color2:"#291824", oneway:true },
        "ant": { elem2:"dead_bug", chance:0.05, oneway:true },
        "fly": { elem2:"dead_bug", oneway:true },
        "firefly": { elem2:"dead_bug", oneway:true },
        "bee": { elem2:"dead_bug", oneway:true },
        "flea": { elem2:"dead_bug", oneway:true },
        "termite": { elem2:"dead_bug", oneway:true },
        "worm": { elem2:"slime", chance:0.05, oneway:true },
        "stink_bug": { elem2:"stench", oneway:true },
        "gold_coin": { elem2:null, chance:0.05 },
        "diamond": { elem2:null, chance:0.05 },
        "sun": { elem1:"cooked_meat" },
    },
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (tryMove(pixel, pixel.x, pixel.y+1)) { // Fall
            if (!isEmpty(pixel.x, pixel.y-2, true)) { // Drag head down
                var headpixel = pixelMap[pixel.x][pixel.y-2];
                if (headpixel.element == "head") {
                    if (isEmpty(pixel.x, pixel.y-1)) {
                        movePixel(pixelMap[pixel.x][pixel.y-2], pixel.x, pixel.y-1);
                    }
                    else {
                        swapPixels(pixelMap[pixel.x][pixel.y-2], pixelMap[pixel.x][pixel.y-1]);
                    }
                }
                if (headpixel.element == "suited_head") {
                    if (isEmpty(pixel.x, pixel.y-1)) {
                        movePixel(pixelMap[pixel.x][pixel.y-2], pixel.x, pixel.y-1);
                    }
                    else {
                        swapPixels(pixelMap[pixel.x][pixel.y-2], pixelMap[pixel.x][pixel.y-1]);
                    }
                }
            }
        }
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
            }
            return
        }

        // Find the head
        if (!isEmpty(pixel.x, pixel.y-1, true) && pixelMap[pixel.x][pixel.y-1].element == "head") {
            var head = pixelMap[pixel.x][pixel.y-1];
            if (head.dead) { // If head is dead, kill body
                pixel.dead = head.dead;
            }
        }
        else if (!isEmpty(pixel.x, pixel.y-1, true) && pixelMap[pixel.x][pixel.y-1].element == "suited_head") {
            var head = pixelMap[pixel.x][pixel.y-1];
            if (head.dead) { // If head is dead, kill body
                pixel.dead = head.dead;
            }
        }
        else { var head = null }
        if (pixel.burning) {
            pixel.panic += 0.1;
            if (head && pixelTicks-pixel.burnStart > 240) {
                pixel.color = head.color;
            }
        }
        else if (pixel.panic > 0) {
            pixel.panic -= 0.1;
        }

        if (isEmpty(pixel.x, pixel.y-1)) {
            // create blood if decapitated 10% chance
            if (Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y-1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        else if (head == null) { return }
        else if (Math.random() < 0.1*(isEmpty(pixel.x, pixel.y+1) ? 1 : pixel.panic+1)) { // Move 10% chance
            var movesToTry = [
                [1*pixel.dir,0],
                [1*pixel.dir,-1],
            ];
            // While movesToTry is not empty, tryMove(pixel, x, y) with a random move, then remove it. if tryMove returns true, break.
            while (movesToTry.length > 0) {
                var move = movesToTry.splice(Math.floor(Math.random() * movesToTry.length), 1)[0];
                if (isEmpty(pixel.x+move[0], pixel.y+move[1]-1)) {
                    var origx = pixel.x+move[0];
                    var origy = pixel.y+move[1];
                    if (tryMove(pixel, pixel.x+move[0], pixel.y+move[1]) && pixel.x===origx && pixel.y===origy) {
                        movePixel(head, head.x+move[0], head.y+move[1]);
                        break;
                    }
                }
            }
            // 15% chance to change direction
            if (Math.random() < 0.15) {
                pixel.dir *= -1;
            }
            // homeostasis
            if (pixel.temp > 37) { pixel.temp -= 1; }
            else if (pixel.temp < 37) { pixel.temp += 1; }
        }

    }
}

elements.suited_head = {
    color: ["#46433F","#47443C","#4D483D"],
    category: "life",
    hidden: true,
    density: 1080,
    state: "solid",
    conduct: .05,
    temp: 37,
    tempHigh: 300,
    stateHigh: ["cooked_meat","cooked_meat","cooked_meat","cooked_meat","glass_shard"],
    tempLow: -75,
    stateLow: "frozen_meat",
    burn: 10,
    burnTime: 250,
    burnInto: ["cooked_meat","cooked_meat","cooked_meat","cooked_meat","cooked_meat","cooked_meat","cooked_meat","cooked_meat","melted_plastic","glass_shard"],
    breakInto: ["blood","meat","bone","blood","meat","bone","glass_shard"],
    forceSaveColor: true,
    reactions: {
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "sun": { elem1:"cooked_meat" },
        "water": { elem2:"bubble", attr2:{"clone":"water"}, chance:0.001 },
        "salt_water": { elem2:"bubble", attr2:{"clone":"salt_water"}, chance:0.001 },
        "pool_water": { elem2:"bubble", attr2:{"clone":"pool_water"}, chance:0.001 },
    },
    properties: {
        dead: false
    },
    tick: function(pixel) {
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
                return
            }
        }

        // Find the body
        if (!isEmpty(pixel.x, pixel.y+1, true) && pixelMap[pixel.x][pixel.y+1].element == "body") {
            var body = pixelMap[pixel.x][pixel.y+1];
            if (body.dead) { // If body is dead, kill head
                pixel.dead = body.dead;
            }
        }
        else if (!isEmpty(pixel.x, pixel.y+1, true) && pixelMap[pixel.x][pixel.y+1].element == "suited_body") {
            var body = pixelMap[pixel.x][pixel.y+1];
            if (body.dead) { // If body is dead, kill head
                pixel.dead = body.dead;
            }
        }
        else { var body = null }

        if (tryMove(pixel, pixel.x, pixel.y+1)) {
            // create blood if severed 10% chance
            if (isEmpty(pixel.x, pixel.y+1) && !pixel.dead && Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y+1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        // homeostasis
        if (pixel.temp > 37) { pixel.temp -= 1; }
        else if (pixel.temp < 37) { pixel.temp += 1; }
    }
}

elements.digitalizer = {
    color: ["#d1c6be","#b5c0ad","#b9b8bc"],
    behavior: behaviors.WALL,
    onSelect: function() {
        logMessage("Do not digitalize unregistered elements!");
    },
    tempHigh: 600,
    stateHigh: ["molten_aluminum","molten_aluminum","molten_aluminum","molten_gallium"],
    breakInto: ["metal_scrap"],
    tempLow: -80,
    stateLow: "glass_shard",
    category: "simulation",
    tick: function(pixel) {
        if (!isEmpty(pixel.x,pixel.y-1,true) && !isEmpty(pixel.x,pixel.y+1,true)) {
            var newPixel = pixelMap[pixel.x][pixel.y-1];
            var screen = pixelMap[pixel.x][pixel.y+1];
            if (screen.element === "sandboxels_screen") {
                var newElement = newPixel.element
                var newElementName = `${newElement}_screen`
                if (newElement === "body") {
                    changePixel(screen,"blood_screen");
                    deletePixel(newPixel.x,newPixel.y)
                }
                else if (newElement === "head") {
                    changePixel(screen,"blood_screen");
                    deletePixel(newPixel.x,newPixel.y)
                }
                else if (!isEmpty(pixel.x,pixel.y-2,true) && newElement === "suited_body") {
                    var headPixel = pixelMap[pixel.x][pixel.y-2];
                    if (headPixel.element === "suited_head" && newElement === "suited_body") {
                        changePixel(screen,"simulated_human");
                        deletePixel(newPixel.x,newPixel.y-1)
                        deletePixel(newPixel.x,newPixel.y)
                    }
                    else {
                        changePixel(screen,"blood_screen");
                        deletePixel(newPixel.x,newPixel.y)
                    }
                }
                else if (elements[newElementName]) {
                    changePixel(screen,newElementName);
                    deletePixel(newPixel.x,newPixel.y)
                }
                else {
                    changePixel(screen,"malware");
                    deletePixel(newPixel.x,newPixel.y)
                }
            } 
        }
    },
    state: "solid",
    density: 1200,
    desc: "digitalizes elements."
}

if (!elements.malware.reactions) { elements.malware.reactions = {} }
    elements.malware.reactions.sandboxels_screen = { "elem2": ["sand_screen","sandboxels_screen_off","sandboxels_screen_off","malware"] };
    elements.malware.reactions.sawdust_screen = { "elem2": ["wall_screen","wall_screen","sandboxels_screen_off","malware"] };
    elements.malware.reactions.sand_screen = { "elem2": ["paper_screen","paper_screen","sandboxels_screen_off","malware"] };
    elements.malware.reactions.rock_screen = { "elem2": ["wood_screen","wood_screen","sandboxels_screen_off","malware"] };
    elements.malware.reactions.cellulose_screen = { "elem2": ["blood_screen","blood_screen","sandboxels_screen_off","malware"] };
    elements.malware.reactions.blood_screen = { "elem2": ["ice_screen","ice_screen","sandboxels_screen_off","malware"] };
    elements.malware.reactions.water_screen = { "elem2": ["steam_screen","steam_screen","sandboxels_screen_off","malware"] };
    elements.malware.reactions.steam_screen = { "elem2": ["water_screen","water_screen","sandboxels_screen_off","malware"] };
    elements.malware.reactions.ice_screen = { "elem2": ["cellulose_screen","cellulose_screen","sandboxels_screen_off","malware"] };
    elements.malware.reactions.wood_screen = { "elem2": ["rock_screen","rock_screen","sandboxels_screen_off","malware"] };
    elements.malware.reactions.paper_screen = { "elem2": ["sand_screen","sand_screen","sandboxels_screen_off","malware"] };
    elements.malware.reactions.wall_screen = { "elem2": ["sawdust_screen","sawdust_screen","sandboxels_screen_off","malware"] };

elements.head.tick = function(pixel) {
    doHeat(pixel);
    doBurning(pixel);
    doElectricity(pixel);
    if (pixel.dead) {
        // Turn into rotten_meat if pixelTicks-dead > 500
        if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
            changePixel(pixel,"rotten_meat");
            return
        }
    }

    // Find the body
    if (!isEmpty(pixel.x, pixel.y+1, true) && pixelMap[pixel.x][pixel.y+1].element == "body") {
        var body = pixelMap[pixel.x][pixel.y+1];
        if (body.dead) { // If body is dead, kill head
            pixel.dead = body.dead;
        }
    }
    else if (!isEmpty(pixel.x, pixel.y+1, true) && pixelMap[pixel.x][pixel.y+1].element == "suited_body") {
        var body = pixelMap[pixel.x][pixel.y+1];
        if (body.dead) { // If body is dead, kill head
            pixel.dead = body.dead;
        }
    }
    else { var body = null }

    if (tryMove(pixel, pixel.x, pixel.y+1)) {
        // create blood if severed 10% chance
        if (isEmpty(pixel.x, pixel.y+1) && !pixel.dead && Math.random() < 0.1 && !pixel.charge) {
            createPixel("blood", pixel.x, pixel.y+1);
            // set dead to true 15% chance
            if (Math.random() < 0.15) {
                pixel.dead = pixelTicks;
            }
        }
    }
    // homeostasis
    if (pixel.temp > 37) { pixel.temp -= 1; }
    else if (pixel.temp < 37) { pixel.temp += 1; }
}

elements.body.tick = function(pixel) {
    if (tryMove(pixel, pixel.x, pixel.y+1)) { // Fall
        if (!isEmpty(pixel.x, pixel.y-2, true)) { // Drag head down
            var headpixel = pixelMap[pixel.x][pixel.y-2];
            if (headpixel.element == "head") {
                if (isEmpty(pixel.x, pixel.y-1)) {
                    movePixel(pixelMap[pixel.x][pixel.y-2], pixel.x, pixel.y-1);
                }
                else {
                    swapPixels(pixelMap[pixel.x][pixel.y-2], pixelMap[pixel.x][pixel.y-1]);
                }
            }
            else if (headpixel.element == "suited_head") {
                if (isEmpty(pixel.x, pixel.y-1)) {
                    movePixel(pixelMap[pixel.x][pixel.y-2], pixel.x, pixel.y-1);
                }
                else {
                    swapPixels(pixelMap[pixel.x][pixel.y-2], pixelMap[pixel.x][pixel.y-1]);
                }
            }
        }
    }
    doHeat(pixel);
    doBurning(pixel);
    doElectricity(pixel);
    if (pixel.dead) {
        // Turn into rotten_meat if pixelTicks-dead > 500
        if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
            changePixel(pixel,"rotten_meat");
        }
        return
    }

    // Find the head
    if (!isEmpty(pixel.x, pixel.y-1, true) && pixelMap[pixel.x][pixel.y-1].element == "head") {
        var head = pixelMap[pixel.x][pixel.y-1];
        if (head.dead) { // If head is dead, kill body
            pixel.dead = head.dead;
        }
    }
    else if (!isEmpty(pixel.x, pixel.y-1, true) && pixelMap[pixel.x][pixel.y-1].element == "suited_head") {
        var head = pixelMap[pixel.x][pixel.y-1];
        if (head.dead) { // If head is dead, kill body
            pixel.dead = head.dead;
        }
    }
    else { var head = null }
    if (pixel.burning) {
        pixel.panic += 0.1;
        if (head && pixelTicks-pixel.burnStart > 240) {
            pixel.color = head.color;
        }
    }
    else if (pixel.panic > 0) {
        pixel.panic -= 0.1;
    }

    if (isEmpty(pixel.x, pixel.y-1)) {
        // create blood if decapitated 10% chance
        if (Math.random() < 0.1 && !pixel.charge) {
            createPixel("blood", pixel.x, pixel.y-1);
            // set dead to true 15% chance
            if (Math.random() < 0.15) {
                pixel.dead = pixelTicks;
            }
        }
    }
    else if (head == null) { return }
    else if (Math.random() < 0.1*(isEmpty(pixel.x, pixel.y+1) ? 1 : pixel.panic+1)) { // Move 10% chance
        var movesToTry = [
            [1*pixel.dir,0],
            [1*pixel.dir,-1],
        ];
        // While movesToTry is not empty, tryMove(pixel, x, y) with a random move, then remove it. if tryMove returns true, break.
        while (movesToTry.length > 0) {
            var move = movesToTry.splice(Math.floor(Math.random() * movesToTry.length), 1)[0];
            if (isEmpty(pixel.x+move[0], pixel.y+move[1]-1)) {
                var origx = pixel.x+move[0];
                var origy = pixel.y+move[1];
                if (tryMove(pixel, pixel.x+move[0], pixel.y+move[1]) && pixel.x===origx && pixel.y===origy) {
                    movePixel(head, head.x+move[0], head.y+move[1]);
                    break;
                }
            }
        }
        // 15% chance to change direction
        if (Math.random() < 0.15) {
            pixel.dir *= -1;
        }
        // homeostasis
        if (pixel.temp > 37) { pixel.temp -= 1; }
        else if (pixel.temp < 37) { pixel.temp += 1; }
    }
}
































































//-------------------------------------------------------------------------------------------------------------------------------------------------------------


















































































elements.exploder = {
    color: "#ff0000",
    tool: function(pixel) {
        pixel.element = "explosion"
       
    },
    category: "tools",
};




elements.mega_fart = {
    color: "#6e5000",
    behavior: [
        "XX|EX:50>pop|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:50>pop|M2",
    ],
    category: "energy",
    state: "solid",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
};








elements.napalm = {
color: "#800e0e",
behavior: behaviors.LIQUID,

burn: 34,
burnTime: 1000,
burnInto: ["fire","fire","fire","fire","fire","fire","dust","carbon_dioxide"],
tempHigh: 9000,
stateHigh: "fire",
category: "liquids",
state: "solid",
density: 250,
breakInto: ["dust","ash","carbon_dioxide"],
hardness: 0.5,
};





elements.fish.cutInto = "meat";







elements.etap = {
    behavior: behaviors.WALL,
	behaviorOn: [
        "CR:water|CR:water|CR:water",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    color: "#9e9e9e",
    category: "machines",
    conduct: 1
};






























































//----------------------------------------------------------------------------------------------------------------









































































//Hello, this is are a science mod, we're made several things that related to science, examples like...electron, particle accelerator, and of course, carbon monoxide! :D
//We made some things not scientific, so this mod is not too boring. ;)
//we're normal people, who is not as smart as a real scientist. so if you have suggestion, feedback, or criticism, please let us know, so we can make this mod being more accurate. ><
//  discord account |
//                  |
//                  |
//                  v
//  creator,leader,supervisor,coder,uploader = @carbon_monoxides6
//  co-creator,co-coder,assistant,debugger = @salmonfishy (has exited from this mod project)
elements.carbon_monoxide = {
  color: "#b5b5b5",
  behavior: behaviors.GAS,
  behaviorOn: [
    "XX|XX|XX",
    "XX|CH:fire|XX",
    "XX|XX|XX",
],
  category: "gases",
  state: "gas",
  density: 1.14,
  burn: 75,
  tempHigh: 609,
  stateHigh: "fire",
  tempLow: -192,
  stateLow: "liquid_carbon_monoxide",
  burntime: 5,
  darkText: true,
  fireColor: "#ebba34",
  reactions: {
                "head": { elem2:"rotten_meat", chance:0.5 },
                "body": { elem2:"rotten_meat", chance:0.5 },
                "human": { elem2:"rotten_meat", chance:0.5 },
             }
};
elements.liquid_carbon_monoxide = {
     color: "#b5b5b5",
     behavior: behaviors.LIQUID,
     category: "liquids",
     state: "liquid",
     density: 1.14,
     darkText: true,
     tempHigh: -190,
     temp: -192,
     tempLow: -199,
     hidden: true,
     stateLow: "ice_carbon_monoxide",
     stateHigh: "carbon_monoxide", 
};
elements.ice_carbon_monoxide = {
     color: "#b5b5b5",
     behavior: behaviors.WALL,
     category: "solids",
     state: "solid",
     temp: -199,
     density: 1.14,
     tempHigh: -192,
     darkText: true,
     stateHigh: "liquid_carbon_monoxide", 
};
elements.carbon_monoxide_detector = {
  behavior: behaviors.WALL,
  desc: "give red light and electric when found Carbon Monoxide touch",
  color: "#ffffff",
  reactions: {
  "carbon_monoxide": {"charge1":1},   
  },
  conduct: 1,
  tempHigh: 1550,
  stateHigh: ["molten_metal_scrap","electric","molten_plastic"],
  colorOn: "#ff0000",
  movable: false,
  insulate: true,
  noMix: true,
  category:"machines",
  darkText: true,
  hardness: 1,
};

elements.electrons = {
color: "#b80606",
behavior: [
    "XX|SH|XX", // shocks (adds charge)
    "SH|DL%0.25|SH",
    "XX|SH|XX",
],
tick: behaviors.BOUNCY,
temp: 20,
category: "energy",
state: "gas",
density: 0.000003,
ignoreAir: true,
};
elements.gelatin = {
     behavior: behaviors.SOLID,
     category: "food",
     state: "solid",
     color: "#faf8ca",
     breakInto: "gelatin_powder",
     ignoreAir: true,
     isFood: true,
};
elements.gelatin_powder = {
     behavior: behaviors.POWDER,
     category: "food",
     state: "powder",
     color: "#edeb9f",
     hidden: true,
     ignoreAir: true,
     isFood: true,
};
elements.blueberries = {
behavior: behaviors.POWDER,
category: "food",
state: "solid",
color: ["#464196","#2e2b64"],
breakInto: "blueberries_juice",
ignoreAir: true,
isFood: true,
reactions: {
"sugar": { elem1: "blueberries_jam" },
},
};
elements.blueberries_juice = {
behavior: behaviors.LIQUID,
category: "food",
state: "liquid",
color: "#1f1c42",
hidden: true,
tempHigh: 170,
stateHigh: ["steam","sugar"],
reactions: {
ignoreAir: true,
isFood: true,
"gelatin": { elem1: "blueberries_jelly", elem2: null },
"gelatin_powder": { elem1: "blueberries_jelly", elem2: null },
},
};
elements.blueberries_jam = {
behavior: behaviors.LIQUID,
category: "food",
viscosity: 5000,
state: "liquid",
tempHigh: 200,
stateHigh: ["smoke","sugar"],
color: "#080629",
hidden: true,
ignoreAir: true,
isFood: true,
};
elements.blueberries_jelly = {
behavior: behaviors.LIQUID,
category: "food",
viscosity: 200000,
state: "liquid",
color: "#59559e",
hidden: true,
tempHigh: 200,
stateHigh: ["smoke","sugar"],
tempLow: -5,
stateLow: ["sugar_ice","sugar_ice","juice_ice"],
ignoreAir: true,
isFood: true,
};
elements.fallout_drum = {
behavior: behaviors.WALL,
category: "states",
state: "solid",
density: 9000,
color: "#e3cc34",
tempHigh: 2500,
stateHigh: ["aluminum","radiated_water","radiated_water","fallout"],
breakInto: ["fallout","fallout"],
reactions: { 
"water": { elem1:"fallout_drum", elem2:"radiated_water" },
}
};

elements.radiated_water = {
behavior: behaviors.LIQUID,
category: "states",
state:"liquid",
density :1300,
color: ["#23d959","#29d65d"],
hidden: true,
tempHigh: 140,
stateHigh: "polluted_air",
tempLow: -6,
stateLow: "rad_ice",
reactions: {
"human": { elem2:"rotten_meat" },
"body": { elem2:"rotten_meat" },
"head": { elem2:"ash" },
"bird": { elem2:"rotten_meat"},
"cell": { elem2:"cancer"},  
"worm": { elem2:"rotten_meat"},
}
};

elements.polluted_air = {
behavior: behaviors.DGAS,
category: "states",
state:"gas",
density :10,
color: ["#60f53b","#65ba50"],
reactions: {
    "body": { elem2:"rotten_meat" },
    "head": { elem2:"rotten_meat" },
    "human": { elem2:"rotten_meat" },
    "bird": { elem2:"rotten_meat" },
    "cell": { elem2:"cancer" },
    "water": { elem1: null, elem2: "radiated_water" },
    "worm": { elem2: ["ash","cancer"] },
    "flea": { elem2: "ash" },
    "seed": {elem2: "dead_plant" },
    "plant": {elem1: null, chance:0.5, elem2: "dead_plant", chance:0.5 },
},
};

elements.siren = {
desc: "Detecting Nuclear Radiation Residues",
behavior: behaviors.WALL,
category: "machines",
state:"solid",
density :500,
color: "#808080",
reactions: {
    "fallout": {"charge1":1},
    "radiated_water": {"charge1":1},
    "polluted_air": {"charge1":1},
    "radiation": {"charge1":1},
    "rad_snow": {"charge1":1},
    "rad_rock": {"charge1":1},
}
};

elements.radiated_metal = {
behavior: behaviors.WALL,
category: "states",
state:"solid",
density :2045,
color: ["#5e705a","#83ab7b","#474747"],
tempHigh: 1440,
stateHigh: ["molten_nickel","molten_iron","molten_tin","fallout"],
reactions: {
   "water": { elem2:"radiated_water", chance:0.7 }, 
   "foam": { elem1:["tin","nickel","iron"] },
}
};

elements.rad_ice = {
behavior: behaviors.WALL,
category: "states",
state:"solid",
density: 1905,
color: ["#81d79c","#68b899","#68abb8"],
hidden: true,
temp: -6,
tempHigh: 5,
stateHigh: ["radiated_water","water"],
reactions: {
    "snow": { elem2:"dirty_water" },
    "water": { elem2:"radiated_water" },
}
}

elements.rad_snow = {
behavior: behaviors.POWDER,
category: "states",
state:"powder",
density: 1500,
color: ["#9effe4","#b5fffd","#d4fff1"],
temp: -2,
tempHigh: 21,
stateHigh: "radiated_water",
};

elements.rad_rock = {
behavior: behaviors.POWDER,
category: "land",
state: "powder",
density: 2790,
color: ["#34382d","#3f4633","#595a4d"],
tempHigh: 1200,
stateHigh: ["magma","fallout"],
reactions: {
    "water": { elem2:"dirty_water" },
    "salt_water": { elem2:"dirty_water" },
    "sugar_water": { elem2:"dirty_water" },
    "seltzer": { elem2:"dirty_water" },
    "bleach": {elem2: "rock", chance:0.1 },
    "rad_cleaner": { elem1:"rock" },
    "foam": { elem1:"rock" },
    "juice": { elem2: null },
    "blood": { elem2:"infection" },
    "grass": { elem2:"dead_plant" },
    "plant": { elem2:"dead_plant" },
    "cell": { elem2:"cancer" },
    "worm": { elem2:"ash" },
    "glass": { elem2:"rad_glass"},
    "glass_shard": { elem2:"rad_shard" },
}
};

elements.rad_cleaner = {
behavior: behaviors.WALL,
category: "machines",
state: "solid",
density: 2500,
color: ["#383838","#212220"],
desc: "clean radiated elements",
tempHigh: 1250,
stateHigh: ["fallout","molten_plastic","steam"],
reactions: {
    "radiated_water": {elem2:"water" },
    "polluted_air": {elem2: "oxygen"},
    "rad_snow": {elem2: "snow"},
    "rad_rock": {elem2: "rock"},
    "radiated_metal": {elem2: ["nickel","tin","iron"], },
    "fallout": {elem2: "rock", },
}
};


elements.rad_meat = {
behavior: behaviors.STURDYPOWDER,
category: "food",
state: "solid",
density: 1500,
color: ["#e8fc03","#f0b446","#92f046"],
tempHigh: 120,
stateHigh: ["rotten_meat","fallout"],
tempLow:-12,
stateLow: ["frozen_meat","radiation"],
reactions: {
  "water": {elem2: "radiated_water", chance:0.4},
  "salt_water": { elem2: "radiated_water" },
}
};

elements.lemon = {
behavior: behaviors.POWDER,
category: "food",
state: "powder",
density: 800,
color: ["#f9f934", "#f1ee20",],
tempHigh: 90,
stateHigh: "hot_lemon",
tempLow: -2,
stateLow: "wrinkled_lemon",
burn: 120,
burntime: 600,
burnInto: "ash",
breakInto: [ "lemon_water", "lemon_zest", ],
reactions: {
  "water": { elem2: "lemon_water", chance:0.2},
  "salt_water": { elem2: [ "lemon_water", "water",] },
  "dirty_water": { elem1: "rotten_lemon", },
  "soda": { elem2: "lemon_soda", },
  "head": { elem1: "saliva", chance:0.75}, 
  "milk": { elem2: "lemon_milk", },
  "tea": { elem2: "lemon_tea", },
  "poison": { elem2: "rotten_lemon", },
}                                                      
};

elements.hot_lemon = {
behavior: behaviors.POWDER,
state: "powder",
category: "food",
hidden: true,
density: 820,
color: ["#8a6d1e","#70661a",],
hidden: true,
temp: 90,
tempHigh: 200,
stateHigh: "fire",
tempLow: 30,
stateLow: "wrinkled_lemon",
burn: 120,
burntime: 600,
burnInto: "ash",
reactions: {
  "water": { elem2: "lemon_water", },
}
};

elements.wrinkled_lemon = {
behavior: behaviors.POWDER,
color: ["#999543","#a6a03a",],
state: "powder",
category: "food",
tempHigh: 90,
stateHigh: "hot_lemon",
hidden: true,
burn: 120,
burntime: 600,
burnInto: "ash",
reactions: {
"water": { elem2: "lemon_water", chance: 0.2,
}
}
};

elements.coolant = {
color: "#0eebeb",
behavior: [
    "XX|CO:4|XX",
    "CO:4|HT:1|CO:4",
    "XX|CO:4|XX",
],
category: "liquids",
state: "liquid",
insulate: true,
density: 1000,
darkText: false,
tempHigh: 500,
hidden: true,
stateHigh: "steam", 
};

elements.arkycite = {
color: "#46ab63",
behavior: behaviors.LIQUID,
category: "liquids",
state: "liquid",
density: 997,
darkText: false,
tempHigh: 400,
hidden: true,
burn: 40,
stateHigh: "fire", 
burntime: 500,
};

elements.lemon_water = {
color: ["#faec52","#faee69",],
behavior: behaviors.LIQUID,
category: "liquids",
state: "liquid",
density: 900,
tempHigh: 100,
stateHigh: ["steam","fragrance",],
hidden: true,
tempLow: -10,
stateLow: "lemon_ice",
reactions: {
"balloon": { elem2: "helium", chance: 0.5, },
"head": { elem1: "saliva", chance: 0.2, },
}
};

elements.lemon_zest = {
color: ["#ded254","#ccc03d",],
behavior: behaviors.POWDER,
category: "food",
state: "powder",
density: 1000,
hidden: true,
tempHigh: 350,
stateHigh: "fire",
breakInto: "lemon_water",
burn: 60,
burntime: 200,
burnInto: "smoke"
};

elements.saliva = {
color: ["#a6f5f0","#b6f0ec",],
behavior: behaviors.LIQUID,
category: "liquids",
state: "liquid",
density: 1280,
tempHigh: 105,
stateHigh: ["steam","fragrance"],
tempLow: -5,
stateHigh: "saliva_ice",
reactions: {
"water": { elem1: null, chance: 0.5, elem2: "dirty_water", chance: 0.5,
}
}
};

elements.lemon_milk = {
color: ["#f5f2c4","#f7f4b2",],
behavior: behaviors.LIQUID,
category: "liquids",
state: "liquid",
density: 1002,
tempHigh: 500,
stateHigh: "smoke",
tempLow: -2,
stateLow: "frozen_yogurt",
stateLowColor: ["#f5f3cb","#f7f5bc"],
reactions: {
"cell": { elem1: "yogurt", },
}
};

elements.lemon_soda = {
color: ["#f5c842","#edcc68",],
behavior: behaviors.LIQUID,
category: "liquids",
state: "liquid",
density: 1240,
tempHigh: 140,
stateHigh: ["carbon_dioxide", "smoke",],
reactions: {
"poison": { elem1: null, }
}
};

elements.saliva_ice = {
color: ["#97fcfb","#bcf7f6",],
behavior: behaviors.SOLID,
category: "states",
state: "solid",
density: 1300,
tempHigh: 5,
stateHigh: "saliva",
};

elements.lemon_tea = {
color: ["#dec85b","#edd351",],
behavior: behaviors.LIQUID,
category: "liquids",
state: "liquid",
density: 1580,
tempHigh: 280,
stateHigh: ["fragrance","smoke","smoke",],
tempLow: -2,
stateLowColor: ["#e8cf8b","#f0dca5",],
stateLow: "tea_ice",
reactions: {
"sugar": { elem2: null, },
}
};

elements.rotten_lemon = {
color: ["#e3f283","#cdcf6b"],
behavior: behaviors.POWDER,
category: "food",
state: "powder",
density: 1890,
tempHigh: 200,
stateHigh: ["stench","ash",],
reactions: {
"water": { elem2: "dirty_water" },
}
};

elements.cow = {
  color: ["#d9d9d9","#616161",],
  behavior: [
         "XX|XX|XX",
         "XX|FX%5.0|M2%5.0 AND BO",
         "XX|M1|XX",],
  category: "life",
  state: "powder",
  density: 2800,
  tempHigh: 250,
  stateHigh: "cooked_meat",
  tempLow: -10,
  stateLow: "frozen_meat",
  reactions: {
    "water": { elem2: null, chance: 0.2,},
    "milk": { elem2: null, chance: 0.1, },
    "alcohol": { elem2: null, chance: 0.21, },
    "poison": { elem1: "rotten_meat", elem2: null, },
    "grass": { elem2: null, },
    "plague": { elem1: "rotten_meat", chance: 0.3, },
    "worm": { elem2: null, },
    "flea": { elem2: null, },
  }       
};

elements.hazmat_head = {
    color: ["#404040","#1a1a1a","#737373"],
    category: "life",
    hidden: true,
    density: 1380,
    state: "solid",
    conduct: .05,
    temp: 39,
    tempHigh: 6500,
    stateHigh: ["ash","iron",],
    tempLow: -180,
    stateLow: "frozen_meat",
    breakInto: ["blood","meat","bone","metal_scrap"],
    forceSaveColor: true,
    reactions: {
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "meat": { elem2:null, chance:0.1 },
        "cooked_meat": { elem2:null, chance:0.1 },
        "cured_meat": { elem2:null, chance:0.1 },
        "sugar": { elem2:null, chance:0.1 },
        "broth": { elem2:null, chance:0.2 },
        "yolk": { elem2:null, chance:0.1 },
        "hard_yolk": { elem2:null, chance:0.1 },
        "dough": { elem2:null, chance:0.1 },
        "batter": { elem2:null, chance:0.2 },
        "butter": { elem2:null, chance:0.1 },
        "melted_butter": { elem2:null, chance:0.2 },
        "chocolate": { elem2:null, chance:0.2 },
        "melted_chocolate": { elem2:null, chance:0.3 },
        "grape": { elem2:null, chance:0.1 },
        "tomato": { elem2:null, chance:0.1 },
        "herb": { elem2:null, chance:0.1 },
        "lettuce": { elem2:null, chance:0.1 },
        "corn": { elem2:null, chance:0.1 },
        "popcorn": { elem2:null, chance:0.15 },
        "potato": { elem2:null, chance:0.1 },
        "baked_potato": { elem2:null, chance:0.15 },
        "bread": { elem2:null, chance:0.1 },
        "toast": { elem2:null, chance:0.1 },
        "gingerbread": { elem2:null, chance:0.1 },
        "baked_batter": { elem2:null, chance:0.2 },
        "wheat": { elem2:null, chance:0.1 },
        "candy": { elem2:null, chance:0.1 },
        "yogurt": { elem2:null, chance:0.2 },
        "frozen_yogurt": { elem2:null, chance:0.1 },
        "ice_cream": { elem2:null, chance:0.2 },
        "beans": { elem2:[null,null,null,null,null,null,null,null,"stench"], chance:0.2 },
        "tea": { elem2:null, chance:0.2 },
        "coffee": { elem2:null, chance:0.2 },
        "milk": { elem2:null, chance:0.2 },
        "cream": { elem2:null, chance:0.2 },
        "soda": { elem2:null, chance:0.2 },
        "chocolate_milk": { elem2:null, chance:0.2 },
        "fruit_milk": { elem2:null, chance:0.2 },
        "pilk": { elem2:null, chance:0.2 },
        "eggnog": { elem2:null, chance:0.2 },
        "juice": { elem2:null, chance:0.2 },
        "cheese": { elem2:null, chance:0.1 },
        "melted_cheese": { elem2:null, chance:0.2 },
        "alcohol": { elem2:null, chance:0.2 },
        "antidote": { elem2:null, chance:0.2 },
        "honey": { elem2:null, chance:0.2 },
        "caramel": { elem2:null, chance:0.2 },
        "molasses": { elem2:null, chance:0.05 },
        "ketchup": { elem2:null, chance:0.1 },
        "pumpkin_seed": { elem2:null, chance:0.1 },
        "nut": { elem2:null, chance:0.1 },
        "nut_meat": { elem2:null, chance:0.1 },
        "nut_butter": { elem2:null, chance:0.1 },
        "nut_milk": { elem2:null, chance:0.2 },
        "jelly": { elem2:null, chance:0.2 },
        "mayo": { elem2:null, chance:0.2 },
        "mashed_potato": { elem2:null, chance:0.2 },
        "sauce": { elem2:null, chance:0.2 },
        "pickle": { elem2:null, chance:0.1 },
        "sun": { elem1:"cooked_meat" },
        "water": { elem2:"bubble", attr2:{"clone":"water"}, chance:0.001 },
        "salt_water": { elem2:"bubble", attr2:{"clone":"salt_water"}, chance:0.001 },
        "pool_water": { elem2:"bubble", attr2:{"clone":"pool_water"}, chance:0.001 },
    },
    properties: {
        dead: false
    },
    tick: function(pixel) {
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
                return
            }
        }

        // Find the body
        if (!isEmpty(pixel.x, pixel.y+1, true) && pixelMap[pixel.x][pixel.y+1].element == "hazmat_body") {
            var body = pixelMap[pixel.x][pixel.y+1];
            if (body.dead) { // If body is dead, kill head
                pixel.dead = body.dead;
            }
        }
        else { var body = null }

        if (tryMove(pixel, pixel.x, pixel.y+1)) {
            // create blood if severed 10% chance
            if (isEmpty(pixel.x, pixel.y+1) && !pixel.dead && Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y+1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        // homeostasis
        if (pixel.temp > 40) { pixel.temp -= 1; }
        else if (pixel.temp < 40) { pixel.temp += 1; }
    }
};

elements.hazmat_body = {
    color: ["#2c7328","#2db526","#ffc42e","#f5c345","#cf9502",],
    category: "life",
    hidden: true,
    density: 1370,
    state: "solid",
    conduct: .25,
    temp: 39,
    tempHigh: 6500,
    stateHigh: ["metal_scrap","ash"],
    tempLow: -180,
    stateLow: "frozen_meat",
    breakInto: ["blood","meat","bone","metal_scrap","radiation","fallout",],
    forceSaveColor: true,
    reactions: {
        "egg": { elem2:"yolk", chance:0.5, oneway:true },
        "grape": { elem2:"juice", chance:0.5, color2:"#291824", oneway:true },
        "ant": { elem2:"dead_bug", chance:0.05, oneway:true },
        "fly": { elem2:"dead_bug", oneway:true },
        "firefly": { elem2:"dead_bug", oneway:true },
        "bee": { elem2:"dead_bug", oneway:true },
        "flea": { elem2:"dead_bug", oneway:true },
        "termite": { elem2:"dead_bug", oneway:true },
        "worm": { elem2:"slime", chance:0.05, oneway:true },
        "stink_bug": { elem2:"stench", oneway:true },
        "grass_seed": { elem2:null, chance:0.05 },
        "gold_coin": { elem2:null, chance:0.05 },
        "diamond": { elem2:null, chance:0.05 },
        "sun": { elem1:"molten_tin", },
    },
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (tryMove(pixel, pixel.x, pixel.y+1)) { // Fall
            if (!isEmpty(pixel.x, pixel.y-2, true)) { // Drag head down
                var headpixel = pixelMap[pixel.x][pixel.y-2];
                if (headpixel.element == "hazmat_head") {
                    if (isEmpty(pixel.x, pixel.y-1)) {
                        movePixel(pixelMap[pixel.x][pixel.y-2], pixel.x, pixel.y-1);
                    }
                    else {
                        swapPixels(pixelMap[pixel.x][pixel.y-2], pixelMap[pixel.x][pixel.y-1]);
                    }
                }
            }
        }
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
            }
            return
        }

        // Find the head
        if (!isEmpty(pixel.x, pixel.y-1, true) && pixelMap[pixel.x][pixel.y-1].element == "hazmat_head") {
            var head = pixelMap[pixel.x][pixel.y-1];
            if (head.dead) { // If head is dead, kill body
                pixel.dead = head.dead;
            }
        }
        else { var head = null }
        if (pixel.burning) {
            pixel.panic += 0.1;
            if (head && pixelTicks-pixel.burnStart > 240) {
                pixel.color = head.color;
            }
        }
        else if (pixel.panic > 0) {
            pixel.panic -= 0.1;
        }

        if (isEmpty(pixel.x, pixel.y-1)) {
            // create blood if decapitated 10% chance
            if (Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y-1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        else if (head == null) { return }
        else if (Math.random() < 0.1*(isEmpty(pixel.x, pixel.y+1) ? 1 : pixel.panic+1)) { // Move 10% chance
            var movesToTry = [
                [1*pixel.dir,0],
                [1*pixel.dir,-1],
            ];
            // While movesToTry is not empty, tryMove(pixel, x, y) with a random move, then remove it. if tryMove returns true, break.
            while (movesToTry.length > 0) {
                var move = movesToTry.splice(Math.floor(Math.random() * movesToTry.length), 1)[0];
                if (isEmpty(pixel.x+move[0], pixel.y+move[1]-1)) {
                    var origx = pixel.x+move[0];
                    var origy = pixel.y+move[1];
                    if (tryMove(pixel, pixel.x+move[0], pixel.y+move[1]) && pixel.x===origx && pixel.y===origy) {
                        movePixel(head, head.x+move[0], head.y+move[1]);
                        break;
                    }
                }
            }
            // 15% chance to change direction
            if (Math.random() < 0.15) {
                pixel.dir *= -1;
            }
            // homeostasis
            if (pixel.temp > 39) { pixel.temp -= 1; }
            else if (pixel.temp < 39) { pixel.temp += 1; }
        }

    }
};

elements.hazmat_human = {
    color: ["#404040","#1a1a1a","#737373"],
    category: "life",
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (isEmpty(pixel.x, pixel.y+1)) {
            createPixel("hazmat_body", pixel.x, pixel.y+1);
            pixel.element = "hazmat_head";
        }
        else if (isEmpty(pixel.x, pixel.y-1)) {
            createPixel("hazmat_head", pixel.x, pixel.y-1);
            pixelMap[pixel.x][pixel.y-1].color = pixel.color;
            pixel.element = "hazmat_body";
            pixel.color = pixelColorPick(pixel)
        }
        else {
            deletePixel(pixel.x, pixel.y);
        }
    },
    related: ["hazmat_body","hazmat_head"],
    cooldown: defaultCooldown,
    forceSaveColor: true, 
};

elements.zombie_head = {
    color: ["#57f542","#43de2f","#46c435"],
    category: "life",
    hidden: true,
    density: 1025,
    state: "solid",
    conduct: .07,
    temp: 28,
    tempHigh: 320,
    stateHigh: ["ash","zombie_virus",],
    tempLow: -45,
    stateLow: ["frozen_meat","zombie_virus",],
    breakInto: ["infection","rotten_meat","bone","zombie_virus",],
    forceSaveColor: true,
    reactions: {
        "head": { elem2: ["rotten_meat","zombie",], chance:0.8, },
        "body": { elem2: ["rotten_meat","zombie",], chance:0.5, },
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "rotten_meat": { elem2: null, chance:0.5 },
        "meat": { elem2:null, chance:0.1 },
        "cooked_meat": { elem2:null, chance:0.1 },
        "cured_meat": { elem2:null, chance:0.1 },
    },
    properties: {
        dead: false
    },
    tick: function(pixel) {
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
                return
            }
        }

        // Find the body
        if (!isEmpty(pixel.x, pixel.y+1, true) && pixelMap[pixel.x][pixel.y+1].element == "zombie_body") {
            var body = pixelMap[pixel.x][pixel.y+1];
            if (body.dead) { // If body is dead, kill head
                pixel.dead = body.dead;
            }
        }
        else { var body = null }

        if (tryMove(pixel, pixel.x, pixel.y+1)) {
            // create blood if severed 10% chance
            if (isEmpty(pixel.x, pixel.y+1) && !pixel.dead && Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y+1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        // homeostasis
        if (pixel.temp > 28) { pixel.temp -= 1; }
        else if (pixel.temp < 28) { pixel.temp += 1; }
    }
};

elements.zombie_body = {
    color: ["#2d7ecf","#4d94db","#65a175",],
    category: "life",
    hidden: true,
    density: 1520,
    state: "solid",
    conduct: .29,
    temp: 29,
    tempHigh: 350,
    stateHigh: ["zombie_virus","ash"],
    tempLow: -180,
    stateLow: ["frozen_meat","zombie_virus",],
    breakInto: ["infection","rotten_meat","bone","zombie_virus",],
    forceSaveColor: true,
    reactions: {
        "head": { elem2: ["rotten_meat","zombie",], chance:0.8, },
        "body": { elem2: ["rotten_meat","zombie",], chance:0.5, },
        "oxygen": { elem2:"carbon_dioxide", chance:0.5 },
        "rotten_meat": { elem2: null, chance:0.5 },
        "meat": { elem2:null, chance:0.1 },
        "cooked_meat": { elem2:null, chance:0.1 },
        "cured_meat": { elem2:null, chance:0.1 },
    },
    
    properties: {
        dead: false,
        dir: 1,
        panic: 0
    },
    tick: function(pixel) {
        if (tryMove(pixel, pixel.x, pixel.y+1)) { // Fall
            if (!isEmpty(pixel.x, pixel.y-2, true)) { // Drag head down
                var headpixel = pixelMap[pixel.x][pixel.y-2];
                if (headpixel.element == "zombie_head") {
                    if (isEmpty(pixel.x, pixel.y-1)) {
                        movePixel(pixelMap[pixel.x][pixel.y-2], pixel.x, pixel.y-1);
                    }
                    else {
                        swapPixels(pixelMap[pixel.x][pixel.y-2], pixelMap[pixel.x][pixel.y-1]);
                    }
                }
            }
        }
        doHeat(pixel);
        doBurning(pixel);
        doElectricity(pixel);
        if (pixel.dead) {
            // Turn into rotten_meat if pixelTicks-dead > 500
            if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
                changePixel(pixel,"rotten_meat");
            }
            return
        }

        // Find the head
        if (!isEmpty(pixel.x, pixel.y-1, true) && pixelMap[pixel.x][pixel.y-1].element == "zombie_head") {
            var head = pixelMap[pixel.x][pixel.y-1];
            if (head.dead) { // If head is dead, kill body
                pixel.dead = head.dead;
            }
        }
        else { var head = null }
        if (pixel.burning) {
            pixel.panic += 0.1;
            if (head && pixelTicks-pixel.burnStart > 240) {
                pixel.color = head.color;
            }
        }
        else if (pixel.panic > 0) {
            pixel.panic -= 0.1;
        }

        if (isEmpty(pixel.x, pixel.y-1)) {
            // create blood if decapitated 10% chance
            if (Math.random() < 0.1 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y-1);
                // set dead to true 15% chance
                if (Math.random() < 0.15) {
                    pixel.dead = pixelTicks;
                }
            }
        }
        else if (head == null) { return }
        else if (Math.random() < 0.1*(isEmpty(pixel.x, pixel.y+1) ? 1 : pixel.panic+1)) { // Move 10% chance
            var movesToTry = [
                [1*pixel.dir,0],
                [1*pixel.dir,-1],
            ];
            // While movesToTry is not empty, tryMove(pixel, x, y) with a random move, then remove it. if tryMove returns true, break.
            while (movesToTry.length > 0) {
                var move = movesToTry.splice(Math.floor(Math.random() * movesToTry.length), 1)[0];
                if (isEmpty(pixel.x+move[0], pixel.y+move[1]-1)) {
                    var origx = pixel.x+move[0];
                    var origy = pixel.y+move[1];
                    if (tryMove(pixel, pixel.x+move[0], pixel.y+move[1]) && pixel.x===origx && pixel.y===origy) {
                        movePixel(head, head.x+move[0], head.y+move[1]);
                        break;
                    }
                }
            }
            // 15% chance to change direction
            if (Math.random() < 0.15) {
                pixel.dir *= -1;
            }
            // homeostasis
            if (pixel.temp > 29) { pixel.temp -= 1; }
            else if (pixel.temp < 29) { pixel.temp += 1; }
        }

    }
};

elements.zombie = {
    // color: ["#404040","#1a1a1a","#737373"],
    color: ["#57f542","#43de2f","#46c435"],
    category: "life",
    properties: {
        dead: false,
        dir: 1,
        panic: 0,
    },
    tick: function(pixel) {
        if (isEmpty(pixel.x, pixel.y+1)) {
            createPixel("zombie_body", pixel.x, pixel.y+1);
            pixel.element = "zombie_head";
        }
        else if (isEmpty(pixel.x, pixel.y-1)) {
            createPixel("zombie_head", pixel.x, pixel.y-1);
            pixelMap[pixel.x][pixel.y-1].color = pixel.color;
            pixel.element = "zombie_body";
            pixel.color = pixelColorPick(pixel)
        }
        else {
            deletePixel(pixel.x, pixel.y);
        }
    },
    related: ["zombie_body","zombie_head"],
    cooldown: defaultCooldown,
    forceSaveColor: true, 
};

elements.zombie_virus = {
    behavior: behaviors.DGAS,
    color: ["#660266","#bd06bd","#f041f0",],
    category: "special",
    density: 30,
    state: "gas",
    reactions: {
        "head": { elem2: ["zombie","rotten_meat",], chance: 0.5, },
        "body": { elem2: ["zombie","rotten_meat",], chance: 0.5, },
    }
}

elements.matter = {
    behavior: behaviors.GAS,
    color: ["#c4f8ff","#b0f6ff","#9ccfd6",],
    darkText: true,
    category: "energy",
    density: 2.20,
    state: "gas",
    reactions: {
        "antimatter": { elem1: "explosion", },
        "positron": { elem1: "explosion", },
        "electron": { elem1: "explosion", },
    }
};
elements.particle_accelerator_left = {
    behavior: behaviors.SOLID,
    color: ["#363aa3","#858585","#d1d1d1"],
    density: 8200,
    category: "machines",
    state: "solid",
    reactions: {
        "matter": { elem2: ["accelerated_matter_left",] },
    }
};
elements.particle_accelerator_right = {
    behavior: behaviors.SOLID,
    color: ["#363aa3","#858585","#d1d1d1"],
    density: 8200,
    category: "machines",
    state: "solid",
    reactions: {
        "matter": { elem2: ["accelerated_matter_right",] },
    } 
};

elements.accelerated_matter_left = {
    color: ["#c0ecf0","#a8f8ff",],
    behavior: [
        "M2|XX|XX",
        "M1 AND XX|XX|XX",
        "M2|XX|XX",
    ],
    hidden: true,
    state: "gas",
    category: "energy",
    density: 2.20,
    reactions: {
        "accelerated_matter_right": { elem1: ["antimatter","pop",null,], chance: 0.3, },
        "accelerated_matter_left": { elem1: ["antimatter","pop",null,], chance: 0.3, },
        "antimatter": { elem1: "pop", chance: 0.01, }, 
    }

};
elements.accelerated_matter_right = {
    color: ["#c0ecf0","#a8f8ff",],
    behavior: [
        "XX|XX|M2",
       "XX|XX|M1 AND XX",
        "XX|XX|M2",
    ],
    hidden: true,
    state: "gas",
    category:"energy",
    density: 2.20,
    reactions: {
        "accelerated_matter_left": { elem1: ["antimatter","pop",null,], chance: 0.3, },
        "accelerated_matter_right": { elem1: ["antimatter","pop",null,], chance: 0.3, },
        "antimatter": { elem1: "pop", chance: 0.01, },

    }

};































































//-----------------------------------------------------------------------------------------------------------------------




































































elements.water_bomb = {
    color: "#318894",
    behavior: [
        "XX|EX:30>water|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:30>water|M2",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
};








elements.magma_bomb = {
    color: "#a14b16",
    behavior: [
        "XX|EX:30>magma|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:30>magma,plasma|M2",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
};












elements.acid_bomb = {
    color: "#82cc4e",
    behavior: [
        "XX|EX:30>acid|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:30>acid|M2",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
};







elements.seed_bomb = {
    color: "#11ff00",
    behavior: [
        "XX|EX:30>seeds|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:30>seeds|M2",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
    excludeRandom: true,
    cooldown: defaultCooldown
};





































































//-----------------------------------------------------------------------------------------------------------------------









































































elements.w_knife = {
    color: ["#cbcdcd","#bdbdbd"],
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1 AND SM%0.005|XX",
    ],
    reactions: {
        "head": { elem2:["brain","bone"], chance:0.5 },
        "body": { elem2:["heart","bone"], chance:0.5 },
        "decapitated_head": { elem2:["brain","bone"], chance:0.8 },
        "human_corpse": { elem2:["heart","bone"], chance:0.8 },
        "water": { elem1:"rust", chance:0.0025 },
        "salt_water": { elem1:"rust", chance:0.005 },
        "dirty_water": { elem1:"rust", chance:0.04 },
        "pool_water": { elem1:"rust", chance:0.04 },
        "sugar_water": { elem1:"rust", chance:0.0035 },
        "seltzer": { elem1:"rust", chance:0.006 },
        "salt": { elem1:"rust", chance:0.004 },
        "blood": { elem1:"rust", chance:0.003 },
        "infection": { elem1:"rust", chance:0.003 },
        "antibody": { elem1:"rust", chance:0.003 },
        "fire": { elem1:"rust", chance:0.0025 },
        "coffee": { elem1:"rust", chance:0.0003 },
        "tea": { elem1:"rust", chance:0.0003 },
        "broth": { elem1:"rust", chance:0.0003 },
        "juice": { elem1:"rust", chance:0.0003 },
        "nut_milk": { elem1:"rust", chance:0.0003 },
    },
    tempHigh: 1200,
    stateHigh: ["molten_steel","molten_steel","ash","charcoal"],
    category: "weapons",
    density: 2500,
    conduct: 0.15,
    hardness: 0.2,
    darkText: true
}





elements.sweet_blood = {
    color: "#ff4040",
    behavior: behaviors.LIQUID,
    reactions: {
        "yeast": { elem1:"alcohol", chance:0.005 },
        "plague": { elem1:"infection", elem2:null },
        "rotten_meat": { elem1:"infection" },
        "rotten_cheese": { elem1:"infection" },
        "virus": { elem1:"infection", elem2:null },
        "cancer": { elem1:"infection" },
        "cyanide": { elem1:"infection", elem2:null },
        "cyanide_gas": { elem1:"infection", elem2:null },
        "mushroom_spore": { elem1:"infection", elem2:null },
        "mushroom_gill": { elem1:"infection" },
        "dirty_water": { elem1:"infection", elem2:null },
        "rad_steam": { elem1:"infection" },
        "rad_glass": { elem1:"infection" },
        "rad_shard": { elem1:"infection" },
        "rad_cloud": { elem1:"infection" },
        "fallout": { elem1:"infection" },
        "rust": { elem1:"infection", chance:0.05 },
        "oxidized_copper": { elem1:"infection", chance:0.05 },
        "rat": { elem1:"infection", chance:0.075 },
        "flea": { elem1:"infection", chance:0.03 },
        "worm": { elem1:"infection", chance:0.03 },
        "mercury": { elem1:"infection", elem2:null, chance:0.05 },
        "lead": { elem1:"infection", elem2:null, chance:0.01 },
        "oxygen": { elem2:null, chance:0.05 },
        "carbon_dioxide": { elem2:null, chance:0.05 },
        "alcohol": { elem1:[null,"sugar","dna"], chance:0.02 }
    },
    viscosity: 12,
    tempHigh: 120,
    stateHigh: ["steam","sugar","oxygen","steam","sugar","oxygen","steam","salt","oxygen"],
    tempLow: -5,
    stateLow: "candy",
    category:"food",
    state: "liquid",
    density: 1080,
    stain: 0.05,
    isFood: true,
    hidden: true
}

elements.mellified_man = {
    color: ["#f4f8db","#f8fbd0","#fbebba","#e8ce96","#b18f56","#936d43","#715234","#4b422a"],
    behavior: [
        "XX|CR:honey%0.0001|XX",
        "CR:honey%0.0001|XX|CR:honey%0.0001",
        "XX|M1 AND CR:honey%0.0001|XX",
    ],
    reactions: {
        "water": { elem2:"sugar_water", tempMin:70, color2:"#d7db69" },
        "salt_water": { elem2:"sugar_water", tempMin:70, color2:"#d7db69"},
        "sugar_water": { elem2:"sugar_water", tempMin:70, color2:"#d7db69" },
        "seltzer": { elem2:"sugar_water", tempMin:70, color2:"#d7db69" },
    },
    tempHigh: 200,
    stateHigh: ["cooked_human","cooked_human","honey",],
    category:"food",
    burn:15,
    burnTime:200,
    burnInto:["cooked_human","cooked_human","honey",],
    breakInto: ["blood","human_flesh","bone","honey","human_flesh","bone"],
    state: "solid",
    density: 1020,
    conduct: 0.1,
    isFood: true,
    hidden: true
}

elements.human_flesh = {
    color: ["#9e4839","#ba6449","#d2856c","#a14940"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "XX|M1|XX",
    ],
    reactions: {
        "honey": { elem1:"mellified_man", elem2:["honey","honey",null], chance:0.0001 },
        "dirty_water": { elem1:"rotten_human_flesh", chance:0.1 },
        "fly": { elem1:"rotten_human_flesh", chance:0.2 },
        "dioxin": { elem1:"rotten_human_flesh", elem2:null, chance:0.1 },
        "uranium": { elem1:"rotten_human_flesh", chance:0.1 },
        "cancer": { elem1:"rotten_human_flesh", chance:0.1 },
        "plague": { elem1:"rotten_human_flesh", elem2:null, chance:0.3 },
        "ant": { elem1:"rotten_human_flesh", chance:0.1 },
        "worm": { elem1:"rotten_human_flesh", chance:0.1 },
        "rat": { elem1:"rotten_human_flesh", chance:0.3 },
        "mushroom_spore": { elem1:"rotten_human_flesh", chance:0.1 },
        "mushroom_stalk": { elem1:"rotten_human_flesh", chance:0.1 },
        "mycelium": { elem1:"rotten_human_flesh", chance:0.1 },
        "hyphae": { elem1:"rotten_human_flesh", chance:0.1 },
        "mercury": { elem1:"rotten_human_flesh", elem2:null, chance:0.2 },
        "mercury_gas": { elem1:"rotten_human_flesh", elem2:null, chance:0.1 },
        "virus": { elem1:"rotten_human_flesh", chance:0.1 },
        "poison": { elem1:"rotten_human_flesh", elem2:null, chance:0.5 },
        "infection": { elem1:"rotten_human_flesh", elem2:null, chance:0.1 },
        "ink": { elem1:"rotten_human_flesh", elem2:null, chance:0.1 },
        "acid": { elem1:"rotten_human_flesh", elem2:null, chance:0.5 },
        "acid_gas": { elem1:"rotten_human_flesh", chance:0.4 },
        "cyanide": { elem1:"rotten_human_flesh", elem2:null, chance:0.5 },
        "cyanide_gas": { elem1:"rotten_human_flesh", elem2:null, chance:0.5 },
        "rotten_cheese": { elem1:"rotten_human_flesh", chance:0.02 },
        "fallout": { elem1:"rotten_human_flesh", chance:0.2 },
        "water": { elem2:"broth", tempMin:70 },
        "salt_water": { elem2:"broth", tempMin:70 },
        "sugar_water": { elem2:"broth", tempMin:70 },
        "seltzer": { elem2:"broth", tempMin:70 },
        "salt": { elem1:"cured_human_flesh" },
        "vinegar": { elem1:"cured_human_flesh", chance:0.1 },
    },
    tempHigh: 100,
    stateHigh: "cooked_human",
    tempLow: -18,
    stateLow: "frozen_human_flesh",
    category:"food",
    burn:15,
    burnTime:200,
    burnInto:"cooked_human",
    state: "solid",
    density: 1050,
    conduct: 0.2,
    isFood: true,
    hidden: true
}

elements.cooked_brain = {
    color: ["#C37C6E","#B77269","#AE625C"],
    behavior: behaviors.STURDYPOWDER,
    tick: function(pixel) {
        if (pixel.temp > 100 && Math.random() < 0.0025 && isEmpty(pixel.x,pixel.y-1)) {
            changePixel(pixel,"grease")
        }
    },
    reactions: {
        "water": { elem2:"broth", tempMin:70 },
        "salt_water": { elem2:"broth", tempMin:70 },
        "sugar_water": { elem2:"broth", tempMin:70 },
        "dirty_water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
        "seltzer": { elem2:"broth", tempMin:70 }
    },
    tempHigh: 300,
    stateHigh: "ash",
    category:"food",
    hidden:true,
    burn:10,
    burnTime:200,
    burnInto: "ash",
    state: "solid",
    density: 1005,
    isFood: true
}

elements.cooked_heart = {
    color: ["#A44447","#9A4546","#8A2A30"],
    behavior: behaviors.STURDYPOWDER,
    tick: function(pixel) {
        if (pixel.temp > 100 && Math.random() < 0.0025 && isEmpty(pixel.x,pixel.y-1)) {
            changePixel(pixel,"grease")
        }
    },
    reactions: {
        "water": { elem2:"broth", tempMin:70 },
        "salt_water": { elem2:"broth", tempMin:70 },
        "sugar_water": { elem2:"broth", tempMin:70 },
        "dirty_water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
        "seltzer": { elem2:"broth", tempMin:70 }
    },
    tempHigh: 300,
    stateHigh: "ash",
    category:"food",
    hidden:true,
    burn:10,
    burnTime:200,
    burnInto: "ash",
    state: "solid",
    density: 1005,
    isFood: true
}

elements.cooked_human = {
    color: ["#ae7d5b","#9b6d54","#7e4d31"],
    behavior: behaviors.STURDYPOWDER,
    tick: function(pixel) {
        if (pixel.temp > 100 && Math.random() < 0.0025 && isEmpty(pixel.x,pixel.y-1)) {
            changePixel(pixel,"grease")
        }
    },
    reactions: {
        "water": { elem2:"broth", tempMin:70 },
        "salt_water": { elem2:"broth", tempMin:70 },
        "sugar_water": { elem2:"broth", tempMin:70 },
        "dirty_water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
        "seltzer": { elem2:"broth", tempMin:70 }
    },
    tempHigh: 300,
    stateHigh: "ash",
    category:"food",
    hidden:true,
    burn:10,
    burnTime:200,
    burnInto: "ash",
    state: "solid",
    density: 1005,
    isFood: true
}

elements.frozen_human_flesh = {
    color: ["#399e8f","#49baa9","#6cd2c6","#40a197"],
    behavior: behaviors.STURDYPOWDER,
    temp: -18,
    tempHigh: 0,
    stateHigh: "human_flesh",
    category:"food",
    hidden:true,
    state: "solid",
    density: 1070,
    isFood: true
}

elements.rotten_human_flesh = {
    color: ["#b8b165","#b89765"],
    behavior: [
        "XX|CR:plague,stench,stench,stench,fly%0.25 AND CH:meat>rotten_meat%1 AND CH:human_flesh>rotten_human_flesh%1|XX",
        "SP%99 AND CH:meat>rotten_meat%1 AND CH:human_flesh>rotten_human_flesh%1|XX|SP%99 AND CH:meat>rotten_meat%1 AND CH:human_flesh>rotten_human_flesh%1",
        "XX|M1 AND CH:meat>rotten_meat%1 AND CH:human_flesh>rotten_human_flesh%1|XX",
    ],
    reactions: {
        "water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
        "salt_water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
        "sugar_water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
        "dirty_water": { elem2:"broth", tempMin:70, color2:"#d7db69" },
        "seltzer": { elem2:"broth", tempMin:70, color2:"#d7db69" }
    },
    tempHigh: 300,
    stateHigh: ["plague","ash","ammonia"],
    category:"food",
    hidden: true,
    burn:12,
    burnTime:200,
    burnInto:["plague","ash","ammonia"],
    state: "solid",
    density: 1005,
    conduct: 0.1,
    isFood: true
}

elements.cured_human_flesh = {
    name: "cured_meat",
    color: ["#be5c4b","#c8846f","#dda592","#bc6157"],
    behavior: [
        "XX|XX|XX",
        "SP|XX|SP",
        "XX|M1|XX",
    ],
    reactions: {
        "honey": { elem1:"mellified_man", elem2:["honey","honey",null], chance:0.0001 },
        "water": { elem2:"broth", tempMin:70 },
        "salt_water": { elem2:"broth", tempMin:70 },
        "sugar_water": { elem2:"broth", tempMin:70 },
        "seltzer": { elem2:"broth", tempMin:70 },
    },
    tempHigh: 100,
    stateHigh: "cooked_human",
    category:"food",
    burn:15,
    burnTime:200,
    burnInto:"cooked_human",
    state: "solid",
    density: 1019.5,
    conduct: 0.3,
    isFood: true,
    hidden: true
}

elements.human_corpse = {
    color: ["#069469","#047e99","#7f5fb0"],
    behavior: [
        "XX|XX|XX",
        "XX|CH:rotten_human_flesh%0.0001|XX",
        "XX|M1|XX",
    ],
    tick: function(pixel) {
        if (isEmpty(pixel.x, pixel.y-1)) {
            if (Math.random() < 0.01 && !pixel.charge) {
                createPixel("blood", pixel.x, pixel.y-1);
            }
        }
    },
    category: "life",
    hidden: true,
    density: 1500,
    state: "solid",
    conduct: .05,
    temp: 37,
    tempHigh: 200,
    stateHigh: "cooked_human",
    tempLow: -30,
    stateLow: "frozen_human_flesh",
    burn: 10,
    burnTime: 250,
    burnInto: "cooked_human",
    breakInto: ["blood","human_flesh","bone"],
    forceSaveColor: true,
    reactions: {
        "honey": { elem1:"mellified_man", elem2:["honey","honey",null], chance:0.0005 },
        "cancer": { elem1:"cancer", chance:0.005 },
        "radiation": { elem1:["ash","human_flesh","rotten_human_flesh","cooked_human"], chance:0.4 },
        "neutron": { elem1:["ash","human_flesh","rotten_human_flesh","cooked_human"], chance:0.01 },
        "fallout": { elem1:["ash","human_flesh","rotten_human_flesh","cooked_human"], chance:0.01 },
        "plague": { elem1:["plague","plague","rotten_human_flesh"], chance:0.05 },
        "stink_bug": { elem2:"stench", oneway:true },
        "sun": { elem1:"cooked_human" },
    },
}

elements.decapitated_head = {
    color: ["#f3e7db","#f7ead0","#eadaba","#d7bd96","#a07e56","#825c43","#604134","#3a312a"],
    behavior: [
        "XX|XX|XX",
        "XX|CH:rotten_human_flesh%0.0001|XX",
        "M2%90|M1|M2%90",
    ],
    tick: function(pixel) {
        if (tryMove(pixel, pixel.x, pixel.y+1)) {
            if (isEmpty(pixel.x, pixel.y+1) && Math.random() < 0.01) {
                createPixel("blood", pixel.x, pixel.y+1);
            }
        }
    },
    category: "life",
    hidden: true,
    density: 1080,
    state: "solid",
    conduct: .05,
    temp: 37,
    tempHigh: 200,
    stateHigh: "cooked_human",
    tempLow: -30,
    stateLow: "frozen_human_flesh",
    burn: 10,
    burnTime: 250,
    burnInto: "cooked_human",
    breakInto: ["blood","human_flesh","bone"],
    forceSaveColor: true,
    reactions: {
        "honey": { elem1:"mellified_man", elem2:["honey","honey",null], chance:0.0005 },
        "cancer": { elem1:"cancer", chance:0.005 },
        "radiation": { elem1:["ash","human_flesh","rotten_human_flesh","cooked_human"], chance:0.4 },
        "neutron": { elem1:["ash","human_flesh","rotten_human_flesh","cooked_human"], chance:0.03 },
        "fallout": { elem1:["ash","human_flesh","rotten_human_flesh","cooked_human"], chance:0.03 },
        "plague": { elem1:"plague", chance:0.05 },
        "sun": { elem1:"cooked_human" },
        "light": { stain1:"#825043" },
    },
}

elements.head.tick = function(pixel) {
    doHeat(pixel);
    doBurning(pixel);
    doElectricity(pixel);
    if (pixel.dead) {
        // Turn into rotten_meat if pixelTicks-dead > 500
        if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
            pixel.element = "decapitated_head";
            return
        }
    }

    // Find the body
    if (!isEmpty(pixel.x, pixel.y+1, true) && pixelMap[pixel.x][pixel.y+1].element == "body") {
        var body = pixelMap[pixel.x][pixel.y+1];
        if (body.dead) { // If body is dead, kill head
            pixel.dead = body.dead;
        }
    }
    else { var body = null }

    if (tryMove(pixel, pixel.x, pixel.y+1)) {
        // create blood if severed 10% chance
        if (isEmpty(pixel.x, pixel.y+1) && !pixel.dead && Math.random() < 0.1 && !pixel.charge) {
            createPixel("blood", pixel.x, pixel.y+1);
            // set dead to true 15% chance
            if (Math.random() < 0.15) {
                pixel.dead = pixelTicks;
            }
        }
    }
    // homeostasis
    if (pixel.temp > 37) { pixel.temp -= 1; }
    else if (pixel.temp < 37) { pixel.temp += 1; }
}

elements.body.tick = function(pixel) {
    if (tryMove(pixel, pixel.x, pixel.y+1)) { // Fall
        if (!isEmpty(pixel.x, pixel.y-2, true)) { // Drag head down
            var headpixel = pixelMap[pixel.x][pixel.y-2];
            if (headpixel.element == "head") {
                if (isEmpty(pixel.x, pixel.y-1)) {
                    movePixel(pixelMap[pixel.x][pixel.y-2], pixel.x, pixel.y-1);
                }
                else {
                    swapPixels(pixelMap[pixel.x][pixel.y-2], pixelMap[pixel.x][pixel.y-1]);
                }
            }
        }
    }
    doHeat(pixel);
    doBurning(pixel);
    doElectricity(pixel);
    if (pixel.dead) {
        // Turn into rotten_meat if pixelTicks-dead > 500
        if (pixelTicks-pixel.dead > 200 && Math.random() < 0.1) {
            pixel.element = "human_corpse";
        }
        return
    }

    // Find the head
    if (!isEmpty(pixel.x, pixel.y-1, true) && pixelMap[pixel.x][pixel.y-1].element == "head") {
        var head = pixelMap[pixel.x][pixel.y-1];
        if (head.dead) { // If head is dead, kill body
            pixel.dead = head.dead;
        }
    }
    else { var head = null }
    if (pixel.burning) {
        pixel.panic += 0.1;
        if (head && pixelTicks-pixel.burnStart > 240) {
            pixel.color = head.color;
        }
    }
    else if (pixel.panic > 0) {
        pixel.panic -= 0.1;
    }

    if (isEmpty(pixel.x, pixel.y-1)) {
        // create blood if decapitated 10% chance
        if (Math.random() < 0.1 && !pixel.charge) {
            createPixel("blood", pixel.x, pixel.y-1);
            // set dead to true 15% chance
            if (Math.random() < 0.15) {
                pixel.dead = pixelTicks;
            }
        }
    }
    else if (head == null) { return }
    else if (Math.random() < 0.1*(isEmpty(pixel.x, pixel.y+1) ? 1 : pixel.panic+1)) { // Move 10% chance
        var movesToTry = [
            [1*pixel.dir,0],
            [1*pixel.dir,-1],
        ];
        // While movesToTry is not empty, tryMove(pixel, x, y) with a random move, then remove it. if tryMove returns true, break.
        while (movesToTry.length > 0) {
            var move = movesToTry.splice(Math.floor(Math.random() * movesToTry.length), 1)[0];
            if (isEmpty(pixel.x+move[0], pixel.y+move[1]-1)) {
                var origx = pixel.x+move[0];
                var origy = pixel.y+move[1];
                if (tryMove(pixel, pixel.x+move[0], pixel.y+move[1]) && pixel.x===origx && pixel.y===origy) {
                    movePixel(head, head.x+move[0], head.y+move[1]);
                    break;
                }
            }
        }
        // 15% chance to change direction
        if (Math.random() < 0.15) {
            pixel.dir *= -1;
        }
        // homeostasis
        if (pixel.temp > 37) { pixel.temp -= 1; }
        else if (pixel.temp < 37) { pixel.temp += 1; }
    }
}

elements.body.stateHigh = "cooked_human"
elements.head.stateHigh = "cooked_human"

elements.body.breakInto = ["blood","human_flesh","bone","blood","human_flesh","bone","blood","heart","bone",]
elements.head.breakInto = ["blood","brain","bone"]

elements.body.stateLow = "frozen_human_flesh"
elements.head.stateLow = "frozen_human_flesh"

if (!elements.blood.reactions) { elements.blood.reactions = {} }
    elements.blood.reactions.caramel = { "elem1": "sweet_blood", "elem2": null, chance:0.001 };
    elements.blood.reactions.sugar = { "elem1": "sweet_blood", "elem2": null, chance:0.0005};

if (!elements.head.reactions) { elements.head.reactions = {} }
    elements.head.reactions.human_flesh = { "elem2": null, chance:0.01 };
    elements.head.reactions.cooked_human = { "elem2": null, chance:0.05 };
    elements.head.reactions.cooked_brain = { "elem2": null, chance:0.03 };
    elements.head.reactions.cooked_heart = { "elem2": null, chance:0.04 };













































































//-------------------------------------------------------------------------------------------------------------------------------











































































elements.charged_battery= {
    color: "#9c6c25",
    behavior: [
        "XX|SH%1000|XX", // shocks (adds charge)
        "SH%500|CH:low_battery%0.05|SH%500",
        "XX|SH%1000|XX",
    ],
    colorOn: "#00ff00",
    category: "machines",
    tempHigh: 1455.5,
    stateHigh: ["molten_steel","explosion","acid_gas"],
    charge: 0.5,
    conduct: 1,
};
elements.low_battery= {
    color: "#9c6c25",
    behavior: [
        "XX|SH%10|XX", // shocks (adds charge)
        "SH%10|CH:dead_battery%0.05|SH%10",
        "XX|SH%10|XX",
    ],
    behaviorOn:  [
        "XX|SH%10|XX", // shocks (adds charge)
        "SH%10|CH:charged_battery%0.045|SH%10",
        "XX|SH%10|XX",
    ],
    colorOn: "#4fb613",
    category: "machines",
    tempHigh: 1455.5,
    stateHigh: ["molten_steel","explosion","acid_gas"],
    charge: 0.5,
    conduct: 0.75,
};
elements.dead_battery= {
    color: "#9c6c25",
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|XX|XX",
    ],
    behaviorOn:  [
        "XX|XX|XX",
        "XX|CH:low_battery%0.045|XX",
        "XX|XX|XX",
    ],
    colorOn: "#699e19",
    category: "machines",
    tempHigh: 1455.5,
    stateHigh: ["molten_steel","explosion","acid_gas"],
    charge: 0.5,
    conduct: 0.5,
};
elements.radio_broadcaster= {
    color: "#78784c",
    behavior: behaviors.WALL,
    behaviorOn: [
        "XX|SH AND CR:radio_wave AND CR:radio_wave|XX",
        "SH AND CR:radio_wave AND CR:radio_wave|XX|SH AND CR:radio_wave AND CR:radio_wave",
        "XX|SH AND CR:radio_wave AND CR:radio_wave|XX",
    ],
    colorOn: "#ffff59",
    category: "machines",
    tempHigh: 1455.5,
    stateHigh: ["molten_steel","explosion","acid_gas"],
    conduct: 1
};
elements.radio_receiver= {
    color: "#78784c",
    behavior: behaviors.WALL,
    reactions: {radio_wave: {elem2: "electric", chance: 0.75}},
    colorOn: "#ffff59",
    category: "machines",
    tempHigh: 1455.5,
    stateHigh: ["molten_steel","explosion","acid_gas"],
    conduct: 1
};
elements.radio_wave= {
    color: ["#000000"],
    behavior: behaviors.BOUNCY,
    behaviorOn: [
            ["XX","CL","XX"],
            ["CL","DL%5","CL"],
            ["XX","CL","XX"]
        ]
    ,
    colorOn: "#000000",
    tick: function(pixel){
		if (currentElement == "radio_wave"){
			pixel.color = "rgb(15, 15, 15)";
		} else {
			pixel.color = "rgba(0, 0, 0, -1)";
		}
	},
    category: "energy",
    reactions: {electric: {elem1: null, elem2: null, chance: 0.5}},
    density: 1,
    //charge: 0.5,
    conduct: 0.01,
    ignore: ["radio_wave"],
};

elements.e_nuke = {
    desc: "Works like a nuke but needs power to explode",
	color: elements.nuke.color,
	hardness: 0.5,
	state: "solid",
	behavior: behaviors.POWDER,
	conduct: 1,
	category: "weapons",
	behaviorOn:  [
        "XX|XX|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:60>plasma,plasma,plasma,plasma,radiation,rad_steam|M2",
    ],
	name: "E-Nuke",
};
elements.drill = {
    color: ["#a7ab81","#a3a685", "#9ba252"],
    tick: function(pixel) {
        for (var i = 0; i < 3; i++) {
            var skip = false;
            if (!isEmpty(pixel.x,pixel.y+1,true)) {
                var p = pixelMap[pixel.x][pixel.y+1];
                if (p.element === "drill") { skip = true; }
                if (Math.random() < 0.9 && elements[p.element].hardness !== 1) {
                    deletePixel(p.x,p.y);
                }
            }
            if (!tryMove(pixel,pixel.x,pixel.y+1,["flash","smoke"]) && !skip) {
                explodeAt(pixel.x,pixel.y,5,"flash");
                var coords = circleCoords(pixel.x,pixel.y,2);
                coords.forEach(function(coord){
                    var x = coord.x;
                    var y = coord.y;
                    if (!isEmpty(x,y,true)) {
                        pixelMap[x][y].temp += 55;
                        pixelTempCheck(pixelMap[x][y]);
                    }
                })
                deletePixel(pixel.x,pixel.y);
                return;
            }
        }
    },
    category: "weapons",
    state: "solid",
    density: 100000000,
    temp: 55,
    hardness: 1,
    maxSize: 3,
    cooldown: defaultCooldown,
    excludeRandom: true,
};
elements.holy_hand_grenade = {
    color: elements.gold.color,
    behavior: [
        "XX|EX:6>god_ray,bless,bless,bless%1|XX",
        "XX|XX|XX",
        "M2|M1 AND EX:6>god_ray,bless,bless,bless%1|M2",
    ],
    behaviorOn: [
        "XX|XX|XX",
        "XX|EX:6>god_ray,bless,bless,bless%1|XX",
        "XX|XX|XX",
    ],
    category: "weapons",
    state: "solid",
    density: 1300,
    tempHigh: 1455.5,
    stateHigh: ["molten_steel", "god_ray"],
    excludeRandom: true,
    conduct: 1,
    cooldown: defaultCooldown,
};
//Fioushemastor (Aparently needlessly complicated. IDK)
elements.timer_input =  {
    color: "#4d0a03",
    behavior: behaviors.WALL,
    category: "machines",
    insulate: true,
    conduct: 1,
    noMix: true
  }
  
  let TimerDelay = 100
  elements.Timer = {
      color: "#838cc2",
      behavior: behaviors.WALL,
      tick: function(pixel){
        if (pixelTicks == pixel.start) {
          pixel.delay = TimerDelay
        }
        //ceck all surroundings
        for (let offset of adjacentCoords) {
          if (isEmpty(pixel.x+offset[0], pixel.y+offset[1])) continue;
          if (pixelMap[pixel.x+offset[0]][pixel.y+offset[1]].charge && pixelMap[pixel.x+offset[0]][pixel.y+offset[1]].element == "timer_input") {
            let oppositeCoords = {x: pixel.x-offset[0], y: pixel.y-offset[1]}
            pixel.timers.push({start: pixelTicks, coords: oppositeCoords, delay: pixel.delay})
          }
        }
        //go through all timers
        for (let index in pixel.timers) {
          let timer = pixel.timers[index]
          if (timer.start == pixelTicks-pixel.delay) {
            if (isEmpty(timer.coords.x, timer.coords.y, true)) continue;
            pixelMap[timer.coords.x][timer.coords.y].charge = 1
            pixel.timers.splice(index, 1)
          }
        }
  
      },
      onSelect: () => {
        TimerDelay = prompt("what shall the delay be? (in ticks)", 100)
      },
      colorOn: "#ffff59",
      category: "machines",
      tempHigh: 1455.5,
      stateHigh: "molten_steel",
      conduct: 0,
      properties: {
        timers: [],
        delay: 100
      }
  }; 













































































//-----------------------------------------------------------------------------------------------------------------------------












































































elements.blood.name = "blood";

elements.blood.color = ["#fc0a0a","#ba0b0b","#cf1313"];



































//-----------------------------------------------------------------------------------------------



























elements.purple_carrot_seed = {
    color: "#b08d35",
    tick: function (pixel) {
        if (isEmpty(pixel.x, pixel.y + 1)) {
            movePixel(pixel, pixel.x, pixel.y + 1);
        }
        else {
            if (Math.random() < 0.1 && pixel.age > 100 && pixel.temp < 100 && pixel.leafgrown == true && pixel.growthpixel == 0) {
                if (!outOfBounds(pixel.x, pixel.y + 1)) {
                    var randomNumber1 = Math.round(Math.random());
                    pixel.growthpixel = pixel.growthpixel + randomNumber1;
                    var dirtPixel = pixelMap[pixel.x][pixel.y + 1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        deletePixel(pixel.x, pixel.y + 1);
                        movePixel(pixel, pixel.x, pixel.y + 1);
                        createPixel("purple_carrot_leaves", pixel.x, pixel.y - 1);
                        pixel.growthpixel++;
                    }
                }
            }
            if (Math.random() < 0.1 && pixel.age > 100 && pixel.temp < 100 && pixel.leafgrown == true && pixel.growthpixel > 0 && pixel.growthpixel < 4) {
                if (!outOfBounds(pixel.x, pixel.y + 1)) {
                    var dirtPixel = pixelMap[pixel.x][pixel.y + 1];
                    if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                        deletePixel(pixel.x, pixel.y + 1);
                        movePixel(pixel, pixel.x, pixel.y + 1);
                        createPixel("purple_carrot", pixel.x, pixel.y - 1);
                        pixel.growthpixel++;
                    }
                }
            }
            if (!isEmpty(pixel.x, pixel.y + 1) && Math.random() > 0.95 && isEmpty(pixel.x - 1, pixel.y - 1) && isEmpty(pixel.x + 1, pixel.y - 1) && pixel.leafgrown == false) {
                var dirtPixel = pixelMap[pixel.x][pixel.y + 1];
                if (dirtPixel.element === "dirt" || dirtPixel.element === "mud" || dirtPixel.element === "sand" || dirtPixel.element === "wet_sand" || dirtPixel.element === "clay_soil" || dirtPixel.element === "mycelium") {
                    createPixel("purple_carrot_leaves", pixel.x - 1, pixel.y - 1);
                    createPixel("purple_carrot_leaves", pixel.x + 1, pixel.y - 1);
                    pixel.leafgrown = true;
                }
            }
            else if (pixel.age > 150 && pixel.growthpixel == 4 && Math.random() < 0.1) {
                changePixel(pixel, "purple_carrot");
            }
            pixel.age++;
        }
        doDefaults(pixel);
    },
    properties: {
        "age": 0,
        "growthpixel": 0,
        "leafgrown": false
    },
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -2,
    stateLow: "frozen_plant",
    burn: 65,
    burnTime: 15,
    category: "life",
    state: "solid",
    density: 1500,
    cooldown: defaultCooldown,
    seed: true,
    behavior: [
        "XX|XX|XX",
        "XX|XX|XX",
        "XX|M1|XX",
    ],
};

elements.purple_carrot_leaves = {
    color: ["#61cc3d","#58c234"],
    behavior: behaviors.WALL,
    reactions: {
        "vinegar": { elem1:"dead_plant", elem2:null, chance:0.035 },
        "baking_soda": { elem1:"dead_plant", elem2:null, chance:0.01 },
        "bleach": { elem1:"dead_plant", elem2:null, chance:0.05 },
        "alcohol": { elem1:"dead_plant", elem2:null, chance:0.035}
    },
    category:"life",
    tempHigh: 100,
    stateHigh: "dead_plant",
    tempLow: -1.66,
    stateLow: "frozen_plant",
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "dead_plant",
    state: "solid",
    density: 1050,
    seed: "purple_carrot_seed",
    hidden: true
}
elements.purple_carrot = {
    color: "#8623b8",
    behavior: behaviors.STURDYPOWDER,
    category:"food",
    tempHigh: 100,
    stateHigh: ["steam"],
    burn:65,
    burnTime:60,
    burnInto: "dead_plant",
    breakInto: "purple_carrot_juice",
    state: "solid",
    density: 1050,
    freezeDryInto: "freeze_dried_fruits",
    freezeDryIntoColor: "#ba8125",
}

elements.purple_carrot_juice = {
    color: "#a61b7a",
    onMix: function(pixel) {
        if (shiftDown) {
            if (Math.random() < 0.2) {
                changePixel(pixel,"juice")
                pixel.color = pixelColorPick(pixel,"#f5a742")
            }
        }
    },
    behavior: behaviors.LIQUID,
    category: "liquids",
    tempHigh: 100,
    stateHigh: ["steam","sugar"],
    burn: 70,
    tempLow: 0,
    burnTime: 300,
    burnInto: ["steam", "smoke"],
    state: "liquid",
    density: 825,
    hidden: true,
    temp: 30,
};
//---------------------------------------------------"purple_carrot_juice");


































































//-----------------------------------------------------------------------------------------------------------------------------------------

















































































































































